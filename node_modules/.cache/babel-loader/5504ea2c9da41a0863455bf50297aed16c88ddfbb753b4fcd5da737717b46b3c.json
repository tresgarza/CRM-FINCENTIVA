{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/components/ui/charts/MonthlyApplicationsChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from 'chart.js';\n\n// Registrar componentes necesarios de Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler);\nconst MonthlyApplicationsChart = ({\n  data,\n  title = 'Solicitudes por Mes',\n  height = 300,\n  className = '',\n  color = 'rgba(53, 162, 235, 0.7)'\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Solicitudes',\n      data: [],\n      borderColor: 'rgba(53, 162, 235, 0.8)',\n      backgroundColor: 'rgba(53, 162, 235, 0.2)',\n      fill: true,\n      tension: 0.3\n    }]\n  });\n  useEffect(() => {\n    if (!data || data.length === 0) return;\n\n    // Ordenar los datos por mes\n    const sortedData = [...data].sort((a, b) => a.month.localeCompare(b.month));\n\n    // Formatear los meses para mostrar nombres en español\n    const formattedMonths = sortedData.map(item => {\n      const [year, month] = item.month.split('-');\n      const date = new Date(parseInt(year), parseInt(month) - 1, 1);\n\n      // Nombre del mes en español\n      const monthNames = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n      return `${monthNames[date.getMonth()]} ${year}`;\n    });\n\n    // Extraer los valores para el gráfico\n    const counts = sortedData.map(item => item.count);\n\n    // Actualizar los datos del gráfico\n    setChartData({\n      labels: formattedMonths,\n      datasets: [{\n        label: 'Solicitudes',\n        data: counts,\n        borderColor: color,\n        backgroundColor: color.replace('0.7', '0.1'),\n        fill: true,\n        tension: 0.3\n      }]\n    });\n  }, [data, color]);\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: !!title,\n        text: title,\n        font: {\n          size: 16\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: context => {\n            return `Solicitudes: ${context.parsed.y}`;\n          }\n        }\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        ticks: {\n          precision: 0\n        }\n      },\n      x: {\n        grid: {\n          display: false\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chart-container ${className}`,\n    style: {\n      height: `${height}px`\n    },\n    children: data && data.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center h-full bg-base-200 rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-500\",\n        children: \"Sin datos disponibles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(MonthlyApplicationsChart, \"753WhqGb7ECIqXj/jCMX8cGMaf0=\");\n_c = MonthlyApplicationsChart;\nexport default MonthlyApplicationsChart;\nvar _c;\n$RefreshReg$(_c, \"MonthlyApplicationsChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Filler","jsxDEV","_jsxDEV","register","MonthlyApplicationsChart","data","title","height","className","color","_s","chartData","setChartData","labels","datasets","label","borderColor","backgroundColor","fill","tension","length","sortedData","sort","a","b","month","localeCompare","formattedMonths","map","item","year","split","date","Date","parseInt","monthNames","getMonth","counts","count","replace","options","responsive","maintainAspectRatio","plugins","legend","display","text","font","size","tooltip","callbacks","context","parsed","y","scales","beginAtZero","ticks","precision","x","grid","style","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/components/ui/charts/MonthlyApplicationsChart.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n} from 'chart.js';\n\n// Registrar componentes necesarios de Chart.js\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\n\ninterface MonthlyApplicationsChartProps {\n  data: {\n    month: string;\n    count: number;\n  }[];\n  title?: string;\n  height?: number;\n  className?: string;\n  color?: string;\n}\n\nconst MonthlyApplicationsChart: React.FC<MonthlyApplicationsChartProps> = ({\n  data,\n  title = 'Solicitudes por Mes',\n  height = 300,\n  className = '',\n  color = 'rgba(53, 162, 235, 0.7)',\n}) => {\n  const [chartData, setChartData] = useState<any>({\n    labels: [],\n    datasets: [\n      {\n        label: 'Solicitudes',\n        data: [],\n        borderColor: 'rgba(53, 162, 235, 0.8)',\n        backgroundColor: 'rgba(53, 162, 235, 0.2)',\n        fill: true,\n        tension: 0.3,\n      },\n    ],\n  });\n\n  useEffect(() => {\n    if (!data || data.length === 0) return;\n\n    // Ordenar los datos por mes\n    const sortedData = [...data].sort((a, b) => a.month.localeCompare(b.month));\n\n    // Formatear los meses para mostrar nombres en español\n    const formattedMonths = sortedData.map((item) => {\n      const [year, month] = item.month.split('-');\n      const date = new Date(parseInt(year), parseInt(month) - 1, 1);\n      \n      // Nombre del mes en español\n      const monthNames = [\n        'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',\n        'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'\n      ];\n      \n      return `${monthNames[date.getMonth()]} ${year}`;\n    });\n\n    // Extraer los valores para el gráfico\n    const counts = sortedData.map((item) => item.count);\n\n    // Actualizar los datos del gráfico\n    setChartData({\n      labels: formattedMonths,\n      datasets: [\n        {\n          label: 'Solicitudes',\n          data: counts,\n          borderColor: color,\n          backgroundColor: color.replace('0.7', '0.1'),\n          fill: true,\n          tension: 0.3,\n        },\n      ],\n    });\n  }, [data, color]);\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false,\n      },\n      title: {\n        display: !!title,\n        text: title,\n        font: {\n          size: 16,\n        },\n      },\n      tooltip: {\n        callbacks: {\n          label: (context: any) => {\n            return `Solicitudes: ${context.parsed.y}`;\n          },\n        },\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        ticks: {\n          precision: 0,\n        },\n      },\n      x: {\n        grid: {\n          display: false,\n        },\n      },\n    },\n  };\n\n  return (\n    <div className={`chart-container ${className}`} style={{ height: `${height}px` }}>\n      {data && data.length > 0 ? (\n        <Line data={chartData} options={options} />\n      ) : (\n        <div className=\"flex items-center justify-center h-full bg-base-200 rounded-lg\">\n          <p className=\"text-sm text-gray-500\">Sin datos disponibles</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MonthlyApplicationsChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}