{"ast":null,"code":"import { supabase, getAuthenticatedClient } from \"../lib/supabaseClient\";\nimport { TABLES } from \"../utils/constants/tables\";\nimport * as documentService from './documentService';\nimport { ErrorType, createAppError, logError, handleApiError } from '../utils/errorHandling';\nimport { parseNumericString } from '../utils/numberFormatting';\n\n// Re-exportamos las interfaces para mantener compatibilidad\n\nconst USERS_TABLE = 'users';\n\n// Helper function to convert ClientDocument to DocumentUpload\nconst convertClientDocumentToUpload = (document, userId) => {\n  return {\n    file: document.file,\n    category: document.category,\n    documentName: document.name,\n    description: document.description,\n    userId: userId\n  };\n};\nconst mapUserToClient = userData => {\n  if (!userData) {\n    console.error('Error: userData is undefined in mapUserToClient');\n    throw new Error('No se pudo procesar la información del cliente, los datos son inválidos');\n  }\n  const fullName = userData.name || [userData.first_name, userData.paternal_surname, userData.maternal_surname].filter(Boolean).join(' ');\n  return {\n    id: userData.id,\n    created_at: userData.created_at,\n    name: fullName,\n    first_name: userData.first_name,\n    paternal_surname: userData.paternal_surname,\n    maternal_surname: userData.maternal_surname,\n    email: userData.email,\n    phone: userData.phone,\n    birth_date: userData.birth_date,\n    company_id: userData.company_id,\n    rfc: userData.rfc,\n    curp: userData.curp,\n    advisor_id: userData.advisor_id,\n    address: userData.address,\n    city: userData.city,\n    state: userData.state,\n    postal_code: userData.postal_code,\n    gender: userData.gender,\n    marital_status: userData.marital_status,\n    employment_type: userData.employment_type,\n    employment_years: userData.employment_years,\n    monthly_income: userData.monthly_income,\n    additional_income: userData.additional_income,\n    monthly_expenses: userData.monthly_expenses,\n    other_loan_balances: userData.other_loan_balances,\n    bank_name: userData.bank_name,\n    bank_clabe: userData.bank_clabe,\n    bank_account_number: userData.bank_account_number,\n    bank_account_type: userData.bank_account_type,\n    bank_account_origin: userData.bank_account_origin\n  };\n};\nexport const getClients = async filters => {\n  try {\n    let query = supabase.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin', {\n      count: 'exact'\n    });\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n      if (filters.searchQuery) {\n        query = query.or(`first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);\n      }\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n    query = query.order('created_at', {\n      ascending: false\n    });\n    const {\n      data,\n      error,\n      count\n    } = await query;\n    if (error) {\n      logError(error, 'getClients', {\n        filters\n      });\n      throw handleApiError(error);\n    }\n    const clients = data ? data.map(mapUserToClient) : [];\n    return {\n      clients,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    logError(error, 'getClients', {\n      filters\n    });\n    throw handleApiError(error);\n  }\n};\nexport const getClientById = async id => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin').eq('id', id).single();\n    if (error) {\n      logError(error, 'getClientById', {\n        clientId: id\n      });\n      throw handleApiError(error);\n    }\n    if (!data) {\n      const notFoundError = createAppError(ErrorType.NOT_FOUND, `No se encontró cliente con ID: ${id}`);\n      logError(notFoundError, 'getClientById', {\n        clientId: id\n      });\n      throw notFoundError;\n    }\n    return mapUserToClient(data);\n  } catch (error) {\n    logError(error, 'getClientById', {\n      clientId: id\n    });\n    throw handleApiError(error);\n  }\n};\nfunction escapeSQLString(str) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\nexport const getClientApplications = async clientId => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      throw handleApiError(err);\n    });\n    if (!client) {\n      const notFoundError = createAppError(ErrorType.NOT_FOUND, `El cliente no existe`);\n      logError(notFoundError, 'getClientApplications', {\n        clientId\n      });\n      return [];\n    }\n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name || '')}'\n      ORDER BY created_at DESC\n    `;\n    const executeQuery = async query => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query: query\n          })\n        });\n        const result = await response.json();\n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        return result.data;\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    const data = await executeQuery(query);\n    return data;\n  } catch (error) {\n    logError(error, 'getClientApplications', {\n      clientId\n    });\n    throw handleApiError(error);\n  }\n};\nexport const uploadClientDocuments = async (clientId, documentsData) => {\n  if (!clientId) {\n    console.error('Client ID is required for uploading documents');\n    throw new Error('El ID del cliente es requerido para subir documentos');\n  }\n\n  // Verificar que se proporcionaron documentos válidos\n  if (!documentsData || !Array.isArray(documentsData) || documentsData.length === 0) {\n    console.error('No valid documents provided for upload');\n    throw new Error('No se proporcionaron documentos válidos para subir');\n  }\n  try {\n    // Obtener cliente autenticado para cargas seguras\n    const authClient = await getAuthenticatedClient();\n\n    // Asegurarse de que el bucket de almacenamiento exista\n    await documentService.ensureStorageBucketExists(authClient);\n\n    // Intentar subir cada documento\n    const uploadPromises = documentsData.map(async docData => {\n      try {\n        // Verificar que el documento tenga datos válidos\n        if (!docData.file || !docData.documentName) {\n          console.error('Invalid document data', docData);\n          throw new Error('Datos de documento inválidos: se requiere archivo y nombre');\n        }\n\n        // Preparar los datos para la carga del documento\n        const uploadParams = {\n          ...docData,\n          client_id: clientId,\n          authClient: authClient // Pasar el cliente autenticado\n        };\n\n        // Subir el documento\n        return await documentService.uploadDocument(uploadParams);\n      } catch (docError) {\n        // Manejo de errores específicos de permisos RLS\n        if (docError.message && (docError.message.includes('permission denied') || docError.message.includes('not authorized') || docError.message.includes('row level security'))) {\n          console.error('Permission error when uploading document:', docError);\n          throw new Error('No tienes permiso para subir documentos para este cliente. Verifica tus permisos.');\n        }\n\n        // Registrar el error pero permitir que otros uploads continúen\n        console.error(`Error uploading document for client ${clientId}:`, docError);\n        throw docError;\n      }\n    });\n    const results = await Promise.all(uploadPromises);\n    return results;\n  } catch (error) {\n    logError(error, 'uploadClientDocuments', {\n      clientId\n    });\n    throw handleApiError(error);\n  }\n};\nexport const createClient = async (client, documents, userId) => {\n  try {\n    // Create a copy to avoid modifying the original object\n    const userData = {\n      email: client.email,\n      first_name: client.first_name || '',\n      paternal_surname: client.paternal_surname || '',\n      maternal_surname: client.maternal_surname || '',\n      phone: client.phone,\n      birth_date: client.birth_date,\n      company_id: client.company_id,\n      rfc: client.rfc,\n      curp: client.curp,\n      advisor_id: client.advisor_id,\n      address: client.address,\n      city: client.city,\n      state: client.state,\n      postal_code: client.postal_code,\n      gender: client.gender,\n      marital_status: client.marital_status,\n      employment_type: client.employment_type,\n      employment_years: client.employment_years,\n      monthly_income: client.monthly_income,\n      additional_income: client.additional_income,\n      monthly_expenses: client.monthly_expenses,\n      other_loan_balances: client.other_loan_balances,\n      bank_name: client.bank_name,\n      bank_clabe: client.bank_clabe,\n      bank_account_number: client.bank_account_number,\n      bank_account_type: client.bank_account_type,\n      bank_account_origin: client.bank_account_origin\n    };\n\n    // Ensure company_id is present as it's required by the database schema\n    if (!userData.company_id) {\n      console.warn('No company_id provided when creating client - using default company');\n      userData.company_id = \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\"; // Default company (Herramental)\n    }\n\n    // Get the authenticated client for this operation\n    const authClient = getAuthenticatedClient();\n    const {\n      data,\n      error,\n      count\n    } = await authClient.from(USERS_TABLE).insert([userData]).select();\n    if (error) {\n      // Check for RLS policy violations specifically\n      if (error.message && (error.message.includes('violates row-level security policy') || error.message.includes('permission denied') || error.message.includes('Unauthorized') || error.message.includes('403'))) {\n        const rlsError = createAppError(ErrorType.AUTHORIZATION, 'No tienes permisos para crear clientes. Esto puede deberse a políticas de seguridad RLS en Supabase.', {\n          originalError: error.message\n        });\n        logError(rlsError, 'createClient.RLS_VIOLATION');\n        throw rlsError;\n      }\n      logError(error, 'createClient');\n      throw handleApiError(error);\n    }\n\n    // Verify that rows were affected\n    if (!data || data.length === 0 || count === 0) {\n      const noDataError = createAppError(ErrorType.SERVER, 'No se pudo crear el cliente. No se recibieron datos del servidor.');\n      logError(noDataError, 'createClient');\n      throw noDataError;\n    }\n    const newClient = mapUserToClient(data[0]);\n    let documentResult = null;\n    if (documents && documents.length > 0 && userId && newClient.id) {\n      try {\n        documentResult = await uploadClientDocuments(newClient.id, documents);\n\n        // Check if any documents failed to upload\n        if (documentResult && documentResult.length > 0) {\n          console.warn(`${documentResult.length} documents failed to upload during client creation`);\n\n          // We'll continue but note the warning\n          newClient.warningMessage = `Se creó el cliente, pero ${documentResult.length} ${documentResult.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error('Error uploading documents during client creation:', docError);\n\n        // Continue with client creation but add warning\n        newClient.warningMessage = 'Se creó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n    return newClient;\n  } catch (error) {\n    logError(error, 'createClient', {\n      clientData: client\n    });\n    throw handleApiError(error);\n  }\n};\nexport const updateClient = async (id, updates, documents, userId) => {\n  try {\n    console.log(`Starting client update for ID ${id}`, updates);\n\n    // Create a copy to avoid modifying the original object\n    const userUpdates = {\n      email: updates.email,\n      first_name: updates.first_name,\n      paternal_surname: updates.paternal_surname,\n      maternal_surname: updates.maternal_surname,\n      phone: updates.phone,\n      birth_date: updates.birth_date,\n      company_id: updates.company_id,\n      rfc: updates.rfc,\n      curp: updates.curp,\n      advisor_id: updates.advisor_id,\n      address: updates.address,\n      city: updates.city,\n      state: updates.state,\n      postal_code: updates.postal_code,\n      gender: updates.gender,\n      marital_status: updates.marital_status,\n      employment_type: updates.employment_type,\n      employment_years: updates.employment_years,\n      monthly_income: updates.monthly_income,\n      additional_income: updates.additional_income,\n      monthly_expenses: updates.monthly_expenses,\n      other_loan_balances: updates.other_loan_balances,\n      bank_name: updates.bank_name,\n      bank_clabe: updates.bank_clabe,\n      bank_account_number: updates.bank_account_number,\n      bank_account_type: updates.bank_account_type,\n      bank_account_origin: updates.bank_account_origin\n    };\n\n    // Process numeric fields\n    // Special handling to ensure numbers are correctly processed\n    const processNumericField = (value, isInteger = false) => {\n      if (value === '' || value === null || value === undefined) {\n        return undefined; // Use undefined for empty numeric fields to match type\n      }\n      return parseNumericString(String(value));\n    };\n\n    // Apply numeric conversions to all numeric fields\n    if ('employment_years' in updates) {\n      userUpdates.employment_years = processNumericField(updates.employment_years, true);\n    }\n    if ('monthly_income' in updates) {\n      userUpdates.monthly_income = processNumericField(updates.monthly_income);\n    }\n    if ('additional_income' in updates) {\n      userUpdates.additional_income = processNumericField(updates.additional_income);\n    }\n    if ('monthly_expenses' in updates) {\n      userUpdates.monthly_expenses = processNumericField(updates.monthly_expenses);\n    }\n    if ('other_loan_balances' in updates) {\n      userUpdates.other_loan_balances = processNumericField(updates.other_loan_balances);\n    }\n\n    // Remove undefined fields\n    Object.keys(userUpdates).forEach(key => {\n      const typedKey = key;\n      if (userUpdates[typedKey] === undefined) {\n        delete userUpdates[typedKey];\n      }\n    });\n    console.log(`Updating client ${id} with sanitized data:`, JSON.stringify(userUpdates));\n\n    // Get the authenticated client for this operation\n    const authClient = getAuthenticatedClient();\n\n    // First, verify the client exists\n    const {\n      data: existingClient,\n      error: existingError\n    } = await authClient.from(USERS_TABLE).select('id').eq('id', id).single();\n    if (existingError || !existingClient) {\n      const notFoundError = createAppError(ErrorType.NOT_FOUND, `No se encontró el cliente con ID ${id}. Verifique que el cliente exista.`);\n      logError(notFoundError, 'updateClient', {\n        clientId: id\n      });\n      throw notFoundError;\n    }\n\n    // Perform the update with the authenticated client\n    const {\n      data,\n      error,\n      count\n    } = await authClient.from(USERS_TABLE).update(userUpdates).eq('id', id).select();\n    if (error) {\n      // Check for RLS policy violations specifically\n      if (error.message && (error.message.includes('violates row-level security policy') || error.message.includes('permission denied') || error.message.includes('Unauthorized') || error.message.includes('403'))) {\n        const rlsError = createAppError(ErrorType.AUTHORIZATION, 'No tienes permisos para actualizar este cliente. Esto puede deberse a políticas de seguridad RLS en Supabase.', {\n          originalError: error.message\n        });\n        logError(rlsError, 'updateClient.RLS_VIOLATION', {\n          clientId: id\n        });\n        throw rlsError;\n      }\n      logError(error, 'updateClient', {\n        clientId: id\n      });\n      throw handleApiError(error);\n    }\n\n    // Verify that the update affected rows\n    if (!data || data.length === 0 || count === 0) {\n      console.warn(`Update operation didn't affect any rows for client ${id}`);\n      const noEffectError = createAppError(ErrorType.DATABASE, 'La actualización no tuvo efecto en la base de datos. Esto puede deberse a permisos insuficientes o a que los datos no cambiaron.', {\n        clientId: id\n      });\n      logError(noEffectError, 'updateClient.NO_EFFECT', {\n        clientId: id\n      });\n      throw noEffectError;\n    }\n    let updatedClient;\n    if (!data || data.length === 0) {\n      console.log(`No data returned when updating client with ID ${id}, fetching client data separately`);\n\n      // Fallback: fetch the client data separately\n      const {\n        data: fetchedData,\n        error: fetchError\n      } = await authClient.from(USERS_TABLE).select('*').eq('id', id).single();\n      if (fetchError) {\n        console.error(`Error fetching updated client with ID ${id}:`, fetchError);\n        throw new Error('El cliente fue actualizado pero no se pudieron recuperar sus datos. Por favor, recargue la página.');\n      }\n      if (!fetchedData) {\n        console.error(`No data found for client with ID ${id} after update`);\n        throw new Error('No se encontró el cliente después de la actualización. Por favor, verifique que el cliente exista.');\n      }\n      console.log(`Successfully retrieved client data after update for ID ${id}`);\n      updatedClient = mapUserToClient(fetchedData);\n    } else {\n      console.log(`Successfully updated client with data returned, ID ${id}`);\n      updatedClient = mapUserToClient(data[0]);\n    }\n    let documentResult = null;\n\n    // Upload documents if provided\n    if (documents && documents.length > 0 && userId) {\n      try {\n        console.log(`Uploading ${documents.length} documents for client ${id}`);\n        documentResult = await uploadClientDocuments(id, documents);\n\n        // Check if any documents failed to upload\n        if (documentResult && documentResult.length > 0) {\n          console.warn(`${documentResult.length} documents failed to upload during client update`);\n\n          // We'll continue but note the warning\n          updatedClient.warningMessage = `Se actualizó el cliente, pero ${documentResult.length} ${documentResult.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error(`Error uploading documents for client ${id}:`, docError);\n\n        // Continue with client update but add warning\n        updatedClient.warningMessage = 'Se actualizó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n    console.log(`Client update complete for ID ${id}`);\n    console.log('Returning updated client:', updatedClient);\n    return updatedClient;\n  } catch (error) {\n    logError(error, 'updateClient', {\n      clientId: id,\n      updates\n    });\n    throw handleApiError(error);\n  }\n};\nexport const deleteClient = async id => {\n  try {\n    // Get the authenticated client for this operation\n    const authClient = getAuthenticatedClient();\n    const {\n      error,\n      count\n    } = await authClient.from(USERS_TABLE).delete().eq('id', id);\n    if (error) {\n      // Check for RLS policy violations specifically\n      if (error.message && (error.message.includes('violates row-level security policy') || error.message.includes('permission denied') || error.message.includes('Unauthorized') || error.message.includes('403'))) {\n        const rlsError = createAppError(ErrorType.AUTHORIZATION, 'No tienes permisos para eliminar este cliente. Esto puede deberse a políticas de seguridad RLS en Supabase.', {\n          originalError: error.message\n        });\n        logError(rlsError, 'deleteClient.RLS_VIOLATION', {\n          clientId: id\n        });\n        throw rlsError;\n      }\n      logError(error, 'deleteClient', {\n        clientId: id\n      });\n      throw handleApiError(error);\n    }\n\n    // Verify that rows were affected\n    if (count === 0) {\n      console.warn(`Delete operation didn't affect any rows for client ${id}`);\n      const noEffectError = createAppError(ErrorType.DATABASE, 'La eliminación no tuvo efecto en la base de datos. Esto puede deberse a permisos insuficientes.', {\n        clientId: id\n      });\n      logError(noEffectError, 'deleteClient.NO_EFFECT', {\n        clientId: id\n      });\n      throw noEffectError;\n    }\n    return true;\n  } catch (error) {\n    logError(error, 'deleteClient', {\n      clientId: id\n    });\n    throw handleApiError(error);\n  }\n};\nexport const checkClientExists = async (email, rfc) => {\n  try {\n    let query = supabase.from(USERS_TABLE).select('id, email, rfc').eq('email', email);\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) {\n      logError(error, 'checkClientExists', {\n        email,\n        rfc\n      });\n      throw handleApiError(error);\n    }\n    return data.length > 0 ? data[0] : null;\n  } catch (error) {\n    logError(error, 'checkClientExists', {\n      email,\n      rfc\n    });\n    throw handleApiError(error);\n  }\n};\nexport const getClientCount = async filters => {\n  try {\n    let query = supabase.from(USERS_TABLE).select('id', {\n      count: 'exact',\n      head: true\n    });\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n      if (filters.searchQuery) {\n        query = query.or(`first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);\n      }\n    }\n    const {\n      count,\n      error\n    } = await query;\n    if (error) {\n      logError(error, 'getClientCount', {\n        filters\n      });\n      throw handleApiError(error);\n    }\n    return count || 0;\n  } catch (error) {\n    logError(error, 'getClientCount', {\n      filters\n    });\n    return 0;\n  }\n};","map":{"version":3,"names":["supabase","getAuthenticatedClient","TABLES","documentService","ErrorType","createAppError","logError","handleApiError","parseNumericString","USERS_TABLE","convertClientDocumentToUpload","document","userId","file","category","documentName","name","description","mapUserToClient","userData","console","error","Error","fullName","first_name","paternal_surname","maternal_surname","filter","Boolean","join","id","created_at","email","phone","birth_date","company_id","rfc","curp","advisor_id","address","city","state","postal_code","gender","marital_status","employment_type","employment_years","monthly_income","additional_income","monthly_expenses","other_loan_balances","bank_name","bank_clabe","bank_account_number","bank_account_type","bank_account_origin","getClients","filters","query","from","select","count","eq","dateFrom","gte","dateTo","lte","searchQuery","or","page","undefined","pageSize","to","range","order","ascending","data","clients","map","totalCount","getClientById","single","clientId","notFoundError","NOT_FOUND","escapeSQLString","str","replace","getClientApplications","client","catch","err","APPLICATIONS","executeQuery","response","fetch","method","headers","body","JSON","stringify","result","json","uploadClientDocuments","documentsData","Array","isArray","length","authClient","ensureStorageBucketExists","uploadPromises","docData","uploadParams","client_id","uploadDocument","docError","message","includes","results","Promise","all","createClient","documents","warn","insert","rlsError","AUTHORIZATION","originalError","noDataError","SERVER","newClient","documentResult","warningMessage","clientData","updateClient","updates","log","userUpdates","processNumericField","value","isInteger","String","Object","keys","forEach","key","typedKey","existingClient","existingError","update","noEffectError","DATABASE","updatedClient","fetchedData","fetchError","deleteClient","delete","checkClientExists","getClientCount","head"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/clientService.ts"],"sourcesContent":["import { supabase, getAuthenticatedClient } from \"../lib/supabaseClient\";\nimport { TABLES } from \"../utils/constants/tables\";\nimport * as documentService from './documentService';\nimport { Client, ClientDocument } from \"../types/client\";\nimport { DocumentUpload, Document } from \"../types/document\";\nimport { \n  ErrorType, \n  createAppError, \n  logError, \n  showErrorToast, \n  handleApiError \n} from '../utils/errorHandling';\nimport { parseNumericString } from '../utils/numberFormatting';\n\n// Re-exportamos las interfaces para mantener compatibilidad\nexport type { Client, ClientDocument };\n\nexport interface ClientFilter {\n  searchQuery?: string;\n  advisor_id?: string;\n  company_id?: string;\n  dateFrom?: string;\n  dateTo?: string;\n  page?: number;\n  pageSize?: number;\n}\n\nconst USERS_TABLE = 'users';\n\n// Helper function to convert ClientDocument to DocumentUpload\nconst convertClientDocumentToUpload = (\n  document: ClientDocument, \n  userId: string\n): documentService.DocumentUpload => {\n  return {\n    file: document.file,\n    category: document.category,\n    documentName: document.name,\n    description: document.description,\n    userId: userId\n  };\n};\n\nconst mapUserToClient = (userData: any): Client => {\n  if (!userData) {\n    console.error('Error: userData is undefined in mapUserToClient');\n    throw new Error('No se pudo procesar la información del cliente, los datos son inválidos');\n  }\n  \n  const fullName = userData.name || [\n    userData.first_name,\n    userData.paternal_surname,\n    userData.maternal_surname\n  ].filter(Boolean).join(' ');\n  \n  return {\n    id: userData.id,\n    created_at: userData.created_at,\n    name: fullName,\n    first_name: userData.first_name,\n    paternal_surname: userData.paternal_surname,\n    maternal_surname: userData.maternal_surname,\n    email: userData.email,\n    phone: userData.phone,\n    birth_date: userData.birth_date,\n    company_id: userData.company_id,\n    rfc: userData.rfc,\n    curp: userData.curp,\n    advisor_id: userData.advisor_id,\n    address: userData.address,\n    city: userData.city,\n    state: userData.state,\n    postal_code: userData.postal_code,\n    gender: userData.gender,\n    marital_status: userData.marital_status,\n    employment_type: userData.employment_type,\n    employment_years: userData.employment_years,\n    monthly_income: userData.monthly_income,\n    additional_income: userData.additional_income,\n    monthly_expenses: userData.monthly_expenses,\n    other_loan_balances: userData.other_loan_balances,\n    bank_name: userData.bank_name,\n    bank_clabe: userData.bank_clabe,\n    bank_account_number: userData.bank_account_number,\n    bank_account_type: userData.bank_account_type,\n    bank_account_origin: userData.bank_account_origin,\n  };\n};\n\nexport const getClients = async (filters?: ClientFilter) => {\n  try {\n    let query = supabase.from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin', { count: 'exact' });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n\n    query = query.order('created_at', { ascending: false });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      logError(error, 'getClients', { filters });\n      throw handleApiError(error);\n    }\n\n    const clients = data ? data.map(mapUserToClient) : [];\n\n    return {\n      clients,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    logError(error, 'getClients', { filters });\n    throw handleApiError(error);\n  }\n};\n\nexport const getClientById = async (id: string) => {\n  try {\n    const { data, error } = await supabase\n      .from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      logError(error, 'getClientById', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    if (!data) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `No se encontró cliente con ID: ${id}`\n      );\n      logError(notFoundError, 'getClientById', { clientId: id });\n      throw notFoundError;\n    }\n\n    return mapUserToClient(data);\n  } catch (error) {\n    logError(error, 'getClientById', { clientId: id });\n    throw handleApiError(error);\n  }\n};\n\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\nexport const getClientApplications = async (clientId: string) => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      throw handleApiError(err);\n    });\n    \n    if (!client) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `El cliente no existe`\n      );\n      logError(notFoundError, 'getClientApplications', { clientId });\n      return [];\n    }\n    \n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name || '')}'\n      ORDER BY created_at DESC\n    `;\n    \n    const executeQuery = async (query: string) => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query: query }),\n        });\n        \n        const result = await response.json();\n        \n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        \n        return result.data;\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    \n    const data = await executeQuery(query);\n    return data;\n  } catch (error) {\n    logError(error, 'getClientApplications', { clientId });\n    throw handleApiError(error);\n  }\n};\n\nexport const uploadClientDocuments = async (\n  clientId: string,\n  documentsData: DocumentUpload[]\n): Promise<Document[]> => {\n  if (!clientId) {\n    console.error('Client ID is required for uploading documents');\n    throw new Error('El ID del cliente es requerido para subir documentos');\n  }\n\n  // Verificar que se proporcionaron documentos válidos\n  if (!documentsData || !Array.isArray(documentsData) || documentsData.length === 0) {\n    console.error('No valid documents provided for upload');\n    throw new Error('No se proporcionaron documentos válidos para subir');\n  }\n\n  try {\n    // Obtener cliente autenticado para cargas seguras\n    const authClient = await getAuthenticatedClient();\n    \n    // Asegurarse de que el bucket de almacenamiento exista\n    await documentService.ensureStorageBucketExists(authClient);\n\n    // Intentar subir cada documento\n    const uploadPromises = documentsData.map(async (docData) => {\n      try {\n        // Verificar que el documento tenga datos válidos\n        if (!docData.file || !docData.documentName) {\n          console.error('Invalid document data', docData);\n          throw new Error(\n            'Datos de documento inválidos: se requiere archivo y nombre'\n          );\n        }\n\n        // Preparar los datos para la carga del documento\n        const uploadParams: DocumentUpload = {\n          ...docData,\n          client_id: clientId,\n          authClient: authClient // Pasar el cliente autenticado\n        };\n\n        // Subir el documento\n        return await documentService.uploadDocument(uploadParams);\n      } catch (docError: any) {\n        // Manejo de errores específicos de permisos RLS\n        if (docError.message && (\n            docError.message.includes('permission denied') || \n            docError.message.includes('not authorized') ||\n            docError.message.includes('row level security')\n          )) {\n          console.error('Permission error when uploading document:', docError);\n          throw new Error('No tienes permiso para subir documentos para este cliente. Verifica tus permisos.');\n        }\n        \n        // Registrar el error pero permitir que otros uploads continúen\n        console.error(`Error uploading document for client ${clientId}:`, docError);\n        throw docError;\n      }\n    });\n\n    const results = await Promise.all(uploadPromises);\n    \n    return results;\n  } catch (error) {\n    logError(error, 'uploadClientDocuments', { clientId });\n    throw handleApiError(error);\n  }\n};\n\nexport const createClient = async (client: Omit<Client, 'id' | 'created_at'>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    // Create a copy to avoid modifying the original object\n    const userData = {\n      email: client.email,\n      first_name: client.first_name || '',\n      paternal_surname: client.paternal_surname || '',\n      maternal_surname: client.maternal_surname || '',\n      phone: client.phone,\n      birth_date: client.birth_date,\n      company_id: client.company_id,\n      rfc: client.rfc,\n      curp: client.curp,\n      advisor_id: client.advisor_id,\n      address: client.address,\n      city: client.city,\n      state: client.state,\n      postal_code: client.postal_code,\n      gender: client.gender,\n      marital_status: client.marital_status,\n      employment_type: client.employment_type,\n      employment_years: client.employment_years,\n      monthly_income: client.monthly_income,\n      additional_income: client.additional_income,\n      monthly_expenses: client.monthly_expenses,\n      other_loan_balances: client.other_loan_balances,\n      bank_name: client.bank_name,\n      bank_clabe: client.bank_clabe,\n      bank_account_number: client.bank_account_number,\n      bank_account_type: client.bank_account_type,\n      bank_account_origin: client.bank_account_origin,\n    };\n\n    // Ensure company_id is present as it's required by the database schema\n    if (!userData.company_id) {\n      console.warn('No company_id provided when creating client - using default company');\n      userData.company_id = \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\"; // Default company (Herramental)\n    }\n\n    // Get the authenticated client for this operation\n    const authClient = getAuthenticatedClient();\n\n    const { data, error, count } = await authClient\n      .from(USERS_TABLE)\n      .insert([userData])\n      .select();\n\n    if (error) {\n      // Check for RLS policy violations specifically\n      if (error.message && (\n        error.message.includes('violates row-level security policy') ||\n        error.message.includes('permission denied') ||\n        error.message.includes('Unauthorized') ||\n        error.message.includes('403')\n      )) {\n        const rlsError = createAppError(\n          ErrorType.AUTHORIZATION,\n          'No tienes permisos para crear clientes. Esto puede deberse a políticas de seguridad RLS en Supabase.',\n          { originalError: error.message }\n        );\n        logError(rlsError, 'createClient.RLS_VIOLATION');\n        throw rlsError;\n      }\n      \n      logError(error, 'createClient');\n      throw handleApiError(error);\n    }\n\n    // Verify that rows were affected\n    if (!data || data.length === 0 || count === 0) {\n      const noDataError = createAppError(\n        ErrorType.SERVER,\n        'No se pudo crear el cliente. No se recibieron datos del servidor.'\n      );\n      logError(noDataError, 'createClient');\n      throw noDataError;\n    }\n\n    const newClient = mapUserToClient(data[0]);\n    let documentResult = null;\n    \n    if (documents && documents.length > 0 && userId && newClient.id) {\n      try {\n        documentResult = await uploadClientDocuments(newClient.id, documents);\n        \n        // Check if any documents failed to upload\n        if (documentResult && documentResult.length > 0) {\n          console.warn(`${documentResult.length} documents failed to upload during client creation`);\n          \n          // We'll continue but note the warning\n          newClient.warningMessage = `Se creó el cliente, pero ${documentResult.length} ${documentResult.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error('Error uploading documents during client creation:', docError);\n        \n        // Continue with client creation but add warning\n        newClient.warningMessage = 'Se creó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n\n    return newClient;\n  } catch (error) {\n    logError(error, 'createClient', { clientData: client });\n    throw handleApiError(error);\n  }\n};\n\nexport const updateClient = async (id: string, updates: Partial<Client>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    console.log(`Starting client update for ID ${id}`, updates);\n    \n    // Create a copy to avoid modifying the original object\n    const userUpdates = {\n      email: updates.email,\n      first_name: updates.first_name,\n      paternal_surname: updates.paternal_surname,\n      maternal_surname: updates.maternal_surname,\n      phone: updates.phone,\n      birth_date: updates.birth_date,\n      company_id: updates.company_id,\n      rfc: updates.rfc,\n      curp: updates.curp,\n      advisor_id: updates.advisor_id,\n      address: updates.address,\n      city: updates.city,\n      state: updates.state,\n      postal_code: updates.postal_code,\n      gender: updates.gender,\n      marital_status: updates.marital_status,\n      employment_type: updates.employment_type,\n      employment_years: updates.employment_years,\n      monthly_income: updates.monthly_income,\n      additional_income: updates.additional_income,\n      monthly_expenses: updates.monthly_expenses,\n      other_loan_balances: updates.other_loan_balances,\n      bank_name: updates.bank_name,\n      bank_clabe: updates.bank_clabe,\n      bank_account_number: updates.bank_account_number,\n      bank_account_type: updates.bank_account_type,\n      bank_account_origin: updates.bank_account_origin,\n    };\n\n    // Process numeric fields\n    // Special handling to ensure numbers are correctly processed\n    const processNumericField = (value: any, isInteger = false) => {\n      if (value === '' || value === null || value === undefined) {\n        return undefined; // Use undefined for empty numeric fields to match type\n      }\n      \n      return parseNumericString(String(value));\n    };\n\n    // Apply numeric conversions to all numeric fields\n    if ('employment_years' in updates) {\n      userUpdates.employment_years = processNumericField(updates.employment_years, true);\n    }\n    if ('monthly_income' in updates) {\n      userUpdates.monthly_income = processNumericField(updates.monthly_income);\n    }\n    if ('additional_income' in updates) {\n      userUpdates.additional_income = processNumericField(updates.additional_income);\n    }\n    if ('monthly_expenses' in updates) {\n      userUpdates.monthly_expenses = processNumericField(updates.monthly_expenses);\n    }\n    if ('other_loan_balances' in updates) {\n      userUpdates.other_loan_balances = processNumericField(updates.other_loan_balances);\n    }\n\n    // Remove undefined fields\n    Object.keys(userUpdates).forEach(key => {\n      const typedKey = key as keyof typeof userUpdates;\n      if (userUpdates[typedKey] === undefined) {\n        delete userUpdates[typedKey];\n      }\n    });\n\n    console.log(`Updating client ${id} with sanitized data:`, JSON.stringify(userUpdates));\n\n    // Get the authenticated client for this operation\n    const authClient = getAuthenticatedClient();\n\n    // First, verify the client exists\n    const { data: existingClient, error: existingError } = await authClient\n      .from(USERS_TABLE)\n      .select('id')\n      .eq('id', id)\n      .single();\n\n    if (existingError || !existingClient) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `No se encontró el cliente con ID ${id}. Verifique que el cliente exista.`\n      );\n      logError(notFoundError, 'updateClient', { clientId: id });\n      throw notFoundError;\n    }\n\n    // Perform the update with the authenticated client\n    const { data, error, count } = await authClient\n      .from(USERS_TABLE)\n      .update(userUpdates)\n      .eq('id', id)\n      .select();\n\n    if (error) {\n      // Check for RLS policy violations specifically\n      if (error.message && (\n        error.message.includes('violates row-level security policy') ||\n        error.message.includes('permission denied') ||\n        error.message.includes('Unauthorized') ||\n        error.message.includes('403')\n      )) {\n        const rlsError = createAppError(\n          ErrorType.AUTHORIZATION,\n          'No tienes permisos para actualizar este cliente. Esto puede deberse a políticas de seguridad RLS en Supabase.',\n          { originalError: error.message }\n        );\n        logError(rlsError, 'updateClient.RLS_VIOLATION', { clientId: id });\n        throw rlsError;\n      }\n      \n      logError(error, 'updateClient', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    // Verify that the update affected rows\n    if (!data || data.length === 0 || count === 0) {\n      console.warn(`Update operation didn't affect any rows for client ${id}`);\n      const noEffectError = createAppError(\n        ErrorType.DATABASE,\n        'La actualización no tuvo efecto en la base de datos. Esto puede deberse a permisos insuficientes o a que los datos no cambiaron.',\n        { clientId: id }\n      );\n      logError(noEffectError, 'updateClient.NO_EFFECT', { clientId: id });\n      throw noEffectError;\n    }\n\n    let updatedClient: Client;\n\n    if (!data || data.length === 0) {\n      console.log(`No data returned when updating client with ID ${id}, fetching client data separately`);\n      \n      // Fallback: fetch the client data separately\n      const { data: fetchedData, error: fetchError } = await authClient\n        .from(USERS_TABLE)\n        .select('*')\n        .eq('id', id)\n        .single();\n      \n      if (fetchError) {\n        console.error(`Error fetching updated client with ID ${id}:`, fetchError);\n        throw new Error('El cliente fue actualizado pero no se pudieron recuperar sus datos. Por favor, recargue la página.');\n      }\n      \n      if (!fetchedData) {\n        console.error(`No data found for client with ID ${id} after update`);\n        throw new Error('No se encontró el cliente después de la actualización. Por favor, verifique que el cliente exista.');\n      }\n      \n      console.log(`Successfully retrieved client data after update for ID ${id}`);\n      updatedClient = mapUserToClient(fetchedData);\n    } else {\n      console.log(`Successfully updated client with data returned, ID ${id}`);\n      updatedClient = mapUserToClient(data[0]);\n    }\n    \n    let documentResult = null;\n    \n    // Upload documents if provided\n    if (documents && documents.length > 0 && userId) {\n      try {\n        console.log(`Uploading ${documents.length} documents for client ${id}`);\n        documentResult = await uploadClientDocuments(id, documents);\n        \n        // Check if any documents failed to upload\n        if (documentResult && documentResult.length > 0) {\n          console.warn(`${documentResult.length} documents failed to upload during client update`);\n          \n          // We'll continue but note the warning\n          updatedClient.warningMessage = `Se actualizó el cliente, pero ${documentResult.length} ${documentResult.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error(`Error uploading documents for client ${id}:`, docError);\n        \n        // Continue with client update but add warning\n        updatedClient.warningMessage = 'Se actualizó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n\n    console.log(`Client update complete for ID ${id}`);\n    console.log('Returning updated client:', updatedClient);\n    return updatedClient;\n  } catch (error) {\n    logError(error, 'updateClient', { clientId: id, updates });\n    throw handleApiError(error);\n  }\n};\n\nexport const deleteClient = async (id: string) => {\n  try {\n    // Get the authenticated client for this operation\n    const authClient = getAuthenticatedClient();\n    \n    const { error, count } = await authClient\n      .from(USERS_TABLE)\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      // Check for RLS policy violations specifically\n      if (error.message && (\n        error.message.includes('violates row-level security policy') ||\n        error.message.includes('permission denied') ||\n        error.message.includes('Unauthorized') ||\n        error.message.includes('403')\n      )) {\n        const rlsError = createAppError(\n          ErrorType.AUTHORIZATION,\n          'No tienes permisos para eliminar este cliente. Esto puede deberse a políticas de seguridad RLS en Supabase.',\n          { originalError: error.message }\n        );\n        logError(rlsError, 'deleteClient.RLS_VIOLATION', { clientId: id });\n        throw rlsError;\n      }\n      \n      logError(error, 'deleteClient', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    // Verify that rows were affected\n    if (count === 0) {\n      console.warn(`Delete operation didn't affect any rows for client ${id}`);\n      const noEffectError = createAppError(\n        ErrorType.DATABASE,\n        'La eliminación no tuvo efecto en la base de datos. Esto puede deberse a permisos insuficientes.',\n        { clientId: id }\n      );\n      logError(noEffectError, 'deleteClient.NO_EFFECT', { clientId: id });\n      throw noEffectError;\n    }\n\n    return true;\n  } catch (error) {\n    logError(error, 'deleteClient', { clientId: id });\n    throw handleApiError(error);\n  }\n};\n\nexport const checkClientExists = async (email: string, rfc?: string) => {\n  try {\n    let query = supabase\n      .from(USERS_TABLE)\n      .select('id, email, rfc')\n      .eq('email', email);\n\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      logError(error, 'checkClientExists', { email, rfc });\n      throw handleApiError(error);\n    }\n\n    return data.length > 0 ? data[0] : null;\n  } catch (error) {\n    logError(error, 'checkClientExists', { email, rfc });\n    throw handleApiError(error);\n  }\n};\n\nexport const getClientCount = async (filters?: ClientFilter) => {\n  try {\n    let query = supabase\n      .from(USERS_TABLE)\n      .select('id', { count: 'exact', head: true });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n    }\n\n    const { count, error } = await query;\n\n    if (error) {\n      logError(error, 'getClientCount', { filters });\n      throw handleApiError(error);\n    }\n\n    return count || 0;\n  } catch (error) {\n    logError(error, 'getClientCount', { filters });\n    return 0;\n  }\n}; "],"mappings":"AAAA,SAASA,QAAQ,EAAEC,sBAAsB,QAAQ,uBAAuB;AACxE,SAASC,MAAM,QAAQ,2BAA2B;AAClD,OAAO,KAAKC,eAAe,MAAM,mBAAmB;AAGpD,SACEC,SAAS,EACTC,cAAc,EACdC,QAAQ,EAERC,cAAc,QACT,wBAAwB;AAC/B,SAASC,kBAAkB,QAAQ,2BAA2B;;AAE9D;;AAaA,MAAMC,WAAW,GAAG,OAAO;;AAE3B;AACA,MAAMC,6BAA6B,GAAGA,CACpCC,QAAwB,EACxBC,MAAc,KACqB;EACnC,OAAO;IACLC,IAAI,EAAEF,QAAQ,CAACE,IAAI;IACnBC,QAAQ,EAAEH,QAAQ,CAACG,QAAQ;IAC3BC,YAAY,EAAEJ,QAAQ,CAACK,IAAI;IAC3BC,WAAW,EAAEN,QAAQ,CAACM,WAAW;IACjCL,MAAM,EAAEA;EACV,CAAC;AACH,CAAC;AAED,MAAMM,eAAe,GAAIC,QAAa,IAAa;EACjD,IAAI,CAACA,QAAQ,EAAE;IACbC,OAAO,CAACC,KAAK,CAAC,iDAAiD,CAAC;IAChE,MAAM,IAAIC,KAAK,CAAC,yEAAyE,CAAC;EAC5F;EAEA,MAAMC,QAAQ,GAAGJ,QAAQ,CAACH,IAAI,IAAI,CAChCG,QAAQ,CAACK,UAAU,EACnBL,QAAQ,CAACM,gBAAgB,EACzBN,QAAQ,CAACO,gBAAgB,CAC1B,CAACC,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAE3B,OAAO;IACLC,EAAE,EAAEX,QAAQ,CAACW,EAAE;IACfC,UAAU,EAAEZ,QAAQ,CAACY,UAAU;IAC/Bf,IAAI,EAAEO,QAAQ;IACdC,UAAU,EAAEL,QAAQ,CAACK,UAAU;IAC/BC,gBAAgB,EAAEN,QAAQ,CAACM,gBAAgB;IAC3CC,gBAAgB,EAAEP,QAAQ,CAACO,gBAAgB;IAC3CM,KAAK,EAAEb,QAAQ,CAACa,KAAK;IACrBC,KAAK,EAAEd,QAAQ,CAACc,KAAK;IACrBC,UAAU,EAAEf,QAAQ,CAACe,UAAU;IAC/BC,UAAU,EAAEhB,QAAQ,CAACgB,UAAU;IAC/BC,GAAG,EAAEjB,QAAQ,CAACiB,GAAG;IACjBC,IAAI,EAAElB,QAAQ,CAACkB,IAAI;IACnBC,UAAU,EAAEnB,QAAQ,CAACmB,UAAU;IAC/BC,OAAO,EAAEpB,QAAQ,CAACoB,OAAO;IACzBC,IAAI,EAAErB,QAAQ,CAACqB,IAAI;IACnBC,KAAK,EAAEtB,QAAQ,CAACsB,KAAK;IACrBC,WAAW,EAAEvB,QAAQ,CAACuB,WAAW;IACjCC,MAAM,EAAExB,QAAQ,CAACwB,MAAM;IACvBC,cAAc,EAAEzB,QAAQ,CAACyB,cAAc;IACvCC,eAAe,EAAE1B,QAAQ,CAAC0B,eAAe;IACzCC,gBAAgB,EAAE3B,QAAQ,CAAC2B,gBAAgB;IAC3CC,cAAc,EAAE5B,QAAQ,CAAC4B,cAAc;IACvCC,iBAAiB,EAAE7B,QAAQ,CAAC6B,iBAAiB;IAC7CC,gBAAgB,EAAE9B,QAAQ,CAAC8B,gBAAgB;IAC3CC,mBAAmB,EAAE/B,QAAQ,CAAC+B,mBAAmB;IACjDC,SAAS,EAAEhC,QAAQ,CAACgC,SAAS;IAC7BC,UAAU,EAAEjC,QAAQ,CAACiC,UAAU;IAC/BC,mBAAmB,EAAElC,QAAQ,CAACkC,mBAAmB;IACjDC,iBAAiB,EAAEnC,QAAQ,CAACmC,iBAAiB;IAC7CC,mBAAmB,EAAEpC,QAAQ,CAACoC;EAChC,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAOC,OAAsB,IAAK;EAC1D,IAAI;IACF,IAAIC,KAAK,GAAG1D,QAAQ,CAAC2D,IAAI,CAAClD,WAAW,CAAC,CACnCmD,MAAM,CAAC,yXAAyX,EAAE;MAAEC,KAAK,EAAE;IAAQ,CAAC,CAAC;IAExZ,IAAIJ,OAAO,EAAE;MACX,IAAIA,OAAO,CAACnB,UAAU,EAAE;QACtBoB,KAAK,GAAGA,KAAK,CAACI,EAAE,CAAC,YAAY,EAAEL,OAAO,CAACnB,UAAU,CAAC;MACpD;MAEA,IAAImB,OAAO,CAACtB,UAAU,EAAE;QACtBuB,KAAK,GAAGA,KAAK,CAACI,EAAE,CAAC,YAAY,EAAEL,OAAO,CAACtB,UAAU,CAAC;MACpD;MAEA,IAAIsB,OAAO,CAACM,QAAQ,EAAE;QACpBL,KAAK,GAAGA,KAAK,CAACM,GAAG,CAAC,YAAY,EAAEP,OAAO,CAACM,QAAQ,CAAC;MACnD;MAEA,IAAIN,OAAO,CAACQ,MAAM,EAAE;QAClBP,KAAK,GAAGA,KAAK,CAACQ,GAAG,CAAC,YAAY,EAAET,OAAO,CAACQ,MAAM,CAAC;MACjD;MAEA,IAAIR,OAAO,CAACU,WAAW,EAAE;QACvBT,KAAK,GAAGA,KAAK,CAACU,EAAE,CACd,qBAAqBX,OAAO,CAACU,WAAW,6BAA6BV,OAAO,CAACU,WAAW,6BAA6BV,OAAO,CAACU,WAAW,kBAAkBV,OAAO,CAACU,WAAW,kBAAkBV,OAAO,CAACU,WAAW,gBAAgBV,OAAO,CAACU,WAAW,iBAAiBV,OAAO,CAACU,WAAW,GAC3R,CAAC;MACH;MAEA,IAAIV,OAAO,CAACY,IAAI,KAAKC,SAAS,IAAIb,OAAO,CAACc,QAAQ,EAAE;QAClD,MAAMZ,IAAI,GAAGF,OAAO,CAACY,IAAI,GAAGZ,OAAO,CAACc,QAAQ;QAC5C,MAAMC,EAAE,GAAGb,IAAI,GAAGF,OAAO,CAACc,QAAQ,GAAG,CAAC;QACtCb,KAAK,GAAGA,KAAK,CAACe,KAAK,CAACd,IAAI,EAAEa,EAAE,CAAC;MAC/B;IACF;IAEAd,KAAK,GAAGA,KAAK,CAACgB,KAAK,CAAC,YAAY,EAAE;MAAEC,SAAS,EAAE;IAAM,CAAC,CAAC;IAEvD,MAAM;MAAEC,IAAI;MAAEvD,KAAK;MAAEwC;IAAM,CAAC,GAAG,MAAMH,KAAK;IAE1C,IAAIrC,KAAK,EAAE;MACTf,QAAQ,CAACe,KAAK,EAAE,YAAY,EAAE;QAAEoC;MAAQ,CAAC,CAAC;MAC1C,MAAMlD,cAAc,CAACc,KAAK,CAAC;IAC7B;IAEA,MAAMwD,OAAO,GAAGD,IAAI,GAAGA,IAAI,CAACE,GAAG,CAAC5D,eAAe,CAAC,GAAG,EAAE;IAErD,OAAO;MACL2D,OAAO;MACPE,UAAU,EAAElB,KAAK,IAAI;IACvB,CAAC;EACH,CAAC,CAAC,OAAOxC,KAAK,EAAE;IACdf,QAAQ,CAACe,KAAK,EAAE,YAAY,EAAE;MAAEoC;IAAQ,CAAC,CAAC;IAC1C,MAAMlD,cAAc,CAACc,KAAK,CAAC;EAC7B;AACF,CAAC;AAED,OAAO,MAAM2D,aAAa,GAAG,MAAOlD,EAAU,IAAK;EACjD,IAAI;IACF,MAAM;MAAE8C,IAAI;MAAEvD;IAAM,CAAC,GAAG,MAAMrB,QAAQ,CACnC2D,IAAI,CAAClD,WAAW,CAAC,CACjBmD,MAAM,CAAC,yXAAyX,CAAC,CACjYE,EAAE,CAAC,IAAI,EAAEhC,EAAE,CAAC,CACZmD,MAAM,CAAC,CAAC;IAEX,IAAI5D,KAAK,EAAE;MACTf,QAAQ,CAACe,KAAK,EAAE,eAAe,EAAE;QAAE6D,QAAQ,EAAEpD;MAAG,CAAC,CAAC;MAClD,MAAMvB,cAAc,CAACc,KAAK,CAAC;IAC7B;IAEA,IAAI,CAACuD,IAAI,EAAE;MACT,MAAMO,aAAa,GAAG9E,cAAc,CAClCD,SAAS,CAACgF,SAAS,EACnB,kCAAkCtD,EAAE,EACtC,CAAC;MACDxB,QAAQ,CAAC6E,aAAa,EAAE,eAAe,EAAE;QAAED,QAAQ,EAAEpD;MAAG,CAAC,CAAC;MAC1D,MAAMqD,aAAa;IACrB;IAEA,OAAOjE,eAAe,CAAC0D,IAAI,CAAC;EAC9B,CAAC,CAAC,OAAOvD,KAAK,EAAE;IACdf,QAAQ,CAACe,KAAK,EAAE,eAAe,EAAE;MAAE6D,QAAQ,EAAEpD;IAAG,CAAC,CAAC;IAClD,MAAMvB,cAAc,CAACc,KAAK,CAAC;EAC7B;AACF,CAAC;AAED,SAASgE,eAAeA,CAACC,GAAW,EAAE;EACpC,IAAI,CAACA,GAAG,EAAE,OAAO,EAAE;EACnB,OAAOA,GAAG,CAACC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;AAChC;AAEA,OAAO,MAAMC,qBAAqB,GAAG,MAAON,QAAgB,IAAK;EAC/D,IAAI;IACF,MAAMO,MAAM,GAAG,MAAMT,aAAa,CAACE,QAAQ,CAAC,CAACQ,KAAK,CAACC,GAAG,IAAI;MACxD,MAAMpF,cAAc,CAACoF,GAAG,CAAC;IAC3B,CAAC,CAAC;IAEF,IAAI,CAACF,MAAM,EAAE;MACX,MAAMN,aAAa,GAAG9E,cAAc,CAClCD,SAAS,CAACgF,SAAS,EACnB,sBACF,CAAC;MACD9E,QAAQ,CAAC6E,aAAa,EAAE,uBAAuB,EAAE;QAAED;MAAS,CAAC,CAAC;MAC9D,OAAO,EAAE;IACX;IAEA,MAAMxB,KAAK,GAAG;AAClB,sBAAsBxD,MAAM,CAAC0F,YAAY;AACzC,6BAA6BP,eAAe,CAACI,MAAM,CAACzE,IAAI,IAAI,EAAE,CAAC;AAC/D;AACA,KAAK;IAED,MAAM6E,YAAY,GAAG,MAAOnC,KAAa,IAAK;MAC5C,IAAI;QACF,MAAMoC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;UAC1DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAE1C,KAAK,EAAEA;UAAM,CAAC;QACvC,CAAC,CAAC;QAEF,MAAM2C,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAEpC,IAAID,MAAM,CAAChF,KAAK,EAAE;UAChBD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEgF,MAAM,CAAChF,KAAK,CAAC;UACxD,MAAM,IAAIC,KAAK,CAAC+E,MAAM,CAAChF,KAAK,CAAC;QAC/B;QAEA,OAAOgF,MAAM,CAACzB,IAAI;MACpB,CAAC,CAAC,OAAOvD,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD,MAAMA,KAAK;MACb;IACF,CAAC;IAED,MAAMuD,IAAI,GAAG,MAAMiB,YAAY,CAACnC,KAAK,CAAC;IACtC,OAAOkB,IAAI;EACb,CAAC,CAAC,OAAOvD,KAAK,EAAE;IACdf,QAAQ,CAACe,KAAK,EAAE,uBAAuB,EAAE;MAAE6D;IAAS,CAAC,CAAC;IACtD,MAAM3E,cAAc,CAACc,KAAK,CAAC;EAC7B;AACF,CAAC;AAED,OAAO,MAAMkF,qBAAqB,GAAG,MAAAA,CACnCrB,QAAgB,EAChBsB,aAA+B,KACP;EACxB,IAAI,CAACtB,QAAQ,EAAE;IACb9D,OAAO,CAACC,KAAK,CAAC,+CAA+C,CAAC;IAC9D,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;EACzE;;EAEA;EACA,IAAI,CAACkF,aAAa,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,aAAa,CAAC,IAAIA,aAAa,CAACG,MAAM,KAAK,CAAC,EAAE;IACjFvF,OAAO,CAACC,KAAK,CAAC,wCAAwC,CAAC;IACvD,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EAEA,IAAI;IACF;IACA,MAAMsF,UAAU,GAAG,MAAM3G,sBAAsB,CAAC,CAAC;;IAEjD;IACA,MAAME,eAAe,CAAC0G,yBAAyB,CAACD,UAAU,CAAC;;IAE3D;IACA,MAAME,cAAc,GAAGN,aAAa,CAAC1B,GAAG,CAAC,MAAOiC,OAAO,IAAK;MAC1D,IAAI;QACF;QACA,IAAI,CAACA,OAAO,CAAClG,IAAI,IAAI,CAACkG,OAAO,CAAChG,YAAY,EAAE;UAC1CK,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAE0F,OAAO,CAAC;UAC/C,MAAM,IAAIzF,KAAK,CACb,4DACF,CAAC;QACH;;QAEA;QACA,MAAM0F,YAA4B,GAAG;UACnC,GAAGD,OAAO;UACVE,SAAS,EAAE/B,QAAQ;UACnB0B,UAAU,EAAEA,UAAU,CAAC;QACzB,CAAC;;QAED;QACA,OAAO,MAAMzG,eAAe,CAAC+G,cAAc,CAACF,YAAY,CAAC;MAC3D,CAAC,CAAC,OAAOG,QAAa,EAAE;QACtB;QACA,IAAIA,QAAQ,CAACC,OAAO,KAChBD,QAAQ,CAACC,OAAO,CAACC,QAAQ,CAAC,mBAAmB,CAAC,IAC9CF,QAAQ,CAACC,OAAO,CAACC,QAAQ,CAAC,gBAAgB,CAAC,IAC3CF,QAAQ,CAACC,OAAO,CAACC,QAAQ,CAAC,oBAAoB,CAAC,CAChD,EAAE;UACHjG,OAAO,CAACC,KAAK,CAAC,2CAA2C,EAAE8F,QAAQ,CAAC;UACpE,MAAM,IAAI7F,KAAK,CAAC,mFAAmF,CAAC;QACtG;;QAEA;QACAF,OAAO,CAACC,KAAK,CAAC,uCAAuC6D,QAAQ,GAAG,EAAEiC,QAAQ,CAAC;QAC3E,MAAMA,QAAQ;MAChB;IACF,CAAC,CAAC;IAEF,MAAMG,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACV,cAAc,CAAC;IAEjD,OAAOQ,OAAO;EAChB,CAAC,CAAC,OAAOjG,KAAK,EAAE;IACdf,QAAQ,CAACe,KAAK,EAAE,uBAAuB,EAAE;MAAE6D;IAAS,CAAC,CAAC;IACtD,MAAM3E,cAAc,CAACc,KAAK,CAAC;EAC7B;AACF,CAAC;AAED,OAAO,MAAMoG,YAAY,GAAG,MAAAA,CAAOhC,MAAyC,EAAEiC,SAA4B,EAAE9G,MAAe,KAAK;EAC9H,IAAI;IACF;IACA,MAAMO,QAAQ,GAAG;MACfa,KAAK,EAAEyD,MAAM,CAACzD,KAAK;MACnBR,UAAU,EAAEiE,MAAM,CAACjE,UAAU,IAAI,EAAE;MACnCC,gBAAgB,EAAEgE,MAAM,CAAChE,gBAAgB,IAAI,EAAE;MAC/CC,gBAAgB,EAAE+D,MAAM,CAAC/D,gBAAgB,IAAI,EAAE;MAC/CO,KAAK,EAAEwD,MAAM,CAACxD,KAAK;MACnBC,UAAU,EAAEuD,MAAM,CAACvD,UAAU;MAC7BC,UAAU,EAAEsD,MAAM,CAACtD,UAAU;MAC7BC,GAAG,EAAEqD,MAAM,CAACrD,GAAG;MACfC,IAAI,EAAEoD,MAAM,CAACpD,IAAI;MACjBC,UAAU,EAAEmD,MAAM,CAACnD,UAAU;MAC7BC,OAAO,EAAEkD,MAAM,CAAClD,OAAO;MACvBC,IAAI,EAAEiD,MAAM,CAACjD,IAAI;MACjBC,KAAK,EAAEgD,MAAM,CAAChD,KAAK;MACnBC,WAAW,EAAE+C,MAAM,CAAC/C,WAAW;MAC/BC,MAAM,EAAE8C,MAAM,CAAC9C,MAAM;MACrBC,cAAc,EAAE6C,MAAM,CAAC7C,cAAc;MACrCC,eAAe,EAAE4C,MAAM,CAAC5C,eAAe;MACvCC,gBAAgB,EAAE2C,MAAM,CAAC3C,gBAAgB;MACzCC,cAAc,EAAE0C,MAAM,CAAC1C,cAAc;MACrCC,iBAAiB,EAAEyC,MAAM,CAACzC,iBAAiB;MAC3CC,gBAAgB,EAAEwC,MAAM,CAACxC,gBAAgB;MACzCC,mBAAmB,EAAEuC,MAAM,CAACvC,mBAAmB;MAC/CC,SAAS,EAAEsC,MAAM,CAACtC,SAAS;MAC3BC,UAAU,EAAEqC,MAAM,CAACrC,UAAU;MAC7BC,mBAAmB,EAAEoC,MAAM,CAACpC,mBAAmB;MAC/CC,iBAAiB,EAAEmC,MAAM,CAACnC,iBAAiB;MAC3CC,mBAAmB,EAAEkC,MAAM,CAAClC;IAC9B,CAAC;;IAED;IACA,IAAI,CAACpC,QAAQ,CAACgB,UAAU,EAAE;MACxBf,OAAO,CAACuG,IAAI,CAAC,qEAAqE,CAAC;MACnFxG,QAAQ,CAACgB,UAAU,GAAG,sCAAsC,CAAC,CAAC;IAChE;;IAEA;IACA,MAAMyE,UAAU,GAAG3G,sBAAsB,CAAC,CAAC;IAE3C,MAAM;MAAE2E,IAAI;MAAEvD,KAAK;MAAEwC;IAAM,CAAC,GAAG,MAAM+C,UAAU,CAC5CjD,IAAI,CAAClD,WAAW,CAAC,CACjBmH,MAAM,CAAC,CAACzG,QAAQ,CAAC,CAAC,CAClByC,MAAM,CAAC,CAAC;IAEX,IAAIvC,KAAK,EAAE;MACT;MACA,IAAIA,KAAK,CAAC+F,OAAO,KACf/F,KAAK,CAAC+F,OAAO,CAACC,QAAQ,CAAC,oCAAoC,CAAC,IAC5DhG,KAAK,CAAC+F,OAAO,CAACC,QAAQ,CAAC,mBAAmB,CAAC,IAC3ChG,KAAK,CAAC+F,OAAO,CAACC,QAAQ,CAAC,cAAc,CAAC,IACtChG,KAAK,CAAC+F,OAAO,CAACC,QAAQ,CAAC,KAAK,CAAC,CAC9B,EAAE;QACD,MAAMQ,QAAQ,GAAGxH,cAAc,CAC7BD,SAAS,CAAC0H,aAAa,EACvB,sGAAsG,EACtG;UAAEC,aAAa,EAAE1G,KAAK,CAAC+F;QAAQ,CACjC,CAAC;QACD9G,QAAQ,CAACuH,QAAQ,EAAE,4BAA4B,CAAC;QAChD,MAAMA,QAAQ;MAChB;MAEAvH,QAAQ,CAACe,KAAK,EAAE,cAAc,CAAC;MAC/B,MAAMd,cAAc,CAACc,KAAK,CAAC;IAC7B;;IAEA;IACA,IAAI,CAACuD,IAAI,IAAIA,IAAI,CAAC+B,MAAM,KAAK,CAAC,IAAI9C,KAAK,KAAK,CAAC,EAAE;MAC7C,MAAMmE,WAAW,GAAG3H,cAAc,CAChCD,SAAS,CAAC6H,MAAM,EAChB,mEACF,CAAC;MACD3H,QAAQ,CAAC0H,WAAW,EAAE,cAAc,CAAC;MACrC,MAAMA,WAAW;IACnB;IAEA,MAAME,SAAS,GAAGhH,eAAe,CAAC0D,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1C,IAAIuD,cAAc,GAAG,IAAI;IAEzB,IAAIT,SAAS,IAAIA,SAAS,CAACf,MAAM,GAAG,CAAC,IAAI/F,MAAM,IAAIsH,SAAS,CAACpG,EAAE,EAAE;MAC/D,IAAI;QACFqG,cAAc,GAAG,MAAM5B,qBAAqB,CAAC2B,SAAS,CAACpG,EAAE,EAAE4F,SAAS,CAAC;;QAErE;QACA,IAAIS,cAAc,IAAIA,cAAc,CAACxB,MAAM,GAAG,CAAC,EAAE;UAC/CvF,OAAO,CAACuG,IAAI,CAAC,GAAGQ,cAAc,CAACxB,MAAM,oDAAoD,CAAC;;UAE1F;UACAuB,SAAS,CAACE,cAAc,GAAG,4BAA4BD,cAAc,CAACxB,MAAM,IAAIwB,cAAc,CAACxB,MAAM,KAAK,CAAC,GAAG,iBAAiB,GAAG,qBAAqB,8DAA8D;QACvN;MACF,CAAC,CAAC,OAAOQ,QAAQ,EAAE;QACjB/F,OAAO,CAACC,KAAK,CAAC,mDAAmD,EAAE8F,QAAQ,CAAC;;QAE5E;QACAe,SAAS,CAACE,cAAc,GAAG,oHAAoH;MACjJ;IACF;IAEA,OAAOF,SAAS;EAClB,CAAC,CAAC,OAAO7G,KAAK,EAAE;IACdf,QAAQ,CAACe,KAAK,EAAE,cAAc,EAAE;MAAEgH,UAAU,EAAE5C;IAAO,CAAC,CAAC;IACvD,MAAMlF,cAAc,CAACc,KAAK,CAAC;EAC7B;AACF,CAAC;AAED,OAAO,MAAMiH,YAAY,GAAG,MAAAA,CAAOxG,EAAU,EAAEyG,OAAwB,EAAEb,SAA4B,EAAE9G,MAAe,KAAK;EACzH,IAAI;IACFQ,OAAO,CAACoH,GAAG,CAAC,iCAAiC1G,EAAE,EAAE,EAAEyG,OAAO,CAAC;;IAE3D;IACA,MAAME,WAAW,GAAG;MAClBzG,KAAK,EAAEuG,OAAO,CAACvG,KAAK;MACpBR,UAAU,EAAE+G,OAAO,CAAC/G,UAAU;MAC9BC,gBAAgB,EAAE8G,OAAO,CAAC9G,gBAAgB;MAC1CC,gBAAgB,EAAE6G,OAAO,CAAC7G,gBAAgB;MAC1CO,KAAK,EAAEsG,OAAO,CAACtG,KAAK;MACpBC,UAAU,EAAEqG,OAAO,CAACrG,UAAU;MAC9BC,UAAU,EAAEoG,OAAO,CAACpG,UAAU;MAC9BC,GAAG,EAAEmG,OAAO,CAACnG,GAAG;MAChBC,IAAI,EAAEkG,OAAO,CAAClG,IAAI;MAClBC,UAAU,EAAEiG,OAAO,CAACjG,UAAU;MAC9BC,OAAO,EAAEgG,OAAO,CAAChG,OAAO;MACxBC,IAAI,EAAE+F,OAAO,CAAC/F,IAAI;MAClBC,KAAK,EAAE8F,OAAO,CAAC9F,KAAK;MACpBC,WAAW,EAAE6F,OAAO,CAAC7F,WAAW;MAChCC,MAAM,EAAE4F,OAAO,CAAC5F,MAAM;MACtBC,cAAc,EAAE2F,OAAO,CAAC3F,cAAc;MACtCC,eAAe,EAAE0F,OAAO,CAAC1F,eAAe;MACxCC,gBAAgB,EAAEyF,OAAO,CAACzF,gBAAgB;MAC1CC,cAAc,EAAEwF,OAAO,CAACxF,cAAc;MACtCC,iBAAiB,EAAEuF,OAAO,CAACvF,iBAAiB;MAC5CC,gBAAgB,EAAEsF,OAAO,CAACtF,gBAAgB;MAC1CC,mBAAmB,EAAEqF,OAAO,CAACrF,mBAAmB;MAChDC,SAAS,EAAEoF,OAAO,CAACpF,SAAS;MAC5BC,UAAU,EAAEmF,OAAO,CAACnF,UAAU;MAC9BC,mBAAmB,EAAEkF,OAAO,CAAClF,mBAAmB;MAChDC,iBAAiB,EAAEiF,OAAO,CAACjF,iBAAiB;MAC5CC,mBAAmB,EAAEgF,OAAO,CAAChF;IAC/B,CAAC;;IAED;IACA;IACA,MAAMmF,mBAAmB,GAAGA,CAACC,KAAU,EAAEC,SAAS,GAAG,KAAK,KAAK;MAC7D,IAAID,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKrE,SAAS,EAAE;QACzD,OAAOA,SAAS,CAAC,CAAC;MACpB;MAEA,OAAO9D,kBAAkB,CAACqI,MAAM,CAACF,KAAK,CAAC,CAAC;IAC1C,CAAC;;IAED;IACA,IAAI,kBAAkB,IAAIJ,OAAO,EAAE;MACjCE,WAAW,CAAC3F,gBAAgB,GAAG4F,mBAAmB,CAACH,OAAO,CAACzF,gBAAgB,EAAE,IAAI,CAAC;IACpF;IACA,IAAI,gBAAgB,IAAIyF,OAAO,EAAE;MAC/BE,WAAW,CAAC1F,cAAc,GAAG2F,mBAAmB,CAACH,OAAO,CAACxF,cAAc,CAAC;IAC1E;IACA,IAAI,mBAAmB,IAAIwF,OAAO,EAAE;MAClCE,WAAW,CAACzF,iBAAiB,GAAG0F,mBAAmB,CAACH,OAAO,CAACvF,iBAAiB,CAAC;IAChF;IACA,IAAI,kBAAkB,IAAIuF,OAAO,EAAE;MACjCE,WAAW,CAACxF,gBAAgB,GAAGyF,mBAAmB,CAACH,OAAO,CAACtF,gBAAgB,CAAC;IAC9E;IACA,IAAI,qBAAqB,IAAIsF,OAAO,EAAE;MACpCE,WAAW,CAACvF,mBAAmB,GAAGwF,mBAAmB,CAACH,OAAO,CAACrF,mBAAmB,CAAC;IACpF;;IAEA;IACA4F,MAAM,CAACC,IAAI,CAACN,WAAW,CAAC,CAACO,OAAO,CAACC,GAAG,IAAI;MACtC,MAAMC,QAAQ,GAAGD,GAA+B;MAChD,IAAIR,WAAW,CAACS,QAAQ,CAAC,KAAK5E,SAAS,EAAE;QACvC,OAAOmE,WAAW,CAACS,QAAQ,CAAC;MAC9B;IACF,CAAC,CAAC;IAEF9H,OAAO,CAACoH,GAAG,CAAC,mBAAmB1G,EAAE,uBAAuB,EAAEqE,IAAI,CAACC,SAAS,CAACqC,WAAW,CAAC,CAAC;;IAEtF;IACA,MAAM7B,UAAU,GAAG3G,sBAAsB,CAAC,CAAC;;IAE3C;IACA,MAAM;MAAE2E,IAAI,EAAEuE,cAAc;MAAE9H,KAAK,EAAE+H;IAAc,CAAC,GAAG,MAAMxC,UAAU,CACpEjD,IAAI,CAAClD,WAAW,CAAC,CACjBmD,MAAM,CAAC,IAAI,CAAC,CACZE,EAAE,CAAC,IAAI,EAAEhC,EAAE,CAAC,CACZmD,MAAM,CAAC,CAAC;IAEX,IAAImE,aAAa,IAAI,CAACD,cAAc,EAAE;MACpC,MAAMhE,aAAa,GAAG9E,cAAc,CAClCD,SAAS,CAACgF,SAAS,EACnB,oCAAoCtD,EAAE,oCACxC,CAAC;MACDxB,QAAQ,CAAC6E,aAAa,EAAE,cAAc,EAAE;QAAED,QAAQ,EAAEpD;MAAG,CAAC,CAAC;MACzD,MAAMqD,aAAa;IACrB;;IAEA;IACA,MAAM;MAAEP,IAAI;MAAEvD,KAAK;MAAEwC;IAAM,CAAC,GAAG,MAAM+C,UAAU,CAC5CjD,IAAI,CAAClD,WAAW,CAAC,CACjB4I,MAAM,CAACZ,WAAW,CAAC,CACnB3E,EAAE,CAAC,IAAI,EAAEhC,EAAE,CAAC,CACZ8B,MAAM,CAAC,CAAC;IAEX,IAAIvC,KAAK,EAAE;MACT;MACA,IAAIA,KAAK,CAAC+F,OAAO,KACf/F,KAAK,CAAC+F,OAAO,CAACC,QAAQ,CAAC,oCAAoC,CAAC,IAC5DhG,KAAK,CAAC+F,OAAO,CAACC,QAAQ,CAAC,mBAAmB,CAAC,IAC3ChG,KAAK,CAAC+F,OAAO,CAACC,QAAQ,CAAC,cAAc,CAAC,IACtChG,KAAK,CAAC+F,OAAO,CAACC,QAAQ,CAAC,KAAK,CAAC,CAC9B,EAAE;QACD,MAAMQ,QAAQ,GAAGxH,cAAc,CAC7BD,SAAS,CAAC0H,aAAa,EACvB,+GAA+G,EAC/G;UAAEC,aAAa,EAAE1G,KAAK,CAAC+F;QAAQ,CACjC,CAAC;QACD9G,QAAQ,CAACuH,QAAQ,EAAE,4BAA4B,EAAE;UAAE3C,QAAQ,EAAEpD;QAAG,CAAC,CAAC;QAClE,MAAM+F,QAAQ;MAChB;MAEAvH,QAAQ,CAACe,KAAK,EAAE,cAAc,EAAE;QAAE6D,QAAQ,EAAEpD;MAAG,CAAC,CAAC;MACjD,MAAMvB,cAAc,CAACc,KAAK,CAAC;IAC7B;;IAEA;IACA,IAAI,CAACuD,IAAI,IAAIA,IAAI,CAAC+B,MAAM,KAAK,CAAC,IAAI9C,KAAK,KAAK,CAAC,EAAE;MAC7CzC,OAAO,CAACuG,IAAI,CAAC,sDAAsD7F,EAAE,EAAE,CAAC;MACxE,MAAMwH,aAAa,GAAGjJ,cAAc,CAClCD,SAAS,CAACmJ,QAAQ,EAClB,kIAAkI,EAClI;QAAErE,QAAQ,EAAEpD;MAAG,CACjB,CAAC;MACDxB,QAAQ,CAACgJ,aAAa,EAAE,wBAAwB,EAAE;QAAEpE,QAAQ,EAAEpD;MAAG,CAAC,CAAC;MACnE,MAAMwH,aAAa;IACrB;IAEA,IAAIE,aAAqB;IAEzB,IAAI,CAAC5E,IAAI,IAAIA,IAAI,CAAC+B,MAAM,KAAK,CAAC,EAAE;MAC9BvF,OAAO,CAACoH,GAAG,CAAC,iDAAiD1G,EAAE,mCAAmC,CAAC;;MAEnG;MACA,MAAM;QAAE8C,IAAI,EAAE6E,WAAW;QAAEpI,KAAK,EAAEqI;MAAW,CAAC,GAAG,MAAM9C,UAAU,CAC9DjD,IAAI,CAAClD,WAAW,CAAC,CACjBmD,MAAM,CAAC,GAAG,CAAC,CACXE,EAAE,CAAC,IAAI,EAAEhC,EAAE,CAAC,CACZmD,MAAM,CAAC,CAAC;MAEX,IAAIyE,UAAU,EAAE;QACdtI,OAAO,CAACC,KAAK,CAAC,yCAAyCS,EAAE,GAAG,EAAE4H,UAAU,CAAC;QACzE,MAAM,IAAIpI,KAAK,CAAC,oGAAoG,CAAC;MACvH;MAEA,IAAI,CAACmI,WAAW,EAAE;QAChBrI,OAAO,CAACC,KAAK,CAAC,oCAAoCS,EAAE,eAAe,CAAC;QACpE,MAAM,IAAIR,KAAK,CAAC,oGAAoG,CAAC;MACvH;MAEAF,OAAO,CAACoH,GAAG,CAAC,0DAA0D1G,EAAE,EAAE,CAAC;MAC3E0H,aAAa,GAAGtI,eAAe,CAACuI,WAAW,CAAC;IAC9C,CAAC,MAAM;MACLrI,OAAO,CAACoH,GAAG,CAAC,sDAAsD1G,EAAE,EAAE,CAAC;MACvE0H,aAAa,GAAGtI,eAAe,CAAC0D,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1C;IAEA,IAAIuD,cAAc,GAAG,IAAI;;IAEzB;IACA,IAAIT,SAAS,IAAIA,SAAS,CAACf,MAAM,GAAG,CAAC,IAAI/F,MAAM,EAAE;MAC/C,IAAI;QACFQ,OAAO,CAACoH,GAAG,CAAC,aAAad,SAAS,CAACf,MAAM,yBAAyB7E,EAAE,EAAE,CAAC;QACvEqG,cAAc,GAAG,MAAM5B,qBAAqB,CAACzE,EAAE,EAAE4F,SAAS,CAAC;;QAE3D;QACA,IAAIS,cAAc,IAAIA,cAAc,CAACxB,MAAM,GAAG,CAAC,EAAE;UAC/CvF,OAAO,CAACuG,IAAI,CAAC,GAAGQ,cAAc,CAACxB,MAAM,kDAAkD,CAAC;;UAExF;UACA6C,aAAa,CAACpB,cAAc,GAAG,iCAAiCD,cAAc,CAACxB,MAAM,IAAIwB,cAAc,CAACxB,MAAM,KAAK,CAAC,GAAG,iBAAiB,GAAG,qBAAqB,8DAA8D;QAChO;MACF,CAAC,CAAC,OAAOQ,QAAQ,EAAE;QACjB/F,OAAO,CAACC,KAAK,CAAC,wCAAwCS,EAAE,GAAG,EAAEqF,QAAQ,CAAC;;QAEtE;QACAqC,aAAa,CAACpB,cAAc,GAAG,yHAAyH;MAC1J;IACF;IAEAhH,OAAO,CAACoH,GAAG,CAAC,iCAAiC1G,EAAE,EAAE,CAAC;IAClDV,OAAO,CAACoH,GAAG,CAAC,2BAA2B,EAAEgB,aAAa,CAAC;IACvD,OAAOA,aAAa;EACtB,CAAC,CAAC,OAAOnI,KAAK,EAAE;IACdf,QAAQ,CAACe,KAAK,EAAE,cAAc,EAAE;MAAE6D,QAAQ,EAAEpD,EAAE;MAAEyG;IAAQ,CAAC,CAAC;IAC1D,MAAMhI,cAAc,CAACc,KAAK,CAAC;EAC7B;AACF,CAAC;AAED,OAAO,MAAMsI,YAAY,GAAG,MAAO7H,EAAU,IAAK;EAChD,IAAI;IACF;IACA,MAAM8E,UAAU,GAAG3G,sBAAsB,CAAC,CAAC;IAE3C,MAAM;MAAEoB,KAAK;MAAEwC;IAAM,CAAC,GAAG,MAAM+C,UAAU,CACtCjD,IAAI,CAAClD,WAAW,CAAC,CACjBmJ,MAAM,CAAC,CAAC,CACR9F,EAAE,CAAC,IAAI,EAAEhC,EAAE,CAAC;IAEf,IAAIT,KAAK,EAAE;MACT;MACA,IAAIA,KAAK,CAAC+F,OAAO,KACf/F,KAAK,CAAC+F,OAAO,CAACC,QAAQ,CAAC,oCAAoC,CAAC,IAC5DhG,KAAK,CAAC+F,OAAO,CAACC,QAAQ,CAAC,mBAAmB,CAAC,IAC3ChG,KAAK,CAAC+F,OAAO,CAACC,QAAQ,CAAC,cAAc,CAAC,IACtChG,KAAK,CAAC+F,OAAO,CAACC,QAAQ,CAAC,KAAK,CAAC,CAC9B,EAAE;QACD,MAAMQ,QAAQ,GAAGxH,cAAc,CAC7BD,SAAS,CAAC0H,aAAa,EACvB,6GAA6G,EAC7G;UAAEC,aAAa,EAAE1G,KAAK,CAAC+F;QAAQ,CACjC,CAAC;QACD9G,QAAQ,CAACuH,QAAQ,EAAE,4BAA4B,EAAE;UAAE3C,QAAQ,EAAEpD;QAAG,CAAC,CAAC;QAClE,MAAM+F,QAAQ;MAChB;MAEAvH,QAAQ,CAACe,KAAK,EAAE,cAAc,EAAE;QAAE6D,QAAQ,EAAEpD;MAAG,CAAC,CAAC;MACjD,MAAMvB,cAAc,CAACc,KAAK,CAAC;IAC7B;;IAEA;IACA,IAAIwC,KAAK,KAAK,CAAC,EAAE;MACfzC,OAAO,CAACuG,IAAI,CAAC,sDAAsD7F,EAAE,EAAE,CAAC;MACxE,MAAMwH,aAAa,GAAGjJ,cAAc,CAClCD,SAAS,CAACmJ,QAAQ,EAClB,iGAAiG,EACjG;QAAErE,QAAQ,EAAEpD;MAAG,CACjB,CAAC;MACDxB,QAAQ,CAACgJ,aAAa,EAAE,wBAAwB,EAAE;QAAEpE,QAAQ,EAAEpD;MAAG,CAAC,CAAC;MACnE,MAAMwH,aAAa;IACrB;IAEA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOjI,KAAK,EAAE;IACdf,QAAQ,CAACe,KAAK,EAAE,cAAc,EAAE;MAAE6D,QAAQ,EAAEpD;IAAG,CAAC,CAAC;IACjD,MAAMvB,cAAc,CAACc,KAAK,CAAC;EAC7B;AACF,CAAC;AAED,OAAO,MAAMwI,iBAAiB,GAAG,MAAAA,CAAO7H,KAAa,EAAEI,GAAY,KAAK;EACtE,IAAI;IACF,IAAIsB,KAAK,GAAG1D,QAAQ,CACjB2D,IAAI,CAAClD,WAAW,CAAC,CACjBmD,MAAM,CAAC,gBAAgB,CAAC,CACxBE,EAAE,CAAC,OAAO,EAAE9B,KAAK,CAAC;IAErB,IAAII,GAAG,EAAE;MACPsB,KAAK,GAAGA,KAAK,CAACU,EAAE,CAAC,UAAUhC,GAAG,EAAE,CAAC;IACnC;IAEA,MAAM;MAAEwC,IAAI;MAAEvD;IAAM,CAAC,GAAG,MAAMqC,KAAK;IAEnC,IAAIrC,KAAK,EAAE;MACTf,QAAQ,CAACe,KAAK,EAAE,mBAAmB,EAAE;QAAEW,KAAK;QAAEI;MAAI,CAAC,CAAC;MACpD,MAAM7B,cAAc,CAACc,KAAK,CAAC;IAC7B;IAEA,OAAOuD,IAAI,CAAC+B,MAAM,GAAG,CAAC,GAAG/B,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;EACzC,CAAC,CAAC,OAAOvD,KAAK,EAAE;IACdf,QAAQ,CAACe,KAAK,EAAE,mBAAmB,EAAE;MAAEW,KAAK;MAAEI;IAAI,CAAC,CAAC;IACpD,MAAM7B,cAAc,CAACc,KAAK,CAAC;EAC7B;AACF,CAAC;AAED,OAAO,MAAMyI,cAAc,GAAG,MAAOrG,OAAsB,IAAK;EAC9D,IAAI;IACF,IAAIC,KAAK,GAAG1D,QAAQ,CACjB2D,IAAI,CAAClD,WAAW,CAAC,CACjBmD,MAAM,CAAC,IAAI,EAAE;MAAEC,KAAK,EAAE,OAAO;MAAEkG,IAAI,EAAE;IAAK,CAAC,CAAC;IAE/C,IAAItG,OAAO,EAAE;MACX,IAAIA,OAAO,CAACnB,UAAU,EAAE;QACtBoB,KAAK,GAAGA,KAAK,CAACI,EAAE,CAAC,YAAY,EAAEL,OAAO,CAACnB,UAAU,CAAC;MACpD;MAEA,IAAImB,OAAO,CAACtB,UAAU,EAAE;QACtBuB,KAAK,GAAGA,KAAK,CAACI,EAAE,CAAC,YAAY,EAAEL,OAAO,CAACtB,UAAU,CAAC;MACpD;MAEA,IAAIsB,OAAO,CAACM,QAAQ,EAAE;QACpBL,KAAK,GAAGA,KAAK,CAACM,GAAG,CAAC,YAAY,EAAEP,OAAO,CAACM,QAAQ,CAAC;MACnD;MAEA,IAAIN,OAAO,CAACQ,MAAM,EAAE;QAClBP,KAAK,GAAGA,KAAK,CAACQ,GAAG,CAAC,YAAY,EAAET,OAAO,CAACQ,MAAM,CAAC;MACjD;MAEA,IAAIR,OAAO,CAACU,WAAW,EAAE;QACvBT,KAAK,GAAGA,KAAK,CAACU,EAAE,CACd,qBAAqBX,OAAO,CAACU,WAAW,6BAA6BV,OAAO,CAACU,WAAW,6BAA6BV,OAAO,CAACU,WAAW,kBAAkBV,OAAO,CAACU,WAAW,kBAAkBV,OAAO,CAACU,WAAW,gBAAgBV,OAAO,CAACU,WAAW,iBAAiBV,OAAO,CAACU,WAAW,GAC3R,CAAC;MACH;IACF;IAEA,MAAM;MAAEN,KAAK;MAAExC;IAAM,CAAC,GAAG,MAAMqC,KAAK;IAEpC,IAAIrC,KAAK,EAAE;MACTf,QAAQ,CAACe,KAAK,EAAE,gBAAgB,EAAE;QAAEoC;MAAQ,CAAC,CAAC;MAC9C,MAAMlD,cAAc,CAACc,KAAK,CAAC;IAC7B;IAEA,OAAOwC,KAAK,IAAI,CAAC;EACnB,CAAC,CAAC,OAAOxC,KAAK,EAAE;IACdf,QAAQ,CAACe,KAAK,EAAE,gBAAgB,EAAE;MAAEoC;IAAQ,CAAC,CAAC;IAC9C,OAAO,CAAC;EACV;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}