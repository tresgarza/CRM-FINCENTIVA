{"ast":null,"code":"import { supabase } from '../utils/supabase';\nimport { TABLES } from '../utils/constants/tables';\nconst CLIENTS_TABLE = TABLES.CLIENTS;\n\n// Get all clients with filters\nexport const getClients = async filters => {\n  let query = supabase.from(CLIENTS_TABLE).select('*');\n\n  // Apply filters\n  if (filters) {\n    // Filter by advisor\n    if (filters.advisor_id) {\n      query = query.eq('advisor_id', filters.advisor_id);\n    }\n\n    // Filter by company\n    if (filters.company_id) {\n      query = query.eq('company_id', filters.company_id);\n    }\n\n    // Filter by date range\n    if (filters.dateFrom) {\n      query = query.gte('created_at', filters.dateFrom);\n    }\n    if (filters.dateTo) {\n      query = query.lte('created_at', filters.dateTo);\n    }\n\n    // Search by name, email or phone\n    if (filters.searchQuery) {\n      query = query.or(`name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);\n    }\n  }\n\n  // Order by most recent first\n  query = query.order('created_at', {\n    ascending: false\n  });\n  const {\n    data,\n    error\n  } = await query;\n  if (error) {\n    console.error('Error fetching clients:', error);\n    throw error;\n  }\n  return data;\n};\n\n// Get a single client by ID\nexport const getClientById = async id => {\n  const {\n    data,\n    error\n  } = await supabase.from(CLIENTS_TABLE).select('*').eq('id', id).single();\n  if (error) {\n    console.error(`Error fetching client with ID ${id}:`, error);\n    throw error;\n  }\n  return data;\n};\n\n// Get client applications\nexport const getClientApplications = async clientId => {\n  const {\n    data,\n    error\n  } = await supabase.from(TABLES.APPLICATIONS).select('*').eq('client_id', clientId).order('created_at', {\n    ascending: false\n  });\n  if (error) {\n    console.error(`Error fetching applications for client ${clientId}:`, error);\n    throw error;\n  }\n  return data;\n};\n\n// Create a new client\nexport const createClient = async client => {\n  const {\n    data,\n    error\n  } = await supabase.from(CLIENTS_TABLE).insert([client]).select();\n  if (error) {\n    console.error('Error creating client:', error);\n    throw error;\n  }\n  return data[0];\n};\n\n// Update an existing client\nexport const updateClient = async (id, updates) => {\n  const {\n    data,\n    error\n  } = await supabase.from(CLIENTS_TABLE).update(updates).eq('id', id).select();\n  if (error) {\n    console.error(`Error updating client with ID ${id}:`, error);\n    throw error;\n  }\n  return data[0];\n};\n\n// Delete a client\nexport const deleteClient = async id => {\n  const {\n    error\n  } = await supabase.from(CLIENTS_TABLE).delete().eq('id', id);\n  if (error) {\n    console.error(`Error deleting client with ID ${id}:`, error);\n    throw error;\n  }\n  return true;\n};\n\n// Check if a client exists with the given email or RFC\nexport const checkClientExists = async (email, rfc) => {\n  let query = supabase.from(CLIENTS_TABLE).select('id, email, rfc').eq('email', email);\n  if (rfc) {\n    query = query.or(`rfc.eq.${rfc}`);\n  }\n  const {\n    data,\n    error\n  } = await query;\n  if (error) {\n    console.error('Error checking client existence:', error);\n    throw error;\n  }\n  return data.length > 0 ? data[0] : null;\n};\n\n// Get client count by filters\nexport const getClientCount = async filters => {\n  let query = supabase.from(CLIENTS_TABLE).select('id', {\n    count: 'exact',\n    head: true\n  });\n\n  // Apply filters\n  if (filters) {\n    // Filter by advisor\n    if (filters.advisor_id) {\n      query = query.eq('advisor_id', filters.advisor_id);\n    }\n\n    // Filter by company\n    if (filters.company_id) {\n      query = query.eq('company_id', filters.company_id);\n    }\n\n    // Filter by date range\n    if (filters.dateFrom) {\n      query = query.gte('created_at', filters.dateFrom);\n    }\n    if (filters.dateTo) {\n      query = query.lte('created_at', filters.dateTo);\n    }\n\n    // Search by name, email or phone\n    if (filters.searchQuery) {\n      query = query.or(`name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);\n    }\n  }\n  const {\n    count,\n    error\n  } = await query;\n  if (error) {\n    console.error('Error getting client count:', error);\n    throw error;\n  }\n  return count;\n};","map":{"version":3,"names":["supabase","TABLES","CLIENTS_TABLE","CLIENTS","getClients","filters","query","from","select","advisor_id","eq","company_id","dateFrom","gte","dateTo","lte","searchQuery","or","order","ascending","data","error","console","getClientById","id","single","getClientApplications","clientId","APPLICATIONS","createClient","client","insert","updateClient","updates","update","deleteClient","delete","checkClientExists","email","rfc","length","getClientCount","count","head"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/clientService.ts"],"sourcesContent":["import { supabase } from '../utils/supabase';\nimport { TABLES } from '../utils/constants/tables';\n\nexport interface Client {\n  id: string;\n  created_at: string;\n  name: string;\n  email: string;\n  phone: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  postal_code?: string;\n  birth_date?: string;\n  rfc?: string;\n  curp?: string;\n  company_id?: string;\n  advisor_id?: string;\n}\n\nexport interface ClientFilter {\n  searchQuery?: string;\n  advisor_id?: string;\n  company_id?: string;\n  dateFrom?: string;\n  dateTo?: string;\n}\n\nconst CLIENTS_TABLE = TABLES.CLIENTS;\n\n// Get all clients with filters\nexport const getClients = async (filters?: ClientFilter) => {\n  let query = supabase.from(CLIENTS_TABLE).select('*');\n\n  // Apply filters\n  if (filters) {\n    // Filter by advisor\n    if (filters.advisor_id) {\n      query = query.eq('advisor_id', filters.advisor_id);\n    }\n\n    // Filter by company\n    if (filters.company_id) {\n      query = query.eq('company_id', filters.company_id);\n    }\n\n    // Filter by date range\n    if (filters.dateFrom) {\n      query = query.gte('created_at', filters.dateFrom);\n    }\n\n    if (filters.dateTo) {\n      query = query.lte('created_at', filters.dateTo);\n    }\n\n    // Search by name, email or phone\n    if (filters.searchQuery) {\n      query = query.or(\n        `name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n      );\n    }\n  }\n\n  // Order by most recent first\n  query = query.order('created_at', { ascending: false });\n\n  const { data, error } = await query;\n\n  if (error) {\n    console.error('Error fetching clients:', error);\n    throw error;\n  }\n\n  return data as Client[];\n};\n\n// Get a single client by ID\nexport const getClientById = async (id: string) => {\n  const { data, error } = await supabase\n    .from(CLIENTS_TABLE)\n    .select('*')\n    .eq('id', id)\n    .single();\n\n  if (error) {\n    console.error(`Error fetching client with ID ${id}:`, error);\n    throw error;\n  }\n\n  return data as Client;\n};\n\n// Get client applications\nexport const getClientApplications = async (clientId: string) => {\n  const { data, error } = await supabase\n    .from(TABLES.APPLICATIONS)\n    .select('*')\n    .eq('client_id', clientId)\n    .order('created_at', { ascending: false });\n\n  if (error) {\n    console.error(`Error fetching applications for client ${clientId}:`, error);\n    throw error;\n  }\n\n  return data;\n};\n\n// Create a new client\nexport const createClient = async (client: Omit<Client, 'id' | 'created_at'>) => {\n  const { data, error } = await supabase\n    .from(CLIENTS_TABLE)\n    .insert([client])\n    .select();\n\n  if (error) {\n    console.error('Error creating client:', error);\n    throw error;\n  }\n\n  return data[0] as Client;\n};\n\n// Update an existing client\nexport const updateClient = async (id: string, updates: Partial<Client>) => {\n  const { data, error } = await supabase\n    .from(CLIENTS_TABLE)\n    .update(updates)\n    .eq('id', id)\n    .select();\n\n  if (error) {\n    console.error(`Error updating client with ID ${id}:`, error);\n    throw error;\n  }\n\n  return data[0] as Client;\n};\n\n// Delete a client\nexport const deleteClient = async (id: string) => {\n  const { error } = await supabase\n    .from(CLIENTS_TABLE)\n    .delete()\n    .eq('id', id);\n\n  if (error) {\n    console.error(`Error deleting client with ID ${id}:`, error);\n    throw error;\n  }\n\n  return true;\n};\n\n// Check if a client exists with the given email or RFC\nexport const checkClientExists = async (email: string, rfc?: string) => {\n  let query = supabase\n    .from(CLIENTS_TABLE)\n    .select('id, email, rfc')\n    .eq('email', email);\n\n  if (rfc) {\n    query = query.or(`rfc.eq.${rfc}`);\n  }\n\n  const { data, error } = await query;\n\n  if (error) {\n    console.error('Error checking client existence:', error);\n    throw error;\n  }\n\n  return data.length > 0 ? data[0] : null;\n};\n\n// Get client count by filters\nexport const getClientCount = async (filters?: ClientFilter) => {\n  let query = supabase\n    .from(CLIENTS_TABLE)\n    .select('id', { count: 'exact', head: true });\n\n  // Apply filters\n  if (filters) {\n    // Filter by advisor\n    if (filters.advisor_id) {\n      query = query.eq('advisor_id', filters.advisor_id);\n    }\n\n    // Filter by company\n    if (filters.company_id) {\n      query = query.eq('company_id', filters.company_id);\n    }\n\n    // Filter by date range\n    if (filters.dateFrom) {\n      query = query.gte('created_at', filters.dateFrom);\n    }\n\n    if (filters.dateTo) {\n      query = query.lte('created_at', filters.dateTo);\n    }\n\n    // Search by name, email or phone\n    if (filters.searchQuery) {\n      query = query.or(\n        `name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n      );\n    }\n  }\n\n  const { count, error } = await query;\n\n  if (error) {\n    console.error('Error getting client count:', error);\n    throw error;\n  }\n\n  return count;\n}; "],"mappings":"AAAA,SAASA,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,MAAM,QAAQ,2BAA2B;AA2BlD,MAAMC,aAAa,GAAGD,MAAM,CAACE,OAAO;;AAEpC;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,OAAsB,IAAK;EAC1D,IAAIC,KAAK,GAAGN,QAAQ,CAACO,IAAI,CAACL,aAAa,CAAC,CAACM,MAAM,CAAC,GAAG,CAAC;;EAEpD;EACA,IAAIH,OAAO,EAAE;IACX;IACA,IAAIA,OAAO,CAACI,UAAU,EAAE;MACtBH,KAAK,GAAGA,KAAK,CAACI,EAAE,CAAC,YAAY,EAAEL,OAAO,CAACI,UAAU,CAAC;IACpD;;IAEA;IACA,IAAIJ,OAAO,CAACM,UAAU,EAAE;MACtBL,KAAK,GAAGA,KAAK,CAACI,EAAE,CAAC,YAAY,EAAEL,OAAO,CAACM,UAAU,CAAC;IACpD;;IAEA;IACA,IAAIN,OAAO,CAACO,QAAQ,EAAE;MACpBN,KAAK,GAAGA,KAAK,CAACO,GAAG,CAAC,YAAY,EAAER,OAAO,CAACO,QAAQ,CAAC;IACnD;IAEA,IAAIP,OAAO,CAACS,MAAM,EAAE;MAClBR,KAAK,GAAGA,KAAK,CAACS,GAAG,CAAC,YAAY,EAAEV,OAAO,CAACS,MAAM,CAAC;IACjD;;IAEA;IACA,IAAIT,OAAO,CAACW,WAAW,EAAE;MACvBV,KAAK,GAAGA,KAAK,CAACW,EAAE,CACd,eAAeZ,OAAO,CAACW,WAAW,kBAAkBX,OAAO,CAACW,WAAW,kBAAkBX,OAAO,CAACW,WAAW,gBAAgBX,OAAO,CAACW,WAAW,iBAAiBX,OAAO,CAACW,WAAW,GACrL,CAAC;IACH;EACF;;EAEA;EACAV,KAAK,GAAGA,KAAK,CAACY,KAAK,CAAC,YAAY,EAAE;IAAEC,SAAS,EAAE;EAAM,CAAC,CAAC;EAEvD,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMf,KAAK;EAEnC,IAAIe,KAAK,EAAE;IACTC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;EAEA,OAAOD,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMG,aAAa,GAAG,MAAOC,EAAU,IAAK;EACjD,MAAM;IAAEJ,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMrB,QAAQ,CACnCO,IAAI,CAACL,aAAa,CAAC,CACnBM,MAAM,CAAC,GAAG,CAAC,CACXE,EAAE,CAAC,IAAI,EAAEc,EAAE,CAAC,CACZC,MAAM,CAAC,CAAC;EAEX,IAAIJ,KAAK,EAAE;IACTC,OAAO,CAACD,KAAK,CAAC,iCAAiCG,EAAE,GAAG,EAAEH,KAAK,CAAC;IAC5D,MAAMA,KAAK;EACb;EAEA,OAAOD,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMM,qBAAqB,GAAG,MAAOC,QAAgB,IAAK;EAC/D,MAAM;IAAEP,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMrB,QAAQ,CACnCO,IAAI,CAACN,MAAM,CAAC2B,YAAY,CAAC,CACzBpB,MAAM,CAAC,GAAG,CAAC,CACXE,EAAE,CAAC,WAAW,EAAEiB,QAAQ,CAAC,CACzBT,KAAK,CAAC,YAAY,EAAE;IAAEC,SAAS,EAAE;EAAM,CAAC,CAAC;EAE5C,IAAIE,KAAK,EAAE;IACTC,OAAO,CAACD,KAAK,CAAC,0CAA0CM,QAAQ,GAAG,EAAEN,KAAK,CAAC;IAC3E,MAAMA,KAAK;EACb;EAEA,OAAOD,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMS,YAAY,GAAG,MAAOC,MAAyC,IAAK;EAC/E,MAAM;IAAEV,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMrB,QAAQ,CACnCO,IAAI,CAACL,aAAa,CAAC,CACnB6B,MAAM,CAAC,CAACD,MAAM,CAAC,CAAC,CAChBtB,MAAM,CAAC,CAAC;EAEX,IAAIa,KAAK,EAAE;IACTC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;EAEA,OAAOD,IAAI,CAAC,CAAC,CAAC;AAChB,CAAC;;AAED;AACA,OAAO,MAAMY,YAAY,GAAG,MAAAA,CAAOR,EAAU,EAAES,OAAwB,KAAK;EAC1E,MAAM;IAAEb,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMrB,QAAQ,CACnCO,IAAI,CAACL,aAAa,CAAC,CACnBgC,MAAM,CAACD,OAAO,CAAC,CACfvB,EAAE,CAAC,IAAI,EAAEc,EAAE,CAAC,CACZhB,MAAM,CAAC,CAAC;EAEX,IAAIa,KAAK,EAAE;IACTC,OAAO,CAACD,KAAK,CAAC,iCAAiCG,EAAE,GAAG,EAAEH,KAAK,CAAC;IAC5D,MAAMA,KAAK;EACb;EAEA,OAAOD,IAAI,CAAC,CAAC,CAAC;AAChB,CAAC;;AAED;AACA,OAAO,MAAMe,YAAY,GAAG,MAAOX,EAAU,IAAK;EAChD,MAAM;IAAEH;EAAM,CAAC,GAAG,MAAMrB,QAAQ,CAC7BO,IAAI,CAACL,aAAa,CAAC,CACnBkC,MAAM,CAAC,CAAC,CACR1B,EAAE,CAAC,IAAI,EAAEc,EAAE,CAAC;EAEf,IAAIH,KAAK,EAAE;IACTC,OAAO,CAACD,KAAK,CAAC,iCAAiCG,EAAE,GAAG,EAAEH,KAAK,CAAC;IAC5D,MAAMA,KAAK;EACb;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMgB,iBAAiB,GAAG,MAAAA,CAAOC,KAAa,EAAEC,GAAY,KAAK;EACtE,IAAIjC,KAAK,GAAGN,QAAQ,CACjBO,IAAI,CAACL,aAAa,CAAC,CACnBM,MAAM,CAAC,gBAAgB,CAAC,CACxBE,EAAE,CAAC,OAAO,EAAE4B,KAAK,CAAC;EAErB,IAAIC,GAAG,EAAE;IACPjC,KAAK,GAAGA,KAAK,CAACW,EAAE,CAAC,UAAUsB,GAAG,EAAE,CAAC;EACnC;EAEA,MAAM;IAAEnB,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMf,KAAK;EAEnC,IAAIe,KAAK,EAAE;IACTC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb;EAEA,OAAOD,IAAI,CAACoB,MAAM,GAAG,CAAC,GAAGpB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;AACzC,CAAC;;AAED;AACA,OAAO,MAAMqB,cAAc,GAAG,MAAOpC,OAAsB,IAAK;EAC9D,IAAIC,KAAK,GAAGN,QAAQ,CACjBO,IAAI,CAACL,aAAa,CAAC,CACnBM,MAAM,CAAC,IAAI,EAAE;IAAEkC,KAAK,EAAE,OAAO;IAAEC,IAAI,EAAE;EAAK,CAAC,CAAC;;EAE/C;EACA,IAAItC,OAAO,EAAE;IACX;IACA,IAAIA,OAAO,CAACI,UAAU,EAAE;MACtBH,KAAK,GAAGA,KAAK,CAACI,EAAE,CAAC,YAAY,EAAEL,OAAO,CAACI,UAAU,CAAC;IACpD;;IAEA;IACA,IAAIJ,OAAO,CAACM,UAAU,EAAE;MACtBL,KAAK,GAAGA,KAAK,CAACI,EAAE,CAAC,YAAY,EAAEL,OAAO,CAACM,UAAU,CAAC;IACpD;;IAEA;IACA,IAAIN,OAAO,CAACO,QAAQ,EAAE;MACpBN,KAAK,GAAGA,KAAK,CAACO,GAAG,CAAC,YAAY,EAAER,OAAO,CAACO,QAAQ,CAAC;IACnD;IAEA,IAAIP,OAAO,CAACS,MAAM,EAAE;MAClBR,KAAK,GAAGA,KAAK,CAACS,GAAG,CAAC,YAAY,EAAEV,OAAO,CAACS,MAAM,CAAC;IACjD;;IAEA;IACA,IAAIT,OAAO,CAACW,WAAW,EAAE;MACvBV,KAAK,GAAGA,KAAK,CAACW,EAAE,CACd,eAAeZ,OAAO,CAACW,WAAW,kBAAkBX,OAAO,CAACW,WAAW,kBAAkBX,OAAO,CAACW,WAAW,gBAAgBX,OAAO,CAACW,WAAW,iBAAiBX,OAAO,CAACW,WAAW,GACrL,CAAC;IACH;EACF;EAEA,MAAM;IAAE0B,KAAK;IAAErB;EAAM,CAAC,GAAG,MAAMf,KAAK;EAEpC,IAAIe,KAAK,EAAE;IACTC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;EAEA,OAAOqB,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}