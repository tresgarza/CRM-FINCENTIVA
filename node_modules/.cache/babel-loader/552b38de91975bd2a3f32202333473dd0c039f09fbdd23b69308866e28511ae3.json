{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/components/ui/messaging/ChatInterface.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Flex, Heading, Text, useColorMode, Spinner } from '@chakra-ui/react';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport { getConversation, sendMessage, markConversationAsRead } from '../../../services/messageService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = ({\n  currentUserId,\n  otherUserId,\n  applicationId,\n  userName = 'Usuario',\n  otherUserName = 'Destinatario'\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSending, setIsSending] = useState(false);\n  const {\n    colorMode\n  } = useColorMode();\n  const bgColor = colorMode === 'light' ? 'white' : 'gray.800';\n  const headerBgColor = colorMode === 'light' ? 'gray.100' : 'gray.700';\n  const borderColor = colorMode === 'light' ? 'gray.200' : 'gray.600';\n\n  // Cargar mensajes al iniciar\n  useEffect(() => {\n    fetchMessages();\n    // Intervalo para actualizar los mensajes cada 10 segundos\n    const interval = setInterval(fetchMessages, 10000);\n    return () => clearInterval(interval);\n  }, [currentUserId, otherUserId, applicationId]);\n\n  // Marcar mensajes como leídos al visualizarlos\n  useEffect(() => {\n    if (messages.length > 0) {\n      markMessagesAsRead();\n    }\n  }, [messages]);\n\n  // Obtener mensajes de la conversación\n  const fetchMessages = async () => {\n    try {\n      setIsLoading(true);\n      const fetchedMessages = await getConversation(currentUserId, otherUserId, applicationId);\n      setMessages(fetchedMessages);\n    } catch (error) {\n      console.error('Error al cargar mensajes:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Marcar mensajes como leídos\n  const markMessagesAsRead = async () => {\n    try {\n      await markConversationAsRead(currentUserId, otherUserId);\n    } catch (error) {\n      console.error('Error al marcar mensajes como leídos:', error);\n    }\n  };\n\n  // Enviar un nuevo mensaje\n  const handleSendMessage = async (content, type) => {\n    try {\n      setIsSending(true);\n      const messageData = {\n        sender_id: currentUserId,\n        receiver_id: otherUserId,\n        message_content: content,\n        message_type: type,\n        related_application_id: applicationId\n      };\n      const newMessage = await sendMessage(messageData);\n\n      // Actualizar el estado local para mostrar el mensaje inmediatamente\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n    } catch (error) {\n      console.error('Error al enviar mensaje:', error);\n    } finally {\n      setIsSending(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    direction: \"column\",\n    h: \"100%\",\n    maxH: \"100%\",\n    bg: bgColor,\n    borderRadius: \"md\",\n    borderWidth: \"1px\",\n    borderColor: borderColor,\n    boxShadow: \"md\",\n    overflow: \"hidden\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      p: 3,\n      bg: headerBgColor,\n      borderBottomWidth: \"1px\",\n      borderColor: borderColor,\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        size: \"sm\",\n        children: applicationId ? `Conversación sobre aplicación ${applicationId.slice(0, 8)}...` : `Conversación con ${otherUserName}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), applicationId && /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"xs\",\n        color: \"gray.500\",\n        children: [\"Entre \", userName, \" y \", otherUserName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      flex: \"1\",\n      overflowY: \"hidden\",\n      position: \"relative\",\n      children: isLoading && messages.length === 0 ? /*#__PURE__*/_jsxDEV(Flex, {\n        justify: \"center\",\n        align: \"center\",\n        h: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(MessageList, {\n        messages: messages,\n        currentUserId: currentUserId,\n        isLoading: isLoading && messages.length > 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      onSendMessage: handleSendMessage,\n      isLoading: isSending,\n      applicationRelated: !!applicationId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"Jne12s6GcIV53PVKEg505/qPCVg=\", false, function () {\n  return [useColorMode];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","Box","Flex","Heading","Text","useColorMode","Spinner","MessageList","MessageInput","getConversation","sendMessage","markConversationAsRead","jsxDEV","_jsxDEV","ChatInterface","currentUserId","otherUserId","applicationId","userName","otherUserName","_s","messages","setMessages","isLoading","setIsLoading","isSending","setIsSending","colorMode","bgColor","headerBgColor","borderColor","fetchMessages","interval","setInterval","clearInterval","length","markMessagesAsRead","fetchedMessages","error","console","handleSendMessage","content","type","messageData","sender_id","receiver_id","message_content","message_type","related_application_id","newMessage","prevMessages","direction","h","maxH","bg","borderRadius","borderWidth","boxShadow","overflow","children","p","borderBottomWidth","size","slice","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","color","flex","overflowY","position","justify","align","onSendMessage","applicationRelated","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/components/ui/messaging/ChatInterface.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Box, Flex, Heading, Text, useColorMode, Spinner } from '@chakra-ui/react';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport { Message, MessageType, getConversation, sendMessage, markConversationAsRead } from '../../../services/messageService';\n\ninterface ChatInterfaceProps {\n  currentUserId: string;\n  otherUserId: string;\n  applicationId?: string;\n  userName?: string;\n  otherUserName?: string;\n}\n\nconst ChatInterface: React.FC<ChatInterfaceProps> = ({\n  currentUserId,\n  otherUserId,\n  applicationId,\n  userName = 'Usuario',\n  otherUserName = 'Destinatario'\n}) => {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSending, setIsSending] = useState(false);\n  const { colorMode } = useColorMode();\n  const bgColor = colorMode === 'light' ? 'white' : 'gray.800';\n  const headerBgColor = colorMode === 'light' ? 'gray.100' : 'gray.700';\n  const borderColor = colorMode === 'light' ? 'gray.200' : 'gray.600';\n\n  // Cargar mensajes al iniciar\n  useEffect(() => {\n    fetchMessages();\n    // Intervalo para actualizar los mensajes cada 10 segundos\n    const interval = setInterval(fetchMessages, 10000);\n    return () => clearInterval(interval);\n  }, [currentUserId, otherUserId, applicationId]);\n\n  // Marcar mensajes como leídos al visualizarlos\n  useEffect(() => {\n    if (messages.length > 0) {\n      markMessagesAsRead();\n    }\n  }, [messages]);\n\n  // Obtener mensajes de la conversación\n  const fetchMessages = async () => {\n    try {\n      setIsLoading(true);\n      const fetchedMessages = await getConversation(currentUserId, otherUserId, applicationId);\n      setMessages(fetchedMessages);\n    } catch (error) {\n      console.error('Error al cargar mensajes:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Marcar mensajes como leídos\n  const markMessagesAsRead = async () => {\n    try {\n      await markConversationAsRead(currentUserId, otherUserId);\n    } catch (error) {\n      console.error('Error al marcar mensajes como leídos:', error);\n    }\n  };\n\n  // Enviar un nuevo mensaje\n  const handleSendMessage = async (content: string, type: MessageType) => {\n    try {\n      setIsSending(true);\n      \n      const messageData = {\n        sender_id: currentUserId,\n        receiver_id: otherUserId,\n        message_content: content,\n        message_type: type,\n        related_application_id: applicationId\n      };\n      \n      const newMessage = await sendMessage(messageData);\n      \n      // Actualizar el estado local para mostrar el mensaje inmediatamente\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n    } catch (error) {\n      console.error('Error al enviar mensaje:', error);\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  return (\n    <Flex \n      direction=\"column\" \n      h=\"100%\" \n      maxH=\"100%\" \n      bg={bgColor} \n      borderRadius=\"md\" \n      borderWidth=\"1px\"\n      borderColor={borderColor}\n      boxShadow=\"md\"\n      overflow=\"hidden\"\n    >\n      {/* Cabecera del chat */}\n      <Box \n        p={3} \n        bg={headerBgColor} \n        borderBottomWidth=\"1px\" \n        borderColor={borderColor}\n      >\n        <Heading size=\"sm\">\n          {applicationId \n            ? `Conversación sobre aplicación ${applicationId.slice(0, 8)}...` \n            : `Conversación con ${otherUserName}`\n          }\n        </Heading>\n        {applicationId && (\n          <Text fontSize=\"xs\" color=\"gray.500\">\n            Entre {userName} y {otherUserName}\n          </Text>\n        )}\n      </Box>\n      \n      {/* Área de mensajes */}\n      <Box flex=\"1\" overflowY=\"hidden\" position=\"relative\">\n        {isLoading && messages.length === 0 ? (\n          <Flex justify=\"center\" align=\"center\" h=\"100%\">\n            <Spinner size=\"xl\" />\n          </Flex>\n        ) : (\n          <MessageList\n            messages={messages}\n            currentUserId={currentUserId}\n            isLoading={isLoading && messages.length > 0}\n          />\n        )}\n      </Box>\n      \n      {/* Campo para escribir mensajes */}\n      <MessageInput\n        onSendMessage={handleSendMessage}\n        isLoading={isSending}\n        applicationRelated={!!applicationId}\n      />\n    </Flex>\n  );\n};\n\nexport default ChatInterface; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}