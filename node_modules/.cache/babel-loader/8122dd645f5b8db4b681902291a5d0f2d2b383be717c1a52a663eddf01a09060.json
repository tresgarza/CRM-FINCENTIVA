{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{USER_ROLES}from'../utils/constants/roles';// Interfaces para tipado\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[session,setSession]=useState(null);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);// Simular verificación de sesión al iniciar\nuseEffect(()=>{const checkStoredUser=()=>{try{const storedUser=localStorage.getItem('crm_user');if(storedUser){setUser(JSON.parse(storedUser));}}catch(error){console.error('Error checking stored user:',error);}finally{setLoading(false);}};checkStoredUser();},[]);const signIn=async(email,password)=>{try{setLoading(true);// Simulación de autenticación\nif(email==='admin@fincentiva.com'&&password==='admin123'){const mockUser={id:'1',email:'admin@fincentiva.com',name:'Administrador',role:'SUPERADMIN',entityId:'1'};// Guardar en localStorage para mantener la sesión\nlocalStorage.setItem('crm_user',JSON.stringify(mockUser));setUser(mockUser);return{data:{user:mockUser},error:null};}return{data:null,error:'Credenciales inválidas'};}catch(error){console.error('Error signing in:',error);return{error,data:null};}finally{setLoading(false);}};/**\n   * Inicia sesión usando un código de acceso\n   * @param accessCode Código de acceso del usuario\n   * @param userType Tipo de usuario (ADVISOR o COMPANY_ADMIN)\n   */const signInWithCode=async(accessCode,userType)=>{try{setLoading(true);// Consultar la base de datos por el access_code\nlet queryUrl='http://localhost:3000/query';let queryBody={};if(userType===USER_ROLES.ADVISOR){queryBody={query:`SELECT * FROM advisors WHERE access_code = '${accessCode}' LIMIT 1`};}else if(userType===USER_ROLES.COMPANY_ADMIN){queryBody={query:`SELECT * FROM company_admins WHERE access_code = '${accessCode}' LIMIT 1`};}else{return{data:null,error:\"Tipo de usuario no válido\"};}console.log('Consultando usuario con código:',accessCode,'tipo:',userType);const response=await fetch(queryUrl,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(queryBody)});if(!response.ok){const errorText=await response.text();throw new Error(`Error en la consulta: ${errorText}`);}const result=await response.json();console.log('Resultado autenticación:',result);if(!result.data||result.data.length===0){setError('Código de acceso no válido');setLoading(false);return{data:null,error:\"Código de acceso no válido\"};}const userData=result.data[0];console.log('Usuario encontrado:',userData);// Crear objeto de usuario\nconst userInfo={id:userData.id,email:userData.email||'',name:userData.name||'',role:userType,entityId:userType===USER_ROLES.COMPANY_ADMIN?userData.company_id:userData.id};// Crear objeto de sesión\nconst sessionData={access_token:'simulated-access-token',refresh_token:'simulated-refresh-token',token_type:'bearer',user:userInfo,expires_in:3600};// Establecer la sesión\nsetSession(sessionData);setUser(userInfo);setError(null);// Guardar la sesión en localStorage\nlocalStorage.setItem('authSession',JSON.stringify(sessionData));localStorage.setItem('crm_user',JSON.stringify(userInfo));console.log('Sesión establecida:',sessionData);return{data:sessionData,error:null};}catch(error){console.error('Error al iniciar sesión con código:',error);setError(error instanceof Error?error.message:'Error en el inicio de sesión');return{data:null,error};}finally{setLoading(false);}};const signOut=async()=>{try{// Eliminar datos de sesión\nlocalStorage.removeItem('crm_user');localStorage.removeItem('authSession');setUser(null);setSession(null);}catch(error){console.error('Error signing out:',error);}};const value={user,session,loading,error,signIn,signInWithCode,signOut};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","USER_ROLES","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","session","setSession","loading","setLoading","error","setError","checkStoredUser","storedUser","localStorage","getItem","JSON","parse","console","signIn","email","password","mockUser","id","name","role","entityId","setItem","stringify","data","signInWithCode","accessCode","userType","queryUrl","queryBody","ADVISOR","query","COMPANY_ADMIN","log","response","fetch","method","headers","body","ok","errorText","text","result","json","length","userData","userInfo","company_id","sessionData","access_token","refresh_token","token_type","expires_in","message","signOut","removeItem","value","Provider"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { USER_ROLES } from '../utils/constants/roles';\n\n// Interfaces para tipado\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n  entityId: string;\n}\n\ninterface Session {\n  access_token: string;\n  refresh_token: string;\n  token_type: string;\n  user: User;\n  expires_in: number;\n}\n\ninterface AuthContextType {\n  session: Session | null;\n  user: User | null;\n  loading: boolean;\n  error: string | null;\n  signInWithCode: (accessCode: string, userType: string) => Promise<{ data: any, error: any }>;\n  signOut: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Simular verificación de sesión al iniciar\n  useEffect(() => {\n    const checkStoredUser = () => {\n      try {\n        const storedUser = localStorage.getItem('crm_user');\n        if (storedUser) {\n          setUser(JSON.parse(storedUser));\n        }\n      } catch (error) {\n        console.error('Error checking stored user:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkStoredUser();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      \n      // Simulación de autenticación\n      if (email === 'admin@fincentiva.com' && password === 'admin123') {\n        const mockUser: User = {\n          id: '1',\n          email: 'admin@fincentiva.com',\n          name: 'Administrador',\n          role: 'SUPERADMIN',\n          entityId: '1',\n        };\n        \n        // Guardar en localStorage para mantener la sesión\n        localStorage.setItem('crm_user', JSON.stringify(mockUser));\n        setUser(mockUser);\n        \n        return { data: { user: mockUser }, error: null };\n      }\n      \n      return { data: null, error: 'Credenciales inválidas' };\n    } catch (error) {\n      console.error('Error signing in:', error);\n      return { error, data: null };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Inicia sesión usando un código de acceso\n   * @param accessCode Código de acceso del usuario\n   * @param userType Tipo de usuario (ADVISOR o COMPANY_ADMIN)\n   */\n  const signInWithCode = async (accessCode: string, userType: string) => {\n    try {\n      setLoading(true);\n      \n      // Consultar la base de datos por el access_code\n      let queryUrl = 'http://localhost:3000/query';\n      let queryBody = {};\n      \n      if (userType === USER_ROLES.ADVISOR) {\n        queryBody = {\n          query: `SELECT * FROM advisors WHERE access_code = '${accessCode}' LIMIT 1`\n        };\n      } else if (userType === USER_ROLES.COMPANY_ADMIN) {\n        queryBody = {\n          query: `SELECT * FROM company_admins WHERE access_code = '${accessCode}' LIMIT 1`\n        };\n      } else {\n        return { data: null, error: \"Tipo de usuario no válido\" };\n      }\n      \n      console.log('Consultando usuario con código:', accessCode, 'tipo:', userType);\n      \n      const response = await fetch(queryUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(queryBody)\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Error en la consulta: ${errorText}`);\n      }\n      \n      const result = await response.json();\n      console.log('Resultado autenticación:', result);\n      \n      if (!result.data || result.data.length === 0) {\n        setError('Código de acceso no válido');\n        setLoading(false);\n        return { data: null, error: \"Código de acceso no válido\" };\n      }\n      \n      const userData = result.data[0];\n      console.log('Usuario encontrado:', userData);\n      \n      // Crear objeto de usuario\n      const userInfo: User = {\n        id: userData.id,\n        email: userData.email || '',\n        name: userData.name || '',\n        role: userType,\n        entityId: userType === USER_ROLES.COMPANY_ADMIN ? userData.company_id : userData.id,\n      };\n      \n      // Crear objeto de sesión\n      const sessionData: Session = {\n        access_token: 'simulated-access-token',\n        refresh_token: 'simulated-refresh-token',\n        token_type: 'bearer',\n        user: userInfo,\n        expires_in: 3600\n      };\n      \n      // Establecer la sesión\n      setSession(sessionData);\n      setUser(userInfo);\n      setError(null);\n      \n      // Guardar la sesión en localStorage\n      localStorage.setItem('authSession', JSON.stringify(sessionData));\n      localStorage.setItem('crm_user', JSON.stringify(userInfo));\n      \n      console.log('Sesión establecida:', sessionData);\n      \n      return { data: sessionData, error: null };\n    } catch (error) {\n      console.error('Error al iniciar sesión con código:', error);\n      setError(error instanceof Error ? error.message : 'Error en el inicio de sesión');\n      return { data: null, error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      // Eliminar datos de sesión\n      localStorage.removeItem('crm_user');\n      localStorage.removeItem('authSession');\n      setUser(null);\n      setSession(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  const value = {\n    user,\n    session,\n    loading,\n    error,\n    signIn,\n    signInWithCode,\n    signOut,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}