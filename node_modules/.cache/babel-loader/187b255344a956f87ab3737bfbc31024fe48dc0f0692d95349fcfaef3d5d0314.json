{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/contexts/NotificationContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { useAuth } from './AuthContext';\nimport NotificationPopup from '../components/ui/NotificationPopup';\n\n// Generate a proper UUID for notification IDs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateUUID() {\n  // Use a more standard implementation for UUID v4\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\n// For test notifications, use a valid UUID format - don't use app-timestamp\nfunction getTestApplicationId() {\n  // Use a small set of real UUIDs as sample application IDs\n  const sampleIds = ['110cc76a-1762-4df4-840e-a503fea9d7aa', '220cc76a-1762-4df4-840e-a503fea9d7bb', '330cc76a-1762-4df4-840e-a503fea9d7cc', '440cc76a-1762-4df4-840e-a503fea9d7dd', '550cc76a-1762-4df4-840e-a503fea9d7ee'];\n\n  // Pick a random ID from the sample list\n  return sampleIds[Math.floor(Math.random() * sampleIds.length)];\n}\n\n// Enum for notification types\nexport let NotificationType = /*#__PURE__*/function (NotificationType) {\n  NotificationType[\"INFO\"] = \"info\";\n  NotificationType[\"SUCCESS\"] = \"success\";\n  NotificationType[\"WARNING\"] = \"warning\";\n  NotificationType[\"ERROR\"] = \"error\";\n  NotificationType[\"NEW_APPLICATION\"] = \"new_application\";\n  NotificationType[\"APPROVAL_REQUIRED\"] = \"approval_required\";\n  NotificationType[\"NEW_MESSAGE\"] = \"new_message\";\n  NotificationType[\"APPLICATION_STATUS_UPDATED\"] = \"application_status_updated\";\n  NotificationType[\"APPLICATION_COMMENT\"] = \"application_comment\";\n  return NotificationType;\n}({});\n\n// Interfaces\n\nexport const NotificationContext = /*#__PURE__*/createContext(undefined);\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user\n  } = useAuth();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n\n  // Estado para la notificación emergente actual\n  const [currentPopup, setCurrentPopup] = useState(null);\n\n  // Referencia al ID del polling interval\n  const pollingIntervalRef = useRef(null);\n\n  // State to keep track of already notified application IDs\n  const [notifiedApplicationIds, setNotifiedApplicationIds] = useState(new Set());\n\n  // Referencia para evitar múltiples ejecuciones simultáneas\n  const checkingRef = useRef(false);\n\n  // Efecto para manejar la carga inicial de notificaciones y configurar el polling\n  useEffect(() => {\n    if (user) {\n      // Cargar notificaciones al inicio\n      loadNotifications();\n\n      // Cargar aplicaciones ya notificadas desde localStorage\n      try {\n        const storedIds = localStorage.getItem('notified_application_ids');\n        if (storedIds) {\n          setNotifiedApplicationIds(new Set(JSON.parse(storedIds)));\n        }\n      } catch (error) {\n        console.error('Error cargando aplicaciones notificadas:', error);\n      }\n\n      // Verificar al inicio si hay solicitudes recientes\n      checkForNewNotifications();\n\n      // Configurar polling para verificar nuevas notificaciones cada 15 segundos (en lugar de 30)\n      pollingIntervalRef.current = setInterval(() => {\n        checkForNewNotifications();\n      }, 15000);\n\n      // Limpiar el intervalo cuando el componente se desmonte\n      return () => {\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n        }\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  // Cálculo de notificaciones no leídas\n  useEffect(() => {\n    const count = notifications.filter(notification => !notification.read).length;\n    setUnreadCount(count);\n  }, [notifications]);\n\n  // Cargar notificaciones del almacenamiento local o del servidor\n  const loadNotifications = async () => {\n    try {\n      // En un escenario real, aquí se cargarían las notificaciones del servidor\n      // Por ahora, usaremos el localStorage como ejemplo\n      const storedNotifications = localStorage.getItem('notifications');\n      if (storedNotifications) {\n        const parsed = JSON.parse(storedNotifications);\n        setNotifications(parsed.map(n => ({\n          ...n,\n          createdAt: new Date(n.createdAt)\n        })));\n      }\n    } catch (error) {\n      console.error('Error cargando notificaciones:', error);\n    }\n  };\n\n  // Verificar nuevas notificaciones en el servidor\n  const checkForNewNotifications = async () => {\n    // Avoid multiple executions at the same time\n    if (checkingRef.current) {\n      console.log('Ya se está ejecutando una verificación de notificaciones');\n      return;\n    }\n    checkingRef.current = true;\n    console.log('Verificando nuevas notificaciones...');\n    try {\n      // Get notifications already shown to avoid duplicates\n      const notifiedIdsArray = Array.from(notifiedApplicationIds);\n      console.log('IDs ya notificados:', notifiedIdsArray);\n\n      // Query recent applications that haven't been shown yet\n      const response = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: `\n            SELECT id, client_name, application_type, company_name, created_at, status, \n                   amount, term, interest_rate, monthly_payment\n            FROM applications \n            WHERE created_at > NOW() - INTERVAL '24 hours'\n            ${notifiedIdsArray.length > 0 ? `AND id NOT IN ('${notifiedIdsArray.join(\"','\")}')` : ''}\n            ORDER BY created_at DESC\n            LIMIT 1\n          `\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error al consultar aplicaciones recientes');\n      }\n      const data = await response.json();\n\n      // Si hay aplicaciones nuevas, mostrar notificación\n      if (data.data && data.data.length > 0) {\n        const newApp = data.data[0];\n\n        // Verificación final para evitar duplicados\n        if (!notifiedApplicationIds.has(newApp.id)) {\n          console.log('Nueva aplicación detectada:', newApp);\n\n          // IMPORTANTE: Añadir a la lista de notificados INMEDIATAMENTE antes de procesar\n          // para evitar duplicados incluso si algo falla durante el procesamiento\n          const updatedNotifiedIds = new Set(notifiedApplicationIds);\n          updatedNotifiedIds.add(newApp.id);\n          setNotifiedApplicationIds(updatedNotifiedIds);\n\n          // Guardar en localStorage para persistencia entre recargas\n          localStorage.setItem('notified_application_ids', JSON.stringify(Array.from(updatedNotifiedIds)));\n\n          // Formatear datos para la notificación\n          const createdAt = new Date(newApp.created_at);\n          const formattedDate = new Intl.DateTimeFormat('es-MX', {\n            day: '2-digit',\n            month: '2-digit',\n            year: 'numeric'\n          }).format(createdAt);\n          const formattedTime = new Intl.DateTimeFormat('es-MX', {\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: true\n          }).format(createdAt);\n\n          // Formatear monto con separador de miles y 2 decimales\n          const formattedAmount = new Intl.NumberFormat('es-MX', {\n            style: 'currency',\n            currency: 'MXN',\n            minimumFractionDigits: 2\n          }).format(Number(newApp.amount || 0));\n\n          // Formatear tasa de interés con símbolo de porcentaje\n          const formattedRate = `${newApp.interest_rate || 0}%`;\n\n          // Formatear pago mensual\n          const formattedMonthly = new Intl.NumberFormat('es-MX', {\n            style: 'currency',\n            currency: 'MXN',\n            minimumFractionDigits: 2\n          }).format(Number(newApp.monthly_payment || 0));\n\n          // Transformar tipo de aplicación a un formato más legible\n          let appType = 'No especificado';\n          if (newApp.application_type) {\n            // Elimina cualquier barra diagonal al final si existe\n            const cleanType = newApp.application_type.replace(/\\/$/, '');\n            if (cleanType === 'selected_plans') {\n              appType = 'Planes seleccionados';\n            } else if (cleanType === 'product_simulations') {\n              appType = 'Simulación de producto';\n            } else {\n              appType = cleanType.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n            }\n          }\n\n          // Crear un mensaje HTML bien estructurado para el popup\n          const detailedMessage = `\n            <div class=\"grid grid-cols-2 gap-2 text-sm mt-2\">\n              <div class=\"font-semibold text-gray-700\">Cliente:</div>\n              <div class=\"text-gray-900\">${newApp.client_name || 'Sin nombre'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Empresa:</div>\n              <div class=\"text-gray-900\">${newApp.company_name || 'No especificada'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tipo:</div>\n              <div class=\"text-gray-900\">${appType}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Monto:</div>\n              <div class=\"text-gray-900\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${newApp.term || 'N/A'} ${newApp.term === 1 ? 'mes' : 'meses'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Pago mensual:</div>\n              <div class=\"text-gray-900\">${formattedMonthly}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Fecha:</div>\n              <div class=\"text-gray-900\">${formattedDate} ${formattedTime}</div>\n            </div>\n          `;\n          const notificationTitle = '💼 Nueva solicitud recibida';\n\n          // Crear la notificación para el panel\n          const testNotification = {\n            title: notificationTitle,\n            message: `Cliente: ${newApp.client_name || 'Sin nombre'} - ${newApp.company_name || 'Empresa no especificada'}`,\n            type: NotificationType.NEW_APPLICATION,\n            relatedItemType: 'application',\n            relatedItemId: newApp.id\n          };\n\n          // Añadir la notificación al panel\n          addNotification(testNotification);\n\n          // Mostrar popup con detalles completos\n          showPopup({\n            title: notificationTitle,\n            message: detailedMessage,\n            type: NotificationType.NEW_APPLICATION,\n            playSound: soundEnabled,\n            soundType: 'notification',\n            duration: 10000,\n            // 10 segundos\n            customSound: '/sounds/triple-tone.mp3',\n            centerScreen: true\n          });\n        } else {\n          console.log('Aplicación ya notificada previamente:', newApp.id);\n        }\n      } else {\n        console.log('No se encontraron aplicaciones nuevas');\n      }\n\n      // Simulación: Muy raramente mostrar una notificación de prueba (1% de probabilidad)\n      // Esto solo ocurre si no se encontraron aplicaciones reales nuevas\n      if (Math.random() > 0.99) {\n        const testId = getTestApplicationId();\n\n        // Evitar mostrar notificaciones de prueba para IDs ya notificados\n        if (!notifiedApplicationIds.has(testId)) {\n          const testNotification = {\n            title: 'Nueva solicitud asignada',\n            message: 'Se ha asignado una nueva solicitud de crédito a tu bandeja',\n            type: NotificationType.NEW_APPLICATION,\n            relatedItemType: 'application',\n            relatedItemId: testId\n          };\n\n          // Registrar como notificado para evitar duplicados\n          const updatedNotifiedIds = new Set(notifiedApplicationIds);\n          updatedNotifiedIds.add(testId);\n          setNotifiedApplicationIds(updatedNotifiedIds);\n          localStorage.setItem('notified_application_ids', JSON.stringify(Array.from(updatedNotifiedIds)));\n\n          // Añadir la notificación y mostrar popup\n          addNotification(testNotification);\n          showPopup({\n            ...testNotification,\n            playSound: soundEnabled,\n            soundType: 'notification'\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error al verificar nuevas notificaciones:', error);\n    } finally {\n      // Independientemente del resultado, marcar como no en ejecución\n      checkingRef.current = false;\n    }\n  };\n\n  // Añadir una nueva notificación\n  const addNotification = notification => {\n    const newNotification = {\n      ...notification,\n      // Using a proper UUID for the notification ID\n      id: generateUUID(),\n      createdAt: new Date(),\n      read: false,\n      timestamp: new Date()\n    };\n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Guardar en localStorage (en producción esto iría al servidor)\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar una notificación como leída\n  const markAsRead = id => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => notification.id === id ? {\n        ...notification,\n        read: true,\n        isRead: true\n      } : notification);\n\n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar todas las notificaciones como leídas\n  const markAllAsRead = () => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => ({\n        ...notification,\n        read: true,\n        isRead: true\n      }));\n\n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Limpiar todas las notificaciones\n  const clearNotifications = () => {\n    setNotifications([]);\n    // Limpiar del localStorage\n    localStorage.setItem('notifications', JSON.stringify([]));\n  };\n\n  // Mostrar una notificación emergente\n  const showPopup = config => {\n    setCurrentPopup(config);\n\n    // Automáticamente cerrar el popup después de la duración especificada\n    setTimeout(() => {\n      setCurrentPopup(null);\n    }, config.duration || 5000);\n  };\n\n  // Activar/desactivar sonidos de notificación\n  const toggleSound = () => {\n    const newValue = !soundEnabled;\n    setSoundEnabled(newValue);\n    // Guardar preferencia en localStorage\n    localStorage.setItem('notification_sound_enabled', newValue.toString());\n  };\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    showPopup,\n    soundEnabled,\n    toggleSound,\n    setSoundEnabled\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: [children, currentPopup && /*#__PURE__*/_jsxDEV(NotificationPopup, {\n      title: currentPopup.title,\n      message: currentPopup.message,\n      type: currentPopup.type,\n      duration: currentPopup.duration,\n      playSound: currentPopup.playSound,\n      soundType: currentPopup.soundType,\n      customSound: currentPopup.customSound,\n      onClose: () => setCurrentPopup(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 461,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"ssLVsvVQvlTmeHzseN+H88r8Wzs=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","useAuth","NotificationPopup","jsxDEV","_jsxDEV","generateUUID","replace","c","r","Math","random","v","toString","getTestApplicationId","sampleIds","floor","length","NotificationType","NotificationContext","undefined","useNotifications","_s","context","Error","NotificationProvider","children","_s2","user","notifications","setNotifications","unreadCount","setUnreadCount","soundEnabled","setSoundEnabled","currentPopup","setCurrentPopup","pollingIntervalRef","notifiedApplicationIds","setNotifiedApplicationIds","Set","checkingRef","loadNotifications","storedIds","localStorage","getItem","JSON","parse","error","console","checkForNewNotifications","current","setInterval","clearInterval","count","filter","notification","read","storedNotifications","parsed","map","n","createdAt","Date","log","notifiedIdsArray","Array","from","response","fetch","method","headers","body","stringify","query","join","ok","data","json","newApp","has","id","updatedNotifiedIds","add","setItem","created_at","formattedDate","Intl","DateTimeFormat","day","month","year","format","formattedTime","hour","minute","hour12","formattedAmount","NumberFormat","style","currency","minimumFractionDigits","Number","amount","formattedRate","interest_rate","formattedMonthly","monthly_payment","appType","application_type","cleanType","split","word","charAt","toUpperCase","slice","detailedMessage","client_name","company_name","term","notificationTitle","testNotification","title","message","type","NEW_APPLICATION","relatedItemType","relatedItemId","addNotification","showPopup","playSound","soundType","duration","customSound","centerScreen","testId","newNotification","timestamp","prev","updated","markAsRead","isRead","markAllAsRead","clearNotifications","config","setTimeout","toggleSound","newValue","value","Provider","onClose","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { useAuth } from './AuthContext';\nimport NotificationPopup from '../components/ui/NotificationPopup';\n\n// Generate a proper UUID for notification IDs\nfunction generateUUID() {\n  // Use a more standard implementation for UUID v4\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : ((r & 0x3) | 0x8);\n    return v.toString(16);\n  });\n}\n\n// For test notifications, use a valid UUID format - don't use app-timestamp\nfunction getTestApplicationId() {\n  // Use a small set of real UUIDs as sample application IDs\n  const sampleIds = [\n    '110cc76a-1762-4df4-840e-a503fea9d7aa',\n    '220cc76a-1762-4df4-840e-a503fea9d7bb',\n    '330cc76a-1762-4df4-840e-a503fea9d7cc',\n    '440cc76a-1762-4df4-840e-a503fea9d7dd',\n    '550cc76a-1762-4df4-840e-a503fea9d7ee'\n  ];\n  \n  // Pick a random ID from the sample list\n  return sampleIds[Math.floor(Math.random() * sampleIds.length)];\n}\n\n// Enum for notification types\nexport enum NotificationType {\n  INFO = 'info',\n  SUCCESS = 'success',\n  WARNING = 'warning',\n  ERROR = 'error',\n  NEW_APPLICATION = 'new_application',\n  APPROVAL_REQUIRED = 'approval_required',\n  NEW_MESSAGE = 'new_message',\n  APPLICATION_STATUS_UPDATED = 'application_status_updated',\n  APPLICATION_COMMENT = 'application_comment',\n}\n\n// Interfaces\ninterface Notification {\n  id: string;\n  title: string;\n  message: string;\n  createdAt: Date;\n  read: boolean;\n  type: NotificationType | 'info' | 'success' | 'warning' | 'error';\n  relatedItemId?: string;\n  relatedItemType?: string;\n  data?: any;\n  timestamp?: Date;\n  isRead?: boolean;\n}\n\ninterface NotificationPopupConfig {\n  title: string;\n  message: string;\n  type?: NotificationType | 'info' | 'success' | 'warning' | 'error';\n  duration?: number;\n  playSound?: boolean;\n  soundType?: 'notification' | 'alert' | 'approval';\n  customSound?: string;\n  centerScreen?: boolean;\n}\n\ninterface NotificationContextType {\n  notifications: Notification[];\n  unreadCount: number;\n  addNotification: (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => void;\n  markAsRead: (id: string) => void;\n  markAllAsRead: () => void;\n  clearNotifications: () => void;\n  showPopup: (config: NotificationPopupConfig) => void;\n  soundEnabled: boolean;\n  toggleSound: () => void;\n  setSoundEnabled: (enabled: boolean) => void;\n}\n\nexport const NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user } = useAuth();\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [unreadCount, setUnreadCount] = useState<number>(0);\n  const [soundEnabled, setSoundEnabled] = useState<boolean>(true);\n  \n  // Estado para la notificación emergente actual\n  const [currentPopup, setCurrentPopup] = useState<NotificationPopupConfig | null>(null);\n  \n  // Referencia al ID del polling interval\n  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // State to keep track of already notified application IDs\n  const [notifiedApplicationIds, setNotifiedApplicationIds] = useState<Set<string>>(new Set());\n\n  // Referencia para evitar múltiples ejecuciones simultáneas\n  const checkingRef = useRef<boolean>(false);\n\n  // Efecto para manejar la carga inicial de notificaciones y configurar el polling\n  useEffect(() => {\n    if (user) {\n      // Cargar notificaciones al inicio\n      loadNotifications();\n\n      // Cargar aplicaciones ya notificadas desde localStorage\n      try {\n        const storedIds = localStorage.getItem('notified_application_ids');\n        if (storedIds) {\n          setNotifiedApplicationIds(new Set(JSON.parse(storedIds)));\n        }\n      } catch (error) {\n        console.error('Error cargando aplicaciones notificadas:', error);\n      }\n      \n      // Verificar al inicio si hay solicitudes recientes\n      checkForNewNotifications();\n      \n      // Configurar polling para verificar nuevas notificaciones cada 15 segundos (en lugar de 30)\n      pollingIntervalRef.current = setInterval(() => {\n        checkForNewNotifications();\n      }, 15000);\n      \n      // Limpiar el intervalo cuando el componente se desmonte\n      return () => {\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n        }\n      };\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  // Cálculo de notificaciones no leídas\n  useEffect(() => {\n    const count = notifications.filter(notification => !notification.read).length;\n    setUnreadCount(count);\n  }, [notifications]);\n\n  // Cargar notificaciones del almacenamiento local o del servidor\n  const loadNotifications = async () => {\n    try {\n      // En un escenario real, aquí se cargarían las notificaciones del servidor\n      // Por ahora, usaremos el localStorage como ejemplo\n      const storedNotifications = localStorage.getItem('notifications');\n      if (storedNotifications) {\n        const parsed = JSON.parse(storedNotifications);\n        setNotifications(parsed.map((n: any) => ({\n          ...n,\n          createdAt: new Date(n.createdAt)\n        })));\n      }\n    } catch (error) {\n      console.error('Error cargando notificaciones:', error);\n    }\n  };\n\n  // Verificar nuevas notificaciones en el servidor\n  const checkForNewNotifications = async () => {\n    // Avoid multiple executions at the same time\n    if (checkingRef.current) {\n      console.log('Ya se está ejecutando una verificación de notificaciones');\n      return;\n    }\n    \n    checkingRef.current = true;\n    console.log('Verificando nuevas notificaciones...');\n    \n    try {\n      // Get notifications already shown to avoid duplicates\n      const notifiedIdsArray = Array.from(notifiedApplicationIds);\n      console.log('IDs ya notificados:', notifiedIdsArray);\n      \n      // Query recent applications that haven't been shown yet\n      const response = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: `\n            SELECT id, client_name, application_type, company_name, created_at, status, \n                   amount, term, interest_rate, monthly_payment\n            FROM applications \n            WHERE created_at > NOW() - INTERVAL '24 hours'\n            ${notifiedIdsArray.length > 0 \n              ? `AND id NOT IN ('${notifiedIdsArray.join(\"','\")}')`\n              : ''}\n            ORDER BY created_at DESC\n            LIMIT 1\n          `\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Error al consultar aplicaciones recientes');\n      }\n      \n      const data = await response.json();\n      \n      // Si hay aplicaciones nuevas, mostrar notificación\n      if (data.data && data.data.length > 0) {\n        const newApp = data.data[0];\n        \n        // Verificación final para evitar duplicados\n        if (!notifiedApplicationIds.has(newApp.id)) {\n          console.log('Nueva aplicación detectada:', newApp);\n          \n          // IMPORTANTE: Añadir a la lista de notificados INMEDIATAMENTE antes de procesar\n          // para evitar duplicados incluso si algo falla durante el procesamiento\n          const updatedNotifiedIds = new Set(notifiedApplicationIds);\n          updatedNotifiedIds.add(newApp.id);\n          setNotifiedApplicationIds(updatedNotifiedIds);\n          \n          // Guardar en localStorage para persistencia entre recargas\n          localStorage.setItem('notified_application_ids', \n            JSON.stringify(Array.from(updatedNotifiedIds)));\n            \n          // Formatear datos para la notificación\n          const createdAt = new Date(newApp.created_at);\n          const formattedDate = new Intl.DateTimeFormat('es-MX', {\n            day: '2-digit',\n            month: '2-digit',\n            year: 'numeric'\n          }).format(createdAt);\n          \n          const formattedTime = new Intl.DateTimeFormat('es-MX', {\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: true\n          }).format(createdAt);\n          \n          // Formatear monto con separador de miles y 2 decimales\n          const formattedAmount = new Intl.NumberFormat('es-MX', {\n            style: 'currency',\n            currency: 'MXN',\n            minimumFractionDigits: 2\n          }).format(Number(newApp.amount || 0));\n          \n          // Formatear tasa de interés con símbolo de porcentaje\n          const formattedRate = `${newApp.interest_rate || 0}%`;\n          \n          // Formatear pago mensual\n          const formattedMonthly = new Intl.NumberFormat('es-MX', {\n            style: 'currency',\n            currency: 'MXN',\n            minimumFractionDigits: 2\n          }).format(Number(newApp.monthly_payment || 0));\n          \n          // Transformar tipo de aplicación a un formato más legible\n          let appType = 'No especificado';\n          if (newApp.application_type) {\n            // Elimina cualquier barra diagonal al final si existe\n            const cleanType = newApp.application_type.replace(/\\/$/, '');\n            \n            if (cleanType === 'selected_plans') {\n              appType = 'Planes seleccionados';\n            } else if (cleanType === 'product_simulations') {\n              appType = 'Simulación de producto';\n            } else {\n              appType = cleanType\n                .split('_')\n                .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))\n                .join(' ');\n            }\n          }\n          \n          // Crear un mensaje HTML bien estructurado para el popup\n          const detailedMessage = `\n            <div class=\"grid grid-cols-2 gap-2 text-sm mt-2\">\n              <div class=\"font-semibold text-gray-700\">Cliente:</div>\n              <div class=\"text-gray-900\">${newApp.client_name || 'Sin nombre'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Empresa:</div>\n              <div class=\"text-gray-900\">${newApp.company_name || 'No especificada'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tipo:</div>\n              <div class=\"text-gray-900\">${appType}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Monto:</div>\n              <div class=\"text-gray-900\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${newApp.term || 'N/A'} ${newApp.term === 1 ? 'mes' : 'meses'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Pago mensual:</div>\n              <div class=\"text-gray-900\">${formattedMonthly}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Fecha:</div>\n              <div class=\"text-gray-900\">${formattedDate} ${formattedTime}</div>\n            </div>\n          `;\n          \n          const notificationTitle = '💼 Nueva solicitud recibida';\n          \n          // Crear la notificación para el panel\n          const testNotification = {\n            title: notificationTitle,\n            message: `Cliente: ${newApp.client_name || 'Sin nombre'} - ${newApp.company_name || 'Empresa no especificada'}`,\n            type: NotificationType.NEW_APPLICATION,\n            relatedItemType: 'application',\n            relatedItemId: newApp.id\n          };\n          \n          // Añadir la notificación al panel\n          addNotification(testNotification);\n          \n          // Mostrar popup con detalles completos\n          showPopup({\n            title: notificationTitle,\n            message: detailedMessage,\n            type: NotificationType.NEW_APPLICATION,\n            playSound: soundEnabled,\n            soundType: 'notification',\n            duration: 10000, // 10 segundos\n            customSound: '/sounds/triple-tone.mp3',\n            centerScreen: true\n          });\n        } else {\n          console.log('Aplicación ya notificada previamente:', newApp.id);\n        }\n      } else {\n        console.log('No se encontraron aplicaciones nuevas');\n      }\n      \n      // Simulación: Muy raramente mostrar una notificación de prueba (1% de probabilidad)\n      // Esto solo ocurre si no se encontraron aplicaciones reales nuevas\n      if (Math.random() > 0.99) {\n        const testId = getTestApplicationId();\n        \n        // Evitar mostrar notificaciones de prueba para IDs ya notificados\n        if (!notifiedApplicationIds.has(testId)) {\n          const testNotification = {\n            title: 'Nueva solicitud asignada',\n            message: 'Se ha asignado una nueva solicitud de crédito a tu bandeja',\n            type: NotificationType.NEW_APPLICATION,\n            relatedItemType: 'application',\n            relatedItemId: testId\n          };\n          \n          // Registrar como notificado para evitar duplicados\n          const updatedNotifiedIds = new Set(notifiedApplicationIds);\n          updatedNotifiedIds.add(testId);\n          setNotifiedApplicationIds(updatedNotifiedIds);\n          localStorage.setItem('notified_application_ids', JSON.stringify(Array.from(updatedNotifiedIds)));\n          \n          // Añadir la notificación y mostrar popup\n          addNotification(testNotification);\n          showPopup({\n            ...testNotification,\n            playSound: soundEnabled,\n            soundType: 'notification'\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error al verificar nuevas notificaciones:', error);\n    } finally {\n      // Independientemente del resultado, marcar como no en ejecución\n      checkingRef.current = false;\n    }\n  };\n\n  // Añadir una nueva notificación\n  const addNotification = (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => {\n    const newNotification: Notification = {\n      ...notification,\n      // Using a proper UUID for the notification ID\n      id: generateUUID(),\n      createdAt: new Date(),\n      read: false,\n      timestamp: new Date()\n    };\n    \n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Guardar en localStorage (en producción esto iría al servidor)\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar una notificación como leída\n  const markAsRead = (id: string) => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => \n        notification.id === id \n          ? { ...notification, read: true, isRead: true } \n          : notification\n      );\n      \n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar todas las notificaciones como leídas\n  const markAllAsRead = () => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => ({ ...notification, read: true, isRead: true }));\n      \n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Limpiar todas las notificaciones\n  const clearNotifications = () => {\n    setNotifications([]);\n    // Limpiar del localStorage\n    localStorage.setItem('notifications', JSON.stringify([]));\n  };\n\n  // Mostrar una notificación emergente\n  const showPopup = (config: NotificationPopupConfig) => {\n    setCurrentPopup(config);\n    \n    // Automáticamente cerrar el popup después de la duración especificada\n    setTimeout(() => {\n      setCurrentPopup(null);\n    }, config.duration || 5000);\n  };\n\n  // Activar/desactivar sonidos de notificación\n  const toggleSound = () => {\n    const newValue = !soundEnabled;\n    setSoundEnabled(newValue);\n    // Guardar preferencia en localStorage\n    localStorage.setItem('notification_sound_enabled', newValue.toString());\n  };\n\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    showPopup,\n    soundEnabled,\n    toggleSound,\n    setSoundEnabled\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n      {currentPopup && (\n        <NotificationPopup\n          title={currentPopup.title}\n          message={currentPopup.message}\n          type={currentPopup.type as any}\n          duration={currentPopup.duration}\n          playSound={currentPopup.playSound}\n          soundType={currentPopup.soundType}\n          customSound={currentPopup.customSound}\n          onClose={() => setCurrentPopup(null)}\n        />\n      )}\n    </NotificationContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}