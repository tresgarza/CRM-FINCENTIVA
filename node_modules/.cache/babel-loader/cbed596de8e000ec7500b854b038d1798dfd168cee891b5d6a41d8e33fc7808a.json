{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\n\n// Constantes para almacenamiento\nconst STORAGE_KEY_TOKEN = 'crm_token';\n\n// Initialize the Supabase client\nexport const supabase = createClient(process.env.REACT_APP_SUPABASE_URL || 'your-supabase-url', process.env.REACT_APP_SUPABASE_ANON_KEY || 'your-supabase-anon-key');\n\n// Get a Supabase client with the auth token if available\nexport const getAuthenticatedClient = () => {\n  const token = localStorage.getItem(STORAGE_KEY_TOKEN);\n  if (token) {\n    // Return a client with the auth token for authenticated access\n    return createClient(process.env.REACT_APP_SUPABASE_URL || 'your-supabase-url', process.env.REACT_APP_SUPABASE_ANON_KEY || 'your-supabase-anon-key', {\n      global: {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }\n    });\n  }\n\n  // Fall back to the default client if no token is available\n  return supabase;\n};\n\n// Export a method to get access to Supabase Storage\nexport const getStorage = () => supabase.storage;","map":{"version":3,"names":["createClient","STORAGE_KEY_TOKEN","supabase","process","env","REACT_APP_SUPABASE_URL","REACT_APP_SUPABASE_ANON_KEY","getAuthenticatedClient","token","localStorage","getItem","global","headers","Authorization","getStorage","storage"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/lib/supabaseClient.ts"],"sourcesContent":["import { createClient, SupabaseClient } from '@supabase/supabase-js';\n\n// Constantes para almacenamiento\nconst STORAGE_KEY_TOKEN = 'crm_token';\n\n// Initialize the Supabase client\nexport const supabase = createClient(\n  process.env.REACT_APP_SUPABASE_URL || 'your-supabase-url',\n  process.env.REACT_APP_SUPABASE_ANON_KEY || 'your-supabase-anon-key'\n);\n\n// Get a Supabase client with the auth token if available\nexport const getAuthenticatedClient = (): SupabaseClient => {\n  const token = localStorage.getItem(STORAGE_KEY_TOKEN);\n  \n  if (token) {\n    // Return a client with the auth token for authenticated access\n    return createClient(\n      process.env.REACT_APP_SUPABASE_URL || 'your-supabase-url',\n      process.env.REACT_APP_SUPABASE_ANON_KEY || 'your-supabase-anon-key',\n      {\n        global: {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        }\n      }\n    );\n  }\n  \n  // Fall back to the default client if no token is available\n  return supabase;\n};\n\n// Export a method to get access to Supabase Storage\nexport const getStorage = () => supabase.storage; "],"mappings":"AAAA,SAASA,YAAY,QAAwB,uBAAuB;;AAEpE;AACA,MAAMC,iBAAiB,GAAG,WAAW;;AAErC;AACA,OAAO,MAAMC,QAAQ,GAAGF,YAAY,CAClCG,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,mBAAmB,EACzDF,OAAO,CAACC,GAAG,CAACE,2BAA2B,IAAI,wBAC7C,CAAC;;AAED;AACA,OAAO,MAAMC,sBAAsB,GAAGA,CAAA,KAAsB;EAC1D,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAACT,iBAAiB,CAAC;EAErD,IAAIO,KAAK,EAAE;IACT;IACA,OAAOR,YAAY,CACjBG,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,mBAAmB,EACzDF,OAAO,CAACC,GAAG,CAACE,2BAA2B,IAAI,wBAAwB,EACnE;MACEK,MAAM,EAAE;QACNC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUL,KAAK;QAChC;MACF;IACF,CACF,CAAC;EACH;;EAEA;EACA,OAAON,QAAQ;AACjB,CAAC;;AAED;AACA,OAAO,MAAMY,UAAU,GAAGA,CAAA,KAAMZ,QAAQ,CAACa,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}