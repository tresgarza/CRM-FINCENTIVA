{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/components/ui/KanbanBoard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getApprovalStatus, approveByAdvisor, approveByCompany } from '../../services/applicationService';\nimport { APPLICATION_STATUS, STATUS_LABELS } from '../../utils/constants/statuses';\nimport { usePermissions } from '../../contexts/PermissionsContext';\nimport { useAuth } from '../../contexts/AuthContext';\n\n// Función para escapar cadenas de texto para SQL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction escapeSQLString(str) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\n// Interfaz para el estado de aprobación\n\n// Crear un tipo para aplicaciones con su estado de aprobación\n\nconst KanbanBoard = ({\n  applications = [],\n  onStatusChange\n}) => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const {\n    isAdvisor,\n    isCompanyAdmin\n  } = usePermissions();\n  const [dragOverColumn, setDragOverColumn] = useState(null);\n  const [processingAppId, setProcessingAppId] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [autoTransitionMessage, setAutoTransitionMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Referencias para drag and drop\n  const dragItemRef = useRef(null);\n  const dragImageRef = useRef(null);\n  const draggedItemIndexRef = useRef(-1);\n  const draggedItemNewStatusRef = useRef('');\n\n  // Inicializar como un array vacío para evitar errores de undefined\n  const [appsWithApproval, setAppsWithApproval] = useState([]);\n\n  // Cargar estados de aprobación para todas las aplicaciones - Mejorado con manejo de errores\n  useEffect(() => {\n    const loadApprovalStatuses = async () => {\n      if (!applications || applications.length === 0 || !user) {\n        console.log(\"No hay aplicaciones para cargar o usuario no está autenticado\");\n        setAppsWithApproval([]);\n        return;\n      }\n      setIsLoading(true);\n      try {\n        console.log(`Cargando estados de aprobación para ${applications.length} aplicaciones...`);\n\n        // Crear copias profundas para evitar modificar el original\n        const appsWithStatus = JSON.parse(JSON.stringify(applications));\n\n        // Para cada aplicación, obtener su estado de aprobación\n        const approvalPromises = appsWithStatus.map(async app => {\n          try {\n            if (!app.id) {\n              console.warn(\"Aplicación sin ID encontrada, omitiendo...\");\n              app.approvalStatus = {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              };\n              return app;\n            }\n            const status = await getApprovalStatus(app.id);\n            if (status) {\n              app.approvalStatus = status;\n            } else {\n              app.approvalStatus = {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              };\n            }\n            return app;\n          } catch (error) {\n            console.error(`Error al obtener estado de aprobación para aplicación ${app.id}:`, error);\n            // Proporcionar un valor predeterminado para evitar errores\n            app.approvalStatus = {\n              approvedByAdvisor: false,\n              approvedByCompany: false\n            };\n            return app;\n          }\n        });\n\n        // Esperar a que todas las promesas se resuelvan\n        const resolvedApps = await Promise.all(approvalPromises);\n        console.log(`Estados de aprobación cargados para ${resolvedApps.length} aplicaciones`);\n\n        // Actualizar estado con las aplicaciones y sus estados de aprobación\n        setAppsWithApproval(resolvedApps);\n      } catch (error) {\n        console.error(\"Error al cargar estados de aprobación:\", error);\n        // En caso de error, usar las aplicaciones sin estados de aprobación pero con valores por defecto\n        const defaultApps = applications.map(app => ({\n          ...app,\n          approvalStatus: {\n            approvedByAdvisor: false,\n            approvedByCompany: false\n          }\n        }));\n        setAppsWithApproval(defaultApps);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadApprovalStatuses();\n  }, [applications, user]);\n\n  // Actualizar la lógica para nuevas aplicaciones para incluir todas las nuevas notificaciones\n  useEffect(() => {\n    // Verificar si hay aplicaciones que deberían estar en \"nuevo\" (recién creadas)\n    const newApplications = applications.filter(app => {\n      // Identificar aplicaciones recién creadas (menos de 24 horas)\n      const isNew = !app.status || app.status === 'pending' || app.status === 'solicitud';\n      const createdAt = new Date(app.created_at);\n      const now = new Date();\n      const hoursElapsed = (now.getTime() - createdAt.getTime()) / (1000 * 60 * 60);\n      const isRecent = hoursElapsed < 24;\n      return isRecent && (isNew || app.status === 'new');\n    });\n\n    // Si hay aplicaciones nuevas sin status o con status pendiente/solicitud, asignarles \"nuevo\"\n    if (newApplications.length > 0) {\n      console.log('Aplicaciones nuevas detectadas:', newApplications);\n      const updatedApps = [...appsWithApproval];\n      newApplications.forEach(newApp => {\n        const index = updatedApps.findIndex(app => app.id === newApp.id);\n        if (index !== -1 && (!updatedApps[index].status || updatedApps[index].status === 'pending' || updatedApps[index].status === 'solicitud')) {\n          updatedApps[index] = {\n            ...updatedApps[index],\n            status: APPLICATION_STATUS.NEW\n          };\n          console.log(`Aplicación ${newApp.id} movida a estado NUEVO`);\n        }\n      });\n      setAppsWithApproval(updatedApps);\n    }\n  }, [applications]); // Usar applications como dependencia en lugar de appsWithApproval\n\n  // Asegurar que nuevas aplicaciones se muestren inmediatamente\n  // añadiendo una función de comprobación en el useEffect principal\n  useEffect(() => {\n    const checkForNewApplications = async () => {\n      // Verificar que tenemos usuario y permisos\n      if (!(user !== null && user !== void 0 && user.id)) return;\n      try {\n        // Ejecutar esta comprobación solo si somos admin de empresa\n        if (isCompanyAdmin() && applications.length > 0) {\n          // Obtener la fecha de hace 24 horas\n          const oneDayAgo = new Date();\n          oneDayAgo.setHours(oneDayAgo.getHours() - 24);\n\n          // Buscar aplicaciones creadas en las últimas 24 horas\n          const recentApps = applications.filter(app => {\n            const createdAt = new Date(app.created_at);\n            return createdAt >= oneDayAgo;\n          });\n\n          // Si hay aplicaciones recientes, asegurarnos de que aparezcan en el tablero\n          if (recentApps.length > 0) {\n            console.log(`Encontradas ${recentApps.length} aplicaciones recientes`);\n\n            // Asegurar que todas estas aplicaciones están en nuestro estado local\n            // y que tienen el estado correcto (NEW si no tienen un estado específico)\n            const updatedApps = [...appsWithApproval];\n            let hasChanges = false;\n            recentApps.forEach(recentApp => {\n              const index = updatedApps.findIndex(app => app.id === recentApp.id);\n\n              // Si la aplicación no está en nuestro estado, agregarla\n              if (index === -1) {\n                console.log(`Agregando aplicación nueva ${recentApp.id} al estado`);\n                updatedApps.push({\n                  ...recentApp,\n                  status: recentApp.status || APPLICATION_STATUS.NEW,\n                  approvalStatus: {\n                    approvedByAdvisor: recentApp.approved_by_advisor || false,\n                    approvedByCompany: recentApp.approved_by_company || false\n                  }\n                });\n                hasChanges = true;\n              }\n              // Si no tiene estado o está en estado pendiente/solicitud, asignarle NEW\n              else if (!updatedApps[index].status || updatedApps[index].status === 'pending' || updatedApps[index].status === 'solicitud') {\n                console.log(`Actualizando estado de ${recentApp.id} a NUEVO`);\n                updatedApps[index] = {\n                  ...updatedApps[index],\n                  status: APPLICATION_STATUS.NEW\n                };\n                hasChanges = true;\n              }\n            });\n\n            // Actualizar el estado solo si hubo cambios\n            if (hasChanges) {\n              setAppsWithApproval(updatedApps);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error verificando nuevas aplicaciones:', error);\n      }\n    };\n\n    // Ejecutar la función de comprobación\n    checkForNewApplications();\n  }, [applications, user === null || user === void 0 ? void 0 : user.id, isCompanyAdmin]);\n\n  // Modificar la lógica para actualizar todas las aplicaciones con estado \"pending\" o \"solicitud\" a \"new\"\n  useEffect(() => {\n    // Si no hay aplicaciones, no hacer nada\n    if (!applications || applications.length === 0) return;\n    console.log('Verificando estado de aplicaciones:', applications.map(a => ({\n      id: a.id,\n      status: a.status\n    })));\n\n    // Actualizar solo las aplicaciones con estado específico a \"new\" sin afectar las demás\n    const updatedApps = [...appsWithApproval];\n    let hasChanges = false;\n    applications.forEach(app => {\n      const index = updatedApps.findIndex(a => a.id === app.id);\n      const needsUpdate = !app.status || app.status === 'pending' || app.status === 'solicitud';\n\n      // Solo actualizar si el estado necesita cambiar a \"new\"\n      if (index !== -1 && needsUpdate) {\n        console.log(`Actualizando estado de aplicación ${app.id} de \"${app.status}\" a \"new\"`);\n        updatedApps[index] = {\n          ...updatedApps[index],\n          status: APPLICATION_STATUS.NEW\n        };\n        hasChanges = true;\n      } else if (index === -1) {\n        // Si la aplicación no está en el array, agregarla con su estado original\n        // o \"new\" si no tiene estado o es pending/solicitud\n        const newStatus = needsUpdate ? APPLICATION_STATUS.NEW : app.status;\n        console.log(`Agregando aplicación ${app.id} con estado \"${newStatus}\"`);\n        updatedApps.push({\n          ...app,\n          status: newStatus,\n          approvalStatus: {\n            approvedByAdvisor: app.approved_by_advisor || false,\n            approvedByCompany: app.approved_by_company || false\n          }\n        });\n        hasChanges = true;\n      }\n      // Si existe y no necesita actualización, la dejamos como está\n    });\n    if (hasChanges) {\n      console.log('Actualizando aplicaciones:');\n      updatedApps.forEach(app => console.log(`- ${app.id}: ${app.status}`));\n      setAppsWithApproval(updatedApps);\n    }\n  }, [applications]);\n\n  // Organizar aplicaciones por estatus - Completamente rediseñado para mayor robustez\n  const groupedApplications = useMemo(() => {\n    // Verificaciones iniciales para evitar errores\n    if (!applications || applications.length === 0 || !user) {\n      console.log(\"No hay aplicaciones para agrupar o usuario no autenticado\");\n\n      // Devolver un objeto vacío pero inicializado con todos los estados posibles\n      const emptyGroups = {};\n      Object.values(APPLICATION_STATUS).forEach(status => {\n        emptyGroups[status] = [];\n      });\n      return emptyGroups;\n    }\n    console.log(\"Agrupando aplicaciones en el Kanban...\", applications);\n\n    // Crear un objeto con todos los estados posibles como claves\n    const statusGroups = {};\n\n    // Paso 1: Inicializar TODOS los estados posibles para evitar undefined\n    Object.values(APPLICATION_STATUS).forEach(status => {\n      statusGroups[status] = [];\n    });\n\n    // Paso 2: Encontrar cualquier estado adicional que pueda existir en las aplicaciones\n    // y también inicializarlo para evitar undefined\n    applications.forEach(app => {\n      if (app.status && !statusGroups[app.status]) {\n        console.log(`Inicializando grupo para estado adicional: ${app.status}`);\n        statusGroups[app.status] = [];\n      }\n    });\n\n    // Paso 3: Agrupar aplicaciones según el rol del usuario y reglas de negocio\n    const appsToGroup = Array.isArray(appsWithApproval) ? appsWithApproval : [];\n    if (appsToGroup.length === 0) {\n      console.log(\"No hay aplicaciones con estado de aprobación para agrupar\");\n      return statusGroups;\n    }\n    console.log(`Agrupando ${appsToGroup.length} aplicaciones con estado de aprobación`);\n\n    // Función de ayuda para verificar y registrar errores\n    const safelyAddToGroup = (app, targetStatus) => {\n      if (!statusGroups[targetStatus]) {\n        console.error(`Error: Grupo de estado '${targetStatus}' no está inicializado`);\n        // Inicializar si no existe para evitar errores\n        statusGroups[targetStatus] = [];\n      }\n      statusGroups[targetStatus].push(app);\n      return true;\n    };\n    appsToGroup.forEach(app => {\n      var _app$approvalStatus, _app$approvalStatus2;\n      // Verificar que la aplicación tenga un estado válido\n      if (!app.status) {\n        console.warn(`Aplicación ${app.id} sin estado, asignando a NEW por defecto`);\n        app.status = APPLICATION_STATUS.NEW;\n      }\n\n      // Verificar si la aplicación está aprobada por ambos (asesor y empresa)\n      const hasBothApprovals = ((_app$approvalStatus = app.approvalStatus) === null || _app$approvalStatus === void 0 ? void 0 : _app$approvalStatus.approvedByAdvisor) && ((_app$approvalStatus2 = app.approvalStatus) === null || _app$approvalStatus2 === void 0 ? void 0 : _app$approvalStatus2.approvedByCompany);\n\n      // Estados terminales donde las aplicaciones no se mueven automáticamente\n      const isTerminalStatus = [APPLICATION_STATUS.COMPLETED, APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.REJECTED].includes(app.status);\n\n      // Mover automáticamente a Por Dispersar si tiene ambas aprobaciones y no está en estado terminal\n      if (hasBothApprovals && !isTerminalStatus && app.status !== APPLICATION_STATUS.POR_DISPERSAR) {\n        console.log(`Aplicación ${app.id} con ambas aprobaciones -> POR_DISPERSAR`);\n        safelyAddToGroup(app, APPLICATION_STATUS.POR_DISPERSAR);\n      }\n      // En todos los demás casos, mostrar en su estado actual\n      else if (app.status) {\n        console.log(`Aplicación ${app.id} en estado ${app.status}`);\n        safelyAddToGroup(app, app.status);\n      }\n      // Fallback por si algún estado no está definido\n      else {\n        console.warn(`Aplicación ${app.id} sin estado reconocido, asignando a NEW`);\n        safelyAddToGroup(app, APPLICATION_STATUS.NEW);\n      }\n    });\n\n    // Debug: Verificar las aplicaciones en cada grupo\n    Object.entries(statusGroups).forEach(([status, apps]) => {\n      console.log(`Grupo ${status}: ${apps.length} aplicaciones`);\n    });\n\n    // Debug: Verificar aplicaciones con ambas aprobaciones\n    console.log(\"Aplicaciones con ambas aprobaciones:\");\n    appsToGroup.forEach(app => {\n      var _app$approvalStatus3, _app$approvalStatus4;\n      if ((_app$approvalStatus3 = app.approvalStatus) !== null && _app$approvalStatus3 !== void 0 && _app$approvalStatus3.approvedByAdvisor && (_app$approvalStatus4 = app.approvalStatus) !== null && _app$approvalStatus4 !== void 0 && _app$approvalStatus4.approvedByCompany) {\n        var _Object$entries$find;\n        const foundInGroup = (_Object$entries$find = Object.entries(statusGroups).find(([_, apps]) => apps.some(a => a.id === app.id))) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0];\n        console.log(`ID: ${app.id}, Status: ${app.status}, En columna: ${foundInGroup || 'No encontrado'}`);\n      }\n    });\n    return statusGroups;\n  }, [applications, appsWithApproval, user]);\n\n  // Modificar la lógica de agrupamiento de aplicaciones para separar flujos\n  // Esta es la parte clave que separa completamente los flujos\n  const columns = useMemo(() => {\n    // Estados estándar del Kanban\n    const statusGroups = {\n      [APPLICATION_STATUS.NEW]: [],\n      [APPLICATION_STATUS.IN_REVIEW]: [],\n      [APPLICATION_STATUS.APPROVED]: [],\n      [APPLICATION_STATUS.POR_DISPERSAR]: [],\n      [APPLICATION_STATUS.COMPLETED]: [],\n      [APPLICATION_STATUS.EXPIRED]: [],\n      [APPLICATION_STATUS.REJECTED]: [],\n      [APPLICATION_STATUS.CANCELLED]: []\n    };\n\n    // Agrupar aplicaciones por estado\n    appsWithApproval.forEach(app => {\n      var _app$approvalStatus5, _app$approvalStatus6;\n      // CRUCIAL FIX: Siempre mover a Por Dispersar si tiene ambas aprobaciones\n      // y no está en un estado terminal (completado, expirado, cancelado, rechazado)\n      if ((_app$approvalStatus5 = app.approvalStatus) !== null && _app$approvalStatus5 !== void 0 && _app$approvalStatus5.approvedByAdvisor && (_app$approvalStatus6 = app.approvalStatus) !== null && _app$approvalStatus6 !== void 0 && _app$approvalStatus6.approvedByCompany) {\n        const finalStates = [APPLICATION_STATUS.COMPLETED, APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.REJECTED];\n        if (!finalStates.includes(app.status)) {\n          console.log(`Aplicación ${app.id} con ambas aprobaciones: moviendo a Por Dispersar`);\n          statusGroups[APPLICATION_STATUS.POR_DISPERSAR].push(app);\n          return; // Importante: salir para no procesar más esta aplicación\n        }\n      }\n\n      // Lógica específica para administradores de empresa - flujo independiente\n      if (isCompanyAdmin()) {\n        var _app$approvalStatus7, _app$approvalStatus8, _app$approvalStatus9;\n        // Para admin de empresa, la lógica es:\n        // 1. Si está aprobada por empresa -> va a \"Aprobado por mi\"\n        if ((_app$approvalStatus7 = app.approvalStatus) !== null && _app$approvalStatus7 !== void 0 && _app$approvalStatus7.approvedByCompany && !((_app$approvalStatus8 = app.approvalStatus) !== null && _app$approvalStatus8 !== void 0 && _app$approvalStatus8.approvedByAdvisor)) {\n          statusGroups[APPLICATION_STATUS.APPROVED].push(app);\n        }\n        // 2. Si está en revisión por empresa -> va a \"En Revisión\"\n        else if (app.company_review_status) {\n          statusGroups[APPLICATION_STATUS.IN_REVIEW].push(app);\n        }\n        // 3. Si no está ni en revisión ni aprobada por empresa -> va a \"Nuevo\"\n        else if (app.status === APPLICATION_STATUS.NEW || app.status === APPLICATION_STATUS.PENDING || !app.company_review_status && !((_app$approvalStatus9 = app.approvalStatus) !== null && _app$approvalStatus9 !== void 0 && _app$approvalStatus9.approvedByCompany)) {\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n        // El resto va a su estado correspondiente\n        else if (app.status) {\n          // Todos los demás estados (por_dispersar, completado, etc.) van a su columna normal\n          statusGroups[app.status].push(app);\n        }\n      }\n      // Lógica para asesores - flujo normal basado en estado real\n      else if (isAdvisor()) {\n        if (app.status) {\n          // Usar el estado real de la aplicación para agruparla\n          statusGroups[app.status].push(app);\n        } else {\n          // Si no tiene estado, ponerla en \"Nuevo\"\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      // Lógica para otros roles\n      else {\n        if (app.status) {\n          statusGroups[app.status].push(app);\n        } else {\n          // Si no tiene estado, ponerla en \"Nuevo\"\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n    });\n\n    // Definición de colores para cada columna\n    const columnDefinitions = [{\n      id: APPLICATION_STATUS.NEW,\n      title: 'Nuevo',\n      color: 'warning',\n      applications: statusGroups[APPLICATION_STATUS.NEW]\n    }, {\n      id: APPLICATION_STATUS.IN_REVIEW,\n      title: 'En Revisión',\n      color: 'info',\n      applications: statusGroups[APPLICATION_STATUS.IN_REVIEW]\n    }, {\n      id: APPLICATION_STATUS.APPROVED,\n      title: 'Aprobado por mi',\n      color: 'success',\n      applications: statusGroups[APPLICATION_STATUS.APPROVED]\n    }, {\n      id: APPLICATION_STATUS.POR_DISPERSAR,\n      title: 'Por Dispersar',\n      color: 'accent',\n      applications: statusGroups[APPLICATION_STATUS.POR_DISPERSAR]\n    }, {\n      id: APPLICATION_STATUS.COMPLETED,\n      title: 'Completado',\n      color: 'primary',\n      applications: statusGroups[APPLICATION_STATUS.COMPLETED]\n    }, {\n      id: APPLICATION_STATUS.EXPIRED,\n      title: 'Expirado',\n      color: 'error',\n      applications: statusGroups[APPLICATION_STATUS.EXPIRED]\n    }, {\n      id: APPLICATION_STATUS.REJECTED,\n      title: 'Rechazado',\n      color: 'error',\n      applications: statusGroups[APPLICATION_STATUS.REJECTED]\n    }, {\n      id: APPLICATION_STATUS.CANCELLED,\n      title: 'Cancelado',\n      color: 'neutral',\n      applications: statusGroups[APPLICATION_STATUS.CANCELLED]\n    }];\n    return columnDefinitions;\n  }, [appsWithApproval, isAdvisor, isCompanyAdmin]);\n\n  // Función para actualizar localmente el estado de aprobación de una aplicación\n  const updateLocalApprovalStatus = (applicationId, updates) => {\n    setAppsWithApproval(prev => prev.map(app => app.id === applicationId ? {\n      ...app,\n      approvalStatus: {\n        ...(app.approvalStatus || {\n          approvedByAdvisor: false,\n          approvedByCompany: false\n        }),\n        ...updates\n      }\n    } : app));\n  };\n  const handleDragStart = (e, application, idx) => {\n    // Guardar la aplicación que estamos arrastrando\n    draggedItemIndexRef.current = idx;\n\n    // Almacenar el elemento que estamos arrastrando para gestionar mejor el evento\n    dragItemRef.current = e.currentTarget;\n\n    // Establecer los datos que queremos transferir\n    e.dataTransfer.setData('text/plain', application.id);\n    e.dataTransfer.effectAllowed = 'move';\n\n    // Crear una copia visual para el arrastre\n    if (!dragImageRef.current) {\n      dragImageRef.current = e.currentTarget.cloneNode(true);\n      dragImageRef.current.style.position = 'absolute';\n      dragImageRef.current.style.top = '-1000px';\n      dragImageRef.current.style.opacity = '0.8';\n      dragImageRef.current.style.transform = 'scale(0.9)';\n      dragImageRef.current.style.width = `${e.currentTarget.offsetWidth}px`;\n      document.body.appendChild(dragImageRef.current);\n    }\n\n    // Establecer la imagen de arrastre\n    if (dragImageRef.current) {\n      const rect = e.currentTarget.getBoundingClientRect();\n      e.dataTransfer.setDragImage(dragImageRef.current, rect.width / 2, 20);\n    }\n\n    // Añadir clase CSS para mostrar visualmente que el elemento está siendo arrastrado\n    if (e.currentTarget) {\n      e.currentTarget.classList.add('dragging');\n    }\n  };\n  const handleDragEnd = e => {\n    // Eliminar clase CSS de arrastre\n    if (dragItemRef.current) {\n      dragItemRef.current.classList.remove('dragging');\n      dragItemRef.current = null;\n    }\n    if (e.currentTarget) {\n      e.currentTarget.classList.remove('dragging');\n    }\n\n    // Eliminar el elemento clonado para el arrastre\n    if (dragImageRef.current) {\n      document.body.removeChild(dragImageRef.current);\n      dragImageRef.current = null;\n    }\n    draggedItemIndexRef.current = -1;\n    draggedItemNewStatusRef.current = '';\n  };\n  const handleDragOver = (e, columnStatus) => {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = 'move';\n\n    // Guardar el nuevo estado para la actualización optimista\n    if (draggedItemNewStatusRef.current !== columnStatus) {\n      draggedItemNewStatusRef.current = columnStatus;\n    }\n\n    // Añadir clase visual para indicar la columna destino\n    if (e.currentTarget.classList.contains('kanban-column')) {\n      document.querySelectorAll('.kanban-column').forEach(col => {\n        col.classList.remove('drag-over');\n      });\n      e.currentTarget.classList.add('drag-over');\n    }\n  };\n\n  // Función para determinar si una tarjeta puede ser arrastrada\n  const canDragCard = app => {\n    // No permitir arrastrar si la tarjeta está en procesamiento\n    if (app.id === processingAppId) {\n      return false;\n    }\n\n    // Asesores pueden mover cualquier tarjeta excepto las que están procesándose\n    if (isAdvisor()) {\n      var _app$approvalStatus10, _app$approvalStatus11;\n      // No permitir mover tarjetas con ambas aprobaciones o en estados finales\n      const restrictedStatuses = [APPLICATION_STATUS.POR_DISPERSAR, APPLICATION_STATUS.COMPLETED, APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED];\n      if (restrictedStatuses.includes(app.status)) {\n        return false;\n      }\n\n      // Si tiene ambas aprobaciones y está en estado aprobado, no se debería poder mover\n      if ((_app$approvalStatus10 = app.approvalStatus) !== null && _app$approvalStatus10 !== void 0 && _app$approvalStatus10.approvedByAdvisor && (_app$approvalStatus11 = app.approvalStatus) !== null && _app$approvalStatus11 !== void 0 && _app$approvalStatus11.approvedByCompany && app.status === APPLICATION_STATUS.APPROVED) {\n        return false;\n      }\n      return true;\n    }\n\n    // Admins de empresa solo pueden mover tarjetas entre Nuevo, En Revisión y Aprobado por mí\n    if (isCompanyAdmin()) {\n      var _app$approvalStatus12, _app$approvalStatus13;\n      // Estados que nunca pueden moverse por ningún rol\n      const restrictedStatuses = [APPLICATION_STATUS.POR_DISPERSAR, APPLICATION_STATUS.COMPLETED, APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.REJECTED];\n\n      // No permitir mover tarjetas en estados restringidos\n      if (restrictedStatuses.includes(app.status)) {\n        return false;\n      }\n\n      // Si ya está aprobada por ambos, no se debería poder mover\n      if ((_app$approvalStatus12 = app.approvalStatus) !== null && _app$approvalStatus12 !== void 0 && _app$approvalStatus12.approvedByAdvisor && (_app$approvalStatus13 = app.approvalStatus) !== null && _app$approvalStatus13 !== void 0 && _app$approvalStatus13.approvedByCompany) {\n        return false;\n      }\n      return true;\n    }\n\n    // Para otros roles, no permitir arrastrar\n    return false;\n  };\n\n  // Modificar handleDrop para manejar correctamente el flujo independiente\n  const handleDrop = async (e, newStatus) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Eliminar todas las clases de arrastre\n    document.querySelectorAll('.kanban-column').forEach(col => {\n      col.classList.remove('drag-over');\n    });\n\n    // Recuperar el ID de la aplicación\n    const applicationId = e.dataTransfer.getData('text/plain');\n    if (!applicationId || !(user !== null && user !== void 0 && user.id)) return;\n    const application = appsWithApproval.find(app => app.id === applicationId);\n    if (!application) return;\n    const oldStatus = application.status;\n\n    // No hacer nada si el estatus es el mismo\n    if (oldStatus === newStatus) return;\n    console.log(`Intentando mover tarjeta ${applicationId} de ${oldStatus} a ${newStatus}`);\n\n    // Establecer el ID de la aplicación que se está procesando\n    setProcessingAppId(applicationId);\n    try {\n      // Para administradores de empresa (FLUJO INDEPENDIENTE)\n      if (isCompanyAdmin()) {\n        // El admin de empresa solo puede mover tarjetas entre estos estados\n        const allowedTargetStates = [APPLICATION_STATUS.NEW, APPLICATION_STATUS.IN_REVIEW, APPLICATION_STATUS.APPROVED];\n\n        // Si intenta mover a un estado que no está permitido\n        if (!allowedTargetStates.includes(newStatus)) {\n          setErrorMessage(`No puedes mover solicitudes al estado \"${STATUS_LABELS[newStatus]}\". Solo puedes mover entre Nuevo, En Revisión y Aprobado por mí.`);\n          setProcessingAppId(null);\n          return;\n        }\n\n        // Estados que nunca pueden ser movidos por un admin de empresa\n        const restrictedStatuses = [APPLICATION_STATUS.POR_DISPERSAR, APPLICATION_STATUS.COMPLETED, APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.REJECTED];\n\n        // Si la tarjeta está en un estado restringido, no permitir moverla\n        if (restrictedStatuses.includes(oldStatus)) {\n          setErrorMessage(`No puedes mover solicitudes que están en estado \"${STATUS_LABELS[oldStatus]}\".`);\n          setProcessingAppId(null);\n          return;\n        }\n\n        // Actualización optimista en UI para mejor fluidez\n        const updatedApps = [...appsWithApproval];\n        const appIndex = updatedApps.findIndex(app => app.id === applicationId);\n        if (appIndex !== -1) {\n          // Crear copia profunda para evitar referencias\n          const updatedApp = {\n            ...updatedApps[appIndex],\n            isMoving: true,\n            targetStatus: newStatus\n          };\n          if (newStatus === APPLICATION_STATUS.NEW) {\n            // Mover a Nuevo\n            updatedApp.company_review_status = false;\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              }),\n              approvedByCompany: false\n            };\n          } else if (newStatus === APPLICATION_STATUS.IN_REVIEW) {\n            // Mover a En Revisión\n            updatedApp.company_review_status = true;\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              }),\n              approvedByCompany: false\n            };\n          } else if (newStatus === APPLICATION_STATUS.APPROVED) {\n            // Mover a Aprobado por mí\n            updatedApp.company_review_status = true; // Se considera revisado si está aprobado\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              }),\n              approvedByCompany: true\n            };\n\n            // Llamar a la API para aprobar por empresa\n            if (user !== null && user !== void 0 && user.entityId && application.company_id) {\n              try {\n                await approveByCompany(applicationId, \"Aprobado vía Kanban\", user.entityId, application.company_id, null).then(async () => {\n                  // Verificar si la aplicación ya está aprobada por el asesor\n                  const approvalStatus = await getApprovalStatus(applicationId);\n\n                  // Si está aprobada por ambos, mover automáticamente a \"por_dispersar\"\n                  if (approvalStatus !== null && approvalStatus !== void 0 && approvalStatus.approvedByAdvisor && approvalStatus !== null && approvalStatus !== void 0 && approvalStatus.approvedByCompany) {\n                    // Actualizar en memoria el estado de aprobación\n                    updatedApp.approvalStatus = {\n                      approvedByAdvisor: true,\n                      approvedByCompany: true\n                    };\n\n                    // Mostrar notificación de transición automática\n                    setAutoTransitionMessage(`La solicitud ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR]}\"`);\n\n                    // Actualizar el estado objetivo para la animación\n                    updatedApp.targetStatus = APPLICATION_STATUS.POR_DISPERSAR;\n\n                    // Cambiar el estado a \"por_dispersar\" después de un breve retraso\n                    setTimeout(() => {\n                      if (onStatusChange) {\n                        onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                      }\n                      // Limpiar el mensaje después de mostrar\n                      setTimeout(() => setAutoTransitionMessage(null), 3000);\n                    }, 500);\n                  }\n                });\n              } catch (error) {\n                console.error(\"Error al aprobar por empresa:\", error);\n                setErrorMessage(`Error al aprobar: ${error.message}`);\n              }\n            }\n          }\n\n          // Actualizar la app en el estado\n          updatedApps[appIndex] = updatedApp;\n          setAppsWithApproval(updatedApps);\n\n          // Refrescar el estado de aprobación después de unos segundos para asegurar sincronización\n          setTimeout(async () => {\n            const refreshedStatus = await getApprovalStatus(applicationId);\n            if (refreshedStatus) {\n              updateLocalApprovalStatus(applicationId, {\n                approvedByAdvisor: refreshedStatus.approvedByAdvisor,\n                approvedByCompany: refreshedStatus.approvedByCompany\n              });\n\n              // Si tiene ambas aprobaciones, asegurar que se mueva a POR_DISPERSAR\n              if (refreshedStatus.approvedByAdvisor && refreshedStatus.approvedByCompany) {\n                if (onStatusChange) {\n                  onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                }\n              }\n            }\n            setProcessingAppId(null);\n          }, 1000);\n\n          // Quitar la marca de movimiento después de un breve retraso\n          setTimeout(() => {\n            setAppsWithApproval(prev => prev.map(app => app.id === applicationId ? {\n              ...app,\n              isMoving: false,\n              targetStatus: undefined\n            } : app));\n          }, 500);\n        }\n      }\n      // Para asesores (flujo normal)\n      else if (isAdvisor()) {\n        // Actualización optimista en UI\n        const updatedApps = [...appsWithApproval];\n        const appIndex = updatedApps.findIndex(app => app.id === applicationId);\n        if (appIndex !== -1) {\n          // Crear copia profunda para evitar referencias\n          const updatedApp = {\n            ...updatedApps[appIndex],\n            isMoving: true,\n            targetStatus: newStatus,\n            status: newStatus // actualizar el estado directamente\n          };\n\n          // Lógica para manejar aprobaciones de manera optimista\n          if (newStatus === APPLICATION_STATUS.APPROVED) {\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              }),\n              approvedByAdvisor: true\n            };\n\n            // Llamar a la API para aprobar por asesor\n            if (user !== null && user !== void 0 && user.entityId) {\n              try {\n                await approveByAdvisor(applicationId, \"Aprobado vía Kanban\", user.entityId, null).then(async () => {\n                  // Verificar si la aplicación ya está aprobada por la empresa\n                  const approvalStatus = await getApprovalStatus(applicationId);\n\n                  // Si está aprobada por ambos, mover automáticamente a \"por_dispersar\"\n                  if (approvalStatus !== null && approvalStatus !== void 0 && approvalStatus.approvedByAdvisor && approvalStatus !== null && approvalStatus !== void 0 && approvalStatus.approvedByCompany) {\n                    // Actualizar en memoria el estado de aprobación\n                    updatedApp.approvalStatus = {\n                      approvedByAdvisor: true,\n                      approvedByCompany: true\n                    };\n\n                    // Mostrar notificación de transición automática\n                    setAutoTransitionMessage(`La solicitud ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR]}\"`);\n\n                    // Actualizar el estado objetivo para la animación\n                    updatedApp.targetStatus = APPLICATION_STATUS.POR_DISPERSAR;\n\n                    // Cambiar el estado a \"por_dispersar\" después de un breve retraso\n                    setTimeout(() => {\n                      if (onStatusChange) {\n                        onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                      }\n                      // Limpiar el mensaje después de mostrar\n                      setTimeout(() => setAutoTransitionMessage(null), 3000);\n                    }, 500);\n                  }\n                });\n              } catch (error) {\n                console.error(\"Error al aprobar por asesor:\", error);\n                setErrorMessage(`Error al aprobar: ${error.message}`);\n              }\n            }\n          }\n          // Si el asesor mueve de \"aprobado\" a otro estado, quitar la aprobación del asesor\n          else if (oldStatus === APPLICATION_STATUS.APPROVED) {\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              }),\n              approvedByAdvisor: false\n            };\n          }\n\n          // Actualizar la app en el estado\n          updatedApps[appIndex] = updatedApp;\n          setAppsWithApproval(updatedApps);\n\n          // Llamar a la API para actualizar el estado\n          if (onStatusChange) {\n            try {\n              await onStatusChange(application, newStatus);\n\n              // Refrescar el estado de aprobación después de unos segundos para asegurar sincronización\n              setTimeout(async () => {\n                const refreshedStatus = await getApprovalStatus(applicationId);\n                if (refreshedStatus) {\n                  updateLocalApprovalStatus(applicationId, {\n                    approvedByAdvisor: refreshedStatus.approvedByAdvisor,\n                    approvedByCompany: refreshedStatus.approvedByCompany\n                  });\n\n                  // Si tiene ambas aprobaciones, asegurar que se mueva a POR_DISPERSAR\n                  if (refreshedStatus.approvedByAdvisor && refreshedStatus.approvedByCompany) {\n                    if (onStatusChange) {\n                      onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                    }\n                  }\n                }\n                setProcessingAppId(null);\n              }, 1000);\n            } catch (error) {\n              console.error(\"Error updating status:\", error);\n              setErrorMessage(`Error al actualizar el estado: ${error.message}`);\n\n              // Revertir cambios en caso de error\n              setAppsWithApproval(prev => prev.map(app => app.id === applicationId ? {\n                ...app,\n                status: oldStatus,\n                isMoving: false,\n                targetStatus: undefined\n              } : app));\n              setProcessingAppId(null);\n            }\n          }\n\n          // Quitar la marca de movimiento después de un breve retraso\n          setTimeout(() => {\n            setAppsWithApproval(prev => prev.map(app => app.id === applicationId ? {\n              ...app,\n              isMoving: false,\n              targetStatus: undefined\n            } : app));\n          }, 500);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error in handleDrop:\", error);\n      setErrorMessage(`Error al actualizar el estado: ${error.message}`);\n      setProcessingAppId(null);\n    }\n  };\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat('es-MX', {\n      style: 'currency',\n      currency: 'MXN'\n    }).format(amount);\n  };\n\n  // Renderizar los indicadores de aprobación con mejor formato y legibilidad\n  const renderApprovalIndicators = app => {\n    if (!app.approvalStatus) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center mt-1 space-x-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tooltip tooltip-top flex items-center\",\n        \"data-tip\": app.approvalStatus.approvedByAdvisor ? \"Aprobado por asesor\" : \"Pendiente de aprobación por asesor\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-xs mr-1\",\n          children: \"Asesor:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 955,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `w-3 h-3 rounded-full ${app.approvalStatus.approvedByAdvisor ? 'bg-success animate-pulse' : 'bg-warning'}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 956,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 954,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tooltip tooltip-top flex items-center\",\n        \"data-tip\": app.approvalStatus.approvedByCompany ? \"Aprobado por empresa\" : \"Pendiente de aprobación por empresa\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-xs mr-1\",\n          children: \"Empresa:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 959,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `w-3 h-3 rounded-full ${app.approvalStatus.approvedByCompany ? 'bg-success animate-pulse' : 'bg-warning'}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 960,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 958,\n        columnNumber: 9\n      }, this), app.approvalStatus.approvedByAdvisor && app.approvalStatus.approvedByCompany && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tooltip tooltip-top ml-2\",\n        \"data-tip\": \"Aprobada por ambos\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"badge badge-success badge-sm text-xs px-2 py-1\",\n          children: \"Aprobado Total\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 966,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 965,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 953,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Mejorar el formato de las etiquetas de producto para mayor legibilidad\n  const getProductLabel = type => {\n    const labels = {\n      'selected_plans': 'Crédito a Plazos',\n      'product_simulations': 'Simulación',\n      'auto_loan': 'Crédito Auto',\n      'car_backed_loan': 'Crédito con Garantía',\n      'personal_loan': 'Préstamo Personal',\n      'cash_advance': 'Adelanto de Efectivo'\n    };\n    return labels[type] || type;\n  };\n\n  // Función para obtener el color apropiado para la tarjeta según estado y aprobaciones\n  const getCardColor = app => {\n    const status = app.status || '';\n\n    // Colores específicos según el estado\n    switch (status.toLowerCase()) {\n      case APPLICATION_STATUS.REJECTED:\n        return 'border-error bg-red-50';\n      case APPLICATION_STATUS.APPROVED:\n        // Si está aprobado, verificar el estado de las aprobaciones\n        if (app.approvalStatus) {\n          const {\n            approvedByAdvisor,\n            approvedByCompany\n          } = app.approvalStatus;\n          if (approvedByAdvisor && approvedByCompany) {\n            return 'border-success bg-green-100'; // Aprobado por ambos\n          } else if (approvedByAdvisor) {\n            return 'border-success bg-green-50'; // Aprobado solo por asesor\n          } else if (approvedByCompany) {\n            return 'border-info bg-blue-50'; // Aprobado solo por empresa\n          }\n        }\n        return 'border-success bg-green-50';\n      case APPLICATION_STATUS.IN_REVIEW:\n        return 'border-info bg-blue-50';\n      case APPLICATION_STATUS.NEW:\n        return 'border-warning bg-yellow-50';\n      case APPLICATION_STATUS.PENDING:\n        return 'border-warning bg-amber-50';\n      case APPLICATION_STATUS.POR_DISPERSAR:\n        return 'border-accent bg-purple-50';\n      case APPLICATION_STATUS.COMPLETED:\n        return 'border-primary bg-indigo-50';\n      case APPLICATION_STATUS.EXPIRED:\n        return 'border-error bg-red-100';\n      case APPLICATION_STATUS.CANCELLED:\n        return 'border-neutral bg-gray-100';\n      default:\n        // Si el estado no coincide con ninguno de los anteriores, usar el color de la columna\n        return `border-${app.status || 'neutral'}`;\n    }\n  };\n\n  // Estilos personalizados para mostrar claramente cuáles tarjetas se pueden arrastrar\n  const customStyles = `\n    .custom-scrollbar::-webkit-scrollbar {\n      width: 8px;\n      height: 8px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-track {\n      background: #f1f1f1;\n      border-radius: 10px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-thumb {\n      background: #888;\n      border-radius: 10px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n      background: #555;\n    }\n    \n    .kanban-card {\n      transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out, box-shadow 0.3s ease-in-out, border-color 0.3s ease;\n      touch-action: none;\n      user-select: none;\n      will-change: transform, opacity;\n    }\n    \n    .kanban-card-draggable {\n      cursor: grab !important;\n      position: relative;\n    }\n    \n    .kanban-card-draggable:hover {\n      transform: translateY(-4px);\n      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n      border-color: #a855f7;\n      z-index: 10;\n    }\n    \n    .kanban-card-draggable:active {\n      cursor: grabbing !important;\n    }\n    \n    /* Indicator for draggable cards */\n    .kanban-card-draggable::after {\n      content: '';\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      width: 20px;\n      height: 20px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23666'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M7 11.5V14m0-2.5v-6a1.5 1.5 0 113 0m-3 6a1.5 1.5 0 00-3 0v2a7.5 7.5 0 0015 0v-5a1.5 1.5 0 013 0m-6-3V11m0-5.5v-1a1.5 1.5 0 013 0v1m0 0V11' /%3E%3C/svg%3E\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      opacity: 0.7;\n      transition: opacity 0.2s ease;\n    }\n    \n    .kanban-card-draggable:hover::after {\n      opacity: 1;\n    }\n    \n    .kanban-card-locked {\n      position: relative;\n      cursor: not-allowed !important;\n      opacity: 0.8;\n    }\n    \n    .kanban-card-locked::after {\n      content: '';\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      width: 20px;\n      height: 20px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23999'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z' /%3E%3C/svg%3E\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      opacity: 0.7;\n    }\n    \n    .kanban-card.dragging {\n      opacity: 0.8;\n      transform: scale(1.03);\n      box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n      z-index: 50;\n    }\n    \n    .kanban-column {\n      transition: all 0.2s ease;\n      border-radius: 0.75rem;\n      will-change: transform, background-color;\n    }\n    \n    .kanban-column.drag-over {\n      background-color: rgba(var(--b2, 217 217 217) / 0.5);\n      transform: scale(1.01);\n      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);\n      border: 2px dashed #a855f7 !important;\n    }\n\n    .kanban-container {\n      scroll-behavior: smooth;\n    }\n\n    @media (min-width: 768px) {\n      .kanban-card-draggable:hover {\n        transform: translateY(-4px);\n        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n      }\n    }\n    \n    /* Animaciones para cambios de estado */\n    @keyframes fadeIn {\n      0% { opacity: 0; }\n      100% { opacity: 1; }\n    }\n    \n    @keyframes slideIn {\n      0% { transform: translateY(10px); opacity: 0; }\n      100% { transform: translateY(0); opacity: 1; }\n    }\n    \n    @keyframes processingPulse {\n      0% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0.4); }\n      70% { box-shadow: 0 0 0 6px rgba(124, 58, 237, 0); }\n      100% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0); }\n    }\n    \n    .kanban-card {\n      animation: fadeIn 0.3s ease-out;\n    }\n    \n    .processing-toast {\n      position: fixed;\n      bottom: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      padding: 10px 20px;\n      background-color: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      animation: slideIn 0.3s ease-out;\n    }\n    \n    .auto-transition-toast {\n      position: fixed;\n      bottom: 70px;\n      left: 50%;\n      transform: translateX(-50%);\n      padding: 10px 20px;\n      background-color: #dcfce7;\n      border: 1px solid #86efac;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      animation: slideIn 0.3s ease-out;\n    }\n    \n    /* Pop-up tooltip con instrucciones para arrastrar */\n    .drag-instructions {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background-color: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      padding: 12px 16px;\n      z-index: 1000;\n      max-width: 300px;\n      animation: fadeIn 0.3s ease-out;\n    }\n    \n    /* Mejoras para vista mobile */\n    @media (max-width: 640px) {\n      .kanban-column {\n        min-height: 300px;\n      }\n    }\n  `;\n\n  // Función para obtener clases draggable\n  const getDraggableClasses = app => {\n    // Usar la función canDragCard que está definida en el ámbito superior\n    const isDraggable = canDragCard(app) && app.id !== processingAppId;\n    return isDraggable ? 'cursor-grab kanban-card-draggable' : 'cursor-not-allowed opacity-80 kanban-card-locked';\n  };\n\n  // Función para definir los tooltips con información clara y precisa\n  const getDragTooltip = app => {\n    var _app$approvalStatus14, _app$approvalStatus15;\n    if (app.id === processingAppId) {\n      return \"Esta tarjeta está siendo procesada\";\n    }\n\n    // Si la tarjeta se puede arrastrar, mostrar mensaje informativo\n    if (canDragCard(app)) {\n      return \"Arrastra para cambiar el estado\";\n    }\n\n    // Mensajes específicos para casos donde no se puede arrastrar\n    if ((_app$approvalStatus14 = app.approvalStatus) !== null && _app$approvalStatus14 !== void 0 && _app$approvalStatus14.approvedByAdvisor && (_app$approvalStatus15 = app.approvalStatus) !== null && _app$approvalStatus15 !== void 0 && _app$approvalStatus15.approvedByCompany) {\n      return \"Esta solicitud ya está completamente aprobada y no puede ser movida\";\n    }\n\n    // Mensajes específicos según el rol y estado\n    if (isCompanyAdmin()) {\n      if (app.status === APPLICATION_STATUS.REJECTED) {\n        return \"Las solicitudes rechazadas solo pueden ser movidas por asesores\";\n      } else if (app.status === APPLICATION_STATUS.POR_DISPERSAR) {\n        return \"Esta solicitud ya está lista para dispersión y no puede regresar a estados anteriores\";\n      } else if (app.status === APPLICATION_STATUS.COMPLETED) {\n        return \"Esta solicitud ya está completada y no puede cambiar de estado\";\n      } else if (app.status === APPLICATION_STATUS.EXPIRED) {\n        return \"Esta solicitud ha expirado y no puede cambiar de estado\";\n      } else if (app.status === APPLICATION_STATUS.CANCELLED) {\n        return \"Esta solicitud fue cancelada y no puede cambiar de estado\";\n      }\n    }\n    return \"No puedes mover esta tarjeta en este momento\";\n  };\n\n  // Utilidad para asegurar que las aplicaciones con ambas aprobaciones se muevan a POR_DISPERSAR\n  const ensureCorrectStatusForDualApprovals = useCallback(async () => {\n    if (!applications || !user || !onStatusChange) return;\n    console.log(\"Verificando aplicaciones con aprobación dual...\");\n\n    // Identificar aplicaciones que tienen ambas aprobaciones pero no están en POR_DISPERSAR\n    const needStatusUpdate = applications.filter(app => {\n      var _app$approvalStatus16, _app$approvalStatus17;\n      const hasBothApprovals = ((_app$approvalStatus16 = app.approvalStatus) === null || _app$approvalStatus16 === void 0 ? void 0 : _app$approvalStatus16.approvedByAdvisor) && ((_app$approvalStatus17 = app.approvalStatus) === null || _app$approvalStatus17 === void 0 ? void 0 : _app$approvalStatus17.approvedByCompany);\n      const isTerminalStatus = [APPLICATION_STATUS.COMPLETED, APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.REJECTED].includes(app.status);\n      return hasBothApprovals && !isTerminalStatus && app.status !== APPLICATION_STATUS.POR_DISPERSAR;\n    });\n    if (needStatusUpdate.length > 0) {\n      console.log(`Se encontraron ${needStatusUpdate.length} aplicaciones que necesitan mover a POR_DISPERSAR:`);\n\n      // Actualizar el estado de cada aplicación\n      for (const app of needStatusUpdate) {\n        console.log(`Actualizando aplicación ${app.id} a POR_DISPERSAR (tiene ambas aprobaciones)`);\n        try {\n          await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n          // Mostrar notificación de transición automática\n          setAutoTransitionMessage(`La solicitud ${app.id} ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR]}\"`);\n        } catch (error) {\n          console.error(`Error al actualizar estado de aplicación ${app.id}:`, error);\n        }\n      }\n\n      // Limpiar mensaje después de un tiempo\n      setTimeout(() => setAutoTransitionMessage(null), 3000);\n    } else {\n      console.log(\"No se encontraron aplicaciones que necesiten actualización de estado\");\n    }\n  }, [applications, user, onStatusChange]);\n\n  // Verificar status cuando las aplicaciones cambian\n  useEffect(() => {\n    if ((applications === null || applications === void 0 ? void 0 : applications.length) > 0) {\n      ensureCorrectStatusForDualApprovals();\n    }\n  }, [applications, ensureCorrectStatusForDualApprovals]);\n  if (applications.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-base-200 p-6 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-medium text-center\",\n        children: \"No hay solicitudes para mostrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center text-gray-500 mt-2\",\n        children: \"No se encontraron solicitudes en el sistema\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1314,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1312,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full overflow-x-auto custom-scrollbar relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: customStyles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1321,\n      columnNumber: 7\n    }, this), processingAppId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"processing-toast\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"loading loading-spinner loading-sm text-primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1326,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-medium\",\n        children: \"Actualizando estado...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1327,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1325,\n      columnNumber: 9\n    }, this), autoTransitionMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auto-transition-toast\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"loading loading-spinner loading-sm text-success\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1334,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-medium\",\n        children: autoTransitionMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1335,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1333,\n      columnNumber: 9\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 alert alert-error shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          className: \"stroke-current flex-shrink-0 h-6 w-6\",\n          fill: \"none\",\n          viewBox: \"0 0 24 24\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            strokeWidth: \"2\",\n            d: \"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1343,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1342,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1345,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1341,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-none\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-sm\",\n          onClick: () => setErrorMessage(null),\n          children: \"Cerrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1348,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1347,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1340,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 2xl:grid-cols-6 gap-4 pb-4 kanban-container p-4\",\n      style: {\n        minWidth: '1000px'\n      },\n      children: columns.map(column => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `bg-base-100 rounded-xl shadow-md border-t-4 border-${column.color} border-l border-r border-b flex flex-col h-full kanban-column`,\n        onDragOver: e => {\n          handleDragOver(e, column.id);\n        },\n        onDragLeave: e => {\n          e.currentTarget.classList.remove('drag-over');\n        },\n        onDrop: e => {\n          handleDrop(e, column.id);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `text-center py-3 px-4 font-bold rounded-t-lg flex items-center justify-between bg-${column.color} bg-opacity-10`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: `text-${column.color} font-bold text-lg`,\n            children: column.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1370,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `badge badge-${column.color} badge-lg`,\n            children: column.applications.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1371,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1369,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-3 space-y-3 min-h-[500px] max-h-[calc(100vh-220px)] overflow-y-auto custom-scrollbar flex-grow\",\n          children: column.applications.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center justify-center h-full opacity-50 border-2 border-dashed border-base-300 rounded-lg p-6\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                className: \"h-12 w-12 mx-auto text-gray-400\",\n                fill: \"none\",\n                viewBox: \"0 0 24 24\",\n                stroke: \"currentColor\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  strokeLinecap: \"round\",\n                  strokeLinejoin: \"round\",\n                  strokeWidth: 1,\n                  d: \"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1379,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1378,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm mt-2\",\n                children: \"No hay solicitudes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1381,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1377,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1376,\n            columnNumber: 17\n          }, this) : column.applications.map((app, index) => {\n            const isCardDraggable = canDragCard(app) && app.id !== processingAppId;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              \"data-tip\": getDragTooltip(app),\n              className: `card shadow hover:shadow-lg transition-all ${getCardColor(app)} border-l-4 border-t border-r border-b hover:border-primary kanban-card relative ${app.id === processingAppId ? 'processing' : ''} ${app.isMoving ? 'opacity-90' : ''} ${getDraggableClasses(app)}`,\n              draggable: isCardDraggable,\n              onDragStart: isCardDraggable ? e => handleDragStart(e, app, index) : undefined,\n              onDragEnd: isCardDraggable ? handleDragEnd : undefined,\n              style: {\n                animation: app.id === processingAppId ? 'processingPulse 1.5s infinite' : ''\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-body p-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex justify-between items-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"flex items-center space-x-2\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"flex-1 font-semibold\",\n                      children: app.client_name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1402,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: `badge badge-${column.color} badge-md text-xs px-2 py-1 whitespace-nowrap`,\n                      children: getProductLabel(app.application_type)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1403,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1401,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1400,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mt-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-sm text-gray-600 mb-1 flex items-center\",\n                    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                      xmlns: \"http://www.w3.org/2000/svg\",\n                      className: \"h-4 w-4 mr-1 inline\",\n                      fill: \"none\",\n                      viewBox: \"0 0 24 24\",\n                      stroke: \"currentColor\",\n                      children: /*#__PURE__*/_jsxDEV(\"path\", {\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\",\n                        strokeWidth: 2,\n                        d: \"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1413,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1412,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"truncate max-w-[180px] font-medium\",\n                      children: app.company_name || \"Sin empresa\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1415,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1411,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"flex items-center mb-2\",\n                    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                      xmlns: \"http://www.w3.org/2000/svg\",\n                      className: \"h-4 w-4 mr-1 text-primary\",\n                      fill: \"none\",\n                      viewBox: \"0 0 24 24\",\n                      stroke: \"currentColor\",\n                      children: /*#__PURE__*/_jsxDEV(\"path\", {\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\",\n                        strokeWidth: 2,\n                        d: \"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1423,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1422,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"text-base font-bold text-primary\",\n                      children: formatCurrency(app.requested_amount || 0)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1425,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1421,\n                    columnNumber: 25\n                  }, this), renderApprovalIndicators(app), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"card-actions justify-end mt-3\",\n                    children: /*#__PURE__*/_jsxDEV(Link, {\n                      to: `/applications/${app.id}`,\n                      className: \"btn btn-sm btn-primary w-full\",\n                      children: \"Ver Detalle\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1434,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1433,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1409,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1399,\n                columnNumber: 21\n              }, this)\n            }, app.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1388,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1374,\n          columnNumber: 13\n        }, this)]\n      }, column.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1355,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1353,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1320,\n    columnNumber: 5\n  }, this);\n};\n_s(KanbanBoard, \"3eWrOeHfq0UesHClfhDBgKSfGQs=\", false, function () {\n  return [useAuth, usePermissions];\n});\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","useCallback","Link","getApprovalStatus","approveByAdvisor","approveByCompany","APPLICATION_STATUS","STATUS_LABELS","usePermissions","useAuth","jsxDEV","_jsxDEV","escapeSQLString","str","replace","KanbanBoard","applications","onStatusChange","_s","user","isAdvisor","isCompanyAdmin","dragOverColumn","setDragOverColumn","processingAppId","setProcessingAppId","errorMessage","setErrorMessage","autoTransitionMessage","setAutoTransitionMessage","isLoading","setIsLoading","dragItemRef","dragImageRef","draggedItemIndexRef","draggedItemNewStatusRef","appsWithApproval","setAppsWithApproval","loadApprovalStatuses","length","console","log","appsWithStatus","JSON","parse","stringify","approvalPromises","map","app","id","warn","approvalStatus","approvedByAdvisor","approvedByCompany","status","error","resolvedApps","Promise","all","defaultApps","newApplications","filter","isNew","createdAt","Date","created_at","now","hoursElapsed","getTime","isRecent","updatedApps","forEach","newApp","index","findIndex","NEW","checkForNewApplications","oneDayAgo","setHours","getHours","recentApps","hasChanges","recentApp","push","approved_by_advisor","approved_by_company","a","needsUpdate","newStatus","groupedApplications","emptyGroups","Object","values","statusGroups","appsToGroup","Array","isArray","safelyAddToGroup","targetStatus","_app$approvalStatus","_app$approvalStatus2","hasBothApprovals","isTerminalStatus","COMPLETED","EXPIRED","CANCELLED","REJECTED","includes","POR_DISPERSAR","entries","apps","_app$approvalStatus3","_app$approvalStatus4","_Object$entries$find","foundInGroup","find","_","some","columns","IN_REVIEW","APPROVED","_app$approvalStatus5","_app$approvalStatus6","finalStates","_app$approvalStatus7","_app$approvalStatus8","_app$approvalStatus9","company_review_status","PENDING","columnDefinitions","title","color","updateLocalApprovalStatus","applicationId","updates","prev","handleDragStart","e","application","idx","current","currentTarget","dataTransfer","setData","effectAllowed","cloneNode","style","position","top","opacity","transform","width","offsetWidth","document","body","appendChild","rect","getBoundingClientRect","setDragImage","classList","add","handleDragEnd","remove","removeChild","handleDragOver","columnStatus","preventDefault","stopPropagation","dropEffect","contains","querySelectorAll","col","canDragCard","_app$approvalStatus10","_app$approvalStatus11","restrictedStatuses","_app$approvalStatus12","_app$approvalStatus13","handleDrop","getData","oldStatus","allowedTargetStates","appIndex","updatedApp","isMoving","entityId","company_id","then","setTimeout","message","refreshedStatus","undefined","formatCurrency","amount","Intl","NumberFormat","currency","format","renderApprovalIndicators","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getProductLabel","type","labels","getCardColor","toLowerCase","customStyles","getDraggableClasses","isDraggable","getDragTooltip","_app$approvalStatus14","_app$approvalStatus15","ensureCorrectStatusForDualApprovals","needStatusUpdate","_app$approvalStatus16","_app$approvalStatus17","xmlns","fill","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","onClick","minWidth","column","onDragOver","onDragLeave","onDrop","stroke","isCardDraggable","draggable","onDragStart","onDragEnd","animation","client_name","application_type","company_name","requested_amount","to","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/components/ui/KanbanBoard.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Application, getApprovalStatus, approveByAdvisor, approveByCompany } from '../../services/applicationService';\nimport { STATUS_COLORS, APPLICATION_STATUS, STATUS_LABELS } from '../../utils/constants/statuses';\nimport { usePermissions } from '../../contexts/PermissionsContext';\nimport { useAuth } from '../../contexts/AuthContext';\n\n// Función para escapar cadenas de texto para SQL\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\ninterface KanbanBoardProps {\n  applications: Application[];\n  onStatusChange?: (application: Application, newStatus: string) => Promise<void>;\n}\n\n// Interfaz para el estado de aprobación\ninterface ApprovalStatus {\n  approvedByAdvisor: boolean;\n  approvedByCompany: boolean;\n}\n\n// Crear un tipo para aplicaciones con su estado de aprobación\ntype ApplicationWithApproval = Application & {\n  approvalStatus?: ApprovalStatus;\n  isMoving?: boolean;\n  targetStatus?: string;\n  company_review_status?: boolean;\n};\n\nconst KanbanBoard: React.FC<KanbanBoardProps> = ({ applications = [], onStatusChange }) => {\n  const { user } = useAuth();\n  const { isAdvisor, isCompanyAdmin } = usePermissions();\n  const [dragOverColumn, setDragOverColumn] = useState<string | null>(null);\n  const [processingAppId, setProcessingAppId] = useState<string | null>(null);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const [autoTransitionMessage, setAutoTransitionMessage] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  // Referencias para drag and drop\n  const dragItemRef = useRef<HTMLDivElement | null>(null);\n  const dragImageRef = useRef<HTMLDivElement | null>(null);\n  const draggedItemIndexRef = useRef<number>(-1);\n  const draggedItemNewStatusRef = useRef<string>('');\n  \n  // Inicializar como un array vacío para evitar errores de undefined\n  const [appsWithApproval, setAppsWithApproval] = useState<ApplicationWithApproval[]>([]);\n  \n  // Cargar estados de aprobación para todas las aplicaciones - Mejorado con manejo de errores\n  useEffect(() => {\n    const loadApprovalStatuses = async () => {\n      if (!applications || applications.length === 0 || !user) {\n        console.log(\"No hay aplicaciones para cargar o usuario no está autenticado\");\n        setAppsWithApproval([]);\n        return;\n      }\n      \n      setIsLoading(true);\n      \n      try {\n        console.log(`Cargando estados de aprobación para ${applications.length} aplicaciones...`);\n        \n        // Crear copias profundas para evitar modificar el original\n        const appsWithStatus: ApplicationWithApproval[] = JSON.parse(JSON.stringify(applications));\n        \n        // Para cada aplicación, obtener su estado de aprobación\n        const approvalPromises = appsWithStatus.map(async (app) => {\n          try {\n            if (!app.id) {\n              console.warn(\"Aplicación sin ID encontrada, omitiendo...\");\n              app.approvalStatus = { approvedByAdvisor: false, approvedByCompany: false };\n              return app;\n            }\n            \n            const status = await getApprovalStatus(app.id);\n            \n            if (status) {\n              app.approvalStatus = status;\n            } else {\n              app.approvalStatus = { \n                approvedByAdvisor: false, \n                approvedByCompany: false \n              };\n            }\n            \n            return app;\n          } catch (error) {\n            console.error(`Error al obtener estado de aprobación para aplicación ${app.id}:`, error);\n            // Proporcionar un valor predeterminado para evitar errores\n            app.approvalStatus = { \n              approvedByAdvisor: false, \n              approvedByCompany: false \n            };\n            return app;\n          }\n        });\n        \n        // Esperar a que todas las promesas se resuelvan\n        const resolvedApps = await Promise.all(approvalPromises);\n        \n        console.log(`Estados de aprobación cargados para ${resolvedApps.length} aplicaciones`);\n        \n        // Actualizar estado con las aplicaciones y sus estados de aprobación\n        setAppsWithApproval(resolvedApps);\n        \n      } catch (error) {\n        console.error(\"Error al cargar estados de aprobación:\", error);\n        // En caso de error, usar las aplicaciones sin estados de aprobación pero con valores por defecto\n        const defaultApps = applications.map(app => ({\n          ...app,\n          approvalStatus: { approvedByAdvisor: false, approvedByCompany: false }\n        })) as ApplicationWithApproval[];\n        \n        setAppsWithApproval(defaultApps);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    loadApprovalStatuses();\n  }, [applications, user]);\n  \n  // Actualizar la lógica para nuevas aplicaciones para incluir todas las nuevas notificaciones\n  useEffect(() => {\n    // Verificar si hay aplicaciones que deberían estar en \"nuevo\" (recién creadas)\n    const newApplications = applications.filter(app => {\n      // Identificar aplicaciones recién creadas (menos de 24 horas)\n      const isNew = !app.status || app.status === 'pending' || app.status === 'solicitud';\n      const createdAt = new Date(app.created_at);\n      const now = new Date();\n      const hoursElapsed = (now.getTime() - createdAt.getTime()) / (1000 * 60 * 60);\n      const isRecent = hoursElapsed < 24;\n      \n      return isRecent && (isNew || app.status === 'new');\n    });\n    \n    // Si hay aplicaciones nuevas sin status o con status pendiente/solicitud, asignarles \"nuevo\"\n    if (newApplications.length > 0) {\n      console.log('Aplicaciones nuevas detectadas:', newApplications);\n      const updatedApps = [...appsWithApproval];\n      newApplications.forEach(newApp => {\n        const index = updatedApps.findIndex(app => app.id === newApp.id);\n        if (index !== -1 && (!updatedApps[index].status || updatedApps[index].status === 'pending' || updatedApps[index].status === 'solicitud')) {\n          updatedApps[index] = {\n            ...updatedApps[index],\n            status: APPLICATION_STATUS.NEW\n          };\n          console.log(`Aplicación ${newApp.id} movida a estado NUEVO`);\n        }\n      });\n      \n      setAppsWithApproval(updatedApps);\n    }\n  }, [applications]); // Usar applications como dependencia en lugar de appsWithApproval\n\n  // Asegurar que nuevas aplicaciones se muestren inmediatamente\n  // añadiendo una función de comprobación en el useEffect principal\n  useEffect(() => {\n    const checkForNewApplications = async () => {\n      // Verificar que tenemos usuario y permisos\n      if (!user?.id) return;\n      \n      try {\n        // Ejecutar esta comprobación solo si somos admin de empresa\n        if (isCompanyAdmin() && applications.length > 0) {\n          // Obtener la fecha de hace 24 horas\n          const oneDayAgo = new Date();\n          oneDayAgo.setHours(oneDayAgo.getHours() - 24);\n          \n          // Buscar aplicaciones creadas en las últimas 24 horas\n          const recentApps = applications.filter(app => {\n            const createdAt = new Date(app.created_at);\n            return createdAt >= oneDayAgo;\n          });\n          \n          // Si hay aplicaciones recientes, asegurarnos de que aparezcan en el tablero\n          if (recentApps.length > 0) {\n            console.log(`Encontradas ${recentApps.length} aplicaciones recientes`);\n            \n            // Asegurar que todas estas aplicaciones están en nuestro estado local\n            // y que tienen el estado correcto (NEW si no tienen un estado específico)\n            const updatedApps = [...appsWithApproval];\n            let hasChanges = false;\n            \n            recentApps.forEach(recentApp => {\n              const index = updatedApps.findIndex(app => app.id === recentApp.id);\n              \n              // Si la aplicación no está en nuestro estado, agregarla\n              if (index === -1) {\n                console.log(`Agregando aplicación nueva ${recentApp.id} al estado`);\n                updatedApps.push({\n                  ...recentApp,\n                  status: recentApp.status || APPLICATION_STATUS.NEW,\n                  approvalStatus: {\n                    approvedByAdvisor: recentApp.approved_by_advisor || false,\n                    approvedByCompany: recentApp.approved_by_company || false\n                  }\n                });\n                hasChanges = true;\n              } \n              // Si no tiene estado o está en estado pendiente/solicitud, asignarle NEW\n              else if (!updatedApps[index].status || updatedApps[index].status === 'pending' || updatedApps[index].status === 'solicitud') {\n                console.log(`Actualizando estado de ${recentApp.id} a NUEVO`);\n                updatedApps[index] = {\n                  ...updatedApps[index],\n                  status: APPLICATION_STATUS.NEW\n                };\n                hasChanges = true;\n              }\n            });\n            \n            // Actualizar el estado solo si hubo cambios\n            if (hasChanges) {\n              setAppsWithApproval(updatedApps);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error verificando nuevas aplicaciones:', error);\n      }\n    };\n    \n    // Ejecutar la función de comprobación\n    checkForNewApplications();\n  }, [applications, user?.id, isCompanyAdmin]);\n  \n  // Modificar la lógica para actualizar todas las aplicaciones con estado \"pending\" o \"solicitud\" a \"new\"\n  useEffect(() => {\n    // Si no hay aplicaciones, no hacer nada\n    if (!applications || applications.length === 0) return;\n    \n    console.log('Verificando estado de aplicaciones:', applications.map(a => ({ id: a.id, status: a.status })));\n    \n    // Actualizar solo las aplicaciones con estado específico a \"new\" sin afectar las demás\n    const updatedApps = [...appsWithApproval];\n    let hasChanges = false;\n    \n    applications.forEach(app => {\n      const index = updatedApps.findIndex(a => a.id === app.id);\n      const needsUpdate = \n        !app.status || \n        app.status === 'pending' || \n        app.status === 'solicitud';\n      \n      // Solo actualizar si el estado necesita cambiar a \"new\"\n      if (index !== -1 && needsUpdate) {\n        console.log(`Actualizando estado de aplicación ${app.id} de \"${app.status}\" a \"new\"`);\n        updatedApps[index] = {\n          ...updatedApps[index],\n          status: APPLICATION_STATUS.NEW\n        };\n        hasChanges = true;\n      } else if (index === -1) {\n        // Si la aplicación no está en el array, agregarla con su estado original\n        // o \"new\" si no tiene estado o es pending/solicitud\n        const newStatus = needsUpdate ? APPLICATION_STATUS.NEW : (app.status as Application['status']);\n        console.log(`Agregando aplicación ${app.id} con estado \"${newStatus}\"`);\n        updatedApps.push({\n          ...app,\n          status: newStatus,\n          approvalStatus: {\n            approvedByAdvisor: app.approved_by_advisor || false,\n            approvedByCompany: app.approved_by_company || false\n          }\n        });\n        hasChanges = true;\n      }\n      // Si existe y no necesita actualización, la dejamos como está\n    });\n    \n    if (hasChanges) {\n      console.log('Actualizando aplicaciones:');\n      updatedApps.forEach(app => console.log(`- ${app.id}: ${app.status}`));\n      setAppsWithApproval(updatedApps);\n    }\n  }, [applications]);\n  \n  // Organizar aplicaciones por estatus - Completamente rediseñado para mayor robustez\n  const groupedApplications = useMemo(() => {\n    // Verificaciones iniciales para evitar errores\n    if (!applications || applications.length === 0 || !user) {\n      console.log(\"No hay aplicaciones para agrupar o usuario no autenticado\");\n      \n      // Devolver un objeto vacío pero inicializado con todos los estados posibles\n      const emptyGroups: Record<string, ApplicationWithApproval[]> = {};\n      Object.values(APPLICATION_STATUS).forEach(status => {\n        emptyGroups[status] = [];\n      });\n      return emptyGroups;\n    }\n\n    console.log(\"Agrupando aplicaciones en el Kanban...\", applications);\n    \n    // Crear un objeto con todos los estados posibles como claves\n    const statusGroups: Record<string, ApplicationWithApproval[]> = {};\n    \n    // Paso 1: Inicializar TODOS los estados posibles para evitar undefined\n    Object.values(APPLICATION_STATUS).forEach(status => {\n      statusGroups[status] = [];\n    });\n    \n    // Paso 2: Encontrar cualquier estado adicional que pueda existir en las aplicaciones\n    // y también inicializarlo para evitar undefined\n    applications.forEach(app => {\n      if (app.status && !statusGroups[app.status]) {\n        console.log(`Inicializando grupo para estado adicional: ${app.status}`);\n        statusGroups[app.status] = [];\n      }\n    });\n\n    // Paso 3: Agrupar aplicaciones según el rol del usuario y reglas de negocio\n    const appsToGroup = Array.isArray(appsWithApproval) ? appsWithApproval : [];\n    \n    if (appsToGroup.length === 0) {\n      console.log(\"No hay aplicaciones con estado de aprobación para agrupar\");\n      return statusGroups;\n    }\n    \n    console.log(`Agrupando ${appsToGroup.length} aplicaciones con estado de aprobación`);\n    \n    // Función de ayuda para verificar y registrar errores\n    const safelyAddToGroup = (app: ApplicationWithApproval, targetStatus: string) => {\n      if (!statusGroups[targetStatus]) {\n        console.error(`Error: Grupo de estado '${targetStatus}' no está inicializado`);\n        // Inicializar si no existe para evitar errores\n        statusGroups[targetStatus] = [];\n      }\n      \n      statusGroups[targetStatus].push(app);\n      return true;\n    };\n    \n    appsToGroup.forEach(app => {\n      // Verificar que la aplicación tenga un estado válido\n      if (!app.status) {\n        console.warn(`Aplicación ${app.id} sin estado, asignando a NEW por defecto`);\n        app.status = APPLICATION_STATUS.NEW;\n      }\n      \n      // Verificar si la aplicación está aprobada por ambos (asesor y empresa)\n      const hasBothApprovals = app.approvalStatus?.approvedByAdvisor && app.approvalStatus?.approvedByCompany;\n      \n      // Estados terminales donde las aplicaciones no se mueven automáticamente\n      const isTerminalStatus = [\n        APPLICATION_STATUS.COMPLETED,\n        APPLICATION_STATUS.EXPIRED,\n        APPLICATION_STATUS.CANCELLED,\n        APPLICATION_STATUS.REJECTED\n      ].includes(app.status as APPLICATION_STATUS);\n      \n      // Mover automáticamente a Por Dispersar si tiene ambas aprobaciones y no está en estado terminal\n      if (hasBothApprovals && !isTerminalStatus && app.status !== APPLICATION_STATUS.POR_DISPERSAR) {\n        console.log(`Aplicación ${app.id} con ambas aprobaciones -> POR_DISPERSAR`);\n        safelyAddToGroup(app, APPLICATION_STATUS.POR_DISPERSAR);\n      }\n      // En todos los demás casos, mostrar en su estado actual\n      else if (app.status) {\n        console.log(`Aplicación ${app.id} en estado ${app.status}`);\n        safelyAddToGroup(app, app.status);\n      }\n      // Fallback por si algún estado no está definido\n      else {\n        console.warn(`Aplicación ${app.id} sin estado reconocido, asignando a NEW`);\n        safelyAddToGroup(app, APPLICATION_STATUS.NEW);\n      }\n    });\n    \n    // Debug: Verificar las aplicaciones en cada grupo\n    Object.entries(statusGroups).forEach(([status, apps]) => {\n      console.log(`Grupo ${status}: ${apps.length} aplicaciones`);\n    });\n    \n    // Debug: Verificar aplicaciones con ambas aprobaciones\n    console.log(\"Aplicaciones con ambas aprobaciones:\");\n    appsToGroup.forEach(app => {\n      if (app.approvalStatus?.approvedByAdvisor && app.approvalStatus?.approvedByCompany) {\n        const foundInGroup = Object.entries(statusGroups)\n          .find(([_, apps]) => apps.some(a => a.id === app.id))?.[0];\n        \n        console.log(`ID: ${app.id}, Status: ${app.status}, En columna: ${foundInGroup || 'No encontrado'}`);\n      }\n    });\n    \n    return statusGroups;\n  }, [applications, appsWithApproval, user]);\n  \n  // Modificar la lógica de agrupamiento de aplicaciones para separar flujos\n  // Esta es la parte clave que separa completamente los flujos\n  const columns = useMemo(() => {\n    // Estados estándar del Kanban\n    const statusGroups: Record<string, ApplicationWithApproval[]> = {\n      [APPLICATION_STATUS.NEW]: [],\n      [APPLICATION_STATUS.IN_REVIEW]: [],\n      [APPLICATION_STATUS.APPROVED]: [],\n      [APPLICATION_STATUS.POR_DISPERSAR]: [],\n      [APPLICATION_STATUS.COMPLETED]: [],\n      [APPLICATION_STATUS.EXPIRED]: [],\n      [APPLICATION_STATUS.REJECTED]: [],\n      [APPLICATION_STATUS.CANCELLED]: []\n    };\n    \n    // Agrupar aplicaciones por estado\n    appsWithApproval.forEach(app => {\n      // CRUCIAL FIX: Siempre mover a Por Dispersar si tiene ambas aprobaciones\n      // y no está en un estado terminal (completado, expirado, cancelado, rechazado)\n      if (app.approvalStatus?.approvedByAdvisor && app.approvalStatus?.approvedByCompany) {\n        const finalStates = [\n          APPLICATION_STATUS.COMPLETED,\n          APPLICATION_STATUS.EXPIRED,\n          APPLICATION_STATUS.CANCELLED,\n          APPLICATION_STATUS.REJECTED\n        ];\n        \n        if (!finalStates.includes(app.status as APPLICATION_STATUS)) {\n          console.log(`Aplicación ${app.id} con ambas aprobaciones: moviendo a Por Dispersar`);\n          statusGroups[APPLICATION_STATUS.POR_DISPERSAR].push(app);\n          return; // Importante: salir para no procesar más esta aplicación\n        }\n      }\n      \n      // Lógica específica para administradores de empresa - flujo independiente\n      if (isCompanyAdmin()) {\n        // Para admin de empresa, la lógica es:\n        // 1. Si está aprobada por empresa -> va a \"Aprobado por mi\"\n        if (app.approvalStatus?.approvedByCompany && !app.approvalStatus?.approvedByAdvisor) {\n          statusGroups[APPLICATION_STATUS.APPROVED].push(app);\n        }\n        // 2. Si está en revisión por empresa -> va a \"En Revisión\"\n        else if (app.company_review_status) {\n          statusGroups[APPLICATION_STATUS.IN_REVIEW].push(app);\n        }\n        // 3. Si no está ni en revisión ni aprobada por empresa -> va a \"Nuevo\"\n        else if (app.status === APPLICATION_STATUS.NEW || \n                app.status === APPLICATION_STATUS.PENDING || \n                (!app.company_review_status && !app.approvalStatus?.approvedByCompany)) {\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n        // El resto va a su estado correspondiente\n        else if (app.status) {\n          // Todos los demás estados (por_dispersar, completado, etc.) van a su columna normal\n          statusGroups[app.status].push(app);\n        }\n      }\n      // Lógica para asesores - flujo normal basado en estado real\n      else if (isAdvisor()) {\n        if (app.status) {\n          // Usar el estado real de la aplicación para agruparla\n          statusGroups[app.status].push(app);\n      } else {\n          // Si no tiene estado, ponerla en \"Nuevo\"\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      // Lógica para otros roles\n      else {\n        if (app.status) {\n          statusGroups[app.status].push(app);\n        } else {\n          // Si no tiene estado, ponerla en \"Nuevo\"\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n    });\n    \n    // Definición de colores para cada columna\n    const columnDefinitions = [\n      { id: APPLICATION_STATUS.NEW, title: 'Nuevo', color: 'warning', applications: statusGroups[APPLICATION_STATUS.NEW] },\n      { id: APPLICATION_STATUS.IN_REVIEW, title: 'En Revisión', color: 'info', applications: statusGroups[APPLICATION_STATUS.IN_REVIEW] },\n      { id: APPLICATION_STATUS.APPROVED, title: 'Aprobado por mi', color: 'success', applications: statusGroups[APPLICATION_STATUS.APPROVED] },\n      { id: APPLICATION_STATUS.POR_DISPERSAR, title: 'Por Dispersar', color: 'accent', applications: statusGroups[APPLICATION_STATUS.POR_DISPERSAR] },\n      { id: APPLICATION_STATUS.COMPLETED, title: 'Completado', color: 'primary', applications: statusGroups[APPLICATION_STATUS.COMPLETED] },\n      { id: APPLICATION_STATUS.EXPIRED, title: 'Expirado', color: 'error', applications: statusGroups[APPLICATION_STATUS.EXPIRED] },\n      { id: APPLICATION_STATUS.REJECTED, title: 'Rechazado', color: 'error', applications: statusGroups[APPLICATION_STATUS.REJECTED] },\n      { id: APPLICATION_STATUS.CANCELLED, title: 'Cancelado', color: 'neutral', applications: statusGroups[APPLICATION_STATUS.CANCELLED] }\n    ];\n    \n    return columnDefinitions;\n  }, [appsWithApproval, isAdvisor, isCompanyAdmin]);\n  \n  // Función para actualizar localmente el estado de aprobación de una aplicación\n  const updateLocalApprovalStatus = (applicationId: string, updates: Partial<{ approvedByAdvisor: boolean, approvedByCompany: boolean }>) => {\n    setAppsWithApproval(prev => \n      prev.map(app => \n        app.id === applicationId\n          ? {\n              ...app,\n              approvalStatus: {\n                ...(app.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n                ...updates\n              }\n            }\n          : app\n      )\n    );\n  };\n  \n  const handleDragStart = (e: React.DragEvent<HTMLDivElement>, application: ApplicationWithApproval, idx: number) => {\n    // Guardar la aplicación que estamos arrastrando\n    draggedItemIndexRef.current = idx;\n    \n    // Almacenar el elemento que estamos arrastrando para gestionar mejor el evento\n    dragItemRef.current = e.currentTarget;\n    \n    // Establecer los datos que queremos transferir\n    e.dataTransfer.setData('text/plain', application.id);\n    e.dataTransfer.effectAllowed = 'move';\n    \n    // Crear una copia visual para el arrastre\n    if (!dragImageRef.current) {\n      dragImageRef.current = e.currentTarget.cloneNode(true) as HTMLDivElement;\n      dragImageRef.current.style.position = 'absolute';\n      dragImageRef.current.style.top = '-1000px';\n      dragImageRef.current.style.opacity = '0.8';\n      dragImageRef.current.style.transform = 'scale(0.9)';\n      dragImageRef.current.style.width = `${e.currentTarget.offsetWidth}px`;\n      document.body.appendChild(dragImageRef.current);\n    }\n    \n    // Establecer la imagen de arrastre\n    if (dragImageRef.current) {\n      const rect = e.currentTarget.getBoundingClientRect();\n      e.dataTransfer.setDragImage(dragImageRef.current, rect.width / 2, 20);\n    }\n    \n    // Añadir clase CSS para mostrar visualmente que el elemento está siendo arrastrado\n    if (e.currentTarget) {\n      e.currentTarget.classList.add('dragging');\n    }\n  };\n  \n  const handleDragEnd = (e: React.DragEvent<HTMLDivElement>) => {\n    // Eliminar clase CSS de arrastre\n    if (dragItemRef.current) {\n      dragItemRef.current.classList.remove('dragging');\n      dragItemRef.current = null;\n    }\n    \n    if (e.currentTarget) {\n      e.currentTarget.classList.remove('dragging');\n    }\n    \n    // Eliminar el elemento clonado para el arrastre\n    if (dragImageRef.current) {\n      document.body.removeChild(dragImageRef.current);\n      dragImageRef.current = null;\n    }\n    \n    draggedItemIndexRef.current = -1;\n    draggedItemNewStatusRef.current = '';\n  };\n  \n  const handleDragOver = (e: React.DragEvent, columnStatus: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = 'move';\n    \n    // Guardar el nuevo estado para la actualización optimista\n    if (draggedItemNewStatusRef.current !== columnStatus) {\n      draggedItemNewStatusRef.current = columnStatus;\n    }\n    \n    // Añadir clase visual para indicar la columna destino\n    if (e.currentTarget.classList.contains('kanban-column')) {\n      document.querySelectorAll('.kanban-column').forEach(col => {\n        col.classList.remove('drag-over');\n      });\n      e.currentTarget.classList.add('drag-over');\n    }\n  };\n  \n  // Función para determinar si una tarjeta puede ser arrastrada\n  const canDragCard = (app: ApplicationWithApproval): boolean => {\n    // No permitir arrastrar si la tarjeta está en procesamiento\n    if (app.id === processingAppId) {\n      return false;\n    }\n    \n    // Asesores pueden mover cualquier tarjeta excepto las que están procesándose\n    if (isAdvisor()) {\n      // No permitir mover tarjetas con ambas aprobaciones o en estados finales\n      const restrictedStatuses = [\n        APPLICATION_STATUS.POR_DISPERSAR,\n        APPLICATION_STATUS.COMPLETED,\n        APPLICATION_STATUS.EXPIRED,\n        APPLICATION_STATUS.CANCELLED\n      ];\n      \n      if (restrictedStatuses.includes(app.status as APPLICATION_STATUS)) {\n        return false;\n      }\n      \n      // Si tiene ambas aprobaciones y está en estado aprobado, no se debería poder mover\n      if (app.approvalStatus?.approvedByAdvisor && app.approvalStatus?.approvedByCompany && \n          app.status === APPLICATION_STATUS.APPROVED) {\n        return false;\n      }\n      \n      return true;\n    }\n    \n    // Admins de empresa solo pueden mover tarjetas entre Nuevo, En Revisión y Aprobado por mí\n    if (isCompanyAdmin()) {\n      // Estados que nunca pueden moverse por ningún rol\n      const restrictedStatuses = [\n        APPLICATION_STATUS.POR_DISPERSAR,\n        APPLICATION_STATUS.COMPLETED,\n        APPLICATION_STATUS.EXPIRED,\n        APPLICATION_STATUS.CANCELLED,\n        APPLICATION_STATUS.REJECTED\n      ];\n      \n      // No permitir mover tarjetas en estados restringidos\n      if (restrictedStatuses.includes(app.status as APPLICATION_STATUS)) {\n        return false;\n      }\n      \n      // Si ya está aprobada por ambos, no se debería poder mover\n      if (app.approvalStatus?.approvedByAdvisor && app.approvalStatus?.approvedByCompany) {\n        return false;\n      }\n      \n      return true;\n    }\n    \n    // Para otros roles, no permitir arrastrar\n    return false;\n  };\n  \n  // Modificar handleDrop para manejar correctamente el flujo independiente\n  const handleDrop = async (e: React.DragEvent<HTMLDivElement>, newStatus: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    // Eliminar todas las clases de arrastre\n    document.querySelectorAll('.kanban-column').forEach(col => {\n      col.classList.remove('drag-over');\n    });\n    \n    // Recuperar el ID de la aplicación\n    const applicationId = e.dataTransfer.getData('text/plain');\n    if (!applicationId || !user?.id) return;\n    \n    const application = appsWithApproval.find(app => app.id === applicationId);\n    if (!application) return;\n    \n    const oldStatus = application.status;\n    \n    // No hacer nada si el estatus es el mismo\n    if (oldStatus === newStatus) return;\n    \n    console.log(`Intentando mover tarjeta ${applicationId} de ${oldStatus} a ${newStatus}`);\n    \n      // Establecer el ID de la aplicación que se está procesando\n      setProcessingAppId(applicationId);\n      \n    try {\n      // Para administradores de empresa (FLUJO INDEPENDIENTE)\n      if (isCompanyAdmin()) {\n        // El admin de empresa solo puede mover tarjetas entre estos estados\n        const allowedTargetStates = [\n          APPLICATION_STATUS.NEW,\n          APPLICATION_STATUS.IN_REVIEW,\n          APPLICATION_STATUS.APPROVED\n        ];\n        \n        // Si intenta mover a un estado que no está permitido\n        if (!allowedTargetStates.includes(newStatus as APPLICATION_STATUS)) {\n          setErrorMessage(`No puedes mover solicitudes al estado \"${STATUS_LABELS[newStatus as keyof typeof STATUS_LABELS]}\". Solo puedes mover entre Nuevo, En Revisión y Aprobado por mí.`);\n          setProcessingAppId(null);\n          return;\n        }\n        \n        // Estados que nunca pueden ser movidos por un admin de empresa\n        const restrictedStatuses = [\n          APPLICATION_STATUS.POR_DISPERSAR,\n          APPLICATION_STATUS.COMPLETED,\n          APPLICATION_STATUS.EXPIRED,\n          APPLICATION_STATUS.CANCELLED,\n          APPLICATION_STATUS.REJECTED\n        ];\n        \n        // Si la tarjeta está en un estado restringido, no permitir moverla\n        if (restrictedStatuses.includes(oldStatus as APPLICATION_STATUS)) {\n          setErrorMessage(`No puedes mover solicitudes que están en estado \"${STATUS_LABELS[oldStatus as keyof typeof STATUS_LABELS]}\".`);\n          setProcessingAppId(null);\n          return;\n        }\n        \n        // Actualización optimista en UI para mejor fluidez\n      const updatedApps = [...appsWithApproval];\n      const appIndex = updatedApps.findIndex(app => app.id === applicationId);\n      \n      if (appIndex !== -1) {\n          // Crear copia profunda para evitar referencias\n        const updatedApp = { \n          ...updatedApps[appIndex], \n          isMoving: true,\n          targetStatus: newStatus \n        };\n        \n          if (newStatus === APPLICATION_STATUS.NEW) {\n            // Mover a Nuevo\n            updatedApp.company_review_status = false;\n          updatedApp.approvalStatus = {\n            ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByCompany: false\n            };\n          } \n          else if (newStatus === APPLICATION_STATUS.IN_REVIEW) {\n            // Mover a En Revisión\n            updatedApp.company_review_status = true;\n          updatedApp.approvalStatus = {\n            ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByCompany: false\n            };\n          } \n          else if (newStatus === APPLICATION_STATUS.APPROVED) {\n            // Mover a Aprobado por mí\n            updatedApp.company_review_status = true; // Se considera revisado si está aprobado\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByCompany: true\n            };\n            \n            // Llamar a la API para aprobar por empresa\n            if (user?.entityId && application.company_id) {\n              try {\n                await approveByCompany(\n                  applicationId, \n                  \"Aprobado vía Kanban\", \n                  user.entityId, \n                  application.company_id, \n                  null\n                ).then(async () => {\n                  // Verificar si la aplicación ya está aprobada por el asesor\n                  const approvalStatus = await getApprovalStatus(applicationId);\n                  \n                  // Si está aprobada por ambos, mover automáticamente a \"por_dispersar\"\n                  if (approvalStatus?.approvedByAdvisor && approvalStatus?.approvedByCompany) {\n                    // Actualizar en memoria el estado de aprobación\n            updatedApp.approvalStatus = {\n                      approvedByAdvisor: true,\n                      approvedByCompany: true\n                    };\n\n                    // Mostrar notificación de transición automática\n                    setAutoTransitionMessage(`La solicitud ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR]}\"`);\n                    \n                    // Actualizar el estado objetivo para la animación\n                    updatedApp.targetStatus = APPLICATION_STATUS.POR_DISPERSAR;\n                    \n                    // Cambiar el estado a \"por_dispersar\" después de un breve retraso\n                    setTimeout(() => {\n                      if (onStatusChange) {\n                        onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                      }\n                      // Limpiar el mensaje después de mostrar\n                      setTimeout(() => setAutoTransitionMessage(null), 3000);\n                    }, 500);\n                  }\n                });\n              } catch (error) {\n                console.error(\"Error al aprobar por empresa:\", error);\n                setErrorMessage(`Error al aprobar: ${(error as Error).message}`);\n              }\n            }\n          }\n          \n          // Actualizar la app en el estado\n        updatedApps[appIndex] = updatedApp;\n        setAppsWithApproval(updatedApps);\n          \n          // Refrescar el estado de aprobación después de unos segundos para asegurar sincronización\n          setTimeout(async () => {\n            const refreshedStatus = await getApprovalStatus(applicationId);\n            if (refreshedStatus) {\n              updateLocalApprovalStatus(applicationId, {\n                approvedByAdvisor: refreshedStatus.approvedByAdvisor,\n                approvedByCompany: refreshedStatus.approvedByCompany\n              });\n              \n              // Si tiene ambas aprobaciones, asegurar que se mueva a POR_DISPERSAR\n              if (refreshedStatus.approvedByAdvisor && refreshedStatus.approvedByCompany) {\n                if (onStatusChange) {\n                  onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                }\n              }\n            }\n            setProcessingAppId(null);\n          }, 1000);\n          \n          // Quitar la marca de movimiento después de un breve retraso\n          setTimeout(() => {\n            setAppsWithApproval(prev => \n              prev.map(app => \n                app.id === applicationId\n                  ? { ...app, isMoving: false, targetStatus: undefined }\n                  : app\n              )\n            );\n          }, 500);\n        }\n      }\n      // Para asesores (flujo normal)\n      else if (isAdvisor()) {\n        // Actualización optimista en UI\n        const updatedApps = [...appsWithApproval];\n        const appIndex = updatedApps.findIndex(app => app.id === applicationId);\n        \n        if (appIndex !== -1) {\n          // Crear copia profunda para evitar referencias\n          const updatedApp = { \n            ...updatedApps[appIndex], \n            isMoving: true, \n            targetStatus: newStatus, \n            status: newStatus as Application['status'] // actualizar el estado directamente\n          };\n          \n          // Lógica para manejar aprobaciones de manera optimista\n          if (newStatus === APPLICATION_STATUS.APPROVED) {\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByAdvisor: true\n            };\n            \n            // Llamar a la API para aprobar por asesor\n            if (user?.entityId) {\n              try {\n                await approveByAdvisor(\n            applicationId, \n            \"Aprobado vía Kanban\", \n            user.entityId, \n                  null\n                ).then(async () => {\n                  // Verificar si la aplicación ya está aprobada por la empresa\n                  const approvalStatus = await getApprovalStatus(applicationId);\n                  \n                  // Si está aprobada por ambos, mover automáticamente a \"por_dispersar\"\n                  if (approvalStatus?.approvedByAdvisor && approvalStatus?.approvedByCompany) {\n                    // Actualizar en memoria el estado de aprobación\n                    updatedApp.approvalStatus = {\n                      approvedByAdvisor: true,\n                      approvedByCompany: true\n                    };\n                    \n                    // Mostrar notificación de transición automática\n                    setAutoTransitionMessage(`La solicitud ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR]}\"`);\n                    \n                    // Actualizar el estado objetivo para la animación\n                    updatedApp.targetStatus = APPLICATION_STATUS.POR_DISPERSAR;\n                    \n                    // Cambiar el estado a \"por_dispersar\" después de un breve retraso\n                    setTimeout(() => {\n                      if (onStatusChange) {\n                        onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                      }\n                      // Limpiar el mensaje después de mostrar\n                      setTimeout(() => setAutoTransitionMessage(null), 3000);\n                    }, 500);\n                  }\n                });\n              } catch (error) {\n                console.error(\"Error al aprobar por asesor:\", error);\n                setErrorMessage(`Error al aprobar: ${(error as Error).message}`);\n              }\n            }\n          } \n          // Si el asesor mueve de \"aprobado\" a otro estado, quitar la aprobación del asesor\n          else if (oldStatus === APPLICATION_STATUS.APPROVED) {\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByAdvisor: false\n            };\n          }\n          \n          // Actualizar la app en el estado\n          updatedApps[appIndex] = updatedApp;\n          setAppsWithApproval(updatedApps);\n          \n          // Llamar a la API para actualizar el estado\n          if (onStatusChange) {\n            try {\n              await onStatusChange(application, newStatus);\n              \n              // Refrescar el estado de aprobación después de unos segundos para asegurar sincronización\n              setTimeout(async () => {\n                const refreshedStatus = await getApprovalStatus(applicationId);\n                if (refreshedStatus) {\n                  updateLocalApprovalStatus(applicationId, {\n                    approvedByAdvisor: refreshedStatus.approvedByAdvisor,\n                    approvedByCompany: refreshedStatus.approvedByCompany\n                  });\n                  \n                  // Si tiene ambas aprobaciones, asegurar que se mueva a POR_DISPERSAR\n                  if (refreshedStatus.approvedByAdvisor && refreshedStatus.approvedByCompany) {\n                    if (onStatusChange) {\n                      onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                    }\n                  }\n                }\n                setProcessingAppId(null);\n              }, 1000);\n              \n            } catch (error) {\n          console.error(\"Error updating status:\", error);\n              setErrorMessage(`Error al actualizar el estado: ${(error as Error).message}`);\n          \n              // Revertir cambios en caso de error\n          setAppsWithApproval(prev => \n            prev.map(app => \n              app.id === applicationId\n                    ? { ...app, status: oldStatus as Application['status'], isMoving: false, targetStatus: undefined }\n                : app\n            )\n          );\n          setProcessingAppId(null);\n        }\n          }\n          \n          // Quitar la marca de movimiento después de un breve retraso\n          setTimeout(() => {\n      setAppsWithApproval(prev => \n        prev.map(app => \n          app.id === applicationId\n                  ? { ...app, isMoving: false, targetStatus: undefined }\n            : app\n        )\n      );\n          }, 500);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error in handleDrop:\", error);\n      setErrorMessage(`Error al actualizar el estado: ${(error as Error).message}`);\n      setProcessingAppId(null);\n    }\n  };\n  \n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('es-MX', {\n      style: 'currency',\n      currency: 'MXN',\n    }).format(amount);\n  };\n  \n  // Renderizar los indicadores de aprobación con mejor formato y legibilidad\n  const renderApprovalIndicators = (app: ApplicationWithApproval) => {\n    if (!app.approvalStatus) return null;\n    \n    return (\n      <div className=\"flex items-center mt-1 space-x-2\">\n        <div className=\"tooltip tooltip-top flex items-center\" data-tip={app.approvalStatus.approvedByAdvisor ? \"Aprobado por asesor\" : \"Pendiente de aprobación por asesor\"}>\n          <span className=\"text-xs mr-1\">Asesor:</span>\n          <div className={`w-3 h-3 rounded-full ${app.approvalStatus.approvedByAdvisor ? 'bg-success animate-pulse' : 'bg-warning'}`}></div>\n        </div>\n        <div className=\"tooltip tooltip-top flex items-center\" data-tip={app.approvalStatus.approvedByCompany ? \"Aprobado por empresa\" : \"Pendiente de aprobación por empresa\"}>\n          <span className=\"text-xs mr-1\">Empresa:</span>\n          <div className={`w-3 h-3 rounded-full ${app.approvalStatus.approvedByCompany ? 'bg-success animate-pulse' : 'bg-warning'}`}></div>\n        </div>\n        \n        {/* Indicador de doble aprobación */}\n        {app.approvalStatus.approvedByAdvisor && app.approvalStatus.approvedByCompany && (\n          <div className=\"tooltip tooltip-top ml-2\" data-tip=\"Aprobada por ambos\">\n            <div className=\"badge badge-success badge-sm text-xs px-2 py-1\">Aprobado Total</div>\n          </div>\n        )}\n      </div>\n    );\n  };\n  \n  // Mejorar el formato de las etiquetas de producto para mayor legibilidad\n  const getProductLabel = (type: string) => {\n    const labels: Record<string, string> = {\n      'selected_plans': 'Crédito a Plazos',\n      'product_simulations': 'Simulación',\n      'auto_loan': 'Crédito Auto',\n      'car_backed_loan': 'Crédito con Garantía',\n      'personal_loan': 'Préstamo Personal',\n      'cash_advance': 'Adelanto de Efectivo'\n    };\n    \n    return labels[type] || type;\n  };\n  \n  // Función para obtener el color apropiado para la tarjeta según estado y aprobaciones\n  const getCardColor = (app: ApplicationWithApproval) => {\n    const status = app.status || '';\n    \n    // Colores específicos según el estado\n    switch (status.toLowerCase()) {\n      case APPLICATION_STATUS.REJECTED:\n        return 'border-error bg-red-50';\n      case APPLICATION_STATUS.APPROVED:\n        // Si está aprobado, verificar el estado de las aprobaciones\n        if (app.approvalStatus) {\n          const { approvedByAdvisor, approvedByCompany } = app.approvalStatus;\n          if (approvedByAdvisor && approvedByCompany) {\n            return 'border-success bg-green-100'; // Aprobado por ambos\n          } else if (approvedByAdvisor) {\n            return 'border-success bg-green-50'; // Aprobado solo por asesor\n          } else if (approvedByCompany) {\n            return 'border-info bg-blue-50'; // Aprobado solo por empresa\n          }\n        }\n        return 'border-success bg-green-50';\n      case APPLICATION_STATUS.IN_REVIEW:\n        return 'border-info bg-blue-50';\n      case APPLICATION_STATUS.NEW:\n        return 'border-warning bg-yellow-50';\n      case APPLICATION_STATUS.PENDING:\n        return 'border-warning bg-amber-50';\n      case APPLICATION_STATUS.POR_DISPERSAR:\n        return 'border-accent bg-purple-50';\n      case APPLICATION_STATUS.COMPLETED:\n        return 'border-primary bg-indigo-50';\n      case APPLICATION_STATUS.EXPIRED:\n        return 'border-error bg-red-100';\n      case APPLICATION_STATUS.CANCELLED:\n        return 'border-neutral bg-gray-100';\n      default:\n        // Si el estado no coincide con ninguno de los anteriores, usar el color de la columna\n        return `border-${app.status || 'neutral'}`;\n    }\n  };\n  \n  // Estilos personalizados para mostrar claramente cuáles tarjetas se pueden arrastrar\n  const customStyles = `\n    .custom-scrollbar::-webkit-scrollbar {\n      width: 8px;\n      height: 8px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-track {\n      background: #f1f1f1;\n      border-radius: 10px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-thumb {\n      background: #888;\n      border-radius: 10px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n      background: #555;\n    }\n    \n    .kanban-card {\n      transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out, box-shadow 0.3s ease-in-out, border-color 0.3s ease;\n      touch-action: none;\n      user-select: none;\n      will-change: transform, opacity;\n    }\n    \n    .kanban-card-draggable {\n      cursor: grab !important;\n      position: relative;\n    }\n    \n    .kanban-card-draggable:hover {\n      transform: translateY(-4px);\n      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n      border-color: #a855f7;\n      z-index: 10;\n    }\n    \n    .kanban-card-draggable:active {\n      cursor: grabbing !important;\n    }\n    \n    /* Indicator for draggable cards */\n    .kanban-card-draggable::after {\n      content: '';\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      width: 20px;\n      height: 20px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23666'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M7 11.5V14m0-2.5v-6a1.5 1.5 0 113 0m-3 6a1.5 1.5 0 00-3 0v2a7.5 7.5 0 0015 0v-5a1.5 1.5 0 013 0m-6-3V11m0-5.5v-1a1.5 1.5 0 013 0v1m0 0V11' /%3E%3C/svg%3E\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      opacity: 0.7;\n      transition: opacity 0.2s ease;\n    }\n    \n    .kanban-card-draggable:hover::after {\n      opacity: 1;\n    }\n    \n    .kanban-card-locked {\n      position: relative;\n      cursor: not-allowed !important;\n      opacity: 0.8;\n    }\n    \n    .kanban-card-locked::after {\n      content: '';\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      width: 20px;\n      height: 20px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23999'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z' /%3E%3C/svg%3E\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      opacity: 0.7;\n    }\n    \n    .kanban-card.dragging {\n      opacity: 0.8;\n      transform: scale(1.03);\n      box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n      z-index: 50;\n    }\n    \n    .kanban-column {\n      transition: all 0.2s ease;\n      border-radius: 0.75rem;\n      will-change: transform, background-color;\n    }\n    \n    .kanban-column.drag-over {\n      background-color: rgba(var(--b2, 217 217 217) / 0.5);\n      transform: scale(1.01);\n      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);\n      border: 2px dashed #a855f7 !important;\n    }\n\n    .kanban-container {\n      scroll-behavior: smooth;\n    }\n\n    @media (min-width: 768px) {\n      .kanban-card-draggable:hover {\n        transform: translateY(-4px);\n        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n      }\n    }\n    \n    /* Animaciones para cambios de estado */\n    @keyframes fadeIn {\n      0% { opacity: 0; }\n      100% { opacity: 1; }\n    }\n    \n    @keyframes slideIn {\n      0% { transform: translateY(10px); opacity: 0; }\n      100% { transform: translateY(0); opacity: 1; }\n    }\n    \n    @keyframes processingPulse {\n      0% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0.4); }\n      70% { box-shadow: 0 0 0 6px rgba(124, 58, 237, 0); }\n      100% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0); }\n    }\n    \n    .kanban-card {\n      animation: fadeIn 0.3s ease-out;\n    }\n    \n    .processing-toast {\n      position: fixed;\n      bottom: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      padding: 10px 20px;\n      background-color: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      animation: slideIn 0.3s ease-out;\n    }\n    \n    .auto-transition-toast {\n      position: fixed;\n      bottom: 70px;\n      left: 50%;\n      transform: translateX(-50%);\n      padding: 10px 20px;\n      background-color: #dcfce7;\n      border: 1px solid #86efac;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      animation: slideIn 0.3s ease-out;\n    }\n    \n    /* Pop-up tooltip con instrucciones para arrastrar */\n    .drag-instructions {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background-color: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      padding: 12px 16px;\n      z-index: 1000;\n      max-width: 300px;\n      animation: fadeIn 0.3s ease-out;\n    }\n    \n    /* Mejoras para vista mobile */\n    @media (max-width: 640px) {\n      .kanban-column {\n        min-height: 300px;\n      }\n    }\n  `;\n  \n  // Función para obtener clases draggable\n  const getDraggableClasses = (app: ApplicationWithApproval): string => {\n    // Usar la función canDragCard que está definida en el ámbito superior\n    const isDraggable = canDragCard(app) && app.id !== processingAppId;\n    return isDraggable \n      ? 'cursor-grab kanban-card-draggable' \n      : 'cursor-not-allowed opacity-80 kanban-card-locked';\n  };\n\n  // Función para definir los tooltips con información clara y precisa\n  const getDragTooltip = (app: ApplicationWithApproval): string => {\n    if (app.id === processingAppId) {\n      return \"Esta tarjeta está siendo procesada\";\n    }\n    \n    // Si la tarjeta se puede arrastrar, mostrar mensaje informativo\n    if (canDragCard(app)) {\n      return \"Arrastra para cambiar el estado\";\n    }\n    \n    // Mensajes específicos para casos donde no se puede arrastrar\n    if (app.approvalStatus?.approvedByAdvisor && app.approvalStatus?.approvedByCompany) {\n      return \"Esta solicitud ya está completamente aprobada y no puede ser movida\";\n    }\n    \n    // Mensajes específicos según el rol y estado\n    if (isCompanyAdmin()) {\n      if (app.status === APPLICATION_STATUS.REJECTED) {\n        return \"Las solicitudes rechazadas solo pueden ser movidas por asesores\";\n      } else if (app.status === APPLICATION_STATUS.POR_DISPERSAR) {\n        return \"Esta solicitud ya está lista para dispersión y no puede regresar a estados anteriores\";\n      } else if (app.status === APPLICATION_STATUS.COMPLETED) {\n        return \"Esta solicitud ya está completada y no puede cambiar de estado\";\n      } else if (app.status === APPLICATION_STATUS.EXPIRED) {\n        return \"Esta solicitud ha expirado y no puede cambiar de estado\";\n      } else if (app.status === APPLICATION_STATUS.CANCELLED) {\n        return \"Esta solicitud fue cancelada y no puede cambiar de estado\";\n      }\n    }\n    \n    return \"No puedes mover esta tarjeta en este momento\";\n  };\n\n  // Utilidad para asegurar que las aplicaciones con ambas aprobaciones se muevan a POR_DISPERSAR\n  const ensureCorrectStatusForDualApprovals = useCallback(async () => {\n    if (!applications || !user || !onStatusChange) return;\n    \n    console.log(\"Verificando aplicaciones con aprobación dual...\");\n    \n    // Identificar aplicaciones que tienen ambas aprobaciones pero no están en POR_DISPERSAR\n    const needStatusUpdate = (applications as ApplicationWithApproval[])\n      .filter(app => {\n        const hasBothApprovals = app.approvalStatus?.approvedByAdvisor && app.approvalStatus?.approvedByCompany;\n        \n        const isTerminalStatus = [\n          APPLICATION_STATUS.COMPLETED,\n          APPLICATION_STATUS.EXPIRED,\n          APPLICATION_STATUS.CANCELLED,\n          APPLICATION_STATUS.REJECTED\n        ].includes(app.status as APPLICATION_STATUS);\n        \n        return hasBothApprovals && !isTerminalStatus && app.status !== APPLICATION_STATUS.POR_DISPERSAR;\n      });\n    \n    if (needStatusUpdate.length > 0) {\n      console.log(`Se encontraron ${needStatusUpdate.length} aplicaciones que necesitan mover a POR_DISPERSAR:`);\n      \n      // Actualizar el estado de cada aplicación\n      for (const app of needStatusUpdate) {\n        console.log(`Actualizando aplicación ${app.id} a POR_DISPERSAR (tiene ambas aprobaciones)`);\n        try {\n          await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n          // Mostrar notificación de transición automática\n          setAutoTransitionMessage(`La solicitud ${app.id} ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR]}\"`);\n        } catch (error) {\n          console.error(`Error al actualizar estado de aplicación ${app.id}:`, error);\n        }\n      }\n      \n      // Limpiar mensaje después de un tiempo\n      setTimeout(() => setAutoTransitionMessage(null), 3000);\n    } else {\n      console.log(\"No se encontraron aplicaciones que necesiten actualización de estado\");\n    }\n  }, [applications, user, onStatusChange]);\n\n  // Verificar status cuando las aplicaciones cambian\n  useEffect(() => {\n    if (applications?.length > 0) {\n      ensureCorrectStatusForDualApprovals();\n    }\n  }, [applications, ensureCorrectStatusForDualApprovals]);\n\n  if (applications.length === 0) {\n    return (\n      <div className=\"bg-base-200 p-6 rounded-lg\">\n        <h3 className=\"text-xl font-medium text-center\">No hay solicitudes para mostrar</h3>\n        <p className=\"text-center text-gray-500 mt-2\">No se encontraron solicitudes en el sistema</p>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"w-full overflow-x-auto custom-scrollbar relative\">\n      <style>{customStyles}</style>\n      \n      {/* Reemplazar el overlay de carga con una notificación flotante más sutil */}\n      {processingAppId && (\n        <div className=\"processing-toast\">\n          <span className=\"loading loading-spinner loading-sm text-primary\"></span>\n          <p className=\"font-medium\">Actualizando estado...</p>\n        </div>\n      )}\n      \n      {/* Notificación para transiciones automáticas */}\n      {autoTransitionMessage && (\n        <div className=\"auto-transition-toast\">\n          <span className=\"loading loading-spinner loading-sm text-success\"></span>\n          <p className=\"font-medium\">{autoTransitionMessage}</p>\n        </div>\n      )}\n      \n      {errorMessage && (\n        <div className=\"mb-4 alert alert-error shadow-lg\">\n          <div>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"stroke-current flex-shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n            <span>{errorMessage}</span>\n          </div>\n          <div className=\"flex-none\">\n            <button className=\"btn btn-sm\" onClick={() => setErrorMessage(null)}>Cerrar</button>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 2xl:grid-cols-6 gap-4 pb-4 kanban-container p-4\" style={{ minWidth: '1000px' }}>\n        {columns.map(column => (\n          <div \n            key={column.id}\n            className={`bg-base-100 rounded-xl shadow-md border-t-4 border-${column.color} border-l border-r border-b flex flex-col h-full kanban-column`}\n            onDragOver={(e) => {\n              handleDragOver(e, column.id);\n            }}\n            onDragLeave={(e) => {\n              e.currentTarget.classList.remove('drag-over');\n            }}\n            onDrop={(e) => {\n              handleDrop(e, column.id);\n            }}\n          >\n            {/* Cabecera de columna con indicador de color */}\n            <div className={`text-center py-3 px-4 font-bold rounded-t-lg flex items-center justify-between bg-${column.color} bg-opacity-10`}>\n              <span className={`text-${column.color} font-bold text-lg`}>{column.title}</span>\n              <span className={`badge badge-${column.color} badge-lg`}>{column.applications.length}</span>\n            </div>\n            \n            <div className=\"p-3 space-y-3 min-h-[500px] max-h-[calc(100vh-220px)] overflow-y-auto custom-scrollbar flex-grow\">\n              {column.applications.length === 0 ? (\n                <div className=\"flex items-center justify-center h-full opacity-50 border-2 border-dashed border-base-300 rounded-lg p-6\">\n                  <div className=\"text-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-12 w-12 mx-auto text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                    </svg>\n                    <p className=\"text-sm mt-2\">No hay solicitudes</p>\n                  </div>\n                </div>\n              ) : (\n                column.applications.map((app, index) => {\n                  const isCardDraggable = canDragCard(app) && app.id !== processingAppId;\n                  return (\n                  <div\n                    key={app.id}\n                      data-tip={getDragTooltip(app)}\n                      className={`card shadow hover:shadow-lg transition-all ${getCardColor(app)} border-l-4 border-t border-r border-b hover:border-primary kanban-card relative ${app.id === processingAppId ? 'processing' : ''} ${app.isMoving ? 'opacity-90' : ''} ${getDraggableClasses(app)}`}\n                      draggable={isCardDraggable}\n                      onDragStart={isCardDraggable ? (e) => handleDragStart(e, app, index) : undefined}\n                      onDragEnd={isCardDraggable ? handleDragEnd : undefined}\n                    style={{\n                      animation: app.id === processingAppId ? 'processingPulse 1.5s infinite' : ''\n                    }}\n                  >\n                    <div className=\"card-body p-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"flex-1 font-semibold\">{app.client_name}</div>\n                          <span className={`badge badge-${column.color} badge-md text-xs px-2 py-1 whitespace-nowrap`}>\n                            {getProductLabel(app.application_type)}\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"mt-2\">\n                        {/* Info de la empresa */}\n                        <div className=\"text-sm text-gray-600 mb-1 flex items-center\">\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1 inline\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\" />\n                          </svg>\n                          <span className=\"truncate max-w-[180px] font-medium\">\n                            {app.company_name || \"Sin empresa\"}\n                          </span>\n                        </div>\n                        \n                        {/* Monto */}\n                        <div className=\"flex items-center mb-2\">\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1 text-primary\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                          </svg>\n                          <span className=\"text-base font-bold text-primary\">\n                              {formatCurrency(app.requested_amount || 0)}\n                          </span>\n                        </div>\n                        \n                        {/* Indicadores de estado de aprobación */}\n                        {renderApprovalIndicators(app)}\n                        \n                        <div className=\"card-actions justify-end mt-3\">\n                          <Link to={`/applications/${app.id}`} className=\"btn btn-sm btn-primary w-full\">\n                            Ver Detalle\n                          </Link>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  );\n                })\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default KanbanBoard; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,OAAO,EAAEC,WAAW,QAAQ,OAAO;AAChF,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAAsBC,iBAAiB,EAAEC,gBAAgB,EAAEC,gBAAgB,QAAQ,mCAAmC;AACtH,SAAwBC,kBAAkB,EAAEC,aAAa,QAAQ,gCAAgC;AACjG,SAASC,cAAc,QAAQ,mCAAmC;AAClE,SAASC,OAAO,QAAQ,4BAA4B;;AAEpD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,eAAeA,CAACC,GAAW,EAAE;EACpC,IAAI,CAACA,GAAG,EAAE,OAAO,EAAE;EACnB,OAAOA,GAAG,CAACC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;AAChC;;AAOA;;AAMA;;AAQA,MAAMC,WAAuC,GAAGA,CAAC;EAAEC,YAAY,GAAG,EAAE;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACzF,MAAM;IAAEC;EAAK,CAAC,GAAGV,OAAO,CAAC,CAAC;EAC1B,MAAM;IAAEW,SAAS;IAAEC;EAAe,CAAC,GAAGb,cAAc,CAAC,CAAC;EACtD,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAG1B,QAAQ,CAAgB,IAAI,CAAC;EACzE,MAAM,CAAC2B,eAAe,EAAEC,kBAAkB,CAAC,GAAG5B,QAAQ,CAAgB,IAAI,CAAC;EAC3E,MAAM,CAAC6B,YAAY,EAAEC,eAAe,CAAC,GAAG9B,QAAQ,CAAgB,IAAI,CAAC;EACrE,MAAM,CAAC+B,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGhC,QAAQ,CAAgB,IAAI,CAAC;EACvF,MAAM,CAACiC,SAAS,EAAEC,YAAY,CAAC,GAAGlC,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAMmC,WAAW,GAAGjC,MAAM,CAAwB,IAAI,CAAC;EACvD,MAAMkC,YAAY,GAAGlC,MAAM,CAAwB,IAAI,CAAC;EACxD,MAAMmC,mBAAmB,GAAGnC,MAAM,CAAS,CAAC,CAAC,CAAC;EAC9C,MAAMoC,uBAAuB,GAAGpC,MAAM,CAAS,EAAE,CAAC;;EAElD;EACA,MAAM,CAACqC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGxC,QAAQ,CAA4B,EAAE,CAAC;;EAEvF;EACAC,SAAS,CAAC,MAAM;IACd,MAAMwC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,IAAI,CAACtB,YAAY,IAAIA,YAAY,CAACuB,MAAM,KAAK,CAAC,IAAI,CAACpB,IAAI,EAAE;QACvDqB,OAAO,CAACC,GAAG,CAAC,+DAA+D,CAAC;QAC5EJ,mBAAmB,CAAC,EAAE,CAAC;QACvB;MACF;MAEAN,YAAY,CAAC,IAAI,CAAC;MAElB,IAAI;QACFS,OAAO,CAACC,GAAG,CAAC,uCAAuCzB,YAAY,CAACuB,MAAM,kBAAkB,CAAC;;QAEzF;QACA,MAAMG,cAAyC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC7B,YAAY,CAAC,CAAC;;QAE1F;QACA,MAAM8B,gBAAgB,GAAGJ,cAAc,CAACK,GAAG,CAAC,MAAOC,GAAG,IAAK;UACzD,IAAI;YACF,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;cACXT,OAAO,CAACU,IAAI,CAAC,4CAA4C,CAAC;cAC1DF,GAAG,CAACG,cAAc,GAAG;gBAAEC,iBAAiB,EAAE,KAAK;gBAAEC,iBAAiB,EAAE;cAAM,CAAC;cAC3E,OAAOL,GAAG;YACZ;YAEA,MAAMM,MAAM,GAAG,MAAMnD,iBAAiB,CAAC6C,GAAG,CAACC,EAAE,CAAC;YAE9C,IAAIK,MAAM,EAAE;cACVN,GAAG,CAACG,cAAc,GAAGG,MAAM;YAC7B,CAAC,MAAM;cACLN,GAAG,CAACG,cAAc,GAAG;gBACnBC,iBAAiB,EAAE,KAAK;gBACxBC,iBAAiB,EAAE;cACrB,CAAC;YACH;YAEA,OAAOL,GAAG;UACZ,CAAC,CAAC,OAAOO,KAAK,EAAE;YACdf,OAAO,CAACe,KAAK,CAAC,yDAAyDP,GAAG,CAACC,EAAE,GAAG,EAAEM,KAAK,CAAC;YACxF;YACAP,GAAG,CAACG,cAAc,GAAG;cACnBC,iBAAiB,EAAE,KAAK;cACxBC,iBAAiB,EAAE;YACrB,CAAC;YACD,OAAOL,GAAG;UACZ;QACF,CAAC,CAAC;;QAEF;QACA,MAAMQ,YAAY,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACZ,gBAAgB,CAAC;QAExDN,OAAO,CAACC,GAAG,CAAC,uCAAuCe,YAAY,CAACjB,MAAM,eAAe,CAAC;;QAEtF;QACAF,mBAAmB,CAACmB,YAAY,CAAC;MAEnC,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdf,OAAO,CAACe,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9D;QACA,MAAMI,WAAW,GAAG3C,YAAY,CAAC+B,GAAG,CAACC,GAAG,KAAK;UAC3C,GAAGA,GAAG;UACNG,cAAc,EAAE;YAAEC,iBAAiB,EAAE,KAAK;YAAEC,iBAAiB,EAAE;UAAM;QACvE,CAAC,CAAC,CAA8B;QAEhChB,mBAAmB,CAACsB,WAAW,CAAC;MAClC,CAAC,SAAS;QACR5B,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDO,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACtB,YAAY,EAAEG,IAAI,CAAC,CAAC;;EAExB;EACArB,SAAS,CAAC,MAAM;IACd;IACA,MAAM8D,eAAe,GAAG5C,YAAY,CAAC6C,MAAM,CAACb,GAAG,IAAI;MACjD;MACA,MAAMc,KAAK,GAAG,CAACd,GAAG,CAACM,MAAM,IAAIN,GAAG,CAACM,MAAM,KAAK,SAAS,IAAIN,GAAG,CAACM,MAAM,KAAK,WAAW;MACnF,MAAMS,SAAS,GAAG,IAAIC,IAAI,CAAChB,GAAG,CAACiB,UAAU,CAAC;MAC1C,MAAMC,GAAG,GAAG,IAAIF,IAAI,CAAC,CAAC;MACtB,MAAMG,YAAY,GAAG,CAACD,GAAG,CAACE,OAAO,CAAC,CAAC,GAAGL,SAAS,CAACK,OAAO,CAAC,CAAC,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;MAC7E,MAAMC,QAAQ,GAAGF,YAAY,GAAG,EAAE;MAElC,OAAOE,QAAQ,KAAKP,KAAK,IAAId,GAAG,CAACM,MAAM,KAAK,KAAK,CAAC;IACpD,CAAC,CAAC;;IAEF;IACA,IAAIM,eAAe,CAACrB,MAAM,GAAG,CAAC,EAAE;MAC9BC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEmB,eAAe,CAAC;MAC/D,MAAMU,WAAW,GAAG,CAAC,GAAGlC,gBAAgB,CAAC;MACzCwB,eAAe,CAACW,OAAO,CAACC,MAAM,IAAI;QAChC,MAAMC,KAAK,GAAGH,WAAW,CAACI,SAAS,CAAC1B,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKuB,MAAM,CAACvB,EAAE,CAAC;QAChE,IAAIwB,KAAK,KAAK,CAAC,CAAC,KAAK,CAACH,WAAW,CAACG,KAAK,CAAC,CAACnB,MAAM,IAAIgB,WAAW,CAACG,KAAK,CAAC,CAACnB,MAAM,KAAK,SAAS,IAAIgB,WAAW,CAACG,KAAK,CAAC,CAACnB,MAAM,KAAK,WAAW,CAAC,EAAE;UACxIgB,WAAW,CAACG,KAAK,CAAC,GAAG;YACnB,GAAGH,WAAW,CAACG,KAAK,CAAC;YACrBnB,MAAM,EAAEhD,kBAAkB,CAACqE;UAC7B,CAAC;UACDnC,OAAO,CAACC,GAAG,CAAC,cAAc+B,MAAM,CAACvB,EAAE,wBAAwB,CAAC;QAC9D;MACF,CAAC,CAAC;MAEFZ,mBAAmB,CAACiC,WAAW,CAAC;IAClC;EACF,CAAC,EAAE,CAACtD,YAAY,CAAC,CAAC,CAAC,CAAC;;EAEpB;EACA;EACAlB,SAAS,CAAC,MAAM;IACd,MAAM8E,uBAAuB,GAAG,MAAAA,CAAA,KAAY;MAC1C;MACA,IAAI,EAACzD,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAE8B,EAAE,GAAE;MAEf,IAAI;QACF;QACA,IAAI5B,cAAc,CAAC,CAAC,IAAIL,YAAY,CAACuB,MAAM,GAAG,CAAC,EAAE;UAC/C;UACA,MAAMsC,SAAS,GAAG,IAAIb,IAAI,CAAC,CAAC;UAC5Ba,SAAS,CAACC,QAAQ,CAACD,SAAS,CAACE,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC;;UAE7C;UACA,MAAMC,UAAU,GAAGhE,YAAY,CAAC6C,MAAM,CAACb,GAAG,IAAI;YAC5C,MAAMe,SAAS,GAAG,IAAIC,IAAI,CAAChB,GAAG,CAACiB,UAAU,CAAC;YAC1C,OAAOF,SAAS,IAAIc,SAAS;UAC/B,CAAC,CAAC;;UAEF;UACA,IAAIG,UAAU,CAACzC,MAAM,GAAG,CAAC,EAAE;YACzBC,OAAO,CAACC,GAAG,CAAC,eAAeuC,UAAU,CAACzC,MAAM,yBAAyB,CAAC;;YAEtE;YACA;YACA,MAAM+B,WAAW,GAAG,CAAC,GAAGlC,gBAAgB,CAAC;YACzC,IAAI6C,UAAU,GAAG,KAAK;YAEtBD,UAAU,CAACT,OAAO,CAACW,SAAS,IAAI;cAC9B,MAAMT,KAAK,GAAGH,WAAW,CAACI,SAAS,CAAC1B,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKiC,SAAS,CAACjC,EAAE,CAAC;;cAEnE;cACA,IAAIwB,KAAK,KAAK,CAAC,CAAC,EAAE;gBAChBjC,OAAO,CAACC,GAAG,CAAC,8BAA8ByC,SAAS,CAACjC,EAAE,YAAY,CAAC;gBACnEqB,WAAW,CAACa,IAAI,CAAC;kBACf,GAAGD,SAAS;kBACZ5B,MAAM,EAAE4B,SAAS,CAAC5B,MAAM,IAAIhD,kBAAkB,CAACqE,GAAG;kBAClDxB,cAAc,EAAE;oBACdC,iBAAiB,EAAE8B,SAAS,CAACE,mBAAmB,IAAI,KAAK;oBACzD/B,iBAAiB,EAAE6B,SAAS,CAACG,mBAAmB,IAAI;kBACtD;gBACF,CAAC,CAAC;gBACFJ,UAAU,GAAG,IAAI;cACnB;cACA;cAAA,KACK,IAAI,CAACX,WAAW,CAACG,KAAK,CAAC,CAACnB,MAAM,IAAIgB,WAAW,CAACG,KAAK,CAAC,CAACnB,MAAM,KAAK,SAAS,IAAIgB,WAAW,CAACG,KAAK,CAAC,CAACnB,MAAM,KAAK,WAAW,EAAE;gBAC3Hd,OAAO,CAACC,GAAG,CAAC,0BAA0ByC,SAAS,CAACjC,EAAE,UAAU,CAAC;gBAC7DqB,WAAW,CAACG,KAAK,CAAC,GAAG;kBACnB,GAAGH,WAAW,CAACG,KAAK,CAAC;kBACrBnB,MAAM,EAAEhD,kBAAkB,CAACqE;gBAC7B,CAAC;gBACDM,UAAU,GAAG,IAAI;cACnB;YACF,CAAC,CAAC;;YAEF;YACA,IAAIA,UAAU,EAAE;cACd5C,mBAAmB,CAACiC,WAAW,CAAC;YAClC;UACF;QACF;MACF,CAAC,CAAC,OAAOf,KAAK,EAAE;QACdf,OAAO,CAACe,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAChE;IACF,CAAC;;IAED;IACAqB,uBAAuB,CAAC,CAAC;EAC3B,CAAC,EAAE,CAAC5D,YAAY,EAAEG,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE8B,EAAE,EAAE5B,cAAc,CAAC,CAAC;;EAE5C;EACAvB,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACkB,YAAY,IAAIA,YAAY,CAACuB,MAAM,KAAK,CAAC,EAAE;IAEhDC,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEzB,YAAY,CAAC+B,GAAG,CAACuC,CAAC,KAAK;MAAErC,EAAE,EAAEqC,CAAC,CAACrC,EAAE;MAAEK,MAAM,EAAEgC,CAAC,CAAChC;IAAO,CAAC,CAAC,CAAC,CAAC;;IAE3G;IACA,MAAMgB,WAAW,GAAG,CAAC,GAAGlC,gBAAgB,CAAC;IACzC,IAAI6C,UAAU,GAAG,KAAK;IAEtBjE,YAAY,CAACuD,OAAO,CAACvB,GAAG,IAAI;MAC1B,MAAMyB,KAAK,GAAGH,WAAW,CAACI,SAAS,CAACY,CAAC,IAAIA,CAAC,CAACrC,EAAE,KAAKD,GAAG,CAACC,EAAE,CAAC;MACzD,MAAMsC,WAAW,GACf,CAACvC,GAAG,CAACM,MAAM,IACXN,GAAG,CAACM,MAAM,KAAK,SAAS,IACxBN,GAAG,CAACM,MAAM,KAAK,WAAW;;MAE5B;MACA,IAAImB,KAAK,KAAK,CAAC,CAAC,IAAIc,WAAW,EAAE;QAC/B/C,OAAO,CAACC,GAAG,CAAC,qCAAqCO,GAAG,CAACC,EAAE,QAAQD,GAAG,CAACM,MAAM,WAAW,CAAC;QACrFgB,WAAW,CAACG,KAAK,CAAC,GAAG;UACnB,GAAGH,WAAW,CAACG,KAAK,CAAC;UACrBnB,MAAM,EAAEhD,kBAAkB,CAACqE;QAC7B,CAAC;QACDM,UAAU,GAAG,IAAI;MACnB,CAAC,MAAM,IAAIR,KAAK,KAAK,CAAC,CAAC,EAAE;QACvB;QACA;QACA,MAAMe,SAAS,GAAGD,WAAW,GAAGjF,kBAAkB,CAACqE,GAAG,GAAI3B,GAAG,CAACM,MAAgC;QAC9Fd,OAAO,CAACC,GAAG,CAAC,wBAAwBO,GAAG,CAACC,EAAE,gBAAgBuC,SAAS,GAAG,CAAC;QACvElB,WAAW,CAACa,IAAI,CAAC;UACf,GAAGnC,GAAG;UACNM,MAAM,EAAEkC,SAAS;UACjBrC,cAAc,EAAE;YACdC,iBAAiB,EAAEJ,GAAG,CAACoC,mBAAmB,IAAI,KAAK;YACnD/B,iBAAiB,EAAEL,GAAG,CAACqC,mBAAmB,IAAI;UAChD;QACF,CAAC,CAAC;QACFJ,UAAU,GAAG,IAAI;MACnB;MACA;IACF,CAAC,CAAC;IAEF,IAAIA,UAAU,EAAE;MACdzC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC6B,WAAW,CAACC,OAAO,CAACvB,GAAG,IAAIR,OAAO,CAACC,GAAG,CAAC,KAAKO,GAAG,CAACC,EAAE,KAAKD,GAAG,CAACM,MAAM,EAAE,CAAC,CAAC;MACrEjB,mBAAmB,CAACiC,WAAW,CAAC;IAClC;EACF,CAAC,EAAE,CAACtD,YAAY,CAAC,CAAC;;EAElB;EACA,MAAMyE,mBAAmB,GAAGzF,OAAO,CAAC,MAAM;IACxC;IACA,IAAI,CAACgB,YAAY,IAAIA,YAAY,CAACuB,MAAM,KAAK,CAAC,IAAI,CAACpB,IAAI,EAAE;MACvDqB,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC;;MAExE;MACA,MAAMiD,WAAsD,GAAG,CAAC,CAAC;MACjEC,MAAM,CAACC,MAAM,CAACtF,kBAAkB,CAAC,CAACiE,OAAO,CAACjB,MAAM,IAAI;QAClDoC,WAAW,CAACpC,MAAM,CAAC,GAAG,EAAE;MAC1B,CAAC,CAAC;MACF,OAAOoC,WAAW;IACpB;IAEAlD,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEzB,YAAY,CAAC;;IAEnE;IACA,MAAM6E,YAAuD,GAAG,CAAC,CAAC;;IAElE;IACAF,MAAM,CAACC,MAAM,CAACtF,kBAAkB,CAAC,CAACiE,OAAO,CAACjB,MAAM,IAAI;MAClDuC,YAAY,CAACvC,MAAM,CAAC,GAAG,EAAE;IAC3B,CAAC,CAAC;;IAEF;IACA;IACAtC,YAAY,CAACuD,OAAO,CAACvB,GAAG,IAAI;MAC1B,IAAIA,GAAG,CAACM,MAAM,IAAI,CAACuC,YAAY,CAAC7C,GAAG,CAACM,MAAM,CAAC,EAAE;QAC3Cd,OAAO,CAACC,GAAG,CAAC,8CAA8CO,GAAG,CAACM,MAAM,EAAE,CAAC;QACvEuC,YAAY,CAAC7C,GAAG,CAACM,MAAM,CAAC,GAAG,EAAE;MAC/B;IACF,CAAC,CAAC;;IAEF;IACA,MAAMwC,WAAW,GAAGC,KAAK,CAACC,OAAO,CAAC5D,gBAAgB,CAAC,GAAGA,gBAAgB,GAAG,EAAE;IAE3E,IAAI0D,WAAW,CAACvD,MAAM,KAAK,CAAC,EAAE;MAC5BC,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC;MACxE,OAAOoD,YAAY;IACrB;IAEArD,OAAO,CAACC,GAAG,CAAC,aAAaqD,WAAW,CAACvD,MAAM,wCAAwC,CAAC;;IAEpF;IACA,MAAM0D,gBAAgB,GAAGA,CAACjD,GAA4B,EAAEkD,YAAoB,KAAK;MAC/E,IAAI,CAACL,YAAY,CAACK,YAAY,CAAC,EAAE;QAC/B1D,OAAO,CAACe,KAAK,CAAC,2BAA2B2C,YAAY,wBAAwB,CAAC;QAC9E;QACAL,YAAY,CAACK,YAAY,CAAC,GAAG,EAAE;MACjC;MAEAL,YAAY,CAACK,YAAY,CAAC,CAACf,IAAI,CAACnC,GAAG,CAAC;MACpC,OAAO,IAAI;IACb,CAAC;IAED8C,WAAW,CAACvB,OAAO,CAACvB,GAAG,IAAI;MAAA,IAAAmD,mBAAA,EAAAC,oBAAA;MACzB;MACA,IAAI,CAACpD,GAAG,CAACM,MAAM,EAAE;QACfd,OAAO,CAACU,IAAI,CAAC,cAAcF,GAAG,CAACC,EAAE,0CAA0C,CAAC;QAC5ED,GAAG,CAACM,MAAM,GAAGhD,kBAAkB,CAACqE,GAAG;MACrC;;MAEA;MACA,MAAM0B,gBAAgB,GAAG,EAAAF,mBAAA,GAAAnD,GAAG,CAACG,cAAc,cAAAgD,mBAAA,uBAAlBA,mBAAA,CAAoB/C,iBAAiB,OAAAgD,oBAAA,GAAIpD,GAAG,CAACG,cAAc,cAAAiD,oBAAA,uBAAlBA,oBAAA,CAAoB/C,iBAAiB;;MAEvG;MACA,MAAMiD,gBAAgB,GAAG,CACvBhG,kBAAkB,CAACiG,SAAS,EAC5BjG,kBAAkB,CAACkG,OAAO,EAC1BlG,kBAAkB,CAACmG,SAAS,EAC5BnG,kBAAkB,CAACoG,QAAQ,CAC5B,CAACC,QAAQ,CAAC3D,GAAG,CAACM,MAA4B,CAAC;;MAE5C;MACA,IAAI+C,gBAAgB,IAAI,CAACC,gBAAgB,IAAItD,GAAG,CAACM,MAAM,KAAKhD,kBAAkB,CAACsG,aAAa,EAAE;QAC5FpE,OAAO,CAACC,GAAG,CAAC,cAAcO,GAAG,CAACC,EAAE,0CAA0C,CAAC;QAC3EgD,gBAAgB,CAACjD,GAAG,EAAE1C,kBAAkB,CAACsG,aAAa,CAAC;MACzD;MACA;MAAA,KACK,IAAI5D,GAAG,CAACM,MAAM,EAAE;QACnBd,OAAO,CAACC,GAAG,CAAC,cAAcO,GAAG,CAACC,EAAE,cAAcD,GAAG,CAACM,MAAM,EAAE,CAAC;QAC3D2C,gBAAgB,CAACjD,GAAG,EAAEA,GAAG,CAACM,MAAM,CAAC;MACnC;MACA;MAAA,KACK;QACHd,OAAO,CAACU,IAAI,CAAC,cAAcF,GAAG,CAACC,EAAE,yCAAyC,CAAC;QAC3EgD,gBAAgB,CAACjD,GAAG,EAAE1C,kBAAkB,CAACqE,GAAG,CAAC;MAC/C;IACF,CAAC,CAAC;;IAEF;IACAgB,MAAM,CAACkB,OAAO,CAAChB,YAAY,CAAC,CAACtB,OAAO,CAAC,CAAC,CAACjB,MAAM,EAAEwD,IAAI,CAAC,KAAK;MACvDtE,OAAO,CAACC,GAAG,CAAC,SAASa,MAAM,KAAKwD,IAAI,CAACvE,MAAM,eAAe,CAAC;IAC7D,CAAC,CAAC;;IAEF;IACAC,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;IACnDqD,WAAW,CAACvB,OAAO,CAACvB,GAAG,IAAI;MAAA,IAAA+D,oBAAA,EAAAC,oBAAA;MACzB,IAAI,CAAAD,oBAAA,GAAA/D,GAAG,CAACG,cAAc,cAAA4D,oBAAA,eAAlBA,oBAAA,CAAoB3D,iBAAiB,KAAA4D,oBAAA,GAAIhE,GAAG,CAACG,cAAc,cAAA6D,oBAAA,eAAlBA,oBAAA,CAAoB3D,iBAAiB,EAAE;QAAA,IAAA4D,oBAAA;QAClF,MAAMC,YAAY,IAAAD,oBAAA,GAAGtB,MAAM,CAACkB,OAAO,CAAChB,YAAY,CAAC,CAC9CsB,IAAI,CAAC,CAAC,CAACC,CAAC,EAAEN,IAAI,CAAC,KAAKA,IAAI,CAACO,IAAI,CAAC/B,CAAC,IAAIA,CAAC,CAACrC,EAAE,KAAKD,GAAG,CAACC,EAAE,CAAC,CAAC,cAAAgE,oBAAA,uBADlCA,oBAAA,CACqC,CAAC,CAAC;QAE5DzE,OAAO,CAACC,GAAG,CAAC,OAAOO,GAAG,CAACC,EAAE,aAAaD,GAAG,CAACM,MAAM,iBAAiB4D,YAAY,IAAI,eAAe,EAAE,CAAC;MACrG;IACF,CAAC,CAAC;IAEF,OAAOrB,YAAY;EACrB,CAAC,EAAE,CAAC7E,YAAY,EAAEoB,gBAAgB,EAAEjB,IAAI,CAAC,CAAC;;EAE1C;EACA;EACA,MAAMmG,OAAO,GAAGtH,OAAO,CAAC,MAAM;IAC5B;IACA,MAAM6F,YAAuD,GAAG;MAC9D,CAACvF,kBAAkB,CAACqE,GAAG,GAAG,EAAE;MAC5B,CAACrE,kBAAkB,CAACiH,SAAS,GAAG,EAAE;MAClC,CAACjH,kBAAkB,CAACkH,QAAQ,GAAG,EAAE;MACjC,CAAClH,kBAAkB,CAACsG,aAAa,GAAG,EAAE;MACtC,CAACtG,kBAAkB,CAACiG,SAAS,GAAG,EAAE;MAClC,CAACjG,kBAAkB,CAACkG,OAAO,GAAG,EAAE;MAChC,CAAClG,kBAAkB,CAACoG,QAAQ,GAAG,EAAE;MACjC,CAACpG,kBAAkB,CAACmG,SAAS,GAAG;IAClC,CAAC;;IAED;IACArE,gBAAgB,CAACmC,OAAO,CAACvB,GAAG,IAAI;MAAA,IAAAyE,oBAAA,EAAAC,oBAAA;MAC9B;MACA;MACA,IAAI,CAAAD,oBAAA,GAAAzE,GAAG,CAACG,cAAc,cAAAsE,oBAAA,eAAlBA,oBAAA,CAAoBrE,iBAAiB,KAAAsE,oBAAA,GAAI1E,GAAG,CAACG,cAAc,cAAAuE,oBAAA,eAAlBA,oBAAA,CAAoBrE,iBAAiB,EAAE;QAClF,MAAMsE,WAAW,GAAG,CAClBrH,kBAAkB,CAACiG,SAAS,EAC5BjG,kBAAkB,CAACkG,OAAO,EAC1BlG,kBAAkB,CAACmG,SAAS,EAC5BnG,kBAAkB,CAACoG,QAAQ,CAC5B;QAED,IAAI,CAACiB,WAAW,CAAChB,QAAQ,CAAC3D,GAAG,CAACM,MAA4B,CAAC,EAAE;UAC3Dd,OAAO,CAACC,GAAG,CAAC,cAAcO,GAAG,CAACC,EAAE,mDAAmD,CAAC;UACpF4C,YAAY,CAACvF,kBAAkB,CAACsG,aAAa,CAAC,CAACzB,IAAI,CAACnC,GAAG,CAAC;UACxD,OAAO,CAAC;QACV;MACF;;MAEA;MACA,IAAI3B,cAAc,CAAC,CAAC,EAAE;QAAA,IAAAuG,oBAAA,EAAAC,oBAAA,EAAAC,oBAAA;QACpB;QACA;QACA,IAAI,CAAAF,oBAAA,GAAA5E,GAAG,CAACG,cAAc,cAAAyE,oBAAA,eAAlBA,oBAAA,CAAoBvE,iBAAiB,IAAI,GAAAwE,oBAAA,GAAC7E,GAAG,CAACG,cAAc,cAAA0E,oBAAA,eAAlBA,oBAAA,CAAoBzE,iBAAiB,GAAE;UACnFyC,YAAY,CAACvF,kBAAkB,CAACkH,QAAQ,CAAC,CAACrC,IAAI,CAACnC,GAAG,CAAC;QACrD;QACA;QAAA,KACK,IAAIA,GAAG,CAAC+E,qBAAqB,EAAE;UAClClC,YAAY,CAACvF,kBAAkB,CAACiH,SAAS,CAAC,CAACpC,IAAI,CAACnC,GAAG,CAAC;QACtD;QACA;QAAA,KACK,IAAIA,GAAG,CAACM,MAAM,KAAKhD,kBAAkB,CAACqE,GAAG,IACtC3B,GAAG,CAACM,MAAM,KAAKhD,kBAAkB,CAAC0H,OAAO,IACxC,CAAChF,GAAG,CAAC+E,qBAAqB,IAAI,GAAAD,oBAAA,GAAC9E,GAAG,CAACG,cAAc,cAAA2E,oBAAA,eAAlBA,oBAAA,CAAoBzE,iBAAiB,CAAC,EAAE;UAC9EwC,YAAY,CAACvF,kBAAkB,CAACqE,GAAG,CAAC,CAACQ,IAAI,CAACnC,GAAG,CAAC;QAChD;QACA;QAAA,KACK,IAAIA,GAAG,CAACM,MAAM,EAAE;UACnB;UACAuC,YAAY,CAAC7C,GAAG,CAACM,MAAM,CAAC,CAAC6B,IAAI,CAACnC,GAAG,CAAC;QACpC;MACF;MACA;MAAA,KACK,IAAI5B,SAAS,CAAC,CAAC,EAAE;QACpB,IAAI4B,GAAG,CAACM,MAAM,EAAE;UACd;UACAuC,YAAY,CAAC7C,GAAG,CAACM,MAAM,CAAC,CAAC6B,IAAI,CAACnC,GAAG,CAAC;QACtC,CAAC,MAAM;UACH;UACA6C,YAAY,CAACvF,kBAAkB,CAACqE,GAAG,CAAC,CAACQ,IAAI,CAACnC,GAAG,CAAC;QAChD;MACF;MACA;MAAA,KACK;QACH,IAAIA,GAAG,CAACM,MAAM,EAAE;UACduC,YAAY,CAAC7C,GAAG,CAACM,MAAM,CAAC,CAAC6B,IAAI,CAACnC,GAAG,CAAC;QACpC,CAAC,MAAM;UACL;UACA6C,YAAY,CAACvF,kBAAkB,CAACqE,GAAG,CAAC,CAACQ,IAAI,CAACnC,GAAG,CAAC;QAChD;MACF;IACF,CAAC,CAAC;;IAEF;IACA,MAAMiF,iBAAiB,GAAG,CACxB;MAAEhF,EAAE,EAAE3C,kBAAkB,CAACqE,GAAG;MAAEuD,KAAK,EAAE,OAAO;MAAEC,KAAK,EAAE,SAAS;MAAEnH,YAAY,EAAE6E,YAAY,CAACvF,kBAAkB,CAACqE,GAAG;IAAE,CAAC,EACpH;MAAE1B,EAAE,EAAE3C,kBAAkB,CAACiH,SAAS;MAAEW,KAAK,EAAE,aAAa;MAAEC,KAAK,EAAE,MAAM;MAAEnH,YAAY,EAAE6E,YAAY,CAACvF,kBAAkB,CAACiH,SAAS;IAAE,CAAC,EACnI;MAAEtE,EAAE,EAAE3C,kBAAkB,CAACkH,QAAQ;MAAEU,KAAK,EAAE,iBAAiB;MAAEC,KAAK,EAAE,SAAS;MAAEnH,YAAY,EAAE6E,YAAY,CAACvF,kBAAkB,CAACkH,QAAQ;IAAE,CAAC,EACxI;MAAEvE,EAAE,EAAE3C,kBAAkB,CAACsG,aAAa;MAAEsB,KAAK,EAAE,eAAe;MAAEC,KAAK,EAAE,QAAQ;MAAEnH,YAAY,EAAE6E,YAAY,CAACvF,kBAAkB,CAACsG,aAAa;IAAE,CAAC,EAC/I;MAAE3D,EAAE,EAAE3C,kBAAkB,CAACiG,SAAS;MAAE2B,KAAK,EAAE,YAAY;MAAEC,KAAK,EAAE,SAAS;MAAEnH,YAAY,EAAE6E,YAAY,CAACvF,kBAAkB,CAACiG,SAAS;IAAE,CAAC,EACrI;MAAEtD,EAAE,EAAE3C,kBAAkB,CAACkG,OAAO;MAAE0B,KAAK,EAAE,UAAU;MAAEC,KAAK,EAAE,OAAO;MAAEnH,YAAY,EAAE6E,YAAY,CAACvF,kBAAkB,CAACkG,OAAO;IAAE,CAAC,EAC7H;MAAEvD,EAAE,EAAE3C,kBAAkB,CAACoG,QAAQ;MAAEwB,KAAK,EAAE,WAAW;MAAEC,KAAK,EAAE,OAAO;MAAEnH,YAAY,EAAE6E,YAAY,CAACvF,kBAAkB,CAACoG,QAAQ;IAAE,CAAC,EAChI;MAAEzD,EAAE,EAAE3C,kBAAkB,CAACmG,SAAS;MAAEyB,KAAK,EAAE,WAAW;MAAEC,KAAK,EAAE,SAAS;MAAEnH,YAAY,EAAE6E,YAAY,CAACvF,kBAAkB,CAACmG,SAAS;IAAE,CAAC,CACrI;IAED,OAAOwB,iBAAiB;EAC1B,CAAC,EAAE,CAAC7F,gBAAgB,EAAEhB,SAAS,EAAEC,cAAc,CAAC,CAAC;;EAEjD;EACA,MAAM+G,yBAAyB,GAAGA,CAACC,aAAqB,EAAEC,OAA4E,KAAK;IACzIjG,mBAAmB,CAACkG,IAAI,IACtBA,IAAI,CAACxF,GAAG,CAACC,GAAG,IACVA,GAAG,CAACC,EAAE,KAAKoF,aAAa,GACpB;MACE,GAAGrF,GAAG;MACNG,cAAc,EAAE;QACd,IAAIH,GAAG,CAACG,cAAc,IAAI;UAAEC,iBAAiB,EAAE,KAAK;UAAEC,iBAAiB,EAAE;QAAM,CAAC,CAAC;QACjF,GAAGiF;MACL;IACF,CAAC,GACDtF,GACN,CACF,CAAC;EACH,CAAC;EAED,MAAMwF,eAAe,GAAGA,CAACC,CAAkC,EAAEC,WAAoC,EAAEC,GAAW,KAAK;IACjH;IACAzG,mBAAmB,CAAC0G,OAAO,GAAGD,GAAG;;IAEjC;IACA3G,WAAW,CAAC4G,OAAO,GAAGH,CAAC,CAACI,aAAa;;IAErC;IACAJ,CAAC,CAACK,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEL,WAAW,CAACzF,EAAE,CAAC;IACpDwF,CAAC,CAACK,YAAY,CAACE,aAAa,GAAG,MAAM;;IAErC;IACA,IAAI,CAAC/G,YAAY,CAAC2G,OAAO,EAAE;MACzB3G,YAAY,CAAC2G,OAAO,GAAGH,CAAC,CAACI,aAAa,CAACI,SAAS,CAAC,IAAI,CAAmB;MACxEhH,YAAY,CAAC2G,OAAO,CAACM,KAAK,CAACC,QAAQ,GAAG,UAAU;MAChDlH,YAAY,CAAC2G,OAAO,CAACM,KAAK,CAACE,GAAG,GAAG,SAAS;MAC1CnH,YAAY,CAAC2G,OAAO,CAACM,KAAK,CAACG,OAAO,GAAG,KAAK;MAC1CpH,YAAY,CAAC2G,OAAO,CAACM,KAAK,CAACI,SAAS,GAAG,YAAY;MACnDrH,YAAY,CAAC2G,OAAO,CAACM,KAAK,CAACK,KAAK,GAAG,GAAGd,CAAC,CAACI,aAAa,CAACW,WAAW,IAAI;MACrEC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAAC1H,YAAY,CAAC2G,OAAO,CAAC;IACjD;;IAEA;IACA,IAAI3G,YAAY,CAAC2G,OAAO,EAAE;MACxB,MAAMgB,IAAI,GAAGnB,CAAC,CAACI,aAAa,CAACgB,qBAAqB,CAAC,CAAC;MACpDpB,CAAC,CAACK,YAAY,CAACgB,YAAY,CAAC7H,YAAY,CAAC2G,OAAO,EAAEgB,IAAI,CAACL,KAAK,GAAG,CAAC,EAAE,EAAE,CAAC;IACvE;;IAEA;IACA,IAAId,CAAC,CAACI,aAAa,EAAE;MACnBJ,CAAC,CAACI,aAAa,CAACkB,SAAS,CAACC,GAAG,CAAC,UAAU,CAAC;IAC3C;EACF,CAAC;EAED,MAAMC,aAAa,GAAIxB,CAAkC,IAAK;IAC5D;IACA,IAAIzG,WAAW,CAAC4G,OAAO,EAAE;MACvB5G,WAAW,CAAC4G,OAAO,CAACmB,SAAS,CAACG,MAAM,CAAC,UAAU,CAAC;MAChDlI,WAAW,CAAC4G,OAAO,GAAG,IAAI;IAC5B;IAEA,IAAIH,CAAC,CAACI,aAAa,EAAE;MACnBJ,CAAC,CAACI,aAAa,CAACkB,SAAS,CAACG,MAAM,CAAC,UAAU,CAAC;IAC9C;;IAEA;IACA,IAAIjI,YAAY,CAAC2G,OAAO,EAAE;MACxBa,QAAQ,CAACC,IAAI,CAACS,WAAW,CAAClI,YAAY,CAAC2G,OAAO,CAAC;MAC/C3G,YAAY,CAAC2G,OAAO,GAAG,IAAI;IAC7B;IAEA1G,mBAAmB,CAAC0G,OAAO,GAAG,CAAC,CAAC;IAChCzG,uBAAuB,CAACyG,OAAO,GAAG,EAAE;EACtC,CAAC;EAED,MAAMwB,cAAc,GAAGA,CAAC3B,CAAkB,EAAE4B,YAAoB,KAAK;IACnE5B,CAAC,CAAC6B,cAAc,CAAC,CAAC;IAClB7B,CAAC,CAAC8B,eAAe,CAAC,CAAC;IACnB9B,CAAC,CAACK,YAAY,CAAC0B,UAAU,GAAG,MAAM;;IAElC;IACA,IAAIrI,uBAAuB,CAACyG,OAAO,KAAKyB,YAAY,EAAE;MACpDlI,uBAAuB,CAACyG,OAAO,GAAGyB,YAAY;IAChD;;IAEA;IACA,IAAI5B,CAAC,CAACI,aAAa,CAACkB,SAAS,CAACU,QAAQ,CAAC,eAAe,CAAC,EAAE;MACvDhB,QAAQ,CAACiB,gBAAgB,CAAC,gBAAgB,CAAC,CAACnG,OAAO,CAACoG,GAAG,IAAI;QACzDA,GAAG,CAACZ,SAAS,CAACG,MAAM,CAAC,WAAW,CAAC;MACnC,CAAC,CAAC;MACFzB,CAAC,CAACI,aAAa,CAACkB,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;IAC5C;EACF,CAAC;;EAED;EACA,MAAMY,WAAW,GAAI5H,GAA4B,IAAc;IAC7D;IACA,IAAIA,GAAG,CAACC,EAAE,KAAKzB,eAAe,EAAE;MAC9B,OAAO,KAAK;IACd;;IAEA;IACA,IAAIJ,SAAS,CAAC,CAAC,EAAE;MAAA,IAAAyJ,qBAAA,EAAAC,qBAAA;MACf;MACA,MAAMC,kBAAkB,GAAG,CACzBzK,kBAAkB,CAACsG,aAAa,EAChCtG,kBAAkB,CAACiG,SAAS,EAC5BjG,kBAAkB,CAACkG,OAAO,EAC1BlG,kBAAkB,CAACmG,SAAS,CAC7B;MAED,IAAIsE,kBAAkB,CAACpE,QAAQ,CAAC3D,GAAG,CAACM,MAA4B,CAAC,EAAE;QACjE,OAAO,KAAK;MACd;;MAEA;MACA,IAAI,CAAAuH,qBAAA,GAAA7H,GAAG,CAACG,cAAc,cAAA0H,qBAAA,eAAlBA,qBAAA,CAAoBzH,iBAAiB,KAAA0H,qBAAA,GAAI9H,GAAG,CAACG,cAAc,cAAA2H,qBAAA,eAAlBA,qBAAA,CAAoBzH,iBAAiB,IAC9EL,GAAG,CAACM,MAAM,KAAKhD,kBAAkB,CAACkH,QAAQ,EAAE;QAC9C,OAAO,KAAK;MACd;MAEA,OAAO,IAAI;IACb;;IAEA;IACA,IAAInG,cAAc,CAAC,CAAC,EAAE;MAAA,IAAA2J,qBAAA,EAAAC,qBAAA;MACpB;MACA,MAAMF,kBAAkB,GAAG,CACzBzK,kBAAkB,CAACsG,aAAa,EAChCtG,kBAAkB,CAACiG,SAAS,EAC5BjG,kBAAkB,CAACkG,OAAO,EAC1BlG,kBAAkB,CAACmG,SAAS,EAC5BnG,kBAAkB,CAACoG,QAAQ,CAC5B;;MAED;MACA,IAAIqE,kBAAkB,CAACpE,QAAQ,CAAC3D,GAAG,CAACM,MAA4B,CAAC,EAAE;QACjE,OAAO,KAAK;MACd;;MAEA;MACA,IAAI,CAAA0H,qBAAA,GAAAhI,GAAG,CAACG,cAAc,cAAA6H,qBAAA,eAAlBA,qBAAA,CAAoB5H,iBAAiB,KAAA6H,qBAAA,GAAIjI,GAAG,CAACG,cAAc,cAAA8H,qBAAA,eAAlBA,qBAAA,CAAoB5H,iBAAiB,EAAE;QAClF,OAAO,KAAK;MACd;MAEA,OAAO,IAAI;IACb;;IAEA;IACA,OAAO,KAAK;EACd,CAAC;;EAED;EACA,MAAM6H,UAAU,GAAG,MAAAA,CAAOzC,CAAkC,EAAEjD,SAAiB,KAAK;IAClFiD,CAAC,CAAC6B,cAAc,CAAC,CAAC;IAClB7B,CAAC,CAAC8B,eAAe,CAAC,CAAC;;IAEnB;IACAd,QAAQ,CAACiB,gBAAgB,CAAC,gBAAgB,CAAC,CAACnG,OAAO,CAACoG,GAAG,IAAI;MACzDA,GAAG,CAACZ,SAAS,CAACG,MAAM,CAAC,WAAW,CAAC;IACnC,CAAC,CAAC;;IAEF;IACA,MAAM7B,aAAa,GAAGI,CAAC,CAACK,YAAY,CAACqC,OAAO,CAAC,YAAY,CAAC;IAC1D,IAAI,CAAC9C,aAAa,IAAI,EAAClH,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAE8B,EAAE,GAAE;IAEjC,MAAMyF,WAAW,GAAGtG,gBAAgB,CAAC+E,IAAI,CAACnE,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKoF,aAAa,CAAC;IAC1E,IAAI,CAACK,WAAW,EAAE;IAElB,MAAM0C,SAAS,GAAG1C,WAAW,CAACpF,MAAM;;IAEpC;IACA,IAAI8H,SAAS,KAAK5F,SAAS,EAAE;IAE7BhD,OAAO,CAACC,GAAG,CAAC,4BAA4B4F,aAAa,OAAO+C,SAAS,MAAM5F,SAAS,EAAE,CAAC;;IAErF;IACA/D,kBAAkB,CAAC4G,aAAa,CAAC;IAEnC,IAAI;MACF;MACA,IAAIhH,cAAc,CAAC,CAAC,EAAE;QACpB;QACA,MAAMgK,mBAAmB,GAAG,CAC1B/K,kBAAkB,CAACqE,GAAG,EACtBrE,kBAAkB,CAACiH,SAAS,EAC5BjH,kBAAkB,CAACkH,QAAQ,CAC5B;;QAED;QACA,IAAI,CAAC6D,mBAAmB,CAAC1E,QAAQ,CAACnB,SAA+B,CAAC,EAAE;UAClE7D,eAAe,CAAC,0CAA0CpB,aAAa,CAACiF,SAAS,CAA+B,kEAAkE,CAAC;UACnL/D,kBAAkB,CAAC,IAAI,CAAC;UACxB;QACF;;QAEA;QACA,MAAMsJ,kBAAkB,GAAG,CACzBzK,kBAAkB,CAACsG,aAAa,EAChCtG,kBAAkB,CAACiG,SAAS,EAC5BjG,kBAAkB,CAACkG,OAAO,EAC1BlG,kBAAkB,CAACmG,SAAS,EAC5BnG,kBAAkB,CAACoG,QAAQ,CAC5B;;QAED;QACA,IAAIqE,kBAAkB,CAACpE,QAAQ,CAACyE,SAA+B,CAAC,EAAE;UAChEzJ,eAAe,CAAC,oDAAoDpB,aAAa,CAAC6K,SAAS,CAA+B,IAAI,CAAC;UAC/H3J,kBAAkB,CAAC,IAAI,CAAC;UACxB;QACF;;QAEA;QACF,MAAM6C,WAAW,GAAG,CAAC,GAAGlC,gBAAgB,CAAC;QACzC,MAAMkJ,QAAQ,GAAGhH,WAAW,CAACI,SAAS,CAAC1B,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKoF,aAAa,CAAC;QAEvE,IAAIiD,QAAQ,KAAK,CAAC,CAAC,EAAE;UACjB;UACF,MAAMC,UAAU,GAAG;YACjB,GAAGjH,WAAW,CAACgH,QAAQ,CAAC;YACxBE,QAAQ,EAAE,IAAI;YACdtF,YAAY,EAAEV;UAChB,CAAC;UAEC,IAAIA,SAAS,KAAKlF,kBAAkB,CAACqE,GAAG,EAAE;YACxC;YACA4G,UAAU,CAACxD,qBAAqB,GAAG,KAAK;YAC1CwD,UAAU,CAACpI,cAAc,GAAG;cAC1B,IAAIoI,UAAU,CAACpI,cAAc,IAAI;gBAAEC,iBAAiB,EAAE,KAAK;gBAAEC,iBAAiB,EAAE;cAAM,CAAC,CAAC;cACtFA,iBAAiB,EAAE;YACrB,CAAC;UACH,CAAC,MACI,IAAImC,SAAS,KAAKlF,kBAAkB,CAACiH,SAAS,EAAE;YACnD;YACAgE,UAAU,CAACxD,qBAAqB,GAAG,IAAI;YACzCwD,UAAU,CAACpI,cAAc,GAAG;cAC1B,IAAIoI,UAAU,CAACpI,cAAc,IAAI;gBAAEC,iBAAiB,EAAE,KAAK;gBAAEC,iBAAiB,EAAE;cAAM,CAAC,CAAC;cACtFA,iBAAiB,EAAE;YACrB,CAAC;UACH,CAAC,MACI,IAAImC,SAAS,KAAKlF,kBAAkB,CAACkH,QAAQ,EAAE;YAClD;YACA+D,UAAU,CAACxD,qBAAqB,GAAG,IAAI,CAAC,CAAC;YACzCwD,UAAU,CAACpI,cAAc,GAAG;cAC1B,IAAIoI,UAAU,CAACpI,cAAc,IAAI;gBAAEC,iBAAiB,EAAE,KAAK;gBAAEC,iBAAiB,EAAE;cAAM,CAAC,CAAC;cACxFA,iBAAiB,EAAE;YACrB,CAAC;;YAED;YACA,IAAIlC,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEsK,QAAQ,IAAI/C,WAAW,CAACgD,UAAU,EAAE;cAC5C,IAAI;gBACF,MAAMrL,gBAAgB,CACpBgI,aAAa,EACb,qBAAqB,EACrBlH,IAAI,CAACsK,QAAQ,EACb/C,WAAW,CAACgD,UAAU,EACtB,IACF,CAAC,CAACC,IAAI,CAAC,YAAY;kBACjB;kBACA,MAAMxI,cAAc,GAAG,MAAMhD,iBAAiB,CAACkI,aAAa,CAAC;;kBAE7D;kBACA,IAAIlF,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEC,iBAAiB,IAAID,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEE,iBAAiB,EAAE;oBAC1E;oBACRkI,UAAU,CAACpI,cAAc,GAAG;sBAClBC,iBAAiB,EAAE,IAAI;sBACvBC,iBAAiB,EAAE;oBACrB,CAAC;;oBAED;oBACAxB,wBAAwB,CAAC,mFAAmFtB,aAAa,CAACD,kBAAkB,CAACsG,aAAa,CAAC,GAAG,CAAC;;oBAE/J;oBACA2E,UAAU,CAACrF,YAAY,GAAG5F,kBAAkB,CAACsG,aAAa;;oBAE1D;oBACAgF,UAAU,CAAC,MAAM;sBACf,IAAI3K,cAAc,EAAE;wBAClBA,cAAc,CAACyH,WAAW,EAAEpI,kBAAkB,CAACsG,aAAa,CAAC;sBAC/D;sBACA;sBACAgF,UAAU,CAAC,MAAM/J,wBAAwB,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;oBACxD,CAAC,EAAE,GAAG,CAAC;kBACT;gBACF,CAAC,CAAC;cACJ,CAAC,CAAC,OAAO0B,KAAK,EAAE;gBACdf,OAAO,CAACe,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;gBACrD5B,eAAe,CAAC,qBAAsB4B,KAAK,CAAWsI,OAAO,EAAE,CAAC;cAClE;YACF;UACF;;UAEA;UACFvH,WAAW,CAACgH,QAAQ,CAAC,GAAGC,UAAU;UAClClJ,mBAAmB,CAACiC,WAAW,CAAC;;UAE9B;UACAsH,UAAU,CAAC,YAAY;YACrB,MAAME,eAAe,GAAG,MAAM3L,iBAAiB,CAACkI,aAAa,CAAC;YAC9D,IAAIyD,eAAe,EAAE;cACnB1D,yBAAyB,CAACC,aAAa,EAAE;gBACvCjF,iBAAiB,EAAE0I,eAAe,CAAC1I,iBAAiB;gBACpDC,iBAAiB,EAAEyI,eAAe,CAACzI;cACrC,CAAC,CAAC;;cAEF;cACA,IAAIyI,eAAe,CAAC1I,iBAAiB,IAAI0I,eAAe,CAACzI,iBAAiB,EAAE;gBAC1E,IAAIpC,cAAc,EAAE;kBAClBA,cAAc,CAACyH,WAAW,EAAEpI,kBAAkB,CAACsG,aAAa,CAAC;gBAC/D;cACF;YACF;YACAnF,kBAAkB,CAAC,IAAI,CAAC;UAC1B,CAAC,EAAE,IAAI,CAAC;;UAER;UACAmK,UAAU,CAAC,MAAM;YACfvJ,mBAAmB,CAACkG,IAAI,IACtBA,IAAI,CAACxF,GAAG,CAACC,GAAG,IACVA,GAAG,CAACC,EAAE,KAAKoF,aAAa,GACpB;cAAE,GAAGrF,GAAG;cAAEwI,QAAQ,EAAE,KAAK;cAAEtF,YAAY,EAAE6F;YAAU,CAAC,GACpD/I,GACN,CACF,CAAC;UACH,CAAC,EAAE,GAAG,CAAC;QACT;MACF;MACA;MAAA,KACK,IAAI5B,SAAS,CAAC,CAAC,EAAE;QACpB;QACA,MAAMkD,WAAW,GAAG,CAAC,GAAGlC,gBAAgB,CAAC;QACzC,MAAMkJ,QAAQ,GAAGhH,WAAW,CAACI,SAAS,CAAC1B,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKoF,aAAa,CAAC;QAEvE,IAAIiD,QAAQ,KAAK,CAAC,CAAC,EAAE;UACnB;UACA,MAAMC,UAAU,GAAG;YACjB,GAAGjH,WAAW,CAACgH,QAAQ,CAAC;YACxBE,QAAQ,EAAE,IAAI;YACdtF,YAAY,EAAEV,SAAS;YACvBlC,MAAM,EAAEkC,SAAkC,CAAC;UAC7C,CAAC;;UAED;UACA,IAAIA,SAAS,KAAKlF,kBAAkB,CAACkH,QAAQ,EAAE;YAC7C+D,UAAU,CAACpI,cAAc,GAAG;cAC1B,IAAIoI,UAAU,CAACpI,cAAc,IAAI;gBAAEC,iBAAiB,EAAE,KAAK;gBAAEC,iBAAiB,EAAE;cAAM,CAAC,CAAC;cACxFD,iBAAiB,EAAE;YACrB,CAAC;;YAED;YACA,IAAIjC,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEsK,QAAQ,EAAE;cAClB,IAAI;gBACF,MAAMrL,gBAAgB,CAC1BiI,aAAa,EACb,qBAAqB,EACrBlH,IAAI,CAACsK,QAAQ,EACP,IACF,CAAC,CAACE,IAAI,CAAC,YAAY;kBACjB;kBACA,MAAMxI,cAAc,GAAG,MAAMhD,iBAAiB,CAACkI,aAAa,CAAC;;kBAE7D;kBACA,IAAIlF,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEC,iBAAiB,IAAID,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEE,iBAAiB,EAAE;oBAC1E;oBACAkI,UAAU,CAACpI,cAAc,GAAG;sBAC1BC,iBAAiB,EAAE,IAAI;sBACvBC,iBAAiB,EAAE;oBACrB,CAAC;;oBAED;oBACAxB,wBAAwB,CAAC,mFAAmFtB,aAAa,CAACD,kBAAkB,CAACsG,aAAa,CAAC,GAAG,CAAC;;oBAE/J;oBACA2E,UAAU,CAACrF,YAAY,GAAG5F,kBAAkB,CAACsG,aAAa;;oBAE1D;oBACAgF,UAAU,CAAC,MAAM;sBACf,IAAI3K,cAAc,EAAE;wBAClBA,cAAc,CAACyH,WAAW,EAAEpI,kBAAkB,CAACsG,aAAa,CAAC;sBAC/D;sBACA;sBACAgF,UAAU,CAAC,MAAM/J,wBAAwB,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;oBACxD,CAAC,EAAE,GAAG,CAAC;kBACT;gBACF,CAAC,CAAC;cACJ,CAAC,CAAC,OAAO0B,KAAK,EAAE;gBACdf,OAAO,CAACe,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;gBACpD5B,eAAe,CAAC,qBAAsB4B,KAAK,CAAWsI,OAAO,EAAE,CAAC;cAClE;YACF;UACF;UACA;UAAA,KACK,IAAIT,SAAS,KAAK9K,kBAAkB,CAACkH,QAAQ,EAAE;YAClD+D,UAAU,CAACpI,cAAc,GAAG;cAC1B,IAAIoI,UAAU,CAACpI,cAAc,IAAI;gBAAEC,iBAAiB,EAAE,KAAK;gBAAEC,iBAAiB,EAAE;cAAM,CAAC,CAAC;cACxFD,iBAAiB,EAAE;YACrB,CAAC;UACH;;UAEA;UACAkB,WAAW,CAACgH,QAAQ,CAAC,GAAGC,UAAU;UAClClJ,mBAAmB,CAACiC,WAAW,CAAC;;UAEhC;UACA,IAAIrD,cAAc,EAAE;YAClB,IAAI;cACF,MAAMA,cAAc,CAACyH,WAAW,EAAElD,SAAS,CAAC;;cAE5C;cACAoG,UAAU,CAAC,YAAY;gBACrB,MAAME,eAAe,GAAG,MAAM3L,iBAAiB,CAACkI,aAAa,CAAC;gBAC9D,IAAIyD,eAAe,EAAE;kBACnB1D,yBAAyB,CAACC,aAAa,EAAE;oBACvCjF,iBAAiB,EAAE0I,eAAe,CAAC1I,iBAAiB;oBACpDC,iBAAiB,EAAEyI,eAAe,CAACzI;kBACrC,CAAC,CAAC;;kBAEF;kBACA,IAAIyI,eAAe,CAAC1I,iBAAiB,IAAI0I,eAAe,CAACzI,iBAAiB,EAAE;oBAC1E,IAAIpC,cAAc,EAAE;sBAClBA,cAAc,CAACyH,WAAW,EAAEpI,kBAAkB,CAACsG,aAAa,CAAC;oBAC/D;kBACF;gBACF;gBACAnF,kBAAkB,CAAC,IAAI,CAAC;cAC1B,CAAC,EAAE,IAAI,CAAC;YAEV,CAAC,CAAC,OAAO8B,KAAK,EAAE;cAClBf,OAAO,CAACe,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;cAC1C5B,eAAe,CAAC,kCAAmC4B,KAAK,CAAWsI,OAAO,EAAE,CAAC;;cAE7E;cACJxJ,mBAAmB,CAACkG,IAAI,IACtBA,IAAI,CAACxF,GAAG,CAACC,GAAG,IACVA,GAAG,CAACC,EAAE,KAAKoF,aAAa,GAChB;gBAAE,GAAGrF,GAAG;gBAAEM,MAAM,EAAE8H,SAAkC;gBAAEI,QAAQ,EAAE,KAAK;gBAAEtF,YAAY,EAAE6F;cAAU,CAAC,GACpG/I,GACN,CACF,CAAC;cACDvB,kBAAkB,CAAC,IAAI,CAAC;YAC1B;UACE;;UAEA;UACAmK,UAAU,CAAC,MAAM;YACrBvJ,mBAAmB,CAACkG,IAAI,IACtBA,IAAI,CAACxF,GAAG,CAACC,GAAG,IACVA,GAAG,CAACC,EAAE,KAAKoF,aAAa,GACd;cAAE,GAAGrF,GAAG;cAAEwI,QAAQ,EAAE,KAAK;cAAEtF,YAAY,EAAE6F;YAAU,CAAC,GAC1D/I,GACN,CACF,CAAC;UACG,CAAC,EAAE,GAAG,CAAC;QACT;MACF;IACF,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C5B,eAAe,CAAC,kCAAmC4B,KAAK,CAAWsI,OAAO,EAAE,CAAC;MAC7EpK,kBAAkB,CAAC,IAAI,CAAC;IAC1B;EACF,CAAC;EAED,MAAMuK,cAAc,GAAIC,MAAc,IAAK;IACzC,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;MACpCjD,KAAK,EAAE,UAAU;MACjBkD,QAAQ,EAAE;IACZ,CAAC,CAAC,CAACC,MAAM,CAACJ,MAAM,CAAC;EACnB,CAAC;;EAED;EACA,MAAMK,wBAAwB,GAAItJ,GAA4B,IAAK;IACjE,IAAI,CAACA,GAAG,CAACG,cAAc,EAAE,OAAO,IAAI;IAEpC,oBACExC,OAAA;MAAK4L,SAAS,EAAC,kCAAkC;MAAAC,QAAA,gBAC/C7L,OAAA;QAAK4L,SAAS,EAAC,uCAAuC;QAAC,YAAUvJ,GAAG,CAACG,cAAc,CAACC,iBAAiB,GAAG,qBAAqB,GAAG,oCAAqC;QAAAoJ,QAAA,gBACnK7L,OAAA;UAAM4L,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC7CjM,OAAA;UAAK4L,SAAS,EAAE,wBAAwBvJ,GAAG,CAACG,cAAc,CAACC,iBAAiB,GAAG,0BAA0B,GAAG,YAAY;QAAG;UAAAqJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/H,CAAC,eACNjM,OAAA;QAAK4L,SAAS,EAAC,uCAAuC;QAAC,YAAUvJ,GAAG,CAACG,cAAc,CAACE,iBAAiB,GAAG,sBAAsB,GAAG,qCAAsC;QAAAmJ,QAAA,gBACrK7L,OAAA;UAAM4L,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC9CjM,OAAA;UAAK4L,SAAS,EAAE,wBAAwBvJ,GAAG,CAACG,cAAc,CAACE,iBAAiB,GAAG,0BAA0B,GAAG,YAAY;QAAG;UAAAoJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/H,CAAC,EAGL5J,GAAG,CAACG,cAAc,CAACC,iBAAiB,IAAIJ,GAAG,CAACG,cAAc,CAACE,iBAAiB,iBAC3E1C,OAAA;QAAK4L,SAAS,EAAC,0BAA0B;QAAC,YAAS,oBAAoB;QAAAC,QAAA,eACrE7L,OAAA;UAAK4L,SAAS,EAAC,gDAAgD;UAAAC,QAAA,EAAC;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjF,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEV,CAAC;;EAED;EACA,MAAMC,eAAe,GAAIC,IAAY,IAAK;IACxC,MAAMC,MAA8B,GAAG;MACrC,gBAAgB,EAAE,kBAAkB;MACpC,qBAAqB,EAAE,YAAY;MACnC,WAAW,EAAE,cAAc;MAC3B,iBAAiB,EAAE,sBAAsB;MACzC,eAAe,EAAE,mBAAmB;MACpC,cAAc,EAAE;IAClB,CAAC;IAED,OAAOA,MAAM,CAACD,IAAI,CAAC,IAAIA,IAAI;EAC7B,CAAC;;EAED;EACA,MAAME,YAAY,GAAIhK,GAA4B,IAAK;IACrD,MAAMM,MAAM,GAAGN,GAAG,CAACM,MAAM,IAAI,EAAE;;IAE/B;IACA,QAAQA,MAAM,CAAC2J,WAAW,CAAC,CAAC;MAC1B,KAAK3M,kBAAkB,CAACoG,QAAQ;QAC9B,OAAO,wBAAwB;MACjC,KAAKpG,kBAAkB,CAACkH,QAAQ;QAC9B;QACA,IAAIxE,GAAG,CAACG,cAAc,EAAE;UACtB,MAAM;YAAEC,iBAAiB;YAAEC;UAAkB,CAAC,GAAGL,GAAG,CAACG,cAAc;UACnE,IAAIC,iBAAiB,IAAIC,iBAAiB,EAAE;YAC1C,OAAO,6BAA6B,CAAC,CAAC;UACxC,CAAC,MAAM,IAAID,iBAAiB,EAAE;YAC5B,OAAO,4BAA4B,CAAC,CAAC;UACvC,CAAC,MAAM,IAAIC,iBAAiB,EAAE;YAC5B,OAAO,wBAAwB,CAAC,CAAC;UACnC;QACF;QACA,OAAO,4BAA4B;MACrC,KAAK/C,kBAAkB,CAACiH,SAAS;QAC/B,OAAO,wBAAwB;MACjC,KAAKjH,kBAAkB,CAACqE,GAAG;QACzB,OAAO,6BAA6B;MACtC,KAAKrE,kBAAkB,CAAC0H,OAAO;QAC7B,OAAO,4BAA4B;MACrC,KAAK1H,kBAAkB,CAACsG,aAAa;QACnC,OAAO,4BAA4B;MACrC,KAAKtG,kBAAkB,CAACiG,SAAS;QAC/B,OAAO,6BAA6B;MACtC,KAAKjG,kBAAkB,CAACkG,OAAO;QAC7B,OAAO,yBAAyB;MAClC,KAAKlG,kBAAkB,CAACmG,SAAS;QAC/B,OAAO,4BAA4B;MACrC;QACE;QACA,OAAO,UAAUzD,GAAG,CAACM,MAAM,IAAI,SAAS,EAAE;IAC9C;EACF,CAAC;;EAED;EACA,MAAM4J,YAAY,GAAG;AACvmBAAmB,GAAInK,GAA4B,IAAa;IACpE;IACA,MAAMoK,WAAW,GAAGxC,WAAW,CAAC5H,GAAG,CAAC,IAAIA,GAAG,CAACC,EAAE,KAAKzB,eAAe;IAClE,OAAO4L,WAAW,GACd,mCAAmC,GACnC,kDAAkD;EACxD,CAAC;;EAED;EACA,MAAMC,cAAc,GAAIrK,GAA4B,IAAa;IAAA,IAAAsK,qBAAA,EAAAC,qBAAA;IAC/D,IAAIvK,GAAG,CAACC,EAAE,KAAKzB,eAAe,EAAE;MAC9B,OAAO,oCAAoC;IAC7C;;IAEA;IACA,IAAIoJ,WAAW,CAAC5H,GAAG,CAAC,EAAE;MACpB,OAAO,iCAAiC;IAC1C;;IAEA;IACA,IAAI,CAAAsK,qBAAA,GAAAtK,GAAG,CAACG,cAAc,cAAAmK,qBAAA,eAAlBA,qBAAA,CAAoBlK,iBAAiB,KAAAmK,qBAAA,GAAIvK,GAAG,CAACG,cAAc,cAAAoK,qBAAA,eAAlBA,qBAAA,CAAoBlK,iBAAiB,EAAE;MAClF,OAAO,qEAAqE;IAC9E;;IAEA;IACA,IAAIhC,cAAc,CAAC,CAAC,EAAE;MACpB,IAAI2B,GAAG,CAACM,MAAM,KAAKhD,kBAAkB,CAACoG,QAAQ,EAAE;QAC9C,OAAO,iEAAiE;MAC1E,CAAC,MAAM,IAAI1D,GAAG,CAACM,MAAM,KAAKhD,kBAAkB,CAACsG,aAAa,EAAE;QAC1D,OAAO,uFAAuF;MAChG,CAAC,MAAM,IAAI5D,GAAG,CAACM,MAAM,KAAKhD,kBAAkB,CAACiG,SAAS,EAAE;QACtD,OAAO,gEAAgE;MACzE,CAAC,MAAM,IAAIvD,GAAG,CAACM,MAAM,KAAKhD,kBAAkB,CAACkG,OAAO,EAAE;QACpD,OAAO,yDAAyD;MAClE,CAAC,MAAM,IAAIxD,GAAG,CAACM,MAAM,KAAKhD,kBAAkB,CAACmG,SAAS,EAAE;QACtD,OAAO,2DAA2D;MACpE;IACF;IAEA,OAAO,8CAA8C;EACvD,CAAC;;EAED;EACA,MAAM+G,mCAAmC,GAAGvN,WAAW,CAAC,YAAY;IAClE,IAAI,CAACe,YAAY,IAAI,CAACG,IAAI,IAAI,CAACF,cAAc,EAAE;IAE/CuB,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;;IAE9D;IACA,MAAMgL,gBAAgB,GAAIzM,YAAY,CACnC6C,MAAM,CAACb,GAAG,IAAI;MAAA,IAAA0K,qBAAA,EAAAC,qBAAA;MACb,MAAMtH,gBAAgB,GAAG,EAAAqH,qBAAA,GAAA1K,GAAG,CAACG,cAAc,cAAAuK,qBAAA,uBAAlBA,qBAAA,CAAoBtK,iBAAiB,OAAAuK,qBAAA,GAAI3K,GAAG,CAACG,cAAc,cAAAwK,qBAAA,uBAAlBA,qBAAA,CAAoBtK,iBAAiB;MAEvG,MAAMiD,gBAAgB,GAAG,CACvBhG,kBAAkB,CAACiG,SAAS,EAC5BjG,kBAAkB,CAACkG,OAAO,EAC1BlG,kBAAkB,CAACmG,SAAS,EAC5BnG,kBAAkB,CAACoG,QAAQ,CAC5B,CAACC,QAAQ,CAAC3D,GAAG,CAACM,MAA4B,CAAC;MAE5C,OAAO+C,gBAAgB,IAAI,CAACC,gBAAgB,IAAItD,GAAG,CAACM,MAAM,KAAKhD,kBAAkB,CAACsG,aAAa;IACjG,CAAC,CAAC;IAEJ,IAAI6G,gBAAgB,CAAClL,MAAM,GAAG,CAAC,EAAE;MAC/BC,OAAO,CAACC,GAAG,CAAC,kBAAkBgL,gBAAgB,CAAClL,MAAM,oDAAoD,CAAC;;MAE1G;MACA,KAAK,MAAMS,GAAG,IAAIyK,gBAAgB,EAAE;QAClCjL,OAAO,CAACC,GAAG,CAAC,2BAA2BO,GAAG,CAACC,EAAE,6CAA6C,CAAC;QAC3F,IAAI;UACF,MAAMhC,cAAc,CAAC+B,GAAG,EAAE1C,kBAAkB,CAACsG,aAAa,CAAC;UAC3D;UACA/E,wBAAwB,CAAC,gBAAgBmB,GAAG,CAACC,EAAE,uEAAuE1C,aAAa,CAACD,kBAAkB,CAACsG,aAAa,CAAC,GAAG,CAAC;QAC3K,CAAC,CAAC,OAAOrD,KAAK,EAAE;UACdf,OAAO,CAACe,KAAK,CAAC,4CAA4CP,GAAG,CAACC,EAAE,GAAG,EAAEM,KAAK,CAAC;QAC7E;MACF;;MAEA;MACAqI,UAAU,CAAC,MAAM/J,wBAAwB,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;IACxD,CAAC,MAAM;MACLW,OAAO,CAACC,GAAG,CAAC,sEAAsE,CAAC;IACrF;EACF,CAAC,EAAE,CAACzB,YAAY,EAAEG,IAAI,EAAEF,cAAc,CAAC,CAAC;;EAExC;EACAnB,SAAS,CAAC,MAAM;IACd,IAAI,CAAAkB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEuB,MAAM,IAAG,CAAC,EAAE;MAC5BiL,mCAAmC,CAAC,CAAC;IACvC;EACF,CAAC,EAAE,CAACxM,YAAY,EAAEwM,mCAAmC,CAAC,CAAC;EAEvD,IAAIxM,YAAY,CAACuB,MAAM,KAAK,CAAC,EAAE;IAC7B,oBACE5B,OAAA;MAAK4L,SAAS,EAAC,4BAA4B;MAAAC,QAAA,gBACzC7L,OAAA;QAAI4L,SAAS,EAAC,iCAAiC;QAAAC,QAAA,EAAC;MAA+B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpFjM,OAAA;QAAG4L,SAAS,EAAC,gCAAgC;QAAAC,QAAA,EAAC;MAA2C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1F,CAAC;EAEV;EAEA,oBACEjM,OAAA;IAAK4L,SAAS,EAAC,kDAAkD;IAAAC,QAAA,gBAC/D7L,OAAA;MAAA6L,QAAA,EAAQU;IAAY;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAG5BpL,eAAe,iBACdb,OAAA;MAAK4L,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/B7L,OAAA;QAAM4L,SAAS,EAAC;MAAiD;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACzEjM,OAAA;QAAG4L,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CACN,EAGAhL,qBAAqB,iBACpBjB,OAAA;MAAK4L,SAAS,EAAC,uBAAuB;MAAAC,QAAA,gBACpC7L,OAAA;QAAM4L,SAAS,EAAC;MAAiD;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACzEjM,OAAA;QAAG4L,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAE5K;MAAqB;QAAA6K,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CACN,EAEAlL,YAAY,iBACXf,OAAA;MAAK4L,SAAS,EAAC,kCAAkC;MAAAC,QAAA,gBAC/C7L,OAAA;QAAA6L,QAAA,gBACE7L,OAAA;UAAKiN,KAAK,EAAC,4BAA4B;UAACrB,SAAS,EAAC,sCAAsC;UAACsB,IAAI,EAAC,MAAM;UAACC,OAAO,EAAC,WAAW;UAAAtB,QAAA,eACtH7L,OAAA;YAAMoN,aAAa,EAAC,OAAO;YAACC,cAAc,EAAC,OAAO;YAACC,WAAW,EAAC,GAAG;YAACC,CAAC,EAAC;UAAsE;YAAAzB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3I,CAAC,eACNjM,OAAA;UAAA6L,QAAA,EAAO9K;QAAY;UAAA+K,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eACNjM,OAAA;QAAK4L,SAAS,EAAC,WAAW;QAAAC,QAAA,eACxB7L,OAAA;UAAQ4L,SAAS,EAAC,YAAY;UAAC4B,OAAO,EAAEA,CAAA,KAAMxM,eAAe,CAAC,IAAI,CAAE;UAAA6K,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eAEDjM,OAAA;MAAK4L,SAAS,EAAC,+GAA+G;MAACrD,KAAK,EAAE;QAAEkF,QAAQ,EAAE;MAAS,CAAE;MAAA5B,QAAA,EAC1JlF,OAAO,CAACvE,GAAG,CAACsL,MAAM,iBACjB1N,OAAA;QAEE4L,SAAS,EAAE,sDAAsD8B,MAAM,CAAClG,KAAK,gEAAiE;QAC9ImG,UAAU,EAAG7F,CAAC,IAAK;UACjB2B,cAAc,CAAC3B,CAAC,EAAE4F,MAAM,CAACpL,EAAE,CAAC;QAC9B,CAAE;QACFsL,WAAW,EAAG9F,CAAC,IAAK;UAClBA,CAAC,CAACI,aAAa,CAACkB,SAAS,CAACG,MAAM,CAAC,WAAW,CAAC;QAC/C,CAAE;QACFsE,MAAM,EAAG/F,CAAC,IAAK;UACbyC,UAAU,CAACzC,CAAC,EAAE4F,MAAM,CAACpL,EAAE,CAAC;QAC1B,CAAE;QAAAuJ,QAAA,gBAGF7L,OAAA;UAAK4L,SAAS,EAAE,qFAAqF8B,MAAM,CAAClG,KAAK,gBAAiB;UAAAqE,QAAA,gBAChI7L,OAAA;YAAM4L,SAAS,EAAE,QAAQ8B,MAAM,CAAClG,KAAK,oBAAqB;YAAAqE,QAAA,EAAE6B,MAAM,CAACnG;UAAK;YAAAuE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAChFjM,OAAA;YAAM4L,SAAS,EAAE,eAAe8B,MAAM,CAAClG,KAAK,WAAY;YAAAqE,QAAA,EAAE6B,MAAM,CAACrN,YAAY,CAACuB;UAAM;YAAAkK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzF,CAAC,eAENjM,OAAA;UAAK4L,SAAS,EAAC,kGAAkG;UAAAC,QAAA,EAC9G6B,MAAM,CAACrN,YAAY,CAACuB,MAAM,KAAK,CAAC,gBAC/B5B,OAAA;YAAK4L,SAAS,EAAC,0GAA0G;YAAAC,QAAA,eACvH7L,OAAA;cAAK4L,SAAS,EAAC,aAAa;cAAAC,QAAA,gBAC1B7L,OAAA;gBAAKiN,KAAK,EAAC,4BAA4B;gBAACrB,SAAS,EAAC,iCAAiC;gBAACsB,IAAI,EAAC,MAAM;gBAACC,OAAO,EAAC,WAAW;gBAACW,MAAM,EAAC,cAAc;gBAAAjC,QAAA,eACvI7L,OAAA;kBAAMoN,aAAa,EAAC,OAAO;kBAACC,cAAc,EAAC,OAAO;kBAACC,WAAW,EAAE,CAAE;kBAACC,CAAC,EAAC;gBAAsH;kBAAAzB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC3L,CAAC,eACNjM,OAAA;gBAAG4L,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAAC;cAAkB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/C;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,GAENyB,MAAM,CAACrN,YAAY,CAAC+B,GAAG,CAAC,CAACC,GAAG,EAAEyB,KAAK,KAAK;YACtC,MAAMiK,eAAe,GAAG9D,WAAW,CAAC5H,GAAG,CAAC,IAAIA,GAAG,CAACC,EAAE,KAAKzB,eAAe;YACtE,oBACAb,OAAA;cAEI,YAAU0M,cAAc,CAACrK,GAAG,CAAE;cAC9BuJ,SAAS,EAAE,8CAA8CS,YAAY,CAAChK,GAAG,CAAC,oFAAoFA,GAAG,CAACC,EAAE,KAAKzB,eAAe,GAAG,YAAY,GAAG,EAAE,IAAIwB,GAAG,CAACwI,QAAQ,GAAG,YAAY,GAAG,EAAE,IAAI2B,mBAAmB,CAACnK,GAAG,CAAC,EAAG;cAC/Q2L,SAAS,EAAED,eAAgB;cAC3BE,WAAW,EAAEF,eAAe,GAAIjG,CAAC,IAAKD,eAAe,CAACC,CAAC,EAAEzF,GAAG,EAAEyB,KAAK,CAAC,GAAGsH,SAAU;cACjF8C,SAAS,EAAEH,eAAe,GAAGzE,aAAa,GAAG8B,SAAU;cACzD7C,KAAK,EAAE;gBACL4F,SAAS,EAAE9L,GAAG,CAACC,EAAE,KAAKzB,eAAe,GAAG,+BAA+B,GAAG;cAC5E,CAAE;cAAAgL,QAAA,eAEF7L,OAAA;gBAAK4L,SAAS,EAAC,eAAe;gBAAAC,QAAA,gBAC5B7L,OAAA;kBAAK4L,SAAS,EAAC,mCAAmC;kBAAAC,QAAA,eAChD7L,OAAA;oBAAK4L,SAAS,EAAC,6BAA6B;oBAAAC,QAAA,gBAC1C7L,OAAA;sBAAK4L,SAAS,EAAC,sBAAsB;sBAAAC,QAAA,EAAExJ,GAAG,CAAC+L;oBAAW;sBAAAtC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM,CAAC,eAC7DjM,OAAA;sBAAM4L,SAAS,EAAE,eAAe8B,MAAM,CAAClG,KAAK,+CAAgD;sBAAAqE,QAAA,EACzFK,eAAe,CAAC7J,GAAG,CAACgM,gBAAgB;oBAAC;sBAAAvC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAClC,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACJ;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACH,CAAC,eAENjM,OAAA;kBAAK4L,SAAS,EAAC,MAAM;kBAAAC,QAAA,gBAEnB7L,OAAA;oBAAK4L,SAAS,EAAC,8CAA8C;oBAAAC,QAAA,gBAC3D7L,OAAA;sBAAKiN,KAAK,EAAC,4BAA4B;sBAACrB,SAAS,EAAC,qBAAqB;sBAACsB,IAAI,EAAC,MAAM;sBAACC,OAAO,EAAC,WAAW;sBAACW,MAAM,EAAC,cAAc;sBAAAjC,QAAA,eAC3H7L,OAAA;wBAAMoN,aAAa,EAAC,OAAO;wBAACC,cAAc,EAAC,OAAO;wBAACC,WAAW,EAAE,CAAE;wBAACC,CAAC,EAAC;sBAA2I;wBAAAzB,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAE;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAChN,CAAC,eACNjM,OAAA;sBAAM4L,SAAS,EAAC,oCAAoC;sBAAAC,QAAA,EACjDxJ,GAAG,CAACiM,YAAY,IAAI;oBAAa;sBAAAxC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAC9B,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACJ,CAAC,eAGNjM,OAAA;oBAAK4L,SAAS,EAAC,wBAAwB;oBAAAC,QAAA,gBACrC7L,OAAA;sBAAKiN,KAAK,EAAC,4BAA4B;sBAACrB,SAAS,EAAC,2BAA2B;sBAACsB,IAAI,EAAC,MAAM;sBAACC,OAAO,EAAC,WAAW;sBAACW,MAAM,EAAC,cAAc;sBAAAjC,QAAA,eACjI7L,OAAA;wBAAMoN,aAAa,EAAC,OAAO;wBAACC,cAAc,EAAC,OAAO;wBAACC,WAAW,EAAE,CAAE;wBAACC,CAAC,EAAC;sBAA6K;wBAAAzB,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAE;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAClP,CAAC,eACNjM,OAAA;sBAAM4L,SAAS,EAAC,kCAAkC;sBAAAC,QAAA,EAC7CR,cAAc,CAAChJ,GAAG,CAACkM,gBAAgB,IAAI,CAAC;oBAAC;sBAAAzC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACxC,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACJ,CAAC,EAGLN,wBAAwB,CAACtJ,GAAG,CAAC,eAE9BrC,OAAA;oBAAK4L,SAAS,EAAC,+BAA+B;oBAAAC,QAAA,eAC5C7L,OAAA,CAACT,IAAI;sBAACiP,EAAE,EAAE,iBAAiBnM,GAAG,CAACC,EAAE,EAAG;sBAACsJ,SAAS,EAAC,+BAA+B;sBAAAC,QAAA,EAAC;oBAE/E;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACJ,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACH,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH;YAAC,GAlDD5J,GAAG,CAACC,EAAE;cAAAwJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAmDR,CAAC;UAER,CAAC;QACF;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA,GAxFDyB,MAAM,CAACpL,EAAE;QAAAwJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAyFX,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC1L,EAAA,CAz4CIH,WAAuC;EAAA,QAC1BN,OAAO,EACcD,cAAc;AAAA;AAAA4O,EAAA,GAFhDrO,WAAuC;AA24C7C,eAAeA,WAAW;AAAC,IAAAqO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}