{"ast":null,"code":"/**\n * Formatea un valor numérico a formato de moneda\n * @param amount Monto a formatear\n * @param options Opciones de formato\n * @returns String formateado como moneda\n */\nexport const formatCurrency = (amount, options = {}) => {\n  if (amount === undefined || amount === null) return \"$0.00\";\n  const {\n    currency = 'MXN',\n    maximumFractionDigits = 2,\n    minimumFractionDigits = 2\n  } = options;\n  return new Intl.NumberFormat('es-MX', {\n    style: 'currency',\n    currency,\n    maximumFractionDigits,\n    minimumFractionDigits\n  }).format(amount);\n};\n\n/**\n * Formatea una fecha a formato legible\n * @param dateString String de fecha para formatear\n * @param format Formato deseado\n * @returns String de fecha formateada\n */\nexport const formatDate = (dateString, format = 'short') => {\n  if (!dateString) return 'N/A';\n  try {\n    const date = new Date(dateString);\n\n    // Verificar que la fecha es válida\n    if (isNaN(date.getTime())) return 'Fecha inválida';\n    if (format === 'short') {\n      return date.toLocaleDateString('es-MX', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n    }\n    if (format === 'datetime') {\n      return date.toLocaleDateString('es-MX', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n    }\n    if (format === 'long') {\n      return date.toLocaleDateString('es-MX', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n    }\n    if (format === 'relative') {\n      const now = new Date();\n      const diffMs = now.getTime() - date.getTime();\n      const diffSecs = Math.floor(diffMs / 1000);\n      const diffMins = Math.floor(diffSecs / 60);\n      const diffHours = Math.floor(diffMins / 60);\n      const diffDays = Math.floor(diffHours / 24);\n      if (diffSecs < 60) return 'Hace unos segundos';\n      if (diffMins < 60) return `Hace ${diffMins} min${diffMins > 1 ? 's' : ''}`;\n      if (diffHours < 24) return `Hace ${diffHours} hora${diffHours > 1 ? 's' : ''}`;\n      if (diffDays < 7) return `Hace ${diffDays} día${diffDays > 1 ? 's' : ''}`;\n      return date.toLocaleDateString('es-MX', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    }\n    return dateString;\n  } catch (error) {\n    console.error('Error formateando fecha:', error);\n    return dateString;\n  }\n};","map":{"version":3,"names":["formatCurrency","amount","options","undefined","currency","maximumFractionDigits","minimumFractionDigits","Intl","NumberFormat","style","format","formatDate","dateString","date","Date","isNaN","getTime","toLocaleDateString","year","month","day","hour","minute","second","now","diffMs","diffSecs","Math","floor","diffMins","diffHours","diffDays","error","console"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/utils/formatters.ts"],"sourcesContent":["/**\n * Formatea un valor numérico a formato de moneda\n * @param amount Monto a formatear\n * @param options Opciones de formato\n * @returns String formateado como moneda\n */\nexport const formatCurrency = (\n  amount: number | undefined | null,\n  options: {\n    currency?: string;\n    maximumFractionDigits?: number;\n    minimumFractionDigits?: number;\n  } = {}\n): string => {\n  if (amount === undefined || amount === null) return \"$0.00\";\n  \n  const {\n    currency = 'MXN',\n    maximumFractionDigits = 2,\n    minimumFractionDigits = 2,\n  } = options;\n  \n  return new Intl.NumberFormat('es-MX', {\n    style: 'currency',\n    currency,\n    maximumFractionDigits,\n    minimumFractionDigits\n  }).format(amount);\n};\n\n/**\n * Formatea una fecha a formato legible\n * @param dateString String de fecha para formatear\n * @param format Formato deseado\n * @returns String de fecha formateada\n */\nexport const formatDate = (\n  dateString: string | undefined | null,\n  format: 'short' | 'long' | 'relative' | 'datetime' = 'short'\n): string => {\n  if (!dateString) return 'N/A';\n  \n  try {\n    const date = new Date(dateString);\n    \n    // Verificar que la fecha es válida\n    if (isNaN(date.getTime())) return 'Fecha inválida';\n    \n    if (format === 'short') {\n      return date.toLocaleDateString('es-MX', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n    }\n    \n    if (format === 'datetime') {\n      return date.toLocaleDateString('es-MX', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n      });\n    }\n    \n    if (format === 'long') {\n      return date.toLocaleDateString('es-MX', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n    }\n    \n    if (format === 'relative') {\n      const now = new Date();\n      const diffMs = now.getTime() - date.getTime();\n      const diffSecs = Math.floor(diffMs / 1000);\n      const diffMins = Math.floor(diffSecs / 60);\n      const diffHours = Math.floor(diffMins / 60);\n      const diffDays = Math.floor(diffHours / 24);\n      \n      if (diffSecs < 60) return 'Hace unos segundos';\n      if (diffMins < 60) return `Hace ${diffMins} min${diffMins > 1 ? 's' : ''}`;\n      if (diffHours < 24) return `Hace ${diffHours} hora${diffHours > 1 ? 's' : ''}`;\n      if (diffDays < 7) return `Hace ${diffDays} día${diffDays > 1 ? 's' : ''}`;\n      \n      return date.toLocaleDateString('es-MX', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n      });\n    }\n    \n    return dateString;\n  } catch (error) {\n    console.error('Error formateando fecha:', error);\n    return dateString;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}