{"ast":null,"code":"import { getServiceClient } from '../lib/supabaseClient';\nimport { TABLES } from './constants/tables';\n\n/**\n * Verifica si una tabla existe en Supabase\n * @param tableName Nombre de la tabla a verificar\n * @returns Booleano indicando si la tabla existe\n */\nconst checkTableExists = async tableName => {\n  try {\n    const serviceClient = getServiceClient();\n\n    // Intentamos obtener 1 registro de la tabla\n    const {\n      error\n    } = await serviceClient.from(tableName).select('*').limit(1);\n\n    // Si no hay error, la tabla existe\n    return !error;\n  } catch (error) {\n    console.error(`Error verificando si la tabla ${tableName} existe:`, error);\n    return false;\n  }\n};\n\n/**\n * Crea la tabla de documentos en Supabase\n * \n * NOTA: Esta función solo funciona si el usuario tiene permisos para crear tablas.\n * En la mayoría de los casos, será necesario crear la tabla manualmente desde la\n * interfaz de Supabase o mediante SQL directo.\n */\nconst createDocumentsTable = async () => {\n  try {\n    console.log(`Intentando crear la tabla ${TABLES.DOCUMENTS}...`);\n    const serviceClient = getServiceClient();\n\n    // Verificar si la tabla ya existe\n    const tableExists = await checkTableExists(TABLES.DOCUMENTS);\n    if (tableExists) {\n      console.log(`La tabla ${TABLES.DOCUMENTS} ya existe. No es necesario crearla.`);\n      return true;\n    }\n\n    // Crear la tabla usando SQL directo\n    // Esto solo funcionará si el usuario tiene permisos para ejecutar SQL\n    const {\n      error\n    } = await serviceClient.rpc('execute_sql', {\n      query: `\n        CREATE TABLE IF NOT EXISTS ${TABLES.DOCUMENTS} (\n          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n          file_name TEXT NOT NULL,\n          file_path TEXT,\n          file_type TEXT,\n          file_size BIGINT,\n          category TEXT,\n          application_id UUID REFERENCES ${TABLES.APPLICATIONS}(id) ON DELETE CASCADE,\n          client_id UUID REFERENCES ${TABLES.CLIENTS}(id) ON DELETE CASCADE,\n          uploaded_by_user_id UUID,\n          is_verified BOOLEAN DEFAULT FALSE,\n          verified_by UUID,\n          verified_at TIMESTAMP WITH TIME ZONE\n        );\n        \n        -- Añadir políticas RLS\n        ALTER TABLE ${TABLES.DOCUMENTS} ENABLE ROW LEVEL SECURITY;\n        \n        -- Política para permitir lectura a usuarios autenticados\n        CREATE POLICY \"Users can view documents\" ON ${TABLES.DOCUMENTS}\n          FOR SELECT\n          TO authenticated\n          USING (true);\n          \n        -- Política para permitir inserción a usuarios autenticados\n        CREATE POLICY \"Users can insert documents\" ON ${TABLES.DOCUMENTS}\n          FOR INSERT\n          TO authenticated\n          WITH CHECK (true);\n          \n        -- Política para permitir actualización a usuarios autenticados\n        CREATE POLICY \"Users can update their own documents\" ON ${TABLES.DOCUMENTS}\n          FOR UPDATE\n          TO authenticated\n          USING (uploaded_by_user_id = auth.uid() OR \n                (client_id IN (SELECT id FROM ${TABLES.CLIENTS} WHERE advisor_id = auth.uid())) OR\n                (application_id IN (SELECT id FROM ${TABLES.APPLICATIONS} WHERE advisor_id = auth.uid())));\n      `\n    });\n    if (error) {\n      console.error(`Error al crear la tabla ${TABLES.DOCUMENTS}:`, error);\n      return false;\n    }\n    console.log(`Tabla ${TABLES.DOCUMENTS} creada correctamente.`);\n    return true;\n  } catch (error) {\n    console.error(`Error al crear la tabla ${TABLES.DOCUMENTS}:`, error);\n    return false;\n  }\n};\n\n/**\n * Ensures that the user_role column exists in the users table\n * @returns {Promise<boolean>} True if the column already exists or was created successfully\n */\nasync function ensureUserRoleColumn() {\n  const serviceClient = getServiceClient();\n  try {\n    console.log('Verificando columna user_role en tabla users...');\n\n    // Check if the column exists\n    const {\n      data,\n      error\n    } = await serviceClient.rpc('check_column_exists', {\n      table_name: 'users',\n      column_name: 'user_role'\n    });\n    if (error) {\n      console.error('Error verificando existencia de columna user_role:', error);\n\n      // Fallback method: try to query the information_schema directly\n      const {\n        data: columnData,\n        error: columnError\n      } = await serviceClient.from('information_schema.columns').select('column_name').eq('table_name', 'users').eq('column_name', 'user_role');\n      if (columnError) {\n        console.error('Error en fallback para verificar columna user_role:', columnError);\n        throw columnError;\n      }\n\n      // If the column exists in the result, return true\n      if (columnData && columnData.length > 0) {\n        console.log('✅ La columna user_role ya existe en la tabla users (verificado por fallback)');\n        return true;\n      }\n    }\n\n    // Column doesn't exist, create it\n    if (!data || data === false) {\n      console.log('La columna user_role no existe en la tabla users. Creándola...');\n\n      // Create the column\n      const alterTableQuery = `\n        ALTER TABLE users \n        ADD COLUMN IF NOT EXISTS user_role TEXT DEFAULT 'CLIENT'\n      `;\n      const {\n        error: alterError\n      } = await serviceClient.rpc('execute_sql', {\n        sql: alterTableQuery\n      });\n      if (alterError) {\n        console.error('Error al crear columna user_role:', alterError);\n        throw alterError;\n      }\n      console.log('✅ Columna user_role creada exitosamente');\n      return true;\n    }\n    console.log('✅ La columna user_role ya existe en la tabla users');\n    return true;\n  } catch (err) {\n    console.error('Error general al verificar/crear columna user_role:', err);\n    return false;\n  }\n}\n\n/**\n * Función principal que verifica y crea las tablas necesarias\n */\nexport const ensureTablesExist = async () => {\n  console.log('Verificando tablas necesarias...');\n\n  // Verificar y crear tabla de documentos\n  const documentsExists = await checkTableExists(TABLES.DOCUMENTS);\n  if (!documentsExists) {\n    console.warn(`La tabla ${TABLES.DOCUMENTS} no existe. Intentando crearla...`);\n    await createDocumentsTable();\n  } else {\n    console.log(`La tabla ${TABLES.DOCUMENTS} existe correctamente.`);\n  }\n\n  // Ensure user_role column exists in users table\n  await ensureUserRoleColumn();\n\n  // Aquí puedes agregar verificaciones para otras tablas según sea necesario\n\n  console.log('Verificación de tablas completada.');\n};\n\n// Si este archivo se ejecuta directamente, verificar tablas\nif (require.main === module) {\n  ensureTablesExist().then(() => console.log('Proceso finalizado.')).catch(error => console.error('Error en el proceso:', error));\n}\nexport default {\n  checkTableExists,\n  createDocumentsTable,\n  ensureTablesExist\n};","map":{"version":3,"names":["getServiceClient","TABLES","checkTableExists","tableName","serviceClient","error","from","select","limit","console","createDocumentsTable","log","DOCUMENTS","tableExists","rpc","query","APPLICATIONS","CLIENTS","ensureUserRoleColumn","data","table_name","column_name","columnData","columnError","eq","length","alterTableQuery","alterError","sql","err","ensureTablesExist","documentsExists","warn","require","main","module","then","catch"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/utils/createTables.ts"],"sourcesContent":["import { getServiceClient } from '../lib/supabaseClient';\nimport { TABLES } from './constants/tables';\n\n/**\n * Verifica si una tabla existe en Supabase\n * @param tableName Nombre de la tabla a verificar\n * @returns Booleano indicando si la tabla existe\n */\nconst checkTableExists = async (tableName: string): Promise<boolean> => {\n  try {\n    const serviceClient = getServiceClient();\n    \n    // Intentamos obtener 1 registro de la tabla\n    const { error } = await serviceClient\n      .from(tableName)\n      .select('*')\n      .limit(1);\n    \n    // Si no hay error, la tabla existe\n    return !error;\n  } catch (error) {\n    console.error(`Error verificando si la tabla ${tableName} existe:`, error);\n    return false;\n  }\n};\n\n/**\n * Crea la tabla de documentos en Supabase\n * \n * NOTA: Esta función solo funciona si el usuario tiene permisos para crear tablas.\n * En la mayoría de los casos, será necesario crear la tabla manualmente desde la\n * interfaz de Supabase o mediante SQL directo.\n */\nconst createDocumentsTable = async () => {\n  try {\n    console.log(`Intentando crear la tabla ${TABLES.DOCUMENTS}...`);\n    \n    const serviceClient = getServiceClient();\n    \n    // Verificar si la tabla ya existe\n    const tableExists = await checkTableExists(TABLES.DOCUMENTS);\n    \n    if (tableExists) {\n      console.log(`La tabla ${TABLES.DOCUMENTS} ya existe. No es necesario crearla.`);\n      return true;\n    }\n    \n    // Crear la tabla usando SQL directo\n    // Esto solo funcionará si el usuario tiene permisos para ejecutar SQL\n    const { error } = await serviceClient.rpc('execute_sql', {\n      query: `\n        CREATE TABLE IF NOT EXISTS ${TABLES.DOCUMENTS} (\n          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n          file_name TEXT NOT NULL,\n          file_path TEXT,\n          file_type TEXT,\n          file_size BIGINT,\n          category TEXT,\n          application_id UUID REFERENCES ${TABLES.APPLICATIONS}(id) ON DELETE CASCADE,\n          client_id UUID REFERENCES ${TABLES.CLIENTS}(id) ON DELETE CASCADE,\n          uploaded_by_user_id UUID,\n          is_verified BOOLEAN DEFAULT FALSE,\n          verified_by UUID,\n          verified_at TIMESTAMP WITH TIME ZONE\n        );\n        \n        -- Añadir políticas RLS\n        ALTER TABLE ${TABLES.DOCUMENTS} ENABLE ROW LEVEL SECURITY;\n        \n        -- Política para permitir lectura a usuarios autenticados\n        CREATE POLICY \"Users can view documents\" ON ${TABLES.DOCUMENTS}\n          FOR SELECT\n          TO authenticated\n          USING (true);\n          \n        -- Política para permitir inserción a usuarios autenticados\n        CREATE POLICY \"Users can insert documents\" ON ${TABLES.DOCUMENTS}\n          FOR INSERT\n          TO authenticated\n          WITH CHECK (true);\n          \n        -- Política para permitir actualización a usuarios autenticados\n        CREATE POLICY \"Users can update their own documents\" ON ${TABLES.DOCUMENTS}\n          FOR UPDATE\n          TO authenticated\n          USING (uploaded_by_user_id = auth.uid() OR \n                (client_id IN (SELECT id FROM ${TABLES.CLIENTS} WHERE advisor_id = auth.uid())) OR\n                (application_id IN (SELECT id FROM ${TABLES.APPLICATIONS} WHERE advisor_id = auth.uid())));\n      `\n    });\n    \n    if (error) {\n      console.error(`Error al crear la tabla ${TABLES.DOCUMENTS}:`, error);\n      return false;\n    }\n    \n    console.log(`Tabla ${TABLES.DOCUMENTS} creada correctamente.`);\n    return true;\n  } catch (error) {\n    console.error(`Error al crear la tabla ${TABLES.DOCUMENTS}:`, error);\n    return false;\n  }\n};\n\n/**\n * Ensures that the user_role column exists in the users table\n * @returns {Promise<boolean>} True if the column already exists or was created successfully\n */\nasync function ensureUserRoleColumn(): Promise<boolean> {\n  const serviceClient = getServiceClient();\n  \n  try {\n    console.log('Verificando columna user_role en tabla users...');\n    \n    // Check if the column exists\n    const { data, error } = await serviceClient.rpc('check_column_exists', {\n      table_name: 'users',\n      column_name: 'user_role'\n    });\n    \n    if (error) {\n      console.error('Error verificando existencia de columna user_role:', error);\n      \n      // Fallback method: try to query the information_schema directly\n      const { data: columnData, error: columnError } = await serviceClient.from('information_schema.columns')\n        .select('column_name')\n        .eq('table_name', 'users')\n        .eq('column_name', 'user_role');\n      \n      if (columnError) {\n        console.error('Error en fallback para verificar columna user_role:', columnError);\n        throw columnError;\n      }\n      \n      // If the column exists in the result, return true\n      if (columnData && columnData.length > 0) {\n        console.log('✅ La columna user_role ya existe en la tabla users (verificado por fallback)');\n        return true;\n      }\n    }\n    \n    // Column doesn't exist, create it\n    if (!data || data === false) {\n      console.log('La columna user_role no existe en la tabla users. Creándola...');\n      \n      // Create the column\n      const alterTableQuery = `\n        ALTER TABLE users \n        ADD COLUMN IF NOT EXISTS user_role TEXT DEFAULT 'CLIENT'\n      `;\n      \n      const { error: alterError } = await serviceClient.rpc('execute_sql', { \n        sql: alterTableQuery \n      });\n      \n      if (alterError) {\n        console.error('Error al crear columna user_role:', alterError);\n        throw alterError;\n      }\n      \n      console.log('✅ Columna user_role creada exitosamente');\n      return true;\n    }\n    \n    console.log('✅ La columna user_role ya existe en la tabla users');\n    return true;\n  } catch (err) {\n    console.error('Error general al verificar/crear columna user_role:', err);\n    return false;\n  }\n}\n\n/**\n * Función principal que verifica y crea las tablas necesarias\n */\nexport const ensureTablesExist = async () => {\n  console.log('Verificando tablas necesarias...');\n  \n  // Verificar y crear tabla de documentos\n  const documentsExists = await checkTableExists(TABLES.DOCUMENTS);\n  \n  if (!documentsExists) {\n    console.warn(`La tabla ${TABLES.DOCUMENTS} no existe. Intentando crearla...`);\n    await createDocumentsTable();\n  } else {\n    console.log(`La tabla ${TABLES.DOCUMENTS} existe correctamente.`);\n  }\n  \n  // Ensure user_role column exists in users table\n  await ensureUserRoleColumn();\n  \n  // Aquí puedes agregar verificaciones para otras tablas según sea necesario\n  \n  console.log('Verificación de tablas completada.');\n};\n\n// Si este archivo se ejecuta directamente, verificar tablas\nif (require.main === module) {\n  ensureTablesExist()\n    .then(() => console.log('Proceso finalizado.'))\n    .catch(error => console.error('Error en el proceso:', error));\n}\n\nexport default {\n  checkTableExists,\n  createDocumentsTable,\n  ensureTablesExist\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}