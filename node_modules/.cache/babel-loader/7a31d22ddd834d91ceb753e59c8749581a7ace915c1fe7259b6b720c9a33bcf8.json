{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect,useRef}from'react';import{useAuth}from'./AuthContext';import NotificationPopup from'../components/ui/NotificationPopup';// Enum for notification types\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export let NotificationType=/*#__PURE__*/function(NotificationType){NotificationType[\"INFO\"]=\"info\";NotificationType[\"SUCCESS\"]=\"success\";NotificationType[\"WARNING\"]=\"warning\";NotificationType[\"ERROR\"]=\"error\";NotificationType[\"NEW_APPLICATION\"]=\"new_application\";NotificationType[\"APPROVAL_REQUIRED\"]=\"approval_required\";NotificationType[\"NEW_MESSAGE\"]=\"new_message\";NotificationType[\"APPLICATION_STATUS_UPDATED\"]=\"application_status_updated\";NotificationType[\"APPLICATION_COMMENT\"]=\"application_comment\";return NotificationType;}({});// Interfaces\nexport const NotificationContext=/*#__PURE__*/createContext(undefined);export const useNotifications=()=>{const context=useContext(NotificationContext);if(context===undefined){throw new Error('useNotifications must be used within a NotificationProvider');}return context;};export const NotificationProvider=_ref=>{let{children}=_ref;const{user}=useAuth();const[notifications,setNotifications]=useState([]);const[unreadCount,setUnreadCount]=useState(0);const[soundEnabled,setSoundEnabled]=useState(true);// Estado para la notificación emergente actual\nconst[currentPopup,setCurrentPopup]=useState(null);// Referencia al ID del polling interval\nconst pollingIntervalRef=useRef(null);// Efecto para manejar la carga inicial de notificaciones y configurar el polling\nuseEffect(()=>{if(user){// Cargar notificaciones al inicio\nloadNotifications();// Configurar polling para verificar nuevas notificaciones cada 30 segundos\npollingIntervalRef.current=setInterval(()=>{checkForNewNotifications();},30000);// Limpiar el intervalo cuando el componente se desmonte\nreturn()=>{if(pollingIntervalRef.current){clearInterval(pollingIntervalRef.current);}};}},[user]);// Cálculo de notificaciones no leídas\nuseEffect(()=>{const count=notifications.filter(notification=>!notification.read).length;setUnreadCount(count);},[notifications]);// Cargar notificaciones del almacenamiento local o del servidor\nconst loadNotifications=async()=>{try{// En un escenario real, aquí se cargarían las notificaciones del servidor\n// Por ahora, usaremos el localStorage como ejemplo\nconst storedNotifications=localStorage.getItem('notifications');if(storedNotifications){const parsed=JSON.parse(storedNotifications);setNotifications(parsed.map(n=>({...n,createdAt:new Date(n.createdAt)})));}}catch(error){console.error('Error cargando notificaciones:',error);}};// Verificar nuevas notificaciones en el servidor\nconst checkForNewNotifications=async()=>{// En una implementación real, esto sería una llamada a la API\n// Por ahora solo simulamos la lógica\nconsole.log('Verificando nuevas notificaciones...');// Ejemplo: Si hay notificaciones pendientes en la cola del servidor,\n// las añadiríamos al estado y podríamos mostrar una notificación emergente\n// Simulación: Ocasionalmente añadir una notificación de prueba\nif(Math.random()>0.7){const testNotification={title:'Nueva solicitud asignada',message:'Se ha asignado una nueva solicitud de crédito a tu bandeja',type:NotificationType.NEW_APPLICATION,relatedItemType:'application',relatedItemId:`app-${Date.now()}`};addNotification(testNotification);// También mostrar como popup con sonido\nshowPopup({...testNotification,playSound:soundEnabled,soundType:'notification'});}};// Añadir una nueva notificación\nconst addNotification=notification=>{const newNotification={...notification,id:`notif-${Date.now()}`,createdAt:new Date(),read:false,timestamp:new Date()};setNotifications(prev=>{const updated=[newNotification,...prev];// Guardar en localStorage (en producción esto iría al servidor)\nlocalStorage.setItem('notifications',JSON.stringify(updated));return updated;});};// Marcar una notificación como leída\nconst markAsRead=id=>{setNotifications(prev=>{const updated=prev.map(notification=>notification.id===id?{...notification,read:true,isRead:true}:notification);// Guardar en localStorage\nlocalStorage.setItem('notifications',JSON.stringify(updated));return updated;});};// Marcar todas las notificaciones como leídas\nconst markAllAsRead=()=>{setNotifications(prev=>{const updated=prev.map(notification=>({...notification,read:true,isRead:true}));// Guardar en localStorage\nlocalStorage.setItem('notifications',JSON.stringify(updated));return updated;});};// Limpiar todas las notificaciones\nconst clearNotifications=()=>{setNotifications([]);// Limpiar del localStorage\nlocalStorage.setItem('notifications',JSON.stringify([]));};// Mostrar una notificación emergente\nconst showPopup=config=>{setCurrentPopup(config);// Automáticamente cerrar el popup después de la duración especificada\nsetTimeout(()=>{setCurrentPopup(null);},config.duration||5000);};// Activar/desactivar sonidos de notificación\nconst toggleSound=()=>{const newValue=!soundEnabled;setSoundEnabled(newValue);// Guardar preferencia en localStorage\nlocalStorage.setItem('notification_sound_enabled',newValue.toString());};const value={notifications,unreadCount,addNotification,markAsRead,markAllAsRead,clearNotifications,showPopup,soundEnabled,toggleSound,setSoundEnabled};return/*#__PURE__*/_jsxs(NotificationContext.Provider,{value:value,children:[children,currentPopup&&/*#__PURE__*/_jsx(NotificationPopup,{title:currentPopup.title,message:currentPopup.message,type:currentPopup.type,duration:currentPopup.duration,playSound:currentPopup.playSound,soundType:currentPopup.soundType,onClose:()=>setCurrentPopup(null)})]});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","useAuth","NotificationPopup","jsx","_jsx","jsxs","_jsxs","NotificationType","NotificationContext","undefined","useNotifications","context","Error","NotificationProvider","_ref","children","user","notifications","setNotifications","unreadCount","setUnreadCount","soundEnabled","setSoundEnabled","currentPopup","setCurrentPopup","pollingIntervalRef","loadNotifications","current","setInterval","checkForNewNotifications","clearInterval","count","filter","notification","read","length","storedNotifications","localStorage","getItem","parsed","JSON","parse","map","n","createdAt","Date","error","console","log","Math","random","testNotification","title","message","type","NEW_APPLICATION","relatedItemType","relatedItemId","now","addNotification","showPopup","playSound","soundType","newNotification","id","timestamp","prev","updated","setItem","stringify","markAsRead","isRead","markAllAsRead","clearNotifications","config","setTimeout","duration","toggleSound","newValue","toString","value","Provider","onClose"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { useAuth } from './AuthContext';\nimport NotificationPopup from '../components/ui/NotificationPopup';\n\n// Enum for notification types\nexport enum NotificationType {\n  INFO = 'info',\n  SUCCESS = 'success',\n  WARNING = 'warning',\n  ERROR = 'error',\n  NEW_APPLICATION = 'new_application',\n  APPROVAL_REQUIRED = 'approval_required',\n  NEW_MESSAGE = 'new_message',\n  APPLICATION_STATUS_UPDATED = 'application_status_updated',\n  APPLICATION_COMMENT = 'application_comment',\n}\n\n// Interfaces\ninterface Notification {\n  id: string;\n  title: string;\n  message: string;\n  createdAt: Date;\n  read: boolean;\n  type: NotificationType | 'info' | 'success' | 'warning' | 'error';\n  relatedItemId?: string;\n  relatedItemType?: string;\n  data?: any;\n  timestamp?: Date;\n  isRead?: boolean;\n}\n\ninterface NotificationPopupConfig {\n  title: string;\n  message: string;\n  type?: NotificationType | 'info' | 'success' | 'warning' | 'error';\n  duration?: number;\n  playSound?: boolean;\n  soundType?: 'notification' | 'alert' | 'approval';\n}\n\ninterface NotificationContextType {\n  notifications: Notification[];\n  unreadCount: number;\n  addNotification: (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => void;\n  markAsRead: (id: string) => void;\n  markAllAsRead: () => void;\n  clearNotifications: () => void;\n  showPopup: (config: NotificationPopupConfig) => void;\n  soundEnabled: boolean;\n  toggleSound: () => void;\n  setSoundEnabled: (enabled: boolean) => void;\n}\n\nexport const NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user } = useAuth();\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [unreadCount, setUnreadCount] = useState<number>(0);\n  const [soundEnabled, setSoundEnabled] = useState<boolean>(true);\n  \n  // Estado para la notificación emergente actual\n  const [currentPopup, setCurrentPopup] = useState<NotificationPopupConfig | null>(null);\n  \n  // Referencia al ID del polling interval\n  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Efecto para manejar la carga inicial de notificaciones y configurar el polling\n  useEffect(() => {\n    if (user) {\n      // Cargar notificaciones al inicio\n      loadNotifications();\n      \n      // Configurar polling para verificar nuevas notificaciones cada 30 segundos\n      pollingIntervalRef.current = setInterval(() => {\n        checkForNewNotifications();\n      }, 30000);\n      \n      // Limpiar el intervalo cuando el componente se desmonte\n      return () => {\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n        }\n      };\n    }\n  }, [user]);\n\n  // Cálculo de notificaciones no leídas\n  useEffect(() => {\n    const count = notifications.filter(notification => !notification.read).length;\n    setUnreadCount(count);\n  }, [notifications]);\n\n  // Cargar notificaciones del almacenamiento local o del servidor\n  const loadNotifications = async () => {\n    try {\n      // En un escenario real, aquí se cargarían las notificaciones del servidor\n      // Por ahora, usaremos el localStorage como ejemplo\n      const storedNotifications = localStorage.getItem('notifications');\n      if (storedNotifications) {\n        const parsed = JSON.parse(storedNotifications);\n        setNotifications(parsed.map((n: any) => ({\n          ...n,\n          createdAt: new Date(n.createdAt)\n        })));\n      }\n    } catch (error) {\n      console.error('Error cargando notificaciones:', error);\n    }\n  };\n\n  // Verificar nuevas notificaciones en el servidor\n  const checkForNewNotifications = async () => {\n    // En una implementación real, esto sería una llamada a la API\n    // Por ahora solo simulamos la lógica\n    console.log('Verificando nuevas notificaciones...');\n    \n    // Ejemplo: Si hay notificaciones pendientes en la cola del servidor,\n    // las añadiríamos al estado y podríamos mostrar una notificación emergente\n    \n    // Simulación: Ocasionalmente añadir una notificación de prueba\n    if (Math.random() > 0.7) {\n      const testNotification = {\n        title: 'Nueva solicitud asignada',\n        message: 'Se ha asignado una nueva solicitud de crédito a tu bandeja',\n        type: NotificationType.NEW_APPLICATION,\n        relatedItemType: 'application',\n        relatedItemId: `app-${Date.now()}`\n      };\n      \n      addNotification(testNotification);\n      \n      // También mostrar como popup con sonido\n      showPopup({\n        ...testNotification,\n        playSound: soundEnabled,\n        soundType: 'notification'\n      });\n    }\n  };\n\n  // Añadir una nueva notificación\n  const addNotification = (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => {\n    const newNotification: Notification = {\n      ...notification,\n      id: `notif-${Date.now()}`,\n      createdAt: new Date(),\n      read: false,\n      timestamp: new Date()\n    };\n    \n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Guardar en localStorage (en producción esto iría al servidor)\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar una notificación como leída\n  const markAsRead = (id: string) => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => \n        notification.id === id \n          ? { ...notification, read: true, isRead: true } \n          : notification\n      );\n      \n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar todas las notificaciones como leídas\n  const markAllAsRead = () => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => ({ ...notification, read: true, isRead: true }));\n      \n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Limpiar todas las notificaciones\n  const clearNotifications = () => {\n    setNotifications([]);\n    // Limpiar del localStorage\n    localStorage.setItem('notifications', JSON.stringify([]));\n  };\n\n  // Mostrar una notificación emergente\n  const showPopup = (config: NotificationPopupConfig) => {\n    setCurrentPopup(config);\n    \n    // Automáticamente cerrar el popup después de la duración especificada\n    setTimeout(() => {\n      setCurrentPopup(null);\n    }, config.duration || 5000);\n  };\n\n  // Activar/desactivar sonidos de notificación\n  const toggleSound = () => {\n    const newValue = !soundEnabled;\n    setSoundEnabled(newValue);\n    // Guardar preferencia en localStorage\n    localStorage.setItem('notification_sound_enabled', newValue.toString());\n  };\n\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    showPopup,\n    soundEnabled,\n    toggleSound,\n    setSoundEnabled\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n      {currentPopup && (\n        <NotificationPopup\n          title={currentPopup.title}\n          message={currentPopup.message}\n          type={currentPopup.type as any}\n          duration={currentPopup.duration}\n          playSound={currentPopup.playSound}\n          soundType={currentPopup.soundType}\n          onClose={() => setCurrentPopup(null)}\n        />\n      )}\n    </NotificationContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}