{"ast":null,"code":"import { queryTable, insertRecord, updateRecord, deleteRecord } from '../utils/supabase';\nimport { TABLES } from '../utils/constants/tables';\n\n// Tipos de solicitud\nexport let APPLICATION_TYPE = /*#__PURE__*/function (APPLICATION_TYPE) {\n  APPLICATION_TYPE[\"AUTO_LOAN\"] = \"auto_loan\";\n  APPLICATION_TYPE[\"CAR_BACKED_LOAN\"] = \"car_backed_loan\";\n  APPLICATION_TYPE[\"PERSONAL_LOAN\"] = \"personal_loan\";\n  APPLICATION_TYPE[\"CASH_ADVANCE\"] = \"cash_advance\";\n  return APPLICATION_TYPE;\n}({});\n\n// Estados de solicitud\nexport let APPLICATION_STATUS = /*#__PURE__*/function (APPLICATION_STATUS) {\n  APPLICATION_STATUS[\"PENDING\"] = \"pending\";\n  APPLICATION_STATUS[\"REVIEW\"] = \"review\";\n  APPLICATION_STATUS[\"APPROVED\"] = \"approved\";\n  APPLICATION_STATUS[\"REJECTED\"] = \"rejected\";\n  APPLICATION_STATUS[\"COMPLETED\"] = \"completed\";\n  APPLICATION_STATUS[\"CANCELLED\"] = \"cancelled\";\n  return APPLICATION_STATUS;\n}({});\n\n// Nombre de las tablas\nconst APPLICATIONS_TABLE = TABLES.APPLICATIONS;\nconst DOCUMENTS_TABLE = 'documents';\nconst STATUS_HISTORY_TABLE = TABLES.STATUS_HISTORY;\n\n// Tipos\n\n/**\n * Servicio para gestionar las solicitudes de crédito\n */\nconst applicationService = {\n  /**\n   * Obtiene todas las solicitudes con filtros opcionales\n   * @param filters - Filtros para la consulta\n   */\n  getAllApplications: async (filters = {}) => {\n    try {\n      // En desarrollo, usamos datos estáticos para pruebas\n      if (process.env.NODE_ENV === 'development' && !process.env.REACT_APP_USE_REAL_DATA) {\n        return getMockApplications(filters);\n      }\n      const {\n        data,\n        error\n      } = await queryTable(APPLICATIONS_TABLE, {\n        filters,\n        select: '*',\n        order: {\n          created_at: 'desc'\n        }\n      });\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error al obtener las solicitudes:', error);\n      return [];\n    }\n  },\n  /**\n   * Obtiene una solicitud por su ID\n   * @param id - ID de la solicitud\n   */\n  getApplicationById: async id => {\n    try {\n      // En desarrollo, usamos datos estáticos para pruebas\n      if (process.env.NODE_ENV === 'development' && !process.env.REACT_APP_USE_REAL_DATA) {\n        return getMockApplicationById(id);\n      }\n      const {\n        data,\n        error\n      } = await queryTable(APPLICATIONS_TABLE, {\n        filters: {\n          id\n        },\n        select: '*',\n        single: true\n      });\n      if (error) throw error;\n      return data || null;\n    } catch (error) {\n      console.error(`Error al obtener la solicitud con ID ${id}:`, error);\n      return null;\n    }\n  },\n  /**\n   * Crea una nueva solicitud\n   * @param application - Datos de la solicitud\n   */\n  createApplication: async application => {\n    try {\n      // En desarrollo, simulamos la creación\n      if (process.env.NODE_ENV === 'development' && !process.env.REACT_APP_USE_REAL_DATA) {\n        return {\n          data: createMockApplication(application),\n          error: null\n        };\n      }\n      const now = new Date().toISOString();\n      const newApplication = {\n        ...application,\n        created_at: now,\n        updated_at: now,\n        status: application.status || APPLICATION_STATUS.PENDING\n      };\n      const {\n        data,\n        error\n      } = await insertRecord(APPLICATIONS_TABLE, newApplication);\n      if (error) throw error;\n\n      // Registrar el cambio de estado inicial\n      if (data !== null && data !== void 0 && data.id) {\n        await applicationService.addStatusHistory({\n          application_id: data.id,\n          new_status: newApplication.status,\n          comment: 'Solicitud creada',\n          created_by: application.advisor_id || 'system'\n        });\n      }\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error al crear la solicitud:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  },\n  /**\n   * Actualiza una solicitud existente\n   * @param id - ID de la solicitud\n   * @param updates - Datos a actualizar\n   */\n  updateApplication: async (id, updates) => {\n    try {\n      // En desarrollo, simulamos la actualización\n      if (process.env.NODE_ENV === 'development' && !process.env.REACT_APP_USE_REAL_DATA) {\n        return {\n          success: true,\n          error: null\n        };\n      }\n      const {\n        error\n      } = await updateRecord(APPLICATIONS_TABLE, {\n        ...updates,\n        updated_at: new Date().toISOString()\n      }, {\n        id\n      });\n      if (error) throw error;\n      return {\n        success: true,\n        error: null\n      };\n    } catch (error) {\n      console.error(`Error al actualizar la solicitud con ID ${id}:`, error);\n      return {\n        success: false,\n        error\n      };\n    }\n  },\n  /**\n   * Cambia el estado de una solicitud\n   * @param id - ID de la solicitud\n   * @param newStatus - Nuevo estado\n   * @param comment - Comentario sobre el cambio\n   * @param userId - ID del usuario que realiza el cambio\n   */\n  changeApplicationStatus: async (id, newStatus, comment, userId) => {\n    try {\n      // En desarrollo, simulamos el cambio de estado\n      if (process.env.NODE_ENV === 'development' && !process.env.REACT_APP_USE_REAL_DATA) {\n        return {\n          success: true,\n          error: null\n        };\n      }\n\n      // Obtener el estado actual\n      const {\n        data: application,\n        error: fetchError\n      } = await queryTable(APPLICATIONS_TABLE, {\n        filters: {\n          id\n        },\n        select: 'status',\n        single: true\n      });\n      if (fetchError) throw fetchError;\n      if (!application) throw new Error('Solicitud no encontrada');\n      const currentStatus = application.status;\n\n      // Actualizar el estado\n      const {\n        error: updateError\n      } = await updateRecord(APPLICATIONS_TABLE, {\n        status: newStatus,\n        updated_at: new Date().toISOString()\n      }, {\n        id\n      });\n      if (updateError) throw updateError;\n\n      // Registrar en el historial\n      await applicationService.addStatusHistory({\n        application_id: id,\n        previous_status: currentStatus,\n        new_status: newStatus,\n        comment,\n        created_by: userId\n      });\n      return {\n        success: true,\n        error: null\n      };\n    } catch (error) {\n      console.error(`Error al cambiar el estado de la solicitud con ID ${id}:`, error);\n      return {\n        success: false,\n        error\n      };\n    }\n  },\n  /**\n   * Elimina una solicitud\n   * @param id - ID de la solicitud\n   */\n  deleteApplication: async id => {\n    try {\n      // En desarrollo, simulamos la eliminación\n      if (process.env.NODE_ENV === 'development' && !process.env.REACT_APP_USE_REAL_DATA) {\n        return {\n          success: true,\n          error: null\n        };\n      }\n      const {\n        error\n      } = await deleteRecord(APPLICATIONS_TABLE, {\n        id\n      });\n      if (error) throw error;\n      return {\n        success: true,\n        error: null\n      };\n    } catch (error) {\n      console.error(`Error al eliminar la solicitud con ID ${id}:`, error);\n      return {\n        success: false,\n        error\n      };\n    }\n  },\n  /**\n   * Obtiene el historial de estados de una solicitud\n   * @param applicationId - ID de la solicitud\n   */\n  getStatusHistory: async applicationId => {\n    try {\n      // En desarrollo, usamos datos estáticos para pruebas\n      if (process.env.NODE_ENV === 'development' && !process.env.REACT_APP_USE_REAL_DATA) {\n        return getMockStatusHistory(applicationId);\n      }\n      const {\n        data,\n        error\n      } = await queryTable(STATUS_HISTORY_TABLE, {\n        filters: {\n          application_id: applicationId\n        },\n        select: '*',\n        order: {\n          created_at: 'desc'\n        }\n      });\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error(`Error al obtener el historial de estados para la solicitud ${applicationId}:`, error);\n      return [];\n    }\n  },\n  /**\n   * Añade un nuevo registro al historial de estados\n   * @param historyItem - Elemento del historial\n   */\n  addStatusHistory: async historyItem => {\n    try {\n      // En desarrollo, simulamos la adición\n      if (process.env.NODE_ENV === 'development' && !process.env.REACT_APP_USE_REAL_DATA) {\n        return {\n          success: true,\n          error: null\n        };\n      }\n      const newHistoryItem = {\n        ...historyItem,\n        created_at: new Date().toISOString()\n      };\n      const {\n        error\n      } = await insertRecord(STATUS_HISTORY_TABLE, newHistoryItem);\n      if (error) throw error;\n      return {\n        success: true,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error al añadir el historial de estados:', error);\n      return {\n        success: false,\n        error\n      };\n    }\n  }\n};\n\n// Funciones auxiliares para datos mock en desarrollo\n\n// Mock de solicitudes para desarrollo\nconst getMockApplications = (filters = {}) => {\n  const mockData = [{\n    id: '1',\n    applicant_name: 'Juan Pérez',\n    email: 'juan@example.com',\n    phone: '+56 9 1234 5678',\n    amount: 25000,\n    application_type: APPLICATION_TYPE.AUTO_LOAN,\n    status: APPLICATION_STATUS.PENDING,\n    created_at: '2023-07-18T10:30:00'\n  }, {\n    id: '2',\n    applicant_name: 'María González',\n    email: 'maria@example.com',\n    phone: '+56 9 8765 4321',\n    amount: 50000,\n    application_type: APPLICATION_TYPE.CAR_BACKED_LOAN,\n    status: APPLICATION_STATUS.REVIEW,\n    created_at: '2023-07-17T14:20:00'\n  }, {\n    id: '3',\n    applicant_name: 'Carlos Rodríguez',\n    email: 'carlos@example.com',\n    phone: '+56 9 5555 5555',\n    amount: 35000,\n    application_type: APPLICATION_TYPE.PERSONAL_LOAN,\n    status: APPLICATION_STATUS.APPROVED,\n    created_at: '2023-07-16T09:15:00'\n  }, {\n    id: '4',\n    applicant_name: 'Ana Martínez',\n    email: 'ana@example.com',\n    phone: '+56 9 7777 7777',\n    amount: 75000,\n    application_type: APPLICATION_TYPE.CASH_ADVANCE,\n    status: APPLICATION_STATUS.REJECTED,\n    created_at: '2023-07-15T16:45:00'\n  }, {\n    id: '5',\n    applicant_name: 'Roberto Silva',\n    email: 'roberto@example.com',\n    phone: '+56 9 8888 8888',\n    amount: 15000,\n    application_type: APPLICATION_TYPE.PERSONAL_LOAN,\n    status: APPLICATION_STATUS.PENDING,\n    created_at: '2023-07-14T11:30:00'\n  }];\n\n  // Filtrar según los criterios proporcionados\n  return mockData.filter(app => {\n    // Filtro por estado\n    if (filters.status && app.status !== filters.status) return false;\n\n    // Filtro por tipo de aplicación\n    if (filters.application_type && app.application_type !== filters.application_type) return false;\n\n    // Filtro por término de búsqueda (nombre, email o teléfono)\n    if (filters.searchTerm) {\n      const term = filters.searchTerm.toLowerCase();\n      const matchesName = app.applicant_name.toLowerCase().includes(term);\n      const matchesEmail = app.email.toLowerCase().includes(term);\n      const matchesPhone = app.phone.toLowerCase().includes(term);\n      if (!matchesName && !matchesEmail && !matchesPhone) return false;\n    }\n    return true;\n  });\n};\n\n// Obtiene una solicitud mock por ID\nconst getMockApplicationById = id => {\n  const mockApplications = getMockApplications();\n  return mockApplications.find(app => app.id === id) || null;\n};\n\n// Crea una solicitud mock\nconst createMockApplication = application => {\n  return {\n    ...application,\n    id: Math.floor(Math.random() * 1000).toString(),\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n    status: application.status || APPLICATION_STATUS.PENDING\n  };\n};\n\n// Obtiene un historial de estados mock\nconst getMockStatusHistory = applicationId => {\n  const mockHistory = [{\n    id: '1',\n    application_id: applicationId,\n    new_status: APPLICATION_STATUS.PENDING,\n    comment: 'Solicitud creada',\n    created_by: 'system',\n    created_at: '2023-07-10T09:00:00'\n  }];\n\n  // Añadir más elementos al historial según el ID\n  if (applicationId === '2' || applicationId === '3' || applicationId === '4') {\n    mockHistory.push({\n      id: '2',\n      application_id: applicationId,\n      previous_status: APPLICATION_STATUS.PENDING,\n      new_status: APPLICATION_STATUS.REVIEW,\n      comment: 'Solicitud en revisión por el departamento de crédito',\n      created_by: 'asesor1',\n      created_at: '2023-07-11T10:15:00'\n    });\n  }\n  if (applicationId === '3') {\n    mockHistory.push({\n      id: '3',\n      application_id: applicationId,\n      previous_status: APPLICATION_STATUS.REVIEW,\n      new_status: APPLICATION_STATUS.APPROVED,\n      comment: 'Solicitud aprobada. Se ha verificado la capacidad crediticia.',\n      created_by: 'analista1',\n      created_at: '2023-07-12T14:30:00'\n    });\n  } else if (applicationId === '4') {\n    mockHistory.push({\n      id: '3',\n      application_id: applicationId,\n      previous_status: APPLICATION_STATUS.REVIEW,\n      new_status: APPLICATION_STATUS.REJECTED,\n      comment: 'Solicitud rechazada. El cliente no cumple con los requisitos mínimos.',\n      created_by: 'analista2',\n      created_at: '2023-07-12T11:45:00'\n    });\n  }\n  return mockHistory;\n};\nexport default applicationService;","map":{"version":3,"names":["queryTable","insertRecord","updateRecord","deleteRecord","TABLES","APPLICATION_TYPE","APPLICATION_STATUS","APPLICATIONS_TABLE","APPLICATIONS","DOCUMENTS_TABLE","STATUS_HISTORY_TABLE","STATUS_HISTORY","applicationService","getAllApplications","filters","process","env","NODE_ENV","REACT_APP_USE_REAL_DATA","getMockApplications","data","error","select","order","created_at","console","getApplicationById","id","getMockApplicationById","single","createApplication","application","createMockApplication","now","Date","toISOString","newApplication","updated_at","status","PENDING","addStatusHistory","application_id","new_status","comment","created_by","advisor_id","updateApplication","updates","success","changeApplicationStatus","newStatus","userId","fetchError","Error","currentStatus","updateError","previous_status","deleteApplication","getStatusHistory","applicationId","getMockStatusHistory","historyItem","newHistoryItem","mockData","applicant_name","email","phone","amount","application_type","AUTO_LOAN","CAR_BACKED_LOAN","REVIEW","PERSONAL_LOAN","APPROVED","CASH_ADVANCE","REJECTED","filter","app","searchTerm","term","toLowerCase","matchesName","includes","matchesEmail","matchesPhone","mockApplications","find","Math","floor","random","toString","mockHistory","push"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/applicationService.ts"],"sourcesContent":["import { queryTable, insertRecord, updateRecord, deleteRecord } from '../utils/supabase';\nimport { TABLES } from '../utils/constants/tables';\n\n// Tipos de solicitud\nexport enum APPLICATION_TYPE {\n  AUTO_LOAN = 'auto_loan',\n  CAR_BACKED_LOAN = 'car_backed_loan',\n  PERSONAL_LOAN = 'personal_loan',\n  CASH_ADVANCE = 'cash_advance',\n}\n\n// Estados de solicitud\nexport enum APPLICATION_STATUS {\n  PENDING = 'pending',\n  REVIEW = 'review',\n  APPROVED = 'approved',\n  REJECTED = 'rejected',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n// Nombre de las tablas\nconst APPLICATIONS_TABLE = TABLES.APPLICATIONS;\nconst DOCUMENTS_TABLE = 'documents';\nconst STATUS_HISTORY_TABLE = TABLES.STATUS_HISTORY;\n\n// Tipos\nexport interface Application {\n  id?: string;\n  applicant_name: string;\n  email: string;\n  phone: string;\n  amount: number;\n  application_type: APPLICATION_TYPE;\n  status: APPLICATION_STATUS;\n  company_id?: string;\n  advisor_id?: string;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface StatusHistoryItem {\n  id?: string;\n  application_id: string;\n  previous_status?: APPLICATION_STATUS;\n  new_status: APPLICATION_STATUS;\n  comment?: string;\n  created_by: string;\n  created_at?: string;\n}\n\nexport interface Document {\n  id?: string;\n  application_id: string;\n  name: string;\n  url: string;\n  type: string;\n  created_at?: string;\n}\n\n/**\n * Servicio para gestionar las solicitudes de crédito\n */\nconst applicationService = {\n  /**\n   * Obtiene todas las solicitudes con filtros opcionales\n   * @param filters - Filtros para la consulta\n   */\n  getAllApplications: async (filters: any = {}): Promise<Application[]> => {\n    try {\n      // En desarrollo, usamos datos estáticos para pruebas\n      if (process.env.NODE_ENV === 'development' && !process.env.REACT_APP_USE_REAL_DATA) {\n        return getMockApplications(filters);\n      }\n\n      const { data, error } = await queryTable(APPLICATIONS_TABLE, {\n        filters,\n        select: '*',\n        order: { created_at: 'desc' }\n      });\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error al obtener las solicitudes:', error);\n      return [];\n    }\n  },\n\n  /**\n   * Obtiene una solicitud por su ID\n   * @param id - ID de la solicitud\n   */\n  getApplicationById: async (id: string): Promise<Application | null> => {\n    try {\n      // En desarrollo, usamos datos estáticos para pruebas\n      if (process.env.NODE_ENV === 'development' && !process.env.REACT_APP_USE_REAL_DATA) {\n        return getMockApplicationById(id);\n      }\n\n      const { data, error } = await queryTable(APPLICATIONS_TABLE, {\n        filters: { id },\n        select: '*',\n        single: true\n      });\n\n      if (error) throw error;\n      return data || null;\n    } catch (error) {\n      console.error(`Error al obtener la solicitud con ID ${id}:`, error);\n      return null;\n    }\n  },\n\n  /**\n   * Crea una nueva solicitud\n   * @param application - Datos de la solicitud\n   */\n  createApplication: async (application: Application): Promise<{ data: Application | null, error: any }> => {\n    try {\n      // En desarrollo, simulamos la creación\n      if (process.env.NODE_ENV === 'development' && !process.env.REACT_APP_USE_REAL_DATA) {\n        return { data: createMockApplication(application), error: null };\n      }\n\n      const now = new Date().toISOString();\n      const newApplication = {\n        ...application,\n        created_at: now,\n        updated_at: now,\n        status: application.status || APPLICATION_STATUS.PENDING\n      };\n\n      const { data, error } = await insertRecord(APPLICATIONS_TABLE, newApplication);\n\n      if (error) throw error;\n      \n      // Registrar el cambio de estado inicial\n      if (data?.id) {\n        await applicationService.addStatusHistory({\n          application_id: data.id,\n          new_status: newApplication.status,\n          comment: 'Solicitud creada',\n          created_by: application.advisor_id || 'system'\n        });\n      }\n\n      return { data, error: null };\n    } catch (error) {\n      console.error('Error al crear la solicitud:', error);\n      return { data: null, error };\n    }\n  },\n\n  /**\n   * Actualiza una solicitud existente\n   * @param id - ID de la solicitud\n   * @param updates - Datos a actualizar\n   */\n  updateApplication: async (id: string, updates: Partial<Application>): Promise<{ success: boolean, error: any }> => {\n    try {\n      // En desarrollo, simulamos la actualización\n      if (process.env.NODE_ENV === 'development' && !process.env.REACT_APP_USE_REAL_DATA) {\n        return { success: true, error: null };\n      }\n\n      const { error } = await updateRecord(APPLICATIONS_TABLE, \n        { ...updates, updated_at: new Date().toISOString() },\n        { id }\n      );\n\n      if (error) throw error;\n      return { success: true, error: null };\n    } catch (error) {\n      console.error(`Error al actualizar la solicitud con ID ${id}:`, error);\n      return { success: false, error };\n    }\n  },\n\n  /**\n   * Cambia el estado de una solicitud\n   * @param id - ID de la solicitud\n   * @param newStatus - Nuevo estado\n   * @param comment - Comentario sobre el cambio\n   * @param userId - ID del usuario que realiza el cambio\n   */\n  changeApplicationStatus: async (\n    id: string, \n    newStatus: APPLICATION_STATUS, \n    comment: string, \n    userId: string\n  ): Promise<{ success: boolean, error: any }> => {\n    try {\n      // En desarrollo, simulamos el cambio de estado\n      if (process.env.NODE_ENV === 'development' && !process.env.REACT_APP_USE_REAL_DATA) {\n        return { success: true, error: null };\n      }\n\n      // Obtener el estado actual\n      const { data: application, error: fetchError } = await queryTable(APPLICATIONS_TABLE, {\n        filters: { id },\n        select: 'status',\n        single: true\n      });\n\n      if (fetchError) throw fetchError;\n      if (!application) throw new Error('Solicitud no encontrada');\n\n      const currentStatus = application.status;\n\n      // Actualizar el estado\n      const { error: updateError } = await updateRecord(APPLICATIONS_TABLE, \n        { status: newStatus, updated_at: new Date().toISOString() },\n        { id }\n      );\n\n      if (updateError) throw updateError;\n\n      // Registrar en el historial\n      await applicationService.addStatusHistory({\n        application_id: id,\n        previous_status: currentStatus,\n        new_status: newStatus,\n        comment,\n        created_by: userId\n      });\n\n      return { success: true, error: null };\n    } catch (error) {\n      console.error(`Error al cambiar el estado de la solicitud con ID ${id}:`, error);\n      return { success: false, error };\n    }\n  },\n\n  /**\n   * Elimina una solicitud\n   * @param id - ID de la solicitud\n   */\n  deleteApplication: async (id: string): Promise<{ success: boolean, error: any }> => {\n    try {\n      // En desarrollo, simulamos la eliminación\n      if (process.env.NODE_ENV === 'development' && !process.env.REACT_APP_USE_REAL_DATA) {\n        return { success: true, error: null };\n      }\n\n      const { error } = await deleteRecord(APPLICATIONS_TABLE, { id });\n\n      if (error) throw error;\n      return { success: true, error: null };\n    } catch (error) {\n      console.error(`Error al eliminar la solicitud con ID ${id}:`, error);\n      return { success: false, error };\n    }\n  },\n\n  /**\n   * Obtiene el historial de estados de una solicitud\n   * @param applicationId - ID de la solicitud\n   */\n  getStatusHistory: async (applicationId: string): Promise<StatusHistoryItem[]> => {\n    try {\n      // En desarrollo, usamos datos estáticos para pruebas\n      if (process.env.NODE_ENV === 'development' && !process.env.REACT_APP_USE_REAL_DATA) {\n        return getMockStatusHistory(applicationId);\n      }\n\n      const { data, error } = await queryTable(STATUS_HISTORY_TABLE, {\n        filters: { application_id: applicationId },\n        select: '*',\n        order: { created_at: 'desc' }\n      });\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error(`Error al obtener el historial de estados para la solicitud ${applicationId}:`, error);\n      return [];\n    }\n  },\n\n  /**\n   * Añade un nuevo registro al historial de estados\n   * @param historyItem - Elemento del historial\n   */\n  addStatusHistory: async (historyItem: Omit<StatusHistoryItem, 'id'>): Promise<{ success: boolean, error: any }> => {\n    try {\n      // En desarrollo, simulamos la adición\n      if (process.env.NODE_ENV === 'development' && !process.env.REACT_APP_USE_REAL_DATA) {\n        return { success: true, error: null };\n      }\n\n      const newHistoryItem = {\n        ...historyItem,\n        created_at: new Date().toISOString()\n      };\n\n      const { error } = await insertRecord(STATUS_HISTORY_TABLE, newHistoryItem);\n\n      if (error) throw error;\n      return { success: true, error: null };\n    } catch (error) {\n      console.error('Error al añadir el historial de estados:', error);\n      return { success: false, error };\n    }\n  }\n};\n\n// Funciones auxiliares para datos mock en desarrollo\n\n// Mock de solicitudes para desarrollo\nconst getMockApplications = (filters: any = {}): Application[] => {\n  const mockData: Application[] = [\n    {\n      id: '1',\n      applicant_name: 'Juan Pérez',\n      email: 'juan@example.com',\n      phone: '+56 9 1234 5678',\n      amount: 25000,\n      application_type: APPLICATION_TYPE.AUTO_LOAN,\n      status: APPLICATION_STATUS.PENDING,\n      created_at: '2023-07-18T10:30:00',\n    },\n    {\n      id: '2',\n      applicant_name: 'María González',\n      email: 'maria@example.com',\n      phone: '+56 9 8765 4321',\n      amount: 50000,\n      application_type: APPLICATION_TYPE.CAR_BACKED_LOAN,\n      status: APPLICATION_STATUS.REVIEW,\n      created_at: '2023-07-17T14:20:00',\n    },\n    {\n      id: '3',\n      applicant_name: 'Carlos Rodríguez',\n      email: 'carlos@example.com',\n      phone: '+56 9 5555 5555',\n      amount: 35000,\n      application_type: APPLICATION_TYPE.PERSONAL_LOAN,\n      status: APPLICATION_STATUS.APPROVED,\n      created_at: '2023-07-16T09:15:00',\n    },\n    {\n      id: '4',\n      applicant_name: 'Ana Martínez',\n      email: 'ana@example.com',\n      phone: '+56 9 7777 7777',\n      amount: 75000,\n      application_type: APPLICATION_TYPE.CASH_ADVANCE,\n      status: APPLICATION_STATUS.REJECTED,\n      created_at: '2023-07-15T16:45:00',\n    },\n    {\n      id: '5',\n      applicant_name: 'Roberto Silva',\n      email: 'roberto@example.com',\n      phone: '+56 9 8888 8888',\n      amount: 15000,\n      application_type: APPLICATION_TYPE.PERSONAL_LOAN,\n      status: APPLICATION_STATUS.PENDING,\n      created_at: '2023-07-14T11:30:00',\n    },\n  ];\n\n  // Filtrar según los criterios proporcionados\n  return mockData.filter(app => {\n    // Filtro por estado\n    if (filters.status && app.status !== filters.status) return false;\n    \n    // Filtro por tipo de aplicación\n    if (filters.application_type && app.application_type !== filters.application_type) return false;\n    \n    // Filtro por término de búsqueda (nombre, email o teléfono)\n    if (filters.searchTerm) {\n      const term = filters.searchTerm.toLowerCase();\n      const matchesName = app.applicant_name.toLowerCase().includes(term);\n      const matchesEmail = app.email.toLowerCase().includes(term);\n      const matchesPhone = app.phone.toLowerCase().includes(term);\n      \n      if (!matchesName && !matchesEmail && !matchesPhone) return false;\n    }\n    \n    return true;\n  });\n};\n\n// Obtiene una solicitud mock por ID\nconst getMockApplicationById = (id: string): Application | null => {\n  const mockApplications = getMockApplications();\n  return mockApplications.find(app => app.id === id) || null;\n};\n\n// Crea una solicitud mock\nconst createMockApplication = (application: Application): Application => {\n  return {\n    ...application,\n    id: Math.floor(Math.random() * 1000).toString(),\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n    status: application.status || APPLICATION_STATUS.PENDING\n  };\n};\n\n// Obtiene un historial de estados mock\nconst getMockStatusHistory = (applicationId: string): StatusHistoryItem[] => {\n  const mockHistory: StatusHistoryItem[] = [\n    {\n      id: '1',\n      application_id: applicationId,\n      new_status: APPLICATION_STATUS.PENDING,\n      comment: 'Solicitud creada',\n      created_by: 'system',\n      created_at: '2023-07-10T09:00:00'\n    }\n  ];\n  \n  // Añadir más elementos al historial según el ID\n  if (applicationId === '2' || applicationId === '3' || applicationId === '4') {\n    mockHistory.push({\n      id: '2',\n      application_id: applicationId,\n      previous_status: APPLICATION_STATUS.PENDING,\n      new_status: APPLICATION_STATUS.REVIEW,\n      comment: 'Solicitud en revisión por el departamento de crédito',\n      created_by: 'asesor1',\n      created_at: '2023-07-11T10:15:00'\n    });\n  }\n  \n  if (applicationId === '3') {\n    mockHistory.push({\n      id: '3',\n      application_id: applicationId,\n      previous_status: APPLICATION_STATUS.REVIEW,\n      new_status: APPLICATION_STATUS.APPROVED,\n      comment: 'Solicitud aprobada. Se ha verificado la capacidad crediticia.',\n      created_by: 'analista1',\n      created_at: '2023-07-12T14:30:00'\n    });\n  } else if (applicationId === '4') {\n    mockHistory.push({\n      id: '3',\n      application_id: applicationId,\n      previous_status: APPLICATION_STATUS.REVIEW,\n      new_status: APPLICATION_STATUS.REJECTED,\n      comment: 'Solicitud rechazada. El cliente no cumple con los requisitos mínimos.',\n      created_by: 'analista2',\n      created_at: '2023-07-12T11:45:00'\n    });\n  }\n  \n  return mockHistory;\n};\n\nexport default applicationService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}