{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { createScope } from '@zag-js/dom-query';\nimport { createMachine } from '@zag-js/core';\nimport { createSplitProps, compact, isObject } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/timer.anatomy.ts\nvar anatomy = createAnatomy(\"timer\").parts(\"root\", \"area\", \"control\", \"item\", \"itemValue\", \"itemLabel\", \"actionTrigger\", \"separator\");\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `timer:${ctx.id}:root`,\n  getAreaId: ctx => ctx.ids?.area ?? `timer:${ctx.id}:area`,\n  getAreaEl: ctx => dom.getById(ctx, dom.getAreaId(ctx))\n});\n\n// src/timer.connect.ts\nvar validActions = /* @__PURE__ */new Set([\"start\", \"pause\", \"resume\", \"reset\"]);\nfunction connect(state, send, normalize) {\n  const running = state.matches(\"running\");\n  const paused = state.matches(\"paused\");\n  const time = state.context.time;\n  const formattedTime = state.context.formattedTime;\n  const progressPercent = state.context.progressPercent;\n  return {\n    running,\n    paused,\n    time,\n    formattedTime,\n    progressPercent,\n    start() {\n      send(\"START\");\n    },\n    pause() {\n      send(\"PAUSE\");\n    },\n    resume() {\n      send(\"RESUME\");\n    },\n    reset() {\n      send(\"RESET\");\n    },\n    restart() {\n      send(\"RESTART\");\n    },\n    getRootProps() {\n      return normalize.element({\n        id: dom.getRootId(state.context),\n        ...parts.root.attrs\n      });\n    },\n    getAreaProps() {\n      return normalize.element({\n        role: \"timer\",\n        id: dom.getAreaId(state.context),\n        \"aria-label\": `${time.days} days ${formattedTime.hours}:${formattedTime.minutes}:${formattedTime.seconds}`,\n        \"aria-atomic\": true,\n        ...parts.area.attrs\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs\n      });\n    },\n    getItemProps(props2) {\n      const value = time[props2.type];\n      return normalize.element({\n        ...parts.item.attrs,\n        \"data-type\": props2.type,\n        style: {\n          \"--value\": value\n        }\n      });\n    },\n    getItemLabelProps(props2) {\n      return normalize.element({\n        ...parts.itemLabel.attrs,\n        \"data-type\": props2.type\n      });\n    },\n    getItemValueProps(props2) {\n      return normalize.element({\n        ...parts.itemValue.attrs,\n        \"data-type\": props2.type\n      });\n    },\n    getSeparatorProps() {\n      return normalize.element({\n        \"aria-hidden\": true,\n        ...parts.separator.attrs\n      });\n    },\n    getActionTriggerProps(props2) {\n      if (!validActions.has(props2.action)) {\n        throw new Error(`[zag-js] Invalid action: ${props2.action}. Must be one of: ${Array.from(validActions).join(\", \")}`);\n      }\n      return normalize.button({\n        ...parts.actionTrigger.attrs,\n        hidden: (() => {\n          switch (props2.action) {\n            case \"start\":\n              return running || paused;\n            case \"pause\":\n              return !running;\n            case \"reset\":\n              return !running && !paused;\n            case \"resume\":\n              return !paused;\n            default:\n              return;\n          }\n        })(),\n        type: \"button\",\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          send(props2.action.toUpperCase());\n        }\n      });\n    }\n  };\n}\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"timer\",\n    initial: ctx.autoStart ? \"running\" : \"idle\",\n    context: {\n      interval: 250,\n      ...ctx,\n      currentMs: ctx.startMs ?? 0\n    },\n    on: {\n      RESTART: {\n        target: \"running\",\n        actions: \"resetTime\"\n      }\n    },\n    computed: {\n      time: ctx2 => msToTime(ctx2.currentMs),\n      formattedTime: ctx2 => formatTime(ctx2.time),\n      progressPercent: ctx2 => {\n        const targetMs = ctx2.targetMs;\n        if (targetMs == null) return 0;\n        return toPercent(ctx2.currentMs, ctx2.startMs ?? 0, targetMs);\n      }\n    },\n    states: {\n      idle: {\n        on: {\n          START: \"running\",\n          RESET: {\n            actions: \"resetTime\"\n          }\n        }\n      },\n      running: {\n        every: {\n          TICK_INTERVAL: [\"sendTickEvent\"]\n        },\n        on: {\n          PAUSE: \"paused\",\n          TICK: [{\n            target: \"idle\",\n            guard: \"hasReachedTarget\",\n            actions: [\"invokeOnComplete\"]\n          }, {\n            actions: [\"updateTime\", \"invokeOnTick\"]\n          }],\n          RESET: {\n            actions: \"resetTime\"\n          }\n        }\n      },\n      paused: {\n        on: {\n          RESUME: \"running\",\n          RESET: {\n            target: \"idle\",\n            actions: \"resetTime\"\n          }\n        }\n      }\n    }\n  }, {\n    delays: {\n      TICK_INTERVAL: ctx2 => ctx2.interval\n    },\n    actions: {\n      updateTime(ctx2) {\n        const sign = ctx2.countdown ? -1 : 1;\n        ctx2.currentMs = ctx2.currentMs + sign * ctx2.interval;\n      },\n      sendTickEvent(_ctx, _evt, {\n        send\n      }) {\n        send({\n          type: \"TICK\"\n        });\n      },\n      resetTime(ctx2) {\n        ctx2.currentMs = ctx2.startMs ?? 0;\n      },\n      invokeOnTick(ctx2) {\n        ctx2.onTick?.({\n          value: ctx2.currentMs,\n          time: ctx2.time,\n          formattedTime: ctx2.formattedTime\n        });\n      },\n      invokeOnComplete(ctx2) {\n        ctx2.onComplete?.();\n      }\n    },\n    guards: {\n      hasReachedTarget: ctx2 => {\n        let targetMs = ctx2.targetMs;\n        if (targetMs == null && ctx2.countdown) targetMs = 0;\n        if (targetMs == null) return false;\n        return ctx2.currentMs === targetMs;\n      }\n    }\n  });\n}\nfunction msToTime(ms) {\n  const milliseconds = ms % 1e3;\n  const seconds = Math.floor(ms / 1e3) % 60;\n  const minutes = Math.floor(ms / (1e3 * 60)) % 60;\n  const hours = Math.floor(ms / (1e3 * 60 * 60)) % 24;\n  const days = Math.floor(ms / (1e3 * 60 * 60 * 24));\n  return {\n    days,\n    hours,\n    minutes,\n    seconds,\n    milliseconds\n  };\n}\nfunction toPercent(value, minValue, maxValue) {\n  return (value - minValue) / (maxValue - minValue);\n}\nfunction padStart(num, size = 2) {\n  return num.toString().padStart(size, \"0\");\n}\nfunction formatTime(time) {\n  const {\n    days,\n    hours,\n    minutes,\n    seconds\n  } = time;\n  return {\n    days: padStart(days),\n    hours: padStart(hours),\n    minutes: padStart(minutes),\n    seconds: padStart(seconds),\n    milliseconds: time.milliseconds.toString()\n  };\n}\nvar segments = /* @__PURE__ */new Set([\"days\", \"hours\", \"minutes\", \"seconds\"]);\nfunction isTimeSegment(date) {\n  return isObject(date) && Object.keys(date).some(key => segments.has(key));\n}\nfunction parse(date) {\n  if (typeof date === \"string\") {\n    return new Date(date).getTime();\n  }\n  if (isTimeSegment(date)) {\n    const {\n      days = 0,\n      hours = 0,\n      minutes = 0,\n      seconds = 0,\n      milliseconds = 0\n    } = date;\n    const value = (days * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds) * 1e3;\n    return value + milliseconds;\n  }\n  throw new Error(\"Invalid date\");\n}\nvar props = createProps()([\"autoStart\", \"countdown\", \"getRootNode\", \"id\", \"ids\", \"interval\", \"onComplete\", \"onTick\", \"startMs\", \"targetMs\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, parse, props, splitProps };","map":{"version":3,"names":["createAnatomy","createScope","createMachine","createSplitProps","compact","isObject","createProps","anatomy","parts","build","dom","getRootId","ctx","ids","root","id","getAreaId","area","getAreaEl","getById","validActions","Set","connect","state","send","normalize","running","matches","paused","time","context","formattedTime","progressPercent","start","pause","resume","reset","restart","getRootProps","element","attrs","getAreaProps","role","days","hours","minutes","seconds","getControlProps","control","getItemProps","props2","value","type","item","style","getItemLabelProps","itemLabel","getItemValueProps","itemValue","getSeparatorProps","separator","getActionTriggerProps","has","action","Error","Array","from","join","button","actionTrigger","hidden","onClick","event","defaultPrevented","toUpperCase","machine","userContext","initial","autoStart","interval","currentMs","startMs","on","RESTART","target","actions","computed","ctx2","msToTime","formatTime","targetMs","toPercent","states","idle","START","RESET","every","TICK_INTERVAL","PAUSE","TICK","guard","RESUME","delays","updateTime","sign","countdown","sendTickEvent","_ctx","_evt","resetTime","invokeOnTick","onTick","invokeOnComplete","onComplete","guards","hasReachedTarget","ms","milliseconds","Math","floor","minValue","maxValue","padStart","num","size","toString","segments","isTimeSegment","date","Object","keys","some","key","parse","Date","getTime","props","splitProps"],"sources":["/Users/diegogg98/NEW CRM MAR18/node_modules/@zag-js/timer/dist/index.mjs"],"sourcesContent":["import { createAnatomy } from '@zag-js/anatomy';\nimport { createScope } from '@zag-js/dom-query';\nimport { createMachine } from '@zag-js/core';\nimport { createSplitProps, compact, isObject } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/timer.anatomy.ts\nvar anatomy = createAnatomy(\"timer\").parts(\n  \"root\",\n  \"area\",\n  \"control\",\n  \"item\",\n  \"itemValue\",\n  \"itemLabel\",\n  \"actionTrigger\",\n  \"separator\"\n);\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: (ctx) => ctx.ids?.root ?? `timer:${ctx.id}:root`,\n  getAreaId: (ctx) => ctx.ids?.area ?? `timer:${ctx.id}:area`,\n  getAreaEl: (ctx) => dom.getById(ctx, dom.getAreaId(ctx))\n});\n\n// src/timer.connect.ts\nvar validActions = /* @__PURE__ */ new Set([\"start\", \"pause\", \"resume\", \"reset\"]);\nfunction connect(state, send, normalize) {\n  const running = state.matches(\"running\");\n  const paused = state.matches(\"paused\");\n  const time = state.context.time;\n  const formattedTime = state.context.formattedTime;\n  const progressPercent = state.context.progressPercent;\n  return {\n    running,\n    paused,\n    time,\n    formattedTime,\n    progressPercent,\n    start() {\n      send(\"START\");\n    },\n    pause() {\n      send(\"PAUSE\");\n    },\n    resume() {\n      send(\"RESUME\");\n    },\n    reset() {\n      send(\"RESET\");\n    },\n    restart() {\n      send(\"RESTART\");\n    },\n    getRootProps() {\n      return normalize.element({\n        id: dom.getRootId(state.context),\n        ...parts.root.attrs\n      });\n    },\n    getAreaProps() {\n      return normalize.element({\n        role: \"timer\",\n        id: dom.getAreaId(state.context),\n        \"aria-label\": `${time.days} days ${formattedTime.hours}:${formattedTime.minutes}:${formattedTime.seconds}`,\n        \"aria-atomic\": true,\n        ...parts.area.attrs\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs\n      });\n    },\n    getItemProps(props2) {\n      const value = time[props2.type];\n      return normalize.element({\n        ...parts.item.attrs,\n        \"data-type\": props2.type,\n        style: {\n          \"--value\": value\n        }\n      });\n    },\n    getItemLabelProps(props2) {\n      return normalize.element({\n        ...parts.itemLabel.attrs,\n        \"data-type\": props2.type\n      });\n    },\n    getItemValueProps(props2) {\n      return normalize.element({\n        ...parts.itemValue.attrs,\n        \"data-type\": props2.type\n      });\n    },\n    getSeparatorProps() {\n      return normalize.element({\n        \"aria-hidden\": true,\n        ...parts.separator.attrs\n      });\n    },\n    getActionTriggerProps(props2) {\n      if (!validActions.has(props2.action)) {\n        throw new Error(\n          `[zag-js] Invalid action: ${props2.action}. Must be one of: ${Array.from(validActions).join(\", \")}`\n        );\n      }\n      return normalize.button({\n        ...parts.actionTrigger.attrs,\n        hidden: (() => {\n          switch (props2.action) {\n            case \"start\":\n              return running || paused;\n            case \"pause\":\n              return !running;\n            case \"reset\":\n              return !running && !paused;\n            case \"resume\":\n              return !paused;\n            default:\n              return;\n          }\n        })(),\n        type: \"button\",\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          send(props2.action.toUpperCase());\n        }\n      });\n    }\n  };\n}\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine(\n    {\n      id: \"timer\",\n      initial: ctx.autoStart ? \"running\" : \"idle\",\n      context: {\n        interval: 250,\n        ...ctx,\n        currentMs: ctx.startMs ?? 0\n      },\n      on: {\n        RESTART: {\n          target: \"running\",\n          actions: \"resetTime\"\n        }\n      },\n      computed: {\n        time: (ctx2) => msToTime(ctx2.currentMs),\n        formattedTime: (ctx2) => formatTime(ctx2.time),\n        progressPercent: (ctx2) => {\n          const targetMs = ctx2.targetMs;\n          if (targetMs == null) return 0;\n          return toPercent(ctx2.currentMs, ctx2.startMs ?? 0, targetMs);\n        }\n      },\n      states: {\n        idle: {\n          on: {\n            START: \"running\",\n            RESET: { actions: \"resetTime\" }\n          }\n        },\n        running: {\n          every: {\n            TICK_INTERVAL: [\"sendTickEvent\"]\n          },\n          on: {\n            PAUSE: \"paused\",\n            TICK: [\n              {\n                target: \"idle\",\n                guard: \"hasReachedTarget\",\n                actions: [\"invokeOnComplete\"]\n              },\n              {\n                actions: [\"updateTime\", \"invokeOnTick\"]\n              }\n            ],\n            RESET: { actions: \"resetTime\" }\n          }\n        },\n        paused: {\n          on: {\n            RESUME: \"running\",\n            RESET: {\n              target: \"idle\",\n              actions: \"resetTime\"\n            }\n          }\n        }\n      }\n    },\n    {\n      delays: {\n        TICK_INTERVAL: (ctx2) => ctx2.interval\n      },\n      actions: {\n        updateTime(ctx2) {\n          const sign = ctx2.countdown ? -1 : 1;\n          ctx2.currentMs = ctx2.currentMs + sign * ctx2.interval;\n        },\n        sendTickEvent(_ctx, _evt, { send }) {\n          send({ type: \"TICK\" });\n        },\n        resetTime(ctx2) {\n          ctx2.currentMs = ctx2.startMs ?? 0;\n        },\n        invokeOnTick(ctx2) {\n          ctx2.onTick?.({\n            value: ctx2.currentMs,\n            time: ctx2.time,\n            formattedTime: ctx2.formattedTime\n          });\n        },\n        invokeOnComplete(ctx2) {\n          ctx2.onComplete?.();\n        }\n      },\n      guards: {\n        hasReachedTarget: (ctx2) => {\n          let targetMs = ctx2.targetMs;\n          if (targetMs == null && ctx2.countdown) targetMs = 0;\n          if (targetMs == null) return false;\n          return ctx2.currentMs === targetMs;\n        }\n      }\n    }\n  );\n}\nfunction msToTime(ms) {\n  const milliseconds = ms % 1e3;\n  const seconds = Math.floor(ms / 1e3) % 60;\n  const minutes = Math.floor(ms / (1e3 * 60)) % 60;\n  const hours = Math.floor(ms / (1e3 * 60 * 60)) % 24;\n  const days = Math.floor(ms / (1e3 * 60 * 60 * 24));\n  return {\n    days,\n    hours,\n    minutes,\n    seconds,\n    milliseconds\n  };\n}\nfunction toPercent(value, minValue, maxValue) {\n  return (value - minValue) / (maxValue - minValue);\n}\nfunction padStart(num, size = 2) {\n  return num.toString().padStart(size, \"0\");\n}\nfunction formatTime(time) {\n  const { days, hours, minutes, seconds } = time;\n  return {\n    days: padStart(days),\n    hours: padStart(hours),\n    minutes: padStart(minutes),\n    seconds: padStart(seconds),\n    milliseconds: time.milliseconds.toString()\n  };\n}\nvar segments = /* @__PURE__ */ new Set([\"days\", \"hours\", \"minutes\", \"seconds\"]);\nfunction isTimeSegment(date) {\n  return isObject(date) && Object.keys(date).some((key) => segments.has(key));\n}\nfunction parse(date) {\n  if (typeof date === \"string\") {\n    return new Date(date).getTime();\n  }\n  if (isTimeSegment(date)) {\n    const { days = 0, hours = 0, minutes = 0, seconds = 0, milliseconds = 0 } = date;\n    const value = (days * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds) * 1e3;\n    return value + milliseconds;\n  }\n  throw new Error(\"Invalid date\");\n}\nvar props = createProps()([\n  \"autoStart\",\n  \"countdown\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"interval\",\n  \"onComplete\",\n  \"onTick\",\n  \"startMs\",\n  \"targetMs\"\n]);\nvar splitProps = createSplitProps(props);\n\nexport { anatomy, connect, machine, parse, props, splitProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}