{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/contexts/PermissionsContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { useAuth } from './AuthContext';\nimport { PERMISSIONS, hasPermission, hasAllPermissions, hasAnyPermission } from '../utils/constants/permissions';\nimport { USER_ROLES } from '../utils/constants/roles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PermissionsContext = /*#__PURE__*/createContext(undefined);\nexport const usePermissions = () => {\n  _s();\n  const context = useContext(PermissionsContext);\n  if (context === undefined) {\n    throw new Error('usePermissions must be used within a PermissionsProvider');\n  }\n  return context;\n};\n_s(usePermissions, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const PermissionsProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user\n  } = useAuth();\n  const [userPermissions, setUserPermissions] = useState([]);\n  const userCan = permission => {\n    if (!user || !user.role) return false;\n\n    // El SUPERADMIN siempre tiene todos los permisos\n    if (user.role === USER_ROLES.SUPERADMIN) {\n      return true;\n    }\n\n    // Para otros roles, usar la función de utilidad\n    return hasPermission(user.role, permission);\n  };\n  const userCanAll = permissions => {\n    if (!user || !user.role) return false;\n\n    // El SUPERADMIN siempre tiene todos los permisos\n    if (user.role === USER_ROLES.SUPERADMIN) {\n      return true;\n    }\n\n    // Para otros roles, verificar cada permiso\n    return hasAllPermissions(user.role, permissions);\n  };\n  const userCanAny = permissions => {\n    if (!user || !user.role) return false;\n\n    // El SUPERADMIN siempre tiene todos los permisos\n    if (user.role === USER_ROLES.SUPERADMIN) {\n      return true;\n    }\n\n    // Para otros roles, verificar si tiene al menos un permiso\n    return hasAnyPermission(user.role, permissions);\n  };\n\n  // Determina si se deben filtrar los datos por entidad (asesor o empresa)\n  const shouldFilterByEntity = () => {\n    if (!user || !user.role) return false;\n\n    // Solo los roles de asesor y admin de empresa necesitan filtrado\n    return user.role === USER_ROLES.ADVISOR || user.role === USER_ROLES.COMPANY_ADMIN;\n  };\n\n  // Obtiene el filtro apropiado según el rol del usuario\n  const getEntityFilter = () => {\n    if (!user || !user.role || !user.entityId) return null;\n\n    // No filtrar para administradores\n    if (user.role === USER_ROLES.SUPERADMIN) {\n      return null;\n    }\n\n    // Filtro para asesores: solicitudes donde advisor_id = user.entityId\n    if (user.role === USER_ROLES.ADVISOR) {\n      return {\n        advisor_id: user.entityId\n      };\n    }\n\n    // Filtro para administradores de empresa: solicitudes donde company_id = user.entityId\n    if (user.role === USER_ROLES.COMPANY_ADMIN) {\n      return {\n        company_id: user.entityId\n      };\n    }\n    return null;\n  };\n  const isAdmin = () => {\n    return userCan(PERMISSIONS.ADMIN);\n  };\n  const isAdvisor = () => {\n    return (user === null || user === void 0 ? void 0 : user.role) === USER_ROLES.ADVISOR;\n  };\n  const isCompanyAdmin = () => {\n    return (user === null || user === void 0 ? void 0 : user.role) === USER_ROLES.COMPANY_ADMIN;\n  };\n  const loadPermissions = async () => {\n    // Implementation of loadPermissions\n  };\n  const value = {\n    userCan,\n    userCanAll,\n    userCanAny,\n    shouldFilterByEntity,\n    getEntityFilter,\n    isAdmin,\n    isAdvisor,\n    isCompanyAdmin,\n    loadPermissions\n  };\n  return /*#__PURE__*/_jsxDEV(PermissionsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 10\n  }, this);\n};\n_s2(PermissionsProvider, \"fKId7CjQ8fRqDp7PXv2zvDtXQBA=\", false, function () {\n  return [useAuth];\n});\n_c = PermissionsProvider;\nvar _c;\n$RefreshReg$(_c, \"PermissionsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useAuth","PERMISSIONS","hasPermission","hasAllPermissions","hasAnyPermission","USER_ROLES","jsxDEV","_jsxDEV","PermissionsContext","undefined","usePermissions","_s","context","Error","PermissionsProvider","children","_s2","user","userPermissions","setUserPermissions","userCan","permission","role","SUPERADMIN","userCanAll","permissions","userCanAny","shouldFilterByEntity","ADVISOR","COMPANY_ADMIN","getEntityFilter","entityId","advisor_id","company_id","isAdmin","ADMIN","isAdvisor","isCompanyAdmin","loadPermissions","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/PermissionsContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport { useAuth } from './AuthContext';\nimport { PERMISSIONS, hasPermission, hasAllPermissions, hasAnyPermission } from '../utils/constants/permissions';\nimport { USER_ROLES } from '../utils/constants/roles';\n\ninterface PermissionsContextType {\n  userCan: (permission: PERMISSIONS) => boolean;\n  userCanAll: (permissions: PERMISSIONS[]) => boolean;\n  userCanAny: (permissions: PERMISSIONS[]) => boolean;\n  getEntityFilter: () => Record<string, any> | null;\n  shouldFilterByEntity: () => boolean;\n  isAdmin: () => boolean;\n  isAdvisor: () => boolean;\n  isCompanyAdmin: () => boolean;\n  loadPermissions: () => Promise<void>;\n}\n\nconst PermissionsContext = createContext<PermissionsContextType | undefined>(undefined);\n\nexport const usePermissions = () => {\n  const context = useContext(PermissionsContext);\n  if (context === undefined) {\n    throw new Error('usePermissions must be used within a PermissionsProvider');\n  }\n  return context;\n};\n\nexport const PermissionsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user } = useAuth();\n  const [userPermissions, setUserPermissions] = useState<string[]>([]);\n\n  const userCan = (permission: PERMISSIONS): boolean => {\n    if (!user || !user.role) return false;\n    \n    // El SUPERADMIN siempre tiene todos los permisos\n    if (user.role === USER_ROLES.SUPERADMIN) {\n      return true;\n    }\n    \n    // Para otros roles, usar la función de utilidad\n    return hasPermission(user.role as any, permission);\n  };\n\n  const userCanAll = (permissions: PERMISSIONS[]): boolean => {\n    if (!user || !user.role) return false;\n    \n    // El SUPERADMIN siempre tiene todos los permisos\n    if (user.role === USER_ROLES.SUPERADMIN) {\n      return true;\n    }\n    \n    // Para otros roles, verificar cada permiso\n    return hasAllPermissions(user.role as any, permissions);\n  };\n\n  const userCanAny = (permissions: PERMISSIONS[]): boolean => {\n    if (!user || !user.role) return false;\n    \n    // El SUPERADMIN siempre tiene todos los permisos\n    if (user.role === USER_ROLES.SUPERADMIN) {\n      return true;\n    }\n    \n    // Para otros roles, verificar si tiene al menos un permiso\n    return hasAnyPermission(user.role as any, permissions);\n  };\n\n  // Determina si se deben filtrar los datos por entidad (asesor o empresa)\n  const shouldFilterByEntity = (): boolean => {\n    if (!user || !user.role) return false;\n    \n    // Solo los roles de asesor y admin de empresa necesitan filtrado\n    return user.role === USER_ROLES.ADVISOR || user.role === USER_ROLES.COMPANY_ADMIN;\n  };\n\n  // Obtiene el filtro apropiado según el rol del usuario\n  const getEntityFilter = (): Record<string, any> | null => {\n    if (!user || !user.role || !user.entityId) return null;\n    \n    // No filtrar para administradores\n    if (user.role === USER_ROLES.SUPERADMIN) {\n      return null;\n    }\n    \n    // Filtro para asesores: solicitudes donde advisor_id = user.entityId\n    if (user.role === USER_ROLES.ADVISOR) {\n      return { advisor_id: user.entityId };\n    }\n    \n    // Filtro para administradores de empresa: solicitudes donde company_id = user.entityId\n    if (user.role === USER_ROLES.COMPANY_ADMIN) {\n      return { company_id: user.entityId };\n    }\n    \n    return null;\n  };\n\n  const isAdmin = () => {\n    return userCan(PERMISSIONS.ADMIN);\n  };\n  \n  const isAdvisor = () => {\n    return user?.role === USER_ROLES.ADVISOR;\n  };\n  \n  const isCompanyAdmin = () => {\n    return user?.role === USER_ROLES.COMPANY_ADMIN;\n  };\n\n  const loadPermissions = async () => {\n    // Implementation of loadPermissions\n  };\n\n  const value = {\n    userCan,\n    userCanAll,\n    userCanAny,\n    shouldFilterByEntity,\n    getEntityFilter,\n    isAdmin,\n    isAdvisor,\n    isCompanyAdmin,\n    loadPermissions,\n  };\n\n  return <PermissionsContext.Provider value={value}>{children}</PermissionsContext.Provider>;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}