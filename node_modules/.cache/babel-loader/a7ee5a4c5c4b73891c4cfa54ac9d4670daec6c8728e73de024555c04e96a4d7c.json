{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { TreeCollection, filePathToTree } from '@zag-js/collection';\nimport { ref, createMachine, guards } from '@zag-js/core';\nimport { createScope, getByTypeahead, isComposingEvent, getEventTarget, isEditableElement, getEventKey, isModifierKey, dataAttr } from '@zag-js/dom-query';\nimport { createSplitProps, uniq, remove, add, compact, addOrRemove, first, isEqual } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/tree-view.anatomy.ts\nvar anatomy = createAnatomy(\"tree-view\").parts(\"root\", \"label\", \"tree\", \"item\", \"itemIndicator\", \"itemText\", \"branch\", \"branchControl\", \"branchTrigger\", \"branchContent\", \"branchText\", \"branchIndicator\", \"branchIndentGuide\");\nvar parts = anatomy.build();\nvar collection = options => {\n  return ref(new TreeCollection(options));\n};\ncollection.empty = () => {\n  return ref(new TreeCollection({\n    rootNode: {\n      children: []\n    }\n  }));\n};\nfunction filePathCollection(paths) {\n  return ref(filePathToTree(paths));\n}\n\n// src/tree-view.utils.ts\nfunction skipFn(ctx) {\n  return function skip({\n    indexPath\n  }) {\n    const paths = ctx.collection.getValuePath(indexPath).slice(0, -1);\n    return paths.some(value => !ctx.expandedValue.includes(value));\n  };\n}\nfunction getVisibleNodes(ctx) {\n  const nodes = [];\n  ctx.collection.visit({\n    skip: skipFn(ctx),\n    onEnter: (node, indexPath) => {\n      nodes.push({\n        node,\n        indexPath\n      });\n    }\n  });\n  return nodes;\n}\n\n// src/tree-view.dom.ts\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `tree:${ctx.id}:root`,\n  getLabelId: ctx => ctx.ids?.label ?? `tree:${ctx.id}:label`,\n  getNodeId: (ctx, value) => ctx.ids?.node?.(value) ?? `tree:${ctx.id}:node:${value}`,\n  getTreeId: ctx => ctx.ids?.tree ?? `tree:${ctx.id}:tree`,\n  getTreeEl: ctx => dom.getById(ctx, dom.getTreeId(ctx)),\n  focusNode: (ctx, value) => {\n    if (value == null) return;\n    const nodeId = dom.getNodeId(ctx, value);\n    dom.getById(ctx, nodeId)?.focus({\n      preventScroll: true\n    });\n  },\n  getMatchingNode(ctx, key) {\n    const nodes = getVisibleNodes(ctx);\n    const elements = nodes.map(({\n      node\n    }) => ({\n      textContent: ctx.collection.stringifyNode(node),\n      id: ctx.collection.getNodeValue(node)\n    }));\n    return getByTypeahead(elements, {\n      state: ctx.typeaheadState,\n      key,\n      activeId: ctx.focusedValue\n    });\n  }\n});\n\n// src/tree-view.connect.ts\nfunction connect(state, send, normalize) {\n  const collection2 = state.context.collection;\n  const expandedValue = Array.from(state.context.expandedValue);\n  const selectedValue = Array.from(state.context.selectedValue);\n  const isTypingAhead = state.context.isTypingAhead;\n  const focusedValue = state.context.focusedValue;\n  function getNodeState(props2) {\n    const {\n      node,\n      indexPath\n    } = props2;\n    const value = collection2.getNodeValue(node);\n    return {\n      value,\n      valuePath: collection2.getValuePath(indexPath),\n      disabled: Boolean(node.disabled),\n      focused: focusedValue == null ? isEqual(indexPath, [0]) : focusedValue === value,\n      selected: selectedValue.includes(value),\n      expanded: expandedValue.includes(value),\n      depth: indexPath.length,\n      isBranch: collection2.isBranchNode(node)\n    };\n  }\n  return {\n    collection: collection2,\n    expandedValue,\n    selectedValue,\n    expand(value) {\n      if (!value) return send({\n        type: \"EXPANDED.ALL\"\n      });\n      const _expandedValue = uniq(expandedValue.concat(...value));\n      send({\n        type: \"EXPANDED.SET\",\n        value: _expandedValue,\n        src: \"expand\"\n      });\n    },\n    collapse(value) {\n      if (!value) return send({\n        type: \"EXPANDED.SET\",\n        value: [],\n        src: \"collapseAll\"\n      });\n      const _expandedValue = uniq(remove(expandedValue, ...value));\n      send({\n        type: \"EXPANDED.SET\",\n        value: _expandedValue,\n        src: \"collapse\"\n      });\n    },\n    deselect(value) {\n      if (!value) return send({\n        type: \"SELECTED.SET\",\n        value: [],\n        src: \"deselectAll\"\n      });\n      const _selectedValue = uniq(remove(selectedValue, ...value));\n      send({\n        type: \"SELECTED.SET\",\n        value: _selectedValue,\n        src: \"deselect\"\n      });\n    },\n    select(value) {\n      if (!value) return send({\n        type: \"SELECTED.ALL\"\n      });\n      const nextValue = [];\n      if (state.context.selectionMode === \"single\") {\n        if (value.length > 0) nextValue.push(value[value.length - 1]);\n      } else {\n        nextValue.push(...selectedValue, ...value);\n      }\n      send({\n        type: \"SELECTED.SET\",\n        value: nextValue,\n        src: \"select\"\n      });\n    },\n    getVisibleNodes() {\n      return getVisibleNodes(state.context);\n    },\n    focus(value) {\n      dom.focusNode(state.context, value);\n    },\n    selectParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _selectedValue = add(selectedValue, collection2.getNodeValue(parentNode));\n      send({\n        type: \"SELECTED.SET\",\n        value: _selectedValue,\n        src: \"select.parent\"\n      });\n    },\n    expandParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _expandedValue = add(expandedValue, collection2.getNodeValue(parentNode));\n      send({\n        type: \"EXPANDED.SET\",\n        value: _expandedValue,\n        src: \"expand.parent\"\n      });\n    },\n    setExpandedValue(value) {\n      const _expandedValue = uniq(value);\n      send({\n        type: \"EXPANDED.SET\",\n        value: _expandedValue\n      });\n    },\n    setSelectedValue(value) {\n      const _selectedValue = uniq(value);\n      send({\n        type: \"SELECTED.SET\",\n        value: _selectedValue\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: dom.getRootId(state.context),\n        dir: state.context.dir\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        id: dom.getLabelId(state.context),\n        dir: state.context.dir\n      });\n    },\n    getTreeProps() {\n      return normalize.element({\n        ...parts.tree.attrs,\n        id: dom.getTreeId(state.context),\n        dir: state.context.dir,\n        role: \"tree\",\n        \"aria-label\": \"Tree View\",\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"aria-multiselectable\": state.context.selectionMode === \"multiple\" || void 0,\n        tabIndex: -1,\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          const target = getEventTarget(event);\n          if (isEditableElement(target)) return;\n          const node = target?.closest(\"[data-part=branch-control], [data-part=item]\");\n          if (!node) return;\n          const nodeId = node.dataset.value;\n          if (nodeId == null) {\n            console.warn(`[zag-js/tree-view] Node id not found for node`, node);\n            return;\n          }\n          const isBranchNode = node.matches(\"[data-part=branch-control]\");\n          const keyMap = {\n            ArrowDown(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.ARROW_DOWN\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            ArrowUp(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.ARROW_UP\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            ArrowLeft(event2) {\n              if (isModifierKey(event2) || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: isBranchNode ? \"BRANCH_NODE.ARROW_LEFT\" : \"NODE.ARROW_LEFT\",\n                id: nodeId\n              });\n            },\n            ArrowRight(event2) {\n              if (!isBranchNode || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"BRANCH_NODE.ARROW_RIGHT\",\n                id: nodeId\n              });\n            },\n            Home(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.HOME\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            End(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.END\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            Space(event2) {\n              if (node.dataset.disabled) return;\n              if (isTypingAhead) {\n                send({\n                  type: \"TREE.TYPEAHEAD\",\n                  key: event2.key\n                });\n              } else {\n                keyMap.Enter?.(event2);\n              }\n            },\n            Enter(event2) {\n              if (node.dataset.disabled) return;\n              const isLink = target?.closest(\"a[href]\");\n              if (!isLink) event2.preventDefault();\n              send({\n                type: isBranchNode ? \"BRANCH_NODE.CLICK\" : \"NODE.CLICK\",\n                id: nodeId,\n                src: \"keyboard\"\n              });\n            },\n            \"*\"(event2) {\n              if (node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"SIBLINGS.EXPAND\",\n                id: nodeId\n              });\n            },\n            a(event2) {\n              if (!event2.metaKey || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"SELECTED.ALL\",\n                moveFocus: true\n              });\n            }\n          };\n          const key = getEventKey(event, state.context);\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event);\n            return;\n          }\n          if (!state.context.typeahead) return;\n          const isValidTypeahead = event.key.length === 1 && !isModifierKey(event);\n          if (!isValidTypeahead) return;\n          send({\n            type: \"TREE.TYPEAHEAD\",\n            key: event.key,\n            id: nodeId\n          });\n          event.preventDefault();\n        }\n      });\n    },\n    getNodeState,\n    getItemProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.item.attrs,\n        id: dom.getNodeId(state.context, itemState.value),\n        dir: state.context.dir,\n        \"data-ownedby\": dom.getTreeId(state.context),\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": itemState.value,\n        tabIndex: itemState.focused ? 0 : -1,\n        \"data-focus\": dataAttr(itemState.focused),\n        role: \"treeitem\",\n        \"aria-current\": itemState.selected ? \"true\" : void 0,\n        \"aria-selected\": itemState.disabled ? void 0 : itemState.selected,\n        \"data-selected\": dataAttr(itemState.selected),\n        \"aria-disabled\": itemState.disabled,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"aria-level\": itemState.depth,\n        \"data-depth\": itemState.depth,\n        style: {\n          \"--depth\": itemState.depth\n        },\n        onFocus(event) {\n          event.stopPropagation();\n          send({\n            type: \"NODE.FOCUS\",\n            id: itemState.value\n          });\n        },\n        onClick(event) {\n          if (itemState.disabled) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({\n            type: \"NODE.CLICK\",\n            id: itemState.value,\n            shiftKey: event.shiftKey,\n            ctrlKey: isMetaKey\n          });\n          event.stopPropagation();\n          const isLink = event.currentTarget.matches(\"a[href]\");\n          if (!isLink) event.preventDefault();\n        }\n      });\n    },\n    getItemTextProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemText.attrs,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused)\n      });\n    },\n    getItemIndicatorProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused),\n        hidden: !itemState.selected\n      });\n    },\n    getBranchProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branch.attrs,\n        \"data-depth\": nodeState.depth,\n        dir: state.context.dir,\n        \"data-branch\": nodeState.value,\n        role: \"treeitem\",\n        \"data-ownedby\": dom.getTreeId(state.context),\n        \"data-value\": nodeState.value,\n        \"aria-level\": nodeState.depth,\n        \"aria-selected\": nodeState.disabled ? void 0 : nodeState.selected,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"aria-expanded\": nodeState.expanded,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"aria-disabled\": nodeState.disabled,\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        style: {\n          \"--depth\": nodeState.depth\n        }\n      });\n    },\n    getBranchIndicatorProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused)\n      });\n    },\n    getBranchTriggerProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchTrigger.attrs,\n        role: \"button\",\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-value\": nodeState.value,\n        onClick(event) {\n          if (nodeState.disabled) return;\n          send({\n            type: \"BRANCH_TOGGLE.CLICK\",\n            id: nodeState.value\n          });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchControlProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchControl.attrs,\n        role: \"button\",\n        id: dom.getNodeId(state.context, nodeState.value),\n        dir: state.context.dir,\n        tabIndex: nodeState.focused ? 0 : -1,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused),\n        \"data-value\": nodeState.value,\n        \"data-depth\": nodeState.depth,\n        onFocus(event) {\n          send({\n            type: \"NODE.FOCUS\",\n            id: nodeState.value\n          });\n          event.stopPropagation();\n        },\n        onClick(event) {\n          if (nodeState.disabled) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({\n            type: \"BRANCH_NODE.CLICK\",\n            id: nodeState.value,\n            shiftKey: event.shiftKey,\n            ctrlKey: isMetaKey\n          });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchTextProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchText.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\"\n      });\n    },\n    getBranchContentProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchContent.attrs,\n        role: \"group\",\n        dir: state.context.dir,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-depth\": nodeState.depth,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": nodeState.value,\n        hidden: !nodeState.expanded\n      });\n    },\n    getBranchIndentGuideProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndentGuide.attrs,\n        \"data-depth\": nodeState.depth\n      });\n    }\n  };\n}\nvar {\n  and\n} = guards;\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"tree-view\",\n    initial: \"idle\",\n    context: {\n      expandedValue: [],\n      selectedValue: [],\n      focusedValue: null,\n      expandOnClick: true,\n      selectionMode: \"single\",\n      typeahead: true,\n      ...ctx,\n      collection: ctx.collection ?? collection.empty(),\n      typeaheadState: getByTypeahead.defaultOptions\n    },\n    computed: {\n      isMultipleSelection: ctx2 => ctx2.selectionMode === \"multiple\"\n    },\n    on: {\n      \"EXPANDED.SET\": {\n        actions: [\"setExpanded\"]\n      },\n      \"SELECTED.SET\": {\n        actions: [\"setSelected\"]\n      },\n      \"SELECTED.ALL\": [{\n        guard: and(\"isMultipleSelection\", \"moveFocus\"),\n        actions: [\"selectAllNodes\", \"focusTreeLastNode\"]\n      }, {\n        guard: \"isMultipleSelection\",\n        actions: [\"selectAllNodes\"]\n      }],\n      \"EXPANDED.ALL\": {\n        actions: [\"expandAllBranches\"]\n      }\n    },\n    states: {\n      idle: {\n        on: {\n          \"NODE.FOCUS\": {\n            actions: [\"setFocusedNode\"]\n          },\n          \"NODE.ARROW_DOWN\": [{\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"focusTreeNextNode\", \"extendSelectionToNextNode\"]\n          }, {\n            actions: [\"focusTreeNextNode\"]\n          }],\n          \"NODE.ARROW_UP\": [{\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"focusTreePrevNode\", \"extendSelectionToPrevNode\"]\n          }, {\n            actions: [\"focusTreePrevNode\"]\n          }],\n          \"NODE.ARROW_LEFT\": {\n            actions: [\"focusBranchNode\"]\n          },\n          \"BRANCH_NODE.ARROW_LEFT\": [{\n            guard: \"isBranchExpanded\",\n            actions: [\"collapseBranch\"]\n          }, {\n            actions: [\"focusBranchNode\"]\n          }],\n          \"BRANCH_NODE.ARROW_RIGHT\": [{\n            guard: and(\"isBranchFocused\", \"isBranchExpanded\"),\n            actions: [\"focusBranchFirstNode\"]\n          }, {\n            actions: [\"expandBranch\"]\n          }],\n          \"SIBLINGS.EXPAND\": {\n            actions: [\"expandSiblingBranches\"]\n          },\n          \"NODE.HOME\": [{\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToFirstNode\", \"focusTreeFirstNode\"]\n          }, {\n            actions: [\"focusTreeFirstNode\"]\n          }],\n          \"NODE.END\": [{\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToLastNode\", \"focusTreeLastNode\"]\n          }, {\n            actions: [\"focusTreeLastNode\"]\n          }],\n          \"NODE.CLICK\": [{\n            guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n            actions: [\"toggleNodeSelection\"]\n          }, {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToNode\"]\n          }, {\n            actions: [\"selectNode\"]\n          }],\n          \"BRANCH_NODE.CLICK\": [{\n            guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n            actions: [\"toggleNodeSelection\"]\n          }, {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToNode\"]\n          }, {\n            guard: \"openOnClick\",\n            actions: [\"selectNode\", \"toggleBranchNode\"]\n          }, {\n            actions: [\"selectNode\"]\n          }],\n          \"BRANCH_TOGGLE.CLICK\": {\n            actions: [\"toggleBranchNode\"]\n          },\n          \"TREE.TYPEAHEAD\": {\n            actions: [\"focusMatchedNode\"]\n          }\n        }\n      }\n    }\n  }, {\n    guards: {\n      isBranchFocused: (ctx2, evt) => ctx2.focusedValue === evt.id,\n      isBranchExpanded: (ctx2, evt) => ctx2.expandedValue.includes(evt.id),\n      isShiftKey: (_ctx, evt) => evt.shiftKey,\n      isCtrlKey: (_ctx, evt) => evt.ctrlKey,\n      hasSelectedItems: ctx2 => ctx2.selectedValue.length > 0,\n      isMultipleSelection: ctx2 => ctx2.isMultipleSelection,\n      moveFocus: (_ctx, evt) => !!evt.moveFocus,\n      openOnClick: ctx2 => !!ctx2.expandOnClick\n    },\n    actions: {\n      selectNode(ctx2, evt) {\n        set.selected(ctx2, [evt.id]);\n      },\n      setFocusedNode(ctx2, evt) {\n        set.focused(ctx2, evt.id);\n      },\n      clearFocusedNode(ctx2) {\n        set.focused(ctx2, null);\n      },\n      clearSelectedItem(ctx2) {\n        set.selected(ctx2, []);\n      },\n      toggleBranchNode(ctx2, evt) {\n        set.expanded(ctx2, addOrRemove(ctx2.expandedValue, evt.id));\n      },\n      expandBranch(ctx2, evt) {\n        set.expanded(ctx2, add(ctx2.expandedValue, evt.id));\n      },\n      collapseBranch(ctx2, evt) {\n        set.expanded(ctx2, remove(ctx2.expandedValue, evt.id));\n      },\n      setExpanded(ctx2, evt) {\n        set.expanded(ctx2, evt.value);\n      },\n      setSelected(ctx2, evt) {\n        set.selected(ctx2, evt.value);\n      },\n      focusTreeFirstNode(ctx2) {\n        const firstNode = ctx2.collection.getFirstNode();\n        const firstValue = ctx2.collection.getNodeValue(firstNode);\n        dom.focusNode(ctx2, firstValue);\n      },\n      focusTreeLastNode(ctx2) {\n        const lastNode = ctx2.collection.getLastNode();\n        const lastValue = ctx2.collection.getNodeValue(lastNode);\n        dom.focusNode(ctx2, lastValue);\n      },\n      focusBranchFirstNode(ctx2, evt) {\n        const branchNode = ctx2.collection.findNode(evt.id);\n        const firstNode = ctx2.collection.getFirstNode(branchNode);\n        const firstValue = ctx2.collection.getNodeValue(firstNode);\n        dom.focusNode(ctx2, firstValue);\n      },\n      focusTreeNextNode(ctx2, evt) {\n        let nextNode = ctx2.collection.getNextNode(evt.id, {\n          skip: skipFn(ctx2)\n        });\n        nextNode = nextNode ?? ctx2.collection.getFirstNode();\n        const nextValue = ctx2.collection.getNodeValue(nextNode);\n        dom.focusNode(ctx2, nextValue);\n      },\n      focusTreePrevNode(ctx2, evt) {\n        let prevNode = ctx2.collection.getPreviousNode(evt.id, {\n          skip: skipFn(ctx2)\n        });\n        prevNode = prevNode ?? ctx2.collection.getLastNode();\n        const prevValue = ctx2.collection.getNodeValue(prevNode);\n        dom.focusNode(ctx2, prevValue);\n      },\n      focusBranchNode(ctx2, evt) {\n        const parentNode = ctx2.collection.getParentNode(evt.id);\n        const parentValue = parentNode ? ctx2.collection.getNodeValue(parentNode) : void 0;\n        dom.focusNode(ctx2, parentValue);\n      },\n      selectAllNodes(ctx2) {\n        set.selected(ctx2, ctx2.collection.getValues());\n      },\n      focusMatchedNode(ctx2, evt) {\n        const node = dom.getMatchingNode(ctx2, evt.key);\n        dom.focusNode(ctx2, node?.id);\n      },\n      toggleNodeSelection(ctx2, evt) {\n        const selectedValue = addOrRemove(ctx2.selectedValue, evt.id);\n        set.selected(ctx2, selectedValue);\n      },\n      expandAllBranches(ctx2) {\n        const nextValue = ctx2.collection.getBranchValues();\n        set.expanded(ctx2, nextValue);\n      },\n      expandSiblingBranches(ctx2, evt) {\n        const indexPath = ctx2.collection.getIndexPath(evt.id);\n        if (!indexPath) return;\n        const nodes = ctx2.collection.getSiblingNodes(indexPath);\n        const values = nodes.map(node => ctx2.collection.getNodeValue(node));\n        set.expanded(ctx2, uniq(values));\n      },\n      extendSelectionToNode(ctx2, evt) {\n        const anchorValue = first(ctx2.selectedValue) || ctx2.collection.getNodeValue(ctx2.collection.getFirstNode());\n        const targetValue = evt.id;\n        let values = [anchorValue, targetValue];\n        let hits = 0;\n        const visibleNodes = getVisibleNodes(ctx2);\n        visibleNodes.forEach(({\n          node\n        }) => {\n          const nodeValue = ctx2.collection.getNodeValue(node);\n          if (hits === 1) values.push(nodeValue);\n          if (nodeValue === anchorValue || nodeValue === targetValue) hits++;\n        });\n        set.selected(ctx2, uniq(values));\n      },\n      extendSelectionToNextNode(ctx2, evt) {\n        const nextNode = ctx2.collection.getNextNode(evt.id, {\n          skip: skipFn(ctx2)\n        });\n        if (!nextNode) return;\n        const values = new Set(ctx2.selectedValue);\n        const nextValue = ctx2.collection.getNodeValue(nextNode);\n        if (nextValue == null) return;\n        if (values.has(evt.id) && values.has(nextValue)) {\n          values.delete(evt.id);\n        } else if (!values.has(nextValue)) {\n          values.add(nextValue);\n        }\n        set.selected(ctx2, Array.from(values));\n      },\n      extendSelectionToPrevNode(ctx2, evt) {\n        const prevNode = ctx2.collection.getPreviousNode(evt.id, {\n          skip: skipFn(ctx2)\n        });\n        if (!prevNode) return;\n        const values = new Set(ctx2.selectedValue);\n        const prevValue = ctx2.collection.getNodeValue(prevNode);\n        if (prevValue == null) return;\n        if (values.has(evt.id) && values.has(prevValue)) {\n          values.delete(evt.id);\n        } else if (!values.has(prevValue)) {\n          values.add(prevValue);\n        }\n        set.selected(ctx2, Array.from(values));\n      },\n      extendSelectionToFirstNode(ctx2) {\n        const currentSelection = first(ctx2.selectedValue);\n        const values = [];\n        ctx2.collection.visit({\n          skip: skipFn(ctx2),\n          onEnter: node => {\n            const nodeValue = ctx2.collection.getNodeValue(node);\n            values.push(nodeValue);\n            if (nodeValue === currentSelection) {\n              return \"stop\";\n            }\n          }\n        });\n        set.selected(ctx2, values);\n      },\n      extendSelectionToLastNode(ctx2) {\n        const currentSelection = first(ctx2.selectedValue);\n        const values = [];\n        let current = false;\n        ctx2.collection.visit({\n          skip: skipFn(ctx2),\n          onEnter: node => {\n            const nodeValue = ctx2.collection.getNodeValue(node);\n            if (nodeValue === currentSelection) current = true;\n            if (current) values.push(nodeValue);\n          }\n        });\n        set.selected(ctx2, values);\n      }\n    }\n  });\n}\nvar invoke = {\n  focusChange(ctx) {\n    ctx.onFocusChange?.({\n      focusedValue: ctx.focusedValue\n    });\n  },\n  expandedChange(ctx) {\n    ctx.onExpandedChange?.({\n      expandedValue: Array.from(ctx.expandedValue),\n      focusedValue: ctx.focusedValue\n    });\n  },\n  selectionChange(ctx) {\n    ctx.onSelectionChange?.({\n      selectedValue: Array.from(ctx.selectedValue),\n      focusedValue: ctx.focusedValue\n    });\n  }\n};\nvar set = {\n  selected(ctx, value) {\n    if (isEqual(ctx.selectedValue, value)) return;\n    ctx.selectedValue = value;\n    invoke.selectionChange(ctx);\n  },\n  focused(ctx, value) {\n    if (isEqual(ctx.focusedValue, value)) return;\n    ctx.focusedValue = value;\n    invoke.focusChange(ctx);\n  },\n  expanded(ctx, value) {\n    if (isEqual(ctx.expandedValue, value)) return;\n    ctx.expandedValue = value;\n    invoke.expandedChange(ctx);\n  }\n};\nvar props = createProps()([\"ids\", \"collection\", \"dir\", \"expandedValue\", \"expandOnClick\", \"focusedValue\", \"getRootNode\", \"id\", \"onExpandedChange\", \"onFocusChange\", \"onSelectionChange\", \"selectedValue\", \"selectionMode\", \"typeahead\"]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"node\", \"indexPath\"]);\nvar splitItemProps = createSplitProps(itemProps);\nexport { anatomy, collection, connect, filePathCollection, itemProps, machine, props, splitItemProps, splitProps };","map":{"version":3,"names":["createAnatomy","TreeCollection","filePathToTree","ref","createMachine","guards","createScope","getByTypeahead","isComposingEvent","getEventTarget","isEditableElement","getEventKey","isModifierKey","dataAttr","createSplitProps","uniq","remove","add","compact","addOrRemove","first","isEqual","createProps","anatomy","parts","build","collection","options","empty","rootNode","children","filePathCollection","paths","skipFn","ctx","skip","indexPath","getValuePath","slice","some","value","expandedValue","includes","getVisibleNodes","nodes","visit","onEnter","node","push","dom","getRootId","ids","root","id","getLabelId","label","getNodeId","getTreeId","tree","getTreeEl","getById","focusNode","nodeId","focus","preventScroll","getMatchingNode","key","elements","map","textContent","stringifyNode","getNodeValue","state","typeaheadState","activeId","focusedValue","connect","send","normalize","collection2","context","Array","from","selectedValue","isTypingAhead","getNodeState","props2","valuePath","disabled","Boolean","focused","selected","expanded","depth","length","isBranch","isBranchNode","expand","type","_expandedValue","concat","src","collapse","deselect","_selectedValue","select","nextValue","selectionMode","selectParent","parentNode","getParentNode","expandParent","setExpandedValue","setSelectedValue","getRootProps","element","attrs","dir","getLabelProps","getTreeProps","role","tabIndex","onKeyDown","event","defaultPrevented","target","closest","dataset","console","warn","matches","keyMap","ArrowDown","event2","preventDefault","shiftKey","ArrowUp","ArrowLeft","ArrowRight","Home","End","Space","Enter","isLink","*","a","metaKey","moveFocus","exec","typeahead","isValidTypeahead","getItemProps","itemState","item","join","style","onFocus","stopPropagation","onClick","isMetaKey","ctrlKey","currentTarget","getItemTextProps","itemText","getItemIndicatorProps","itemIndicator","hidden","getBranchProps","nodeState","branch","getBranchIndicatorProps","branchIndicator","getBranchTriggerProps","branchTrigger","getBranchControlProps","branchControl","getBranchTextProps","branchText","getBranchContentProps","branchContent","getBranchIndentGuideProps","branchIndentGuide","and","machine","userContext","initial","expandOnClick","defaultOptions","computed","isMultipleSelection","ctx2","on","actions","guard","states","idle","isBranchFocused","evt","isBranchExpanded","isShiftKey","_ctx","isCtrlKey","hasSelectedItems","openOnClick","selectNode","set","setFocusedNode","clearFocusedNode","clearSelectedItem","toggleBranchNode","expandBranch","collapseBranch","setExpanded","setSelected","focusTreeFirstNode","firstNode","getFirstNode","firstValue","focusTreeLastNode","lastNode","getLastNode","lastValue","focusBranchFirstNode","branchNode","findNode","focusTreeNextNode","nextNode","getNextNode","focusTreePrevNode","prevNode","getPreviousNode","prevValue","focusBranchNode","parentValue","selectAllNodes","getValues","focusMatchedNode","toggleNodeSelection","expandAllBranches","getBranchValues","expandSiblingBranches","getIndexPath","getSiblingNodes","values","extendSelectionToNode","anchorValue","targetValue","hits","visibleNodes","forEach","nodeValue","extendSelectionToNextNode","Set","has","delete","extendSelectionToPrevNode","extendSelectionToFirstNode","currentSelection","extendSelectionToLastNode","current","invoke","focusChange","onFocusChange","expandedChange","onExpandedChange","selectionChange","onSelectionChange","props","splitProps","itemProps","splitItemProps"],"sources":["/Users/diegogg98/NEW CRM MAR18/node_modules/@zag-js/tree-view/dist/index.mjs"],"sourcesContent":["import { createAnatomy } from '@zag-js/anatomy';\nimport { TreeCollection, filePathToTree } from '@zag-js/collection';\nimport { ref, createMachine, guards } from '@zag-js/core';\nimport { createScope, getByTypeahead, isComposingEvent, getEventTarget, isEditableElement, getEventKey, isModifierKey, dataAttr } from '@zag-js/dom-query';\nimport { createSplitProps, uniq, remove, add, compact, addOrRemove, first, isEqual } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/tree-view.anatomy.ts\nvar anatomy = createAnatomy(\"tree-view\").parts(\n  \"root\",\n  \"label\",\n  \"tree\",\n  \"item\",\n  \"itemIndicator\",\n  \"itemText\",\n  \"branch\",\n  \"branchControl\",\n  \"branchTrigger\",\n  \"branchContent\",\n  \"branchText\",\n  \"branchIndicator\",\n  \"branchIndentGuide\"\n);\nvar parts = anatomy.build();\nvar collection = (options) => {\n  return ref(new TreeCollection(options));\n};\ncollection.empty = () => {\n  return ref(new TreeCollection({ rootNode: { children: [] } }));\n};\nfunction filePathCollection(paths) {\n  return ref(filePathToTree(paths));\n}\n\n// src/tree-view.utils.ts\nfunction skipFn(ctx) {\n  return function skip({ indexPath }) {\n    const paths = ctx.collection.getValuePath(indexPath).slice(0, -1);\n    return paths.some((value) => !ctx.expandedValue.includes(value));\n  };\n}\nfunction getVisibleNodes(ctx) {\n  const nodes = [];\n  ctx.collection.visit({\n    skip: skipFn(ctx),\n    onEnter: (node, indexPath) => {\n      nodes.push({ node, indexPath });\n    }\n  });\n  return nodes;\n}\n\n// src/tree-view.dom.ts\nvar dom = createScope({\n  getRootId: (ctx) => ctx.ids?.root ?? `tree:${ctx.id}:root`,\n  getLabelId: (ctx) => ctx.ids?.label ?? `tree:${ctx.id}:label`,\n  getNodeId: (ctx, value) => ctx.ids?.node?.(value) ?? `tree:${ctx.id}:node:${value}`,\n  getTreeId: (ctx) => ctx.ids?.tree ?? `tree:${ctx.id}:tree`,\n  getTreeEl: (ctx) => dom.getById(ctx, dom.getTreeId(ctx)),\n  focusNode: (ctx, value) => {\n    if (value == null) return;\n    const nodeId = dom.getNodeId(ctx, value);\n    dom.getById(ctx, nodeId)?.focus({ preventScroll: true });\n  },\n  getMatchingNode(ctx, key) {\n    const nodes = getVisibleNodes(ctx);\n    const elements = nodes.map(({ node }) => ({\n      textContent: ctx.collection.stringifyNode(node),\n      id: ctx.collection.getNodeValue(node)\n    }));\n    return getByTypeahead(elements, {\n      state: ctx.typeaheadState,\n      key,\n      activeId: ctx.focusedValue\n    });\n  }\n});\n\n// src/tree-view.connect.ts\nfunction connect(state, send, normalize) {\n  const collection2 = state.context.collection;\n  const expandedValue = Array.from(state.context.expandedValue);\n  const selectedValue = Array.from(state.context.selectedValue);\n  const isTypingAhead = state.context.isTypingAhead;\n  const focusedValue = state.context.focusedValue;\n  function getNodeState(props2) {\n    const { node, indexPath } = props2;\n    const value = collection2.getNodeValue(node);\n    return {\n      value,\n      valuePath: collection2.getValuePath(indexPath),\n      disabled: Boolean(node.disabled),\n      focused: focusedValue == null ? isEqual(indexPath, [0]) : focusedValue === value,\n      selected: selectedValue.includes(value),\n      expanded: expandedValue.includes(value),\n      depth: indexPath.length,\n      isBranch: collection2.isBranchNode(node)\n    };\n  }\n  return {\n    collection: collection2,\n    expandedValue,\n    selectedValue,\n    expand(value) {\n      if (!value) return send({ type: \"EXPANDED.ALL\" });\n      const _expandedValue = uniq(expandedValue.concat(...value));\n      send({ type: \"EXPANDED.SET\", value: _expandedValue, src: \"expand\" });\n    },\n    collapse(value) {\n      if (!value) return send({ type: \"EXPANDED.SET\", value: [], src: \"collapseAll\" });\n      const _expandedValue = uniq(remove(expandedValue, ...value));\n      send({ type: \"EXPANDED.SET\", value: _expandedValue, src: \"collapse\" });\n    },\n    deselect(value) {\n      if (!value) return send({ type: \"SELECTED.SET\", value: [], src: \"deselectAll\" });\n      const _selectedValue = uniq(remove(selectedValue, ...value));\n      send({ type: \"SELECTED.SET\", value: _selectedValue, src: \"deselect\" });\n    },\n    select(value) {\n      if (!value) return send({ type: \"SELECTED.ALL\" });\n      const nextValue = [];\n      if (state.context.selectionMode === \"single\") {\n        if (value.length > 0) nextValue.push(value[value.length - 1]);\n      } else {\n        nextValue.push(...selectedValue, ...value);\n      }\n      send({ type: \"SELECTED.SET\", value: nextValue, src: \"select\" });\n    },\n    getVisibleNodes() {\n      return getVisibleNodes(state.context);\n    },\n    focus(value) {\n      dom.focusNode(state.context, value);\n    },\n    selectParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _selectedValue = add(selectedValue, collection2.getNodeValue(parentNode));\n      send({ type: \"SELECTED.SET\", value: _selectedValue, src: \"select.parent\" });\n    },\n    expandParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _expandedValue = add(expandedValue, collection2.getNodeValue(parentNode));\n      send({ type: \"EXPANDED.SET\", value: _expandedValue, src: \"expand.parent\" });\n    },\n    setExpandedValue(value) {\n      const _expandedValue = uniq(value);\n      send({ type: \"EXPANDED.SET\", value: _expandedValue });\n    },\n    setSelectedValue(value) {\n      const _selectedValue = uniq(value);\n      send({ type: \"SELECTED.SET\", value: _selectedValue });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: dom.getRootId(state.context),\n        dir: state.context.dir\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        id: dom.getLabelId(state.context),\n        dir: state.context.dir\n      });\n    },\n    getTreeProps() {\n      return normalize.element({\n        ...parts.tree.attrs,\n        id: dom.getTreeId(state.context),\n        dir: state.context.dir,\n        role: \"tree\",\n        \"aria-label\": \"Tree View\",\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"aria-multiselectable\": state.context.selectionMode === \"multiple\" || void 0,\n        tabIndex: -1,\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          const target = getEventTarget(event);\n          if (isEditableElement(target)) return;\n          const node = target?.closest(\"[data-part=branch-control], [data-part=item]\");\n          if (!node) return;\n          const nodeId = node.dataset.value;\n          if (nodeId == null) {\n            console.warn(`[zag-js/tree-view] Node id not found for node`, node);\n            return;\n          }\n          const isBranchNode = node.matches(\"[data-part=branch-control]\");\n          const keyMap = {\n            ArrowDown(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.ARROW_DOWN\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            ArrowUp(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.ARROW_UP\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            ArrowLeft(event2) {\n              if (isModifierKey(event2) || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: isBranchNode ? \"BRANCH_NODE.ARROW_LEFT\" : \"NODE.ARROW_LEFT\", id: nodeId });\n            },\n            ArrowRight(event2) {\n              if (!isBranchNode || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: \"BRANCH_NODE.ARROW_RIGHT\", id: nodeId });\n            },\n            Home(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.HOME\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            End(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.END\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            Space(event2) {\n              if (node.dataset.disabled) return;\n              if (isTypingAhead) {\n                send({ type: \"TREE.TYPEAHEAD\", key: event2.key });\n              } else {\n                keyMap.Enter?.(event2);\n              }\n            },\n            Enter(event2) {\n              if (node.dataset.disabled) return;\n              const isLink = target?.closest(\"a[href]\");\n              if (!isLink) event2.preventDefault();\n              send({ type: isBranchNode ? \"BRANCH_NODE.CLICK\" : \"NODE.CLICK\", id: nodeId, src: \"keyboard\" });\n            },\n            \"*\"(event2) {\n              if (node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: \"SIBLINGS.EXPAND\", id: nodeId });\n            },\n            a(event2) {\n              if (!event2.metaKey || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: \"SELECTED.ALL\", moveFocus: true });\n            }\n          };\n          const key = getEventKey(event, state.context);\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event);\n            return;\n          }\n          if (!state.context.typeahead) return;\n          const isValidTypeahead = event.key.length === 1 && !isModifierKey(event);\n          if (!isValidTypeahead) return;\n          send({ type: \"TREE.TYPEAHEAD\", key: event.key, id: nodeId });\n          event.preventDefault();\n        }\n      });\n    },\n    getNodeState,\n    getItemProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.item.attrs,\n        id: dom.getNodeId(state.context, itemState.value),\n        dir: state.context.dir,\n        \"data-ownedby\": dom.getTreeId(state.context),\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": itemState.value,\n        tabIndex: itemState.focused ? 0 : -1,\n        \"data-focus\": dataAttr(itemState.focused),\n        role: \"treeitem\",\n        \"aria-current\": itemState.selected ? \"true\" : void 0,\n        \"aria-selected\": itemState.disabled ? void 0 : itemState.selected,\n        \"data-selected\": dataAttr(itemState.selected),\n        \"aria-disabled\": itemState.disabled,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"aria-level\": itemState.depth,\n        \"data-depth\": itemState.depth,\n        style: {\n          \"--depth\": itemState.depth\n        },\n        onFocus(event) {\n          event.stopPropagation();\n          send({ type: \"NODE.FOCUS\", id: itemState.value });\n        },\n        onClick(event) {\n          if (itemState.disabled) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({ type: \"NODE.CLICK\", id: itemState.value, shiftKey: event.shiftKey, ctrlKey: isMetaKey });\n          event.stopPropagation();\n          const isLink = event.currentTarget.matches(\"a[href]\");\n          if (!isLink) event.preventDefault();\n        }\n      });\n    },\n    getItemTextProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemText.attrs,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused)\n      });\n    },\n    getItemIndicatorProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused),\n        hidden: !itemState.selected\n      });\n    },\n    getBranchProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branch.attrs,\n        \"data-depth\": nodeState.depth,\n        dir: state.context.dir,\n        \"data-branch\": nodeState.value,\n        role: \"treeitem\",\n        \"data-ownedby\": dom.getTreeId(state.context),\n        \"data-value\": nodeState.value,\n        \"aria-level\": nodeState.depth,\n        \"aria-selected\": nodeState.disabled ? void 0 : nodeState.selected,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"aria-expanded\": nodeState.expanded,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"aria-disabled\": nodeState.disabled,\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        style: {\n          \"--depth\": nodeState.depth\n        }\n      });\n    },\n    getBranchIndicatorProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused)\n      });\n    },\n    getBranchTriggerProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchTrigger.attrs,\n        role: \"button\",\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-value\": nodeState.value,\n        onClick(event) {\n          if (nodeState.disabled) return;\n          send({ type: \"BRANCH_TOGGLE.CLICK\", id: nodeState.value });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchControlProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchControl.attrs,\n        role: \"button\",\n        id: dom.getNodeId(state.context, nodeState.value),\n        dir: state.context.dir,\n        tabIndex: nodeState.focused ? 0 : -1,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused),\n        \"data-value\": nodeState.value,\n        \"data-depth\": nodeState.depth,\n        onFocus(event) {\n          send({ type: \"NODE.FOCUS\", id: nodeState.value });\n          event.stopPropagation();\n        },\n        onClick(event) {\n          if (nodeState.disabled) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({ type: \"BRANCH_NODE.CLICK\", id: nodeState.value, shiftKey: event.shiftKey, ctrlKey: isMetaKey });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchTextProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchText.attrs,\n        dir: state.context.dir,\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\"\n      });\n    },\n    getBranchContentProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchContent.attrs,\n        role: \"group\",\n        dir: state.context.dir,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-depth\": nodeState.depth,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": nodeState.value,\n        hidden: !nodeState.expanded\n      });\n    },\n    getBranchIndentGuideProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndentGuide.attrs,\n        \"data-depth\": nodeState.depth\n      });\n    }\n  };\n}\nvar { and } = guards;\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine(\n    {\n      id: \"tree-view\",\n      initial: \"idle\",\n      context: {\n        expandedValue: [],\n        selectedValue: [],\n        focusedValue: null,\n        expandOnClick: true,\n        selectionMode: \"single\",\n        typeahead: true,\n        ...ctx,\n        collection: ctx.collection ?? collection.empty(),\n        typeaheadState: getByTypeahead.defaultOptions\n      },\n      computed: {\n        isMultipleSelection: (ctx2) => ctx2.selectionMode === \"multiple\"\n      },\n      on: {\n        \"EXPANDED.SET\": {\n          actions: [\"setExpanded\"]\n        },\n        \"SELECTED.SET\": {\n          actions: [\"setSelected\"]\n        },\n        \"SELECTED.ALL\": [\n          {\n            guard: and(\"isMultipleSelection\", \"moveFocus\"),\n            actions: [\"selectAllNodes\", \"focusTreeLastNode\"]\n          },\n          {\n            guard: \"isMultipleSelection\",\n            actions: [\"selectAllNodes\"]\n          }\n        ],\n        \"EXPANDED.ALL\": {\n          actions: [\"expandAllBranches\"]\n        }\n      },\n      states: {\n        idle: {\n          on: {\n            \"NODE.FOCUS\": {\n              actions: [\"setFocusedNode\"]\n            },\n            \"NODE.ARROW_DOWN\": [\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"focusTreeNextNode\", \"extendSelectionToNextNode\"]\n              },\n              {\n                actions: [\"focusTreeNextNode\"]\n              }\n            ],\n            \"NODE.ARROW_UP\": [\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"focusTreePrevNode\", \"extendSelectionToPrevNode\"]\n              },\n              {\n                actions: [\"focusTreePrevNode\"]\n              }\n            ],\n            \"NODE.ARROW_LEFT\": {\n              actions: [\"focusBranchNode\"]\n            },\n            \"BRANCH_NODE.ARROW_LEFT\": [\n              {\n                guard: \"isBranchExpanded\",\n                actions: [\"collapseBranch\"]\n              },\n              {\n                actions: [\"focusBranchNode\"]\n              }\n            ],\n            \"BRANCH_NODE.ARROW_RIGHT\": [\n              {\n                guard: and(\"isBranchFocused\", \"isBranchExpanded\"),\n                actions: [\"focusBranchFirstNode\"]\n              },\n              {\n                actions: [\"expandBranch\"]\n              }\n            ],\n            \"SIBLINGS.EXPAND\": {\n              actions: [\"expandSiblingBranches\"]\n            },\n            \"NODE.HOME\": [\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"extendSelectionToFirstNode\", \"focusTreeFirstNode\"]\n              },\n              {\n                actions: [\"focusTreeFirstNode\"]\n              }\n            ],\n            \"NODE.END\": [\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"extendSelectionToLastNode\", \"focusTreeLastNode\"]\n              },\n              {\n                actions: [\"focusTreeLastNode\"]\n              }\n            ],\n            \"NODE.CLICK\": [\n              {\n                guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n                actions: [\"toggleNodeSelection\"]\n              },\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"extendSelectionToNode\"]\n              },\n              {\n                actions: [\"selectNode\"]\n              }\n            ],\n            \"BRANCH_NODE.CLICK\": [\n              {\n                guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n                actions: [\"toggleNodeSelection\"]\n              },\n              {\n                guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n                actions: [\"extendSelectionToNode\"]\n              },\n              {\n                guard: \"openOnClick\",\n                actions: [\"selectNode\", \"toggleBranchNode\"]\n              },\n              {\n                actions: [\"selectNode\"]\n              }\n            ],\n            \"BRANCH_TOGGLE.CLICK\": {\n              actions: [\"toggleBranchNode\"]\n            },\n            \"TREE.TYPEAHEAD\": {\n              actions: [\"focusMatchedNode\"]\n            }\n          }\n        }\n      }\n    },\n    {\n      guards: {\n        isBranchFocused: (ctx2, evt) => ctx2.focusedValue === evt.id,\n        isBranchExpanded: (ctx2, evt) => ctx2.expandedValue.includes(evt.id),\n        isShiftKey: (_ctx, evt) => evt.shiftKey,\n        isCtrlKey: (_ctx, evt) => evt.ctrlKey,\n        hasSelectedItems: (ctx2) => ctx2.selectedValue.length > 0,\n        isMultipleSelection: (ctx2) => ctx2.isMultipleSelection,\n        moveFocus: (_ctx, evt) => !!evt.moveFocus,\n        openOnClick: (ctx2) => !!ctx2.expandOnClick\n      },\n      actions: {\n        selectNode(ctx2, evt) {\n          set.selected(ctx2, [evt.id]);\n        },\n        setFocusedNode(ctx2, evt) {\n          set.focused(ctx2, evt.id);\n        },\n        clearFocusedNode(ctx2) {\n          set.focused(ctx2, null);\n        },\n        clearSelectedItem(ctx2) {\n          set.selected(ctx2, []);\n        },\n        toggleBranchNode(ctx2, evt) {\n          set.expanded(ctx2, addOrRemove(ctx2.expandedValue, evt.id));\n        },\n        expandBranch(ctx2, evt) {\n          set.expanded(ctx2, add(ctx2.expandedValue, evt.id));\n        },\n        collapseBranch(ctx2, evt) {\n          set.expanded(ctx2, remove(ctx2.expandedValue, evt.id));\n        },\n        setExpanded(ctx2, evt) {\n          set.expanded(ctx2, evt.value);\n        },\n        setSelected(ctx2, evt) {\n          set.selected(ctx2, evt.value);\n        },\n        focusTreeFirstNode(ctx2) {\n          const firstNode = ctx2.collection.getFirstNode();\n          const firstValue = ctx2.collection.getNodeValue(firstNode);\n          dom.focusNode(ctx2, firstValue);\n        },\n        focusTreeLastNode(ctx2) {\n          const lastNode = ctx2.collection.getLastNode();\n          const lastValue = ctx2.collection.getNodeValue(lastNode);\n          dom.focusNode(ctx2, lastValue);\n        },\n        focusBranchFirstNode(ctx2, evt) {\n          const branchNode = ctx2.collection.findNode(evt.id);\n          const firstNode = ctx2.collection.getFirstNode(branchNode);\n          const firstValue = ctx2.collection.getNodeValue(firstNode);\n          dom.focusNode(ctx2, firstValue);\n        },\n        focusTreeNextNode(ctx2, evt) {\n          let nextNode = ctx2.collection.getNextNode(evt.id, { skip: skipFn(ctx2) });\n          nextNode = nextNode ?? ctx2.collection.getFirstNode();\n          const nextValue = ctx2.collection.getNodeValue(nextNode);\n          dom.focusNode(ctx2, nextValue);\n        },\n        focusTreePrevNode(ctx2, evt) {\n          let prevNode = ctx2.collection.getPreviousNode(evt.id, { skip: skipFn(ctx2) });\n          prevNode = prevNode ?? ctx2.collection.getLastNode();\n          const prevValue = ctx2.collection.getNodeValue(prevNode);\n          dom.focusNode(ctx2, prevValue);\n        },\n        focusBranchNode(ctx2, evt) {\n          const parentNode = ctx2.collection.getParentNode(evt.id);\n          const parentValue = parentNode ? ctx2.collection.getNodeValue(parentNode) : void 0;\n          dom.focusNode(ctx2, parentValue);\n        },\n        selectAllNodes(ctx2) {\n          set.selected(ctx2, ctx2.collection.getValues());\n        },\n        focusMatchedNode(ctx2, evt) {\n          const node = dom.getMatchingNode(ctx2, evt.key);\n          dom.focusNode(ctx2, node?.id);\n        },\n        toggleNodeSelection(ctx2, evt) {\n          const selectedValue = addOrRemove(ctx2.selectedValue, evt.id);\n          set.selected(ctx2, selectedValue);\n        },\n        expandAllBranches(ctx2) {\n          const nextValue = ctx2.collection.getBranchValues();\n          set.expanded(ctx2, nextValue);\n        },\n        expandSiblingBranches(ctx2, evt) {\n          const indexPath = ctx2.collection.getIndexPath(evt.id);\n          if (!indexPath) return;\n          const nodes = ctx2.collection.getSiblingNodes(indexPath);\n          const values = nodes.map((node) => ctx2.collection.getNodeValue(node));\n          set.expanded(ctx2, uniq(values));\n        },\n        extendSelectionToNode(ctx2, evt) {\n          const anchorValue = first(ctx2.selectedValue) || ctx2.collection.getNodeValue(ctx2.collection.getFirstNode());\n          const targetValue = evt.id;\n          let values = [anchorValue, targetValue];\n          let hits = 0;\n          const visibleNodes = getVisibleNodes(ctx2);\n          visibleNodes.forEach(({ node }) => {\n            const nodeValue = ctx2.collection.getNodeValue(node);\n            if (hits === 1) values.push(nodeValue);\n            if (nodeValue === anchorValue || nodeValue === targetValue) hits++;\n          });\n          set.selected(ctx2, uniq(values));\n        },\n        extendSelectionToNextNode(ctx2, evt) {\n          const nextNode = ctx2.collection.getNextNode(evt.id, { skip: skipFn(ctx2) });\n          if (!nextNode) return;\n          const values = new Set(ctx2.selectedValue);\n          const nextValue = ctx2.collection.getNodeValue(nextNode);\n          if (nextValue == null) return;\n          if (values.has(evt.id) && values.has(nextValue)) {\n            values.delete(evt.id);\n          } else if (!values.has(nextValue)) {\n            values.add(nextValue);\n          }\n          set.selected(ctx2, Array.from(values));\n        },\n        extendSelectionToPrevNode(ctx2, evt) {\n          const prevNode = ctx2.collection.getPreviousNode(evt.id, { skip: skipFn(ctx2) });\n          if (!prevNode) return;\n          const values = new Set(ctx2.selectedValue);\n          const prevValue = ctx2.collection.getNodeValue(prevNode);\n          if (prevValue == null) return;\n          if (values.has(evt.id) && values.has(prevValue)) {\n            values.delete(evt.id);\n          } else if (!values.has(prevValue)) {\n            values.add(prevValue);\n          }\n          set.selected(ctx2, Array.from(values));\n        },\n        extendSelectionToFirstNode(ctx2) {\n          const currentSelection = first(ctx2.selectedValue);\n          const values = [];\n          ctx2.collection.visit({\n            skip: skipFn(ctx2),\n            onEnter: (node) => {\n              const nodeValue = ctx2.collection.getNodeValue(node);\n              values.push(nodeValue);\n              if (nodeValue === currentSelection) {\n                return \"stop\";\n              }\n            }\n          });\n          set.selected(ctx2, values);\n        },\n        extendSelectionToLastNode(ctx2) {\n          const currentSelection = first(ctx2.selectedValue);\n          const values = [];\n          let current = false;\n          ctx2.collection.visit({\n            skip: skipFn(ctx2),\n            onEnter: (node) => {\n              const nodeValue = ctx2.collection.getNodeValue(node);\n              if (nodeValue === currentSelection) current = true;\n              if (current) values.push(nodeValue);\n            }\n          });\n          set.selected(ctx2, values);\n        }\n      }\n    }\n  );\n}\nvar invoke = {\n  focusChange(ctx) {\n    ctx.onFocusChange?.({ focusedValue: ctx.focusedValue });\n  },\n  expandedChange(ctx) {\n    ctx.onExpandedChange?.({\n      expandedValue: Array.from(ctx.expandedValue),\n      focusedValue: ctx.focusedValue\n    });\n  },\n  selectionChange(ctx) {\n    ctx.onSelectionChange?.({\n      selectedValue: Array.from(ctx.selectedValue),\n      focusedValue: ctx.focusedValue\n    });\n  }\n};\nvar set = {\n  selected(ctx, value) {\n    if (isEqual(ctx.selectedValue, value)) return;\n    ctx.selectedValue = value;\n    invoke.selectionChange(ctx);\n  },\n  focused(ctx, value) {\n    if (isEqual(ctx.focusedValue, value)) return;\n    ctx.focusedValue = value;\n    invoke.focusChange(ctx);\n  },\n  expanded(ctx, value) {\n    if (isEqual(ctx.expandedValue, value)) return;\n    ctx.expandedValue = value;\n    invoke.expandedChange(ctx);\n  }\n};\nvar props = createProps()([\n  \"ids\",\n  \"collection\",\n  \"dir\",\n  \"expandedValue\",\n  \"expandOnClick\",\n  \"focusedValue\",\n  \"getRootNode\",\n  \"id\",\n  \"onExpandedChange\",\n  \"onFocusChange\",\n  \"onSelectionChange\",\n  \"selectedValue\",\n  \"selectionMode\",\n  \"typeahead\"\n]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"node\", \"indexPath\"]);\nvar splitItemProps = createSplitProps(itemProps);\n\nexport { anatomy, collection, connect, filePathCollection, itemProps, machine, props, splitItemProps, splitProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}