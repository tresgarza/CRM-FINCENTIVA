{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { createScope, queryAll, dataAttr, getEventStep, getEventKey, trackPointerMove, raf, getRelativePoint } from '@zag-js/dom-query';\nimport { createMachine } from '@zag-js/core';\nimport { createSplitProps, compact } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/splitter.anatomy.ts\nvar anatomy = createAnatomy(\"splitter\").parts(\"root\", \"panel\", \"resizeTrigger\");\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `splitter:${ctx.id}`,\n  getResizeTriggerId: (ctx, id) => ctx.ids?.resizeTrigger?.(id) ?? `splitter:${ctx.id}:splitter:${id}`,\n  getLabelId: ctx => ctx.ids?.label ?? `splitter:${ctx.id}:label`,\n  getPanelId: (ctx, id) => ctx.ids?.panel?.(id) ?? `splitter:${ctx.id}:panel:${id}`,\n  getGlobalCursorId: ctx => `splitter:${ctx.id}:global-cursor`,\n  getRootEl: ctx => dom.getById(ctx, dom.getRootId(ctx)),\n  getResizeTriggerEl: (ctx, id) => dom.getById(ctx, dom.getResizeTriggerId(ctx, id)),\n  getPanelEl: (ctx, id) => dom.getById(ctx, dom.getPanelId(ctx, id)),\n  getCursor(ctx) {\n    const x = ctx.isHorizontal;\n    let cursor = x ? \"col-resize\" : \"row-resize\";\n    if (ctx.activeResizeState.isAtMin) cursor = x ? \"e-resize\" : \"s-resize\";\n    if (ctx.activeResizeState.isAtMax) cursor = x ? \"w-resize\" : \"n-resize\";\n    return cursor;\n  },\n  getPanelStyle(ctx, id) {\n    const flexGrow = ctx.panels.find(panel => panel.id === id)?.size ?? \"0\";\n    return {\n      flexBasis: 0,\n      flexGrow,\n      flexShrink: 1,\n      overflow: \"hidden\"\n    };\n  },\n  getActiveHandleEl(ctx) {\n    const activeId = ctx.activeResizeId;\n    if (activeId == null) return;\n    return dom.getById(ctx, dom.getResizeTriggerId(ctx, activeId));\n  },\n  getResizeTriggerEls(ctx) {\n    const ownerId = CSS.escape(dom.getRootId(ctx));\n    return queryAll(dom.getRootEl(ctx), `[role=separator][data-ownedby='${ownerId}']`);\n  },\n  setupGlobalCursor(ctx) {\n    const styleEl = dom.getById(ctx, dom.getGlobalCursorId(ctx));\n    const textContent = `* { cursor: ${dom.getCursor(ctx)} !important; }`;\n    if (styleEl) {\n      styleEl.textContent = textContent;\n    } else {\n      const style = dom.getDoc(ctx).createElement(\"style\");\n      style.id = dom.getGlobalCursorId(ctx);\n      style.textContent = textContent;\n      dom.getDoc(ctx).head.appendChild(style);\n    }\n  },\n  removeGlobalCursor(ctx) {\n    dom.getById(ctx, dom.getGlobalCursorId(ctx))?.remove();\n  }\n});\n\n// src/splitter.utils.ts\nfunction validateSize(key, size) {\n  if (Math.floor(size) > 100) {\n    throw new Error(`Total ${key} of panels cannot be greater than 100`);\n  }\n}\nfunction getNormalizedPanels(ctx) {\n  let numOfPanelsWithoutSize = 0;\n  let totalSize = 0;\n  let totalMinSize = 0;\n  const panels = ctx.size.map(panel => {\n    const minSize = panel.minSize ?? 0;\n    const maxSize = panel.maxSize ?? 100;\n    totalMinSize += minSize;\n    if (panel.size == null) {\n      numOfPanelsWithoutSize++;\n    } else {\n      totalSize += panel.size;\n    }\n    return {\n      ...panel,\n      minSize,\n      maxSize\n    };\n  });\n  validateSize(\"minSize\", totalMinSize);\n  validateSize(\"size\", totalSize);\n  let end = 0;\n  let remainingSize = 0;\n  const result = panels.map(panel => {\n    let start = end;\n    if (panel.size != null) {\n      end += panel.size;\n      remainingSize = panel.size - panel.minSize;\n      return {\n        ...panel,\n        start,\n        end,\n        remainingSize\n      };\n    }\n    const size = (100 - totalSize) / numOfPanelsWithoutSize;\n    end += size;\n    remainingSize = size - panel.minSize;\n    return {\n      ...panel,\n      size,\n      start,\n      end,\n      remainingSize\n    };\n  });\n  return result;\n}\nfunction getHandlePanels(ctx, id = ctx.activeResizeId) {\n  const [beforeId, afterId] = id?.split(\":\") ?? [];\n  if (!beforeId || !afterId) return;\n  const beforeIndex = ctx.previousPanels.findIndex(panel => panel.id === beforeId);\n  const afterIndex = ctx.previousPanels.findIndex(panel => panel.id === afterId);\n  if (beforeIndex === -1 || afterIndex === -1) return;\n  const before = ctx.previousPanels[beforeIndex];\n  const after = ctx.previousPanels[afterIndex];\n  return {\n    before: {\n      ...before,\n      index: beforeIndex\n    },\n    after: {\n      ...after,\n      index: afterIndex\n    }\n  };\n}\nfunction getHandleBounds(ctx, id = ctx.activeResizeId) {\n  const panels = getHandlePanels(ctx, id);\n  if (!panels) return;\n  const {\n    before,\n    after\n  } = panels;\n  return {\n    min: Math.max(before.start + before.minSize, after.end - after.maxSize),\n    max: Math.min(after.end - after.minSize, before.maxSize + before.start)\n  };\n}\nfunction getPanelBounds(ctx, id) {\n  const bounds = getHandleBounds(ctx, id);\n  const panels = getHandlePanels(ctx, id);\n  if (!bounds || !panels) return;\n  const {\n    before,\n    after\n  } = panels;\n  const beforeMin = Math.abs(before.start - bounds.min);\n  const afterMin = after.size + (before.size - beforeMin);\n  const beforeMax = Math.abs(before.start - bounds.max);\n  const afterMax = after.size - (beforeMax - before.size);\n  return {\n    before: {\n      index: before.index,\n      min: beforeMin,\n      max: beforeMax,\n      isAtMin: beforeMin === before.size,\n      isAtMax: beforeMax === before.size,\n      up(step) {\n        return Math.min(before.size + step, beforeMax);\n      },\n      down(step) {\n        return Math.max(before.size - step, beforeMin);\n      }\n    },\n    after: {\n      index: after.index,\n      min: afterMin,\n      max: afterMax,\n      isAtMin: afterMin === after.size,\n      isAtMax: afterMax === after.size,\n      up(step) {\n        return Math.min(after.size + step, afterMin);\n      },\n      down(step) {\n        return Math.max(after.size - step, afterMax);\n      }\n    }\n  };\n}\nfunction clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n// src/splitter.connect.ts\nfunction connect(state, send, normalize) {\n  const horizontal = state.context.isHorizontal;\n  const focused = state.hasTag(\"focus\");\n  const dragging = state.matches(\"dragging\");\n  const panels = state.context.panels;\n  function getResizeTriggerState(props2) {\n    const {\n      id,\n      disabled\n    } = props2;\n    const ids = id.split(\":\");\n    const panelIds = ids.map(id2 => dom.getPanelId(state.context, id2));\n    const panels2 = getHandleBounds(state.context, id);\n    return {\n      disabled: !!disabled,\n      focused: state.context.activeResizeId === id && focused,\n      panelIds,\n      min: panels2?.min,\n      max: panels2?.max,\n      value: 0\n    };\n  }\n  return {\n    focused,\n    dragging,\n    getResizeTriggerState,\n    bounds: getHandleBounds(state.context),\n    setToMinSize(id) {\n      const panel = panels.find(panel2 => panel2.id === id);\n      send({\n        type: \"SET_PANEL_SIZE\",\n        id,\n        size: panel?.minSize,\n        src: \"setToMinSize\"\n      });\n    },\n    setToMaxSize(id) {\n      const panel = panels.find(panel2 => panel2.id === id);\n      send({\n        type: \"SET_PANEL_SIZE\",\n        id,\n        size: panel?.maxSize,\n        src: \"setToMaxSize\"\n      });\n    },\n    setSize(id, size) {\n      send({\n        type: \"SET_PANEL_SIZE\",\n        id,\n        size\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        \"data-orientation\": state.context.orientation,\n        id: dom.getRootId(state.context),\n        dir: state.context.dir,\n        style: {\n          display: \"flex\",\n          flexDirection: horizontal ? \"row\" : \"column\",\n          height: \"100%\",\n          width: \"100%\",\n          overflow: \"hidden\"\n        }\n      });\n    },\n    getPanelProps(props2) {\n      const {\n        id\n      } = props2;\n      return normalize.element({\n        ...parts.panel.attrs,\n        \"data-orientation\": state.context.orientation,\n        dir: state.context.dir,\n        id: dom.getPanelId(state.context, id),\n        \"data-ownedby\": dom.getRootId(state.context),\n        style: dom.getPanelStyle(state.context, id)\n      });\n    },\n    getResizeTriggerProps(props2) {\n      const {\n        id,\n        disabled,\n        step = 1\n      } = props2;\n      const triggerState = getResizeTriggerState(props2);\n      return normalize.element({\n        ...parts.resizeTrigger.attrs,\n        dir: state.context.dir,\n        id: dom.getResizeTriggerId(state.context, id),\n        role: \"separator\",\n        \"data-ownedby\": dom.getRootId(state.context),\n        tabIndex: disabled ? void 0 : 0,\n        \"aria-valuenow\": triggerState.value,\n        \"aria-valuemin\": triggerState.min,\n        \"aria-valuemax\": triggerState.max,\n        \"data-orientation\": state.context.orientation,\n        \"aria-orientation\": state.context.orientation,\n        \"aria-controls\": triggerState.panelIds.join(\" \"),\n        \"data-focus\": dataAttr(triggerState.focused),\n        \"data-disabled\": dataAttr(disabled),\n        style: {\n          touchAction: \"none\",\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\",\n          flex: \"0 0 auto\",\n          pointerEvents: dragging && !triggerState.focused ? \"none\" : void 0,\n          cursor: horizontal ? \"col-resize\" : \"row-resize\",\n          [horizontal ? \"minHeight\" : \"minWidth\"]: \"0\"\n        },\n        onPointerDown(event) {\n          if (disabled) {\n            event.preventDefault();\n            return;\n          }\n          send({\n            type: \"POINTER_DOWN\",\n            id\n          });\n          event.currentTarget.setPointerCapture(event.pointerId);\n          event.preventDefault();\n          event.stopPropagation();\n        },\n        onPointerUp(event) {\n          if (disabled) return;\n          if (event.currentTarget.hasPointerCapture(event.pointerId)) {\n            event.currentTarget.releasePointerCapture(event.pointerId);\n          }\n        },\n        onPointerOver() {\n          if (disabled) return;\n          send({\n            type: \"POINTER_OVER\",\n            id\n          });\n        },\n        onPointerLeave() {\n          if (disabled) return;\n          send({\n            type: \"POINTER_LEAVE\",\n            id\n          });\n        },\n        onBlur() {\n          send(\"BLUR\");\n        },\n        onFocus() {\n          send({\n            type: \"FOCUS\",\n            id\n          });\n        },\n        onDoubleClick() {\n          if (disabled) return;\n          send({\n            type: \"DOUBLE_CLICK\",\n            id\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (disabled) return;\n          const moveStep = getEventStep(event) * step;\n          const keyMap = {\n            Enter() {\n              send(\"ENTER\");\n            },\n            ArrowUp() {\n              send({\n                type: \"ARROW_UP\",\n                step: moveStep\n              });\n            },\n            ArrowDown() {\n              send({\n                type: \"ARROW_DOWN\",\n                step: moveStep\n              });\n            },\n            ArrowLeft() {\n              send({\n                type: \"ARROW_LEFT\",\n                step: moveStep\n              });\n            },\n            ArrowRight() {\n              send({\n                type: \"ARROW_RIGHT\",\n                step: moveStep\n              });\n            },\n            Home() {\n              send(\"HOME\");\n            },\n            End() {\n              send(\"END\");\n            }\n          };\n          const key = getEventKey(event, state.context);\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      });\n    }\n  };\n}\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"splitter\",\n    initial: \"idle\",\n    context: {\n      orientation: \"horizontal\",\n      activeResizeId: null,\n      previousPanels: [],\n      size: [],\n      initialSize: [],\n      activeResizeState: {\n        isAtMin: false,\n        isAtMax: false\n      },\n      ...ctx\n    },\n    created: [\"setPreviousPanels\", \"setInitialSize\"],\n    watch: {\n      size: [\"setActiveResizeState\"]\n    },\n    computed: {\n      isHorizontal: ctx2 => ctx2.orientation === \"horizontal\",\n      panels: ctx2 => getNormalizedPanels(ctx2)\n    },\n    on: {\n      SET_PANEL_SIZE: {\n        actions: \"setPanelSize\"\n      }\n    },\n    states: {\n      idle: {\n        entry: [\"clearActiveHandleId\"],\n        on: {\n          POINTER_OVER: {\n            target: \"hover:temp\",\n            actions: [\"setActiveHandleId\"]\n          },\n          FOCUS: {\n            target: \"focused\",\n            actions: [\"setActiveHandleId\"]\n          },\n          DOUBLE_CLICK: {\n            actions: [\"resetStartPanel\", \"setPreviousPanels\"]\n          }\n        }\n      },\n      \"hover:temp\": {\n        after: {\n          HOVER_DELAY: \"hover\"\n        },\n        on: {\n          POINTER_DOWN: {\n            target: \"dragging\",\n            actions: [\"setActiveHandleId\"]\n          },\n          POINTER_LEAVE: \"idle\"\n        }\n      },\n      hover: {\n        tags: [\"focus\"],\n        on: {\n          POINTER_DOWN: \"dragging\",\n          POINTER_LEAVE: \"idle\"\n        }\n      },\n      focused: {\n        tags: [\"focus\"],\n        on: {\n          BLUR: \"idle\",\n          POINTER_DOWN: {\n            target: \"dragging\",\n            actions: [\"setActiveHandleId\"]\n          },\n          ARROW_LEFT: {\n            guard: \"isHorizontal\",\n            actions: [\"shrinkStartPanel\", \"setPreviousPanels\"]\n          },\n          ARROW_RIGHT: {\n            guard: \"isHorizontal\",\n            actions: [\"expandStartPanel\", \"setPreviousPanels\"]\n          },\n          ARROW_UP: {\n            guard: \"isVertical\",\n            actions: [\"shrinkStartPanel\", \"setPreviousPanels\"]\n          },\n          ARROW_DOWN: {\n            guard: \"isVertical\",\n            actions: [\"expandStartPanel\", \"setPreviousPanels\"]\n          },\n          ENTER: [{\n            guard: \"isStartPanelAtMax\",\n            actions: [\"setStartPanelToMin\", \"setPreviousPanels\"]\n          }, {\n            actions: [\"setStartPanelToMax\", \"setPreviousPanels\"]\n          }],\n          HOME: {\n            actions: [\"setStartPanelToMin\", \"setPreviousPanels\"]\n          },\n          END: {\n            actions: [\"setStartPanelToMax\", \"setPreviousPanels\"]\n          }\n        }\n      },\n      dragging: {\n        tags: [\"focus\"],\n        entry: \"focusResizeHandle\",\n        activities: [\"trackPointerMove\"],\n        on: {\n          POINTER_MOVE: {\n            actions: [\"setPointerValue\", \"setGlobalCursor\", \"invokeOnResize\"]\n          },\n          POINTER_UP: {\n            target: \"focused\",\n            actions: [\"setPreviousPanels\", \"clearGlobalCursor\", \"blurResizeHandle\", \"invokeOnResizeEnd\"]\n          }\n        }\n      }\n    }\n  }, {\n    activities: {\n      trackPointerMove: (ctx2, _evt, {\n        send\n      }) => {\n        const doc = dom.getDoc(ctx2);\n        return trackPointerMove(doc, {\n          onPointerMove(info) {\n            send({\n              type: \"POINTER_MOVE\",\n              point: info.point\n            });\n          },\n          onPointerUp() {\n            send(\"POINTER_UP\");\n          }\n        });\n      }\n    },\n    guards: {\n      isStartPanelAtMin: ctx2 => ctx2.activeResizeState.isAtMin,\n      isStartPanelAtMax: ctx2 => ctx2.activeResizeState.isAtMax,\n      isHorizontal: ctx2 => ctx2.isHorizontal,\n      isVertical: ctx2 => !ctx2.isHorizontal\n    },\n    delays: {\n      HOVER_DELAY: 250\n    },\n    actions: {\n      setGlobalCursor(ctx2) {\n        dom.setupGlobalCursor(ctx2);\n      },\n      clearGlobalCursor(ctx2) {\n        dom.removeGlobalCursor(ctx2);\n      },\n      invokeOnResize(ctx2) {\n        ctx2.onSizeChange?.({\n          size: Array.from(ctx2.size),\n          activeHandleId: ctx2.activeResizeId\n        });\n      },\n      invokeOnResizeEnd(ctx2) {\n        ctx2.onSizeChangeEnd?.({\n          size: Array.from(ctx2.size),\n          activeHandleId: ctx2.activeResizeId\n        });\n      },\n      setActiveHandleId(ctx2, evt) {\n        ctx2.activeResizeId = evt.id;\n      },\n      clearActiveHandleId(ctx2) {\n        ctx2.activeResizeId = null;\n      },\n      setInitialSize(ctx2) {\n        ctx2.initialSize = ctx2.panels.slice().map(panel => ({\n          id: panel.id,\n          size: panel.size\n        }));\n      },\n      setPanelSize(ctx2, evt) {\n        const {\n          id,\n          size\n        } = evt;\n        ctx2.size = ctx2.size.map(panel => {\n          const panelSize = clamp(size, panel.minSize ?? 0, panel.maxSize ?? 100);\n          return panel.id === id ? {\n            ...panel,\n            size: panelSize\n          } : panel;\n        });\n      },\n      setStartPanelToMin(ctx2) {\n        const bounds = getPanelBounds(ctx2);\n        if (!bounds) return;\n        const {\n          before,\n          after\n        } = bounds;\n        ctx2.size[before.index].size = before.min;\n        ctx2.size[after.index].size = after.min;\n      },\n      setStartPanelToMax(ctx2) {\n        const bounds = getPanelBounds(ctx2);\n        if (!bounds) return;\n        const {\n          before,\n          after\n        } = bounds;\n        ctx2.size[before.index].size = before.max;\n        ctx2.size[after.index].size = after.max;\n      },\n      expandStartPanel(ctx2, evt) {\n        const bounds = getPanelBounds(ctx2);\n        if (!bounds) return;\n        const {\n          before,\n          after\n        } = bounds;\n        ctx2.size[before.index].size = before.up(evt.step);\n        ctx2.size[after.index].size = after.down(evt.step);\n      },\n      shrinkStartPanel(ctx2, evt) {\n        const bounds = getPanelBounds(ctx2);\n        if (!bounds) return;\n        const {\n          before,\n          after\n        } = bounds;\n        ctx2.size[before.index].size = before.down(evt.step);\n        ctx2.size[after.index].size = after.up(evt.step);\n      },\n      resetStartPanel(ctx2, evt) {\n        const bounds = getPanelBounds(ctx2, evt.id);\n        if (!bounds) return;\n        const {\n          before,\n          after\n        } = bounds;\n        ctx2.size[before.index].size = ctx2.initialSize[before.index].size;\n        ctx2.size[after.index].size = ctx2.initialSize[after.index].size;\n      },\n      focusResizeHandle(ctx2) {\n        raf(() => {\n          dom.getActiveHandleEl(ctx2)?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      blurResizeHandle(ctx2) {\n        raf(() => {\n          dom.getActiveHandleEl(ctx2)?.blur();\n        });\n      },\n      setPreviousPanels(ctx2) {\n        ctx2.previousPanels = ctx2.panels.slice();\n      },\n      setActiveResizeState(ctx2) {\n        const panels = getPanelBounds(ctx2);\n        if (!panels) return;\n        const {\n          before\n        } = panels;\n        ctx2.activeResizeState = {\n          isAtMin: before.isAtMin,\n          isAtMax: before.isAtMax\n        };\n      },\n      setPointerValue(ctx2, evt) {\n        const panels = getHandlePanels(ctx2);\n        const bounds = getHandleBounds(ctx2);\n        if (!panels || !bounds) return;\n        const rootEl = dom.getRootEl(ctx2);\n        if (!rootEl) return;\n        const relativePoint = getRelativePoint(evt.point, rootEl);\n        const percentValue = relativePoint.getPercentValue({\n          dir: ctx2.dir,\n          orientation: ctx2.orientation\n        });\n        let pointValue = percentValue * 100;\n        ctx2.activeResizeState = {\n          isAtMin: pointValue < bounds.min,\n          isAtMax: pointValue > bounds.max\n        };\n        pointValue = clamp(pointValue, bounds.min, bounds.max);\n        const {\n          before,\n          after\n        } = panels;\n        const offset = pointValue - before.end;\n        ctx2.size[before.index].size = before.size + offset;\n        ctx2.size[after.index].size = after.size - offset;\n      }\n    }\n  });\n}\nvar props = createProps()([\"dir\", \"getRootNode\", \"id\", \"ids\", \"onSizeChange\", \"onSizeChangeEnd\", \"orientation\", \"size\"]);\nvar splitProps = createSplitProps(props);\nvar panelProps = createProps()([\"id\", \"snapSize\"]);\nvar splitPanelProps = createSplitProps(panelProps);\nvar resizeTriggerProps = createProps()([\"disabled\", \"id\", \"step\"]);\nvar splitResizeTriggerProps = createSplitProps(resizeTriggerProps);\nexport { anatomy, connect, machine, panelProps, props, resizeTriggerProps, splitPanelProps, splitProps, splitResizeTriggerProps };","map":{"version":3,"names":["createAnatomy","createScope","queryAll","dataAttr","getEventStep","getEventKey","trackPointerMove","raf","getRelativePoint","createMachine","createSplitProps","compact","createProps","anatomy","parts","build","dom","getRootId","ctx","ids","root","id","getResizeTriggerId","resizeTrigger","getLabelId","label","getPanelId","panel","getGlobalCursorId","getRootEl","getById","getResizeTriggerEl","getPanelEl","getCursor","x","isHorizontal","cursor","activeResizeState","isAtMin","isAtMax","getPanelStyle","flexGrow","panels","find","size","flexBasis","flexShrink","overflow","getActiveHandleEl","activeId","activeResizeId","getResizeTriggerEls","ownerId","CSS","escape","setupGlobalCursor","styleEl","textContent","style","getDoc","createElement","head","appendChild","removeGlobalCursor","remove","validateSize","key","Math","floor","Error","getNormalizedPanels","numOfPanelsWithoutSize","totalSize","totalMinSize","map","minSize","maxSize","end","remainingSize","result","start","getHandlePanels","beforeId","afterId","split","beforeIndex","previousPanels","findIndex","afterIndex","before","after","index","getHandleBounds","min","max","getPanelBounds","bounds","beforeMin","abs","afterMin","beforeMax","afterMax","up","step","down","clamp","value","connect","state","send","normalize","horizontal","context","focused","hasTag","dragging","matches","getResizeTriggerState","props2","disabled","panelIds","id2","panels2","setToMinSize","panel2","type","src","setToMaxSize","setSize","getRootProps","element","attrs","orientation","dir","display","flexDirection","height","width","getPanelProps","getResizeTriggerProps","triggerState","role","tabIndex","join","touchAction","userSelect","WebkitUserSelect","flex","pointerEvents","onPointerDown","event","preventDefault","currentTarget","setPointerCapture","pointerId","stopPropagation","onPointerUp","hasPointerCapture","releasePointerCapture","onPointerOver","onPointerLeave","onBlur","onFocus","onDoubleClick","onKeyDown","defaultPrevented","moveStep","keyMap","Enter","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Home","End","exec","machine","userContext","initial","initialSize","created","watch","computed","ctx2","on","SET_PANEL_SIZE","actions","states","idle","entry","POINTER_OVER","target","FOCUS","DOUBLE_CLICK","HOVER_DELAY","POINTER_DOWN","POINTER_LEAVE","hover","tags","BLUR","ARROW_LEFT","guard","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","ENTER","HOME","END","activities","POINTER_MOVE","POINTER_UP","_evt","doc","onPointerMove","info","point","guards","isStartPanelAtMin","isStartPanelAtMax","isVertical","delays","setGlobalCursor","clearGlobalCursor","invokeOnResize","onSizeChange","Array","from","activeHandleId","invokeOnResizeEnd","onSizeChangeEnd","setActiveHandleId","evt","clearActiveHandleId","setInitialSize","slice","setPanelSize","panelSize","setStartPanelToMin","setStartPanelToMax","expandStartPanel","shrinkStartPanel","resetStartPanel","focusResizeHandle","focus","preventScroll","blurResizeHandle","blur","setPreviousPanels","setActiveResizeState","setPointerValue","rootEl","relativePoint","percentValue","getPercentValue","pointValue","offset","props","splitProps","panelProps","splitPanelProps","resizeTriggerProps","splitResizeTriggerProps"],"sources":["/Users/diegogg98/NEW CRM MAR18/node_modules/@zag-js/splitter/dist/index.mjs"],"sourcesContent":["import { createAnatomy } from '@zag-js/anatomy';\nimport { createScope, queryAll, dataAttr, getEventStep, getEventKey, trackPointerMove, raf, getRelativePoint } from '@zag-js/dom-query';\nimport { createMachine } from '@zag-js/core';\nimport { createSplitProps, compact } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/splitter.anatomy.ts\nvar anatomy = createAnatomy(\"splitter\").parts(\"root\", \"panel\", \"resizeTrigger\");\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: (ctx) => ctx.ids?.root ?? `splitter:${ctx.id}`,\n  getResizeTriggerId: (ctx, id) => ctx.ids?.resizeTrigger?.(id) ?? `splitter:${ctx.id}:splitter:${id}`,\n  getLabelId: (ctx) => ctx.ids?.label ?? `splitter:${ctx.id}:label`,\n  getPanelId: (ctx, id) => ctx.ids?.panel?.(id) ?? `splitter:${ctx.id}:panel:${id}`,\n  getGlobalCursorId: (ctx) => `splitter:${ctx.id}:global-cursor`,\n  getRootEl: (ctx) => dom.getById(ctx, dom.getRootId(ctx)),\n  getResizeTriggerEl: (ctx, id) => dom.getById(ctx, dom.getResizeTriggerId(ctx, id)),\n  getPanelEl: (ctx, id) => dom.getById(ctx, dom.getPanelId(ctx, id)),\n  getCursor(ctx) {\n    const x = ctx.isHorizontal;\n    let cursor = x ? \"col-resize\" : \"row-resize\";\n    if (ctx.activeResizeState.isAtMin) cursor = x ? \"e-resize\" : \"s-resize\";\n    if (ctx.activeResizeState.isAtMax) cursor = x ? \"w-resize\" : \"n-resize\";\n    return cursor;\n  },\n  getPanelStyle(ctx, id) {\n    const flexGrow = ctx.panels.find((panel) => panel.id === id)?.size ?? \"0\";\n    return {\n      flexBasis: 0,\n      flexGrow,\n      flexShrink: 1,\n      overflow: \"hidden\"\n    };\n  },\n  getActiveHandleEl(ctx) {\n    const activeId = ctx.activeResizeId;\n    if (activeId == null) return;\n    return dom.getById(ctx, dom.getResizeTriggerId(ctx, activeId));\n  },\n  getResizeTriggerEls(ctx) {\n    const ownerId = CSS.escape(dom.getRootId(ctx));\n    return queryAll(dom.getRootEl(ctx), `[role=separator][data-ownedby='${ownerId}']`);\n  },\n  setupGlobalCursor(ctx) {\n    const styleEl = dom.getById(ctx, dom.getGlobalCursorId(ctx));\n    const textContent = `* { cursor: ${dom.getCursor(ctx)} !important; }`;\n    if (styleEl) {\n      styleEl.textContent = textContent;\n    } else {\n      const style = dom.getDoc(ctx).createElement(\"style\");\n      style.id = dom.getGlobalCursorId(ctx);\n      style.textContent = textContent;\n      dom.getDoc(ctx).head.appendChild(style);\n    }\n  },\n  removeGlobalCursor(ctx) {\n    dom.getById(ctx, dom.getGlobalCursorId(ctx))?.remove();\n  }\n});\n\n// src/splitter.utils.ts\nfunction validateSize(key, size) {\n  if (Math.floor(size) > 100) {\n    throw new Error(`Total ${key} of panels cannot be greater than 100`);\n  }\n}\nfunction getNormalizedPanels(ctx) {\n  let numOfPanelsWithoutSize = 0;\n  let totalSize = 0;\n  let totalMinSize = 0;\n  const panels = ctx.size.map((panel) => {\n    const minSize = panel.minSize ?? 0;\n    const maxSize = panel.maxSize ?? 100;\n    totalMinSize += minSize;\n    if (panel.size == null) {\n      numOfPanelsWithoutSize++;\n    } else {\n      totalSize += panel.size;\n    }\n    return {\n      ...panel,\n      minSize,\n      maxSize\n    };\n  });\n  validateSize(\"minSize\", totalMinSize);\n  validateSize(\"size\", totalSize);\n  let end = 0;\n  let remainingSize = 0;\n  const result = panels.map((panel) => {\n    let start = end;\n    if (panel.size != null) {\n      end += panel.size;\n      remainingSize = panel.size - panel.minSize;\n      return {\n        ...panel,\n        start,\n        end,\n        remainingSize\n      };\n    }\n    const size = (100 - totalSize) / numOfPanelsWithoutSize;\n    end += size;\n    remainingSize = size - panel.minSize;\n    return { ...panel, size, start, end, remainingSize };\n  });\n  return result;\n}\nfunction getHandlePanels(ctx, id = ctx.activeResizeId) {\n  const [beforeId, afterId] = id?.split(\":\") ?? [];\n  if (!beforeId || !afterId) return;\n  const beforeIndex = ctx.previousPanels.findIndex((panel) => panel.id === beforeId);\n  const afterIndex = ctx.previousPanels.findIndex((panel) => panel.id === afterId);\n  if (beforeIndex === -1 || afterIndex === -1) return;\n  const before = ctx.previousPanels[beforeIndex];\n  const after = ctx.previousPanels[afterIndex];\n  return {\n    before: {\n      ...before,\n      index: beforeIndex\n    },\n    after: {\n      ...after,\n      index: afterIndex\n    }\n  };\n}\nfunction getHandleBounds(ctx, id = ctx.activeResizeId) {\n  const panels = getHandlePanels(ctx, id);\n  if (!panels) return;\n  const { before, after } = panels;\n  return {\n    min: Math.max(before.start + before.minSize, after.end - after.maxSize),\n    max: Math.min(after.end - after.minSize, before.maxSize + before.start)\n  };\n}\nfunction getPanelBounds(ctx, id) {\n  const bounds = getHandleBounds(ctx, id);\n  const panels = getHandlePanels(ctx, id);\n  if (!bounds || !panels) return;\n  const { before, after } = panels;\n  const beforeMin = Math.abs(before.start - bounds.min);\n  const afterMin = after.size + (before.size - beforeMin);\n  const beforeMax = Math.abs(before.start - bounds.max);\n  const afterMax = after.size - (beforeMax - before.size);\n  return {\n    before: {\n      index: before.index,\n      min: beforeMin,\n      max: beforeMax,\n      isAtMin: beforeMin === before.size,\n      isAtMax: beforeMax === before.size,\n      up(step) {\n        return Math.min(before.size + step, beforeMax);\n      },\n      down(step) {\n        return Math.max(before.size - step, beforeMin);\n      }\n    },\n    after: {\n      index: after.index,\n      min: afterMin,\n      max: afterMax,\n      isAtMin: afterMin === after.size,\n      isAtMax: afterMax === after.size,\n      up(step) {\n        return Math.min(after.size + step, afterMin);\n      },\n      down(step) {\n        return Math.max(after.size - step, afterMax);\n      }\n    }\n  };\n}\nfunction clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n// src/splitter.connect.ts\nfunction connect(state, send, normalize) {\n  const horizontal = state.context.isHorizontal;\n  const focused = state.hasTag(\"focus\");\n  const dragging = state.matches(\"dragging\");\n  const panels = state.context.panels;\n  function getResizeTriggerState(props2) {\n    const { id, disabled } = props2;\n    const ids = id.split(\":\");\n    const panelIds = ids.map((id2) => dom.getPanelId(state.context, id2));\n    const panels2 = getHandleBounds(state.context, id);\n    return {\n      disabled: !!disabled,\n      focused: state.context.activeResizeId === id && focused,\n      panelIds,\n      min: panels2?.min,\n      max: panels2?.max,\n      value: 0\n    };\n  }\n  return {\n    focused,\n    dragging,\n    getResizeTriggerState,\n    bounds: getHandleBounds(state.context),\n    setToMinSize(id) {\n      const panel = panels.find((panel2) => panel2.id === id);\n      send({ type: \"SET_PANEL_SIZE\", id, size: panel?.minSize, src: \"setToMinSize\" });\n    },\n    setToMaxSize(id) {\n      const panel = panels.find((panel2) => panel2.id === id);\n      send({ type: \"SET_PANEL_SIZE\", id, size: panel?.maxSize, src: \"setToMaxSize\" });\n    },\n    setSize(id, size) {\n      send({ type: \"SET_PANEL_SIZE\", id, size });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        \"data-orientation\": state.context.orientation,\n        id: dom.getRootId(state.context),\n        dir: state.context.dir,\n        style: {\n          display: \"flex\",\n          flexDirection: horizontal ? \"row\" : \"column\",\n          height: \"100%\",\n          width: \"100%\",\n          overflow: \"hidden\"\n        }\n      });\n    },\n    getPanelProps(props2) {\n      const { id } = props2;\n      return normalize.element({\n        ...parts.panel.attrs,\n        \"data-orientation\": state.context.orientation,\n        dir: state.context.dir,\n        id: dom.getPanelId(state.context, id),\n        \"data-ownedby\": dom.getRootId(state.context),\n        style: dom.getPanelStyle(state.context, id)\n      });\n    },\n    getResizeTriggerProps(props2) {\n      const { id, disabled, step = 1 } = props2;\n      const triggerState = getResizeTriggerState(props2);\n      return normalize.element({\n        ...parts.resizeTrigger.attrs,\n        dir: state.context.dir,\n        id: dom.getResizeTriggerId(state.context, id),\n        role: \"separator\",\n        \"data-ownedby\": dom.getRootId(state.context),\n        tabIndex: disabled ? void 0 : 0,\n        \"aria-valuenow\": triggerState.value,\n        \"aria-valuemin\": triggerState.min,\n        \"aria-valuemax\": triggerState.max,\n        \"data-orientation\": state.context.orientation,\n        \"aria-orientation\": state.context.orientation,\n        \"aria-controls\": triggerState.panelIds.join(\" \"),\n        \"data-focus\": dataAttr(triggerState.focused),\n        \"data-disabled\": dataAttr(disabled),\n        style: {\n          touchAction: \"none\",\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\",\n          flex: \"0 0 auto\",\n          pointerEvents: dragging && !triggerState.focused ? \"none\" : void 0,\n          cursor: horizontal ? \"col-resize\" : \"row-resize\",\n          [horizontal ? \"minHeight\" : \"minWidth\"]: \"0\"\n        },\n        onPointerDown(event) {\n          if (disabled) {\n            event.preventDefault();\n            return;\n          }\n          send({ type: \"POINTER_DOWN\", id });\n          event.currentTarget.setPointerCapture(event.pointerId);\n          event.preventDefault();\n          event.stopPropagation();\n        },\n        onPointerUp(event) {\n          if (disabled) return;\n          if (event.currentTarget.hasPointerCapture(event.pointerId)) {\n            event.currentTarget.releasePointerCapture(event.pointerId);\n          }\n        },\n        onPointerOver() {\n          if (disabled) return;\n          send({ type: \"POINTER_OVER\", id });\n        },\n        onPointerLeave() {\n          if (disabled) return;\n          send({ type: \"POINTER_LEAVE\", id });\n        },\n        onBlur() {\n          send(\"BLUR\");\n        },\n        onFocus() {\n          send({ type: \"FOCUS\", id });\n        },\n        onDoubleClick() {\n          if (disabled) return;\n          send({ type: \"DOUBLE_CLICK\", id });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (disabled) return;\n          const moveStep = getEventStep(event) * step;\n          const keyMap = {\n            Enter() {\n              send(\"ENTER\");\n            },\n            ArrowUp() {\n              send({ type: \"ARROW_UP\", step: moveStep });\n            },\n            ArrowDown() {\n              send({ type: \"ARROW_DOWN\", step: moveStep });\n            },\n            ArrowLeft() {\n              send({ type: \"ARROW_LEFT\", step: moveStep });\n            },\n            ArrowRight() {\n              send({ type: \"ARROW_RIGHT\", step: moveStep });\n            },\n            Home() {\n              send(\"HOME\");\n            },\n            End() {\n              send(\"END\");\n            }\n          };\n          const key = getEventKey(event, state.context);\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        }\n      });\n    }\n  };\n}\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine(\n    {\n      id: \"splitter\",\n      initial: \"idle\",\n      context: {\n        orientation: \"horizontal\",\n        activeResizeId: null,\n        previousPanels: [],\n        size: [],\n        initialSize: [],\n        activeResizeState: {\n          isAtMin: false,\n          isAtMax: false\n        },\n        ...ctx\n      },\n      created: [\"setPreviousPanels\", \"setInitialSize\"],\n      watch: {\n        size: [\"setActiveResizeState\"]\n      },\n      computed: {\n        isHorizontal: (ctx2) => ctx2.orientation === \"horizontal\",\n        panels: (ctx2) => getNormalizedPanels(ctx2)\n      },\n      on: {\n        SET_PANEL_SIZE: {\n          actions: \"setPanelSize\"\n        }\n      },\n      states: {\n        idle: {\n          entry: [\"clearActiveHandleId\"],\n          on: {\n            POINTER_OVER: {\n              target: \"hover:temp\",\n              actions: [\"setActiveHandleId\"]\n            },\n            FOCUS: {\n              target: \"focused\",\n              actions: [\"setActiveHandleId\"]\n            },\n            DOUBLE_CLICK: {\n              actions: [\"resetStartPanel\", \"setPreviousPanels\"]\n            }\n          }\n        },\n        \"hover:temp\": {\n          after: {\n            HOVER_DELAY: \"hover\"\n          },\n          on: {\n            POINTER_DOWN: {\n              target: \"dragging\",\n              actions: [\"setActiveHandleId\"]\n            },\n            POINTER_LEAVE: \"idle\"\n          }\n        },\n        hover: {\n          tags: [\"focus\"],\n          on: {\n            POINTER_DOWN: \"dragging\",\n            POINTER_LEAVE: \"idle\"\n          }\n        },\n        focused: {\n          tags: [\"focus\"],\n          on: {\n            BLUR: \"idle\",\n            POINTER_DOWN: {\n              target: \"dragging\",\n              actions: [\"setActiveHandleId\"]\n            },\n            ARROW_LEFT: {\n              guard: \"isHorizontal\",\n              actions: [\"shrinkStartPanel\", \"setPreviousPanels\"]\n            },\n            ARROW_RIGHT: {\n              guard: \"isHorizontal\",\n              actions: [\"expandStartPanel\", \"setPreviousPanels\"]\n            },\n            ARROW_UP: {\n              guard: \"isVertical\",\n              actions: [\"shrinkStartPanel\", \"setPreviousPanels\"]\n            },\n            ARROW_DOWN: {\n              guard: \"isVertical\",\n              actions: [\"expandStartPanel\", \"setPreviousPanels\"]\n            },\n            ENTER: [\n              {\n                guard: \"isStartPanelAtMax\",\n                actions: [\"setStartPanelToMin\", \"setPreviousPanels\"]\n              },\n              { actions: [\"setStartPanelToMax\", \"setPreviousPanels\"] }\n            ],\n            HOME: {\n              actions: [\"setStartPanelToMin\", \"setPreviousPanels\"]\n            },\n            END: {\n              actions: [\"setStartPanelToMax\", \"setPreviousPanels\"]\n            }\n          }\n        },\n        dragging: {\n          tags: [\"focus\"],\n          entry: \"focusResizeHandle\",\n          activities: [\"trackPointerMove\"],\n          on: {\n            POINTER_MOVE: {\n              actions: [\"setPointerValue\", \"setGlobalCursor\", \"invokeOnResize\"]\n            },\n            POINTER_UP: {\n              target: \"focused\",\n              actions: [\"setPreviousPanels\", \"clearGlobalCursor\", \"blurResizeHandle\", \"invokeOnResizeEnd\"]\n            }\n          }\n        }\n      }\n    },\n    {\n      activities: {\n        trackPointerMove: (ctx2, _evt, { send }) => {\n          const doc = dom.getDoc(ctx2);\n          return trackPointerMove(doc, {\n            onPointerMove(info) {\n              send({ type: \"POINTER_MOVE\", point: info.point });\n            },\n            onPointerUp() {\n              send(\"POINTER_UP\");\n            }\n          });\n        }\n      },\n      guards: {\n        isStartPanelAtMin: (ctx2) => ctx2.activeResizeState.isAtMin,\n        isStartPanelAtMax: (ctx2) => ctx2.activeResizeState.isAtMax,\n        isHorizontal: (ctx2) => ctx2.isHorizontal,\n        isVertical: (ctx2) => !ctx2.isHorizontal\n      },\n      delays: {\n        HOVER_DELAY: 250\n      },\n      actions: {\n        setGlobalCursor(ctx2) {\n          dom.setupGlobalCursor(ctx2);\n        },\n        clearGlobalCursor(ctx2) {\n          dom.removeGlobalCursor(ctx2);\n        },\n        invokeOnResize(ctx2) {\n          ctx2.onSizeChange?.({ size: Array.from(ctx2.size), activeHandleId: ctx2.activeResizeId });\n        },\n        invokeOnResizeEnd(ctx2) {\n          ctx2.onSizeChangeEnd?.({ size: Array.from(ctx2.size), activeHandleId: ctx2.activeResizeId });\n        },\n        setActiveHandleId(ctx2, evt) {\n          ctx2.activeResizeId = evt.id;\n        },\n        clearActiveHandleId(ctx2) {\n          ctx2.activeResizeId = null;\n        },\n        setInitialSize(ctx2) {\n          ctx2.initialSize = ctx2.panels.slice().map((panel) => ({\n            id: panel.id,\n            size: panel.size\n          }));\n        },\n        setPanelSize(ctx2, evt) {\n          const { id, size } = evt;\n          ctx2.size = ctx2.size.map((panel) => {\n            const panelSize = clamp(size, panel.minSize ?? 0, panel.maxSize ?? 100);\n            return panel.id === id ? { ...panel, size: panelSize } : panel;\n          });\n        },\n        setStartPanelToMin(ctx2) {\n          const bounds = getPanelBounds(ctx2);\n          if (!bounds) return;\n          const { before, after } = bounds;\n          ctx2.size[before.index].size = before.min;\n          ctx2.size[after.index].size = after.min;\n        },\n        setStartPanelToMax(ctx2) {\n          const bounds = getPanelBounds(ctx2);\n          if (!bounds) return;\n          const { before, after } = bounds;\n          ctx2.size[before.index].size = before.max;\n          ctx2.size[after.index].size = after.max;\n        },\n        expandStartPanel(ctx2, evt) {\n          const bounds = getPanelBounds(ctx2);\n          if (!bounds) return;\n          const { before, after } = bounds;\n          ctx2.size[before.index].size = before.up(evt.step);\n          ctx2.size[after.index].size = after.down(evt.step);\n        },\n        shrinkStartPanel(ctx2, evt) {\n          const bounds = getPanelBounds(ctx2);\n          if (!bounds) return;\n          const { before, after } = bounds;\n          ctx2.size[before.index].size = before.down(evt.step);\n          ctx2.size[after.index].size = after.up(evt.step);\n        },\n        resetStartPanel(ctx2, evt) {\n          const bounds = getPanelBounds(ctx2, evt.id);\n          if (!bounds) return;\n          const { before, after } = bounds;\n          ctx2.size[before.index].size = ctx2.initialSize[before.index].size;\n          ctx2.size[after.index].size = ctx2.initialSize[after.index].size;\n        },\n        focusResizeHandle(ctx2) {\n          raf(() => {\n            dom.getActiveHandleEl(ctx2)?.focus({ preventScroll: true });\n          });\n        },\n        blurResizeHandle(ctx2) {\n          raf(() => {\n            dom.getActiveHandleEl(ctx2)?.blur();\n          });\n        },\n        setPreviousPanels(ctx2) {\n          ctx2.previousPanels = ctx2.panels.slice();\n        },\n        setActiveResizeState(ctx2) {\n          const panels = getPanelBounds(ctx2);\n          if (!panels) return;\n          const { before } = panels;\n          ctx2.activeResizeState = {\n            isAtMin: before.isAtMin,\n            isAtMax: before.isAtMax\n          };\n        },\n        setPointerValue(ctx2, evt) {\n          const panels = getHandlePanels(ctx2);\n          const bounds = getHandleBounds(ctx2);\n          if (!panels || !bounds) return;\n          const rootEl = dom.getRootEl(ctx2);\n          if (!rootEl) return;\n          const relativePoint = getRelativePoint(evt.point, rootEl);\n          const percentValue = relativePoint.getPercentValue({\n            dir: ctx2.dir,\n            orientation: ctx2.orientation\n          });\n          let pointValue = percentValue * 100;\n          ctx2.activeResizeState = {\n            isAtMin: pointValue < bounds.min,\n            isAtMax: pointValue > bounds.max\n          };\n          pointValue = clamp(pointValue, bounds.min, bounds.max);\n          const { before, after } = panels;\n          const offset = pointValue - before.end;\n          ctx2.size[before.index].size = before.size + offset;\n          ctx2.size[after.index].size = after.size - offset;\n        }\n      }\n    }\n  );\n}\nvar props = createProps()([\n  \"dir\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"onSizeChange\",\n  \"onSizeChangeEnd\",\n  \"orientation\",\n  \"size\"\n]);\nvar splitProps = createSplitProps(props);\nvar panelProps = createProps()([\"id\", \"snapSize\"]);\nvar splitPanelProps = createSplitProps(panelProps);\nvar resizeTriggerProps = createProps()([\"disabled\", \"id\", \"step\"]);\nvar splitResizeTriggerProps = createSplitProps(resizeTriggerProps);\n\nexport { anatomy, connect, machine, panelProps, props, resizeTriggerProps, splitPanelProps, splitProps, splitResizeTriggerProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}