{"ast":null,"code":"/**\n * Service for MCP (Mini Client Protocol) \n * Used for executing direct SQL queries to our custom PostgreSQL server\n */// The base URL where our MCP server is running\nconst MCP_URL='http://localhost:3100';/**\n * Execute a SQL query against the MCP server\n * @param query SQL query to execute\n * @returns QueryResponse with data array or error message\n */export const executeQuery=async query=>{try{console.log('üîç MCP Service: Ejecutando consulta:',query);const response=await fetch(`${MCP_URL}/query`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query})});const result=await response.json();console.log('üîç MCP Service: Respuesta completa:',result);if(!response.ok){console.error('üîç MCP Service: Error en la respuesta:',result);throw new Error(result.error||'Error executing query');}// La respuesta del MCP server tiene formato { data: [...], metadata: {...} }\n// O simplemente es un array directamente\nif(result.data){return{data:result.data};}else if(Array.isArray(result)){return{data:result};}else{console.log('üîç MCP Service: Estructura de datos at√≠pica:',result);return{data:result};}}catch(error){console.error('üîç MCP Service: Error:',error);return{error:error.message||'Error connecting to MCP server'};}};/**\n * Simple ping to check if MCP server is available\n * @returns true if server is available, false otherwise\n */export const pingMcpServer=async()=>{try{const response=await fetch(`${MCP_URL}/ping`);return response.ok;}catch(error){console.error('MCP server ping failed:',error);return false;}};","map":{"version":3,"names":["MCP_URL","executeQuery","query","console","log","response","fetch","method","headers","body","JSON","stringify","result","json","ok","error","Error","data","Array","isArray","message","pingMcpServer"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/mcpService.ts"],"sourcesContent":["/**\n * Service for MCP (Mini Client Protocol) \n * Used for executing direct SQL queries to our custom PostgreSQL server\n */\n\n// The base URL where our MCP server is running\nconst MCP_URL = 'http://localhost:3100';\n\ninterface QueryResponse {\n  data?: any[];\n  error?: string;\n}\n\n/**\n * Execute a SQL query against the MCP server\n * @param query SQL query to execute\n * @returns QueryResponse with data array or error message\n */\nexport const executeQuery = async (query: string): Promise<QueryResponse> => {\n  try {\n    console.log('üîç MCP Service: Ejecutando consulta:', query);\n    \n    const response = await fetch(`${MCP_URL}/query`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ query }),\n    });\n\n    const result = await response.json();\n    console.log('üîç MCP Service: Respuesta completa:', result);\n\n    if (!response.ok) {\n      console.error('üîç MCP Service: Error en la respuesta:', result);\n      throw new Error(result.error || 'Error executing query');\n    }\n\n    // La respuesta del MCP server tiene formato { data: [...], metadata: {...} }\n    // O simplemente es un array directamente\n    if (result.data) {\n      return { data: result.data };\n    } else if (Array.isArray(result)) {\n      return { data: result };\n    } else {\n      console.log('üîç MCP Service: Estructura de datos at√≠pica:', result);\n      return { data: result };\n    }\n  } catch (error: any) {\n    console.error('üîç MCP Service: Error:', error);\n    return { error: error.message || 'Error connecting to MCP server' };\n  }\n};\n\n/**\n * Simple ping to check if MCP server is available\n * @returns true if server is available, false otherwise\n */\nexport const pingMcpServer = async (): Promise<boolean> => {\n  try {\n    const response = await fetch(`${MCP_URL}/ping`);\n    return response.ok;\n  } catch (error) {\n    console.error('MCP server ping failed:', error);\n    return false;\n  }\n}; "],"mappings":"AAAA;AACA;AACA;AACA,GAEA;AACA,KAAM,CAAAA,OAAO,CAAG,uBAAuB,CAOvC;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAO,CAAAC,KAAa,EAA6B,CAC3E,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAEF,KAAK,CAAC,CAE1D,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGN,OAAO,QAAQ,CAAE,CAC/CO,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAET,KAAM,CAAC,CAChC,CAAC,CAAC,CAEF,KAAM,CAAAU,MAAM,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACpCV,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAEQ,MAAM,CAAC,CAE1D,GAAI,CAACP,QAAQ,CAACS,EAAE,CAAE,CAChBX,OAAO,CAACY,KAAK,CAAC,wCAAwC,CAAEH,MAAM,CAAC,CAC/D,KAAM,IAAI,CAAAI,KAAK,CAACJ,MAAM,CAACG,KAAK,EAAI,uBAAuB,CAAC,CAC1D,CAEA;AACA;AACA,GAAIH,MAAM,CAACK,IAAI,CAAE,CACf,MAAO,CAAEA,IAAI,CAAEL,MAAM,CAACK,IAAK,CAAC,CAC9B,CAAC,IAAM,IAAIC,KAAK,CAACC,OAAO,CAACP,MAAM,CAAC,CAAE,CAChC,MAAO,CAAEK,IAAI,CAAEL,MAAO,CAAC,CACzB,CAAC,IAAM,CACLT,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAEQ,MAAM,CAAC,CACnE,MAAO,CAAEK,IAAI,CAAEL,MAAO,CAAC,CACzB,CACF,CAAE,MAAOG,KAAU,CAAE,CACnBZ,OAAO,CAACY,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,MAAO,CAAEA,KAAK,CAAEA,KAAK,CAACK,OAAO,EAAI,gCAAiC,CAAC,CACrE,CACF,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,aAAa,CAAG,KAAAA,CAAA,GAA8B,CACzD,GAAI,CACF,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGN,OAAO,OAAO,CAAC,CAC/C,MAAO,CAAAK,QAAQ,CAACS,EAAE,CACpB,CAAE,MAAOC,KAAK,CAAE,CACdZ,OAAO,CAACY,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,MAAO,MAAK,CACd,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}