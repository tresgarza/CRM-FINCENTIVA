{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';import{useAuth}from'./AuthContext';import{hasPermission,hasAllPermissions,hasAnyPermission}from'../utils/constants/permissions';import{USER_ROLES}from'../utils/constants/roles';import{jsx as _jsx}from\"react/jsx-runtime\";const PermissionsContext=/*#__PURE__*/createContext(undefined);export const usePermissions=()=>{const context=useContext(PermissionsContext);if(context===undefined){throw new Error('usePermissions must be used within a PermissionsProvider');}return context;};export const PermissionsProvider=_ref=>{let{children}=_ref;const{user}=useAuth();const[userPermissions,setUserPermissions]=useState([]);const userCan=permission=>{if(!user||!user.role)return false;// El SUPERADMIN siempre tiene todos los permisos\nif(user.role===USER_ROLES.SUPERADMIN){return true;}// Para otros roles, usar la función de utilidad\nreturn hasPermission(user.role,permission);};const userCanAll=permissions=>{if(!user||!user.role)return false;// El SUPERADMIN siempre tiene todos los permisos\nif(user.role===USER_ROLES.SUPERADMIN){return true;}// Para otros roles, verificar cada permiso\nreturn hasAllPermissions(user.role,permissions);};const userCanAny=permissions=>{if(!user||!user.role)return false;// El SUPERADMIN siempre tiene todos los permisos\nif(user.role===USER_ROLES.SUPERADMIN){return true;}// Para otros roles, verificar si tiene al menos un permiso\nreturn hasAnyPermission(user.role,permissions);};// Determina si se deben filtrar los datos por entidad (asesor o empresa)\nconst shouldFilterByEntity=()=>{if(!user||!user.role)return false;// Solo los roles de asesor y admin de empresa necesitan filtrado\nreturn user.role===USER_ROLES.ADVISOR||user.role===USER_ROLES.COMPANY_ADMIN;};// Obtiene el filtro apropiado según el rol del usuario\nconst getEntityFilter=()=>{if(!user||!user.role||!user.entityId)return null;// No filtrar para administradores\nif(user.role===USER_ROLES.SUPERADMIN){return null;}// Filtro para asesores: solicitudes donde advisor_id = user.entityId\nif(user.role===USER_ROLES.ADVISOR){return{advisor_id:user.entityId};}// Filtro para administradores de empresa: solicitudes donde company_id = user.entityId\nif(user.role===USER_ROLES.COMPANY_ADMIN){return{company_id:user.entityId};}return null;};const isAdmin=()=>{return(user===null||user===void 0?void 0:user.role)===USER_ROLES.SUPERADMIN;};const isAdvisor=()=>{return(user===null||user===void 0?void 0:user.role)===USER_ROLES.ADVISOR;};const isCompanyAdmin=()=>{return(user===null||user===void 0?void 0:user.role)===USER_ROLES.COMPANY_ADMIN;};const loadPermissions=async()=>{// Implementation of loadPermissions\n};const value={userCan,userCanAll,userCanAny,shouldFilterByEntity,getEntityFilter,isAdmin,isAdvisor,isCompanyAdmin,loadPermissions};return/*#__PURE__*/_jsx(PermissionsContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useAuth","hasPermission","hasAllPermissions","hasAnyPermission","USER_ROLES","jsx","_jsx","PermissionsContext","undefined","usePermissions","context","Error","PermissionsProvider","_ref","children","user","userPermissions","setUserPermissions","userCan","permission","role","SUPERADMIN","userCanAll","permissions","userCanAny","shouldFilterByEntity","ADVISOR","COMPANY_ADMIN","getEntityFilter","entityId","advisor_id","company_id","isAdmin","isAdvisor","isCompanyAdmin","loadPermissions","value","Provider"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/PermissionsContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport { useAuth } from './AuthContext';\nimport { PERMISSIONS, hasPermission, hasAllPermissions, hasAnyPermission } from '../utils/constants/permissions';\nimport { USER_ROLES } from '../utils/constants/roles';\n\ninterface PermissionsContextType {\n  userCan: (permission: PERMISSIONS) => boolean;\n  userCanAll: (permissions: PERMISSIONS[]) => boolean;\n  userCanAny: (permissions: PERMISSIONS[]) => boolean;\n  getEntityFilter: () => Record<string, any> | null;\n  shouldFilterByEntity: () => boolean;\n  isAdmin: () => boolean;\n  isAdvisor: () => boolean;\n  isCompanyAdmin: () => boolean;\n  loadPermissions: () => Promise<void>;\n}\n\nconst PermissionsContext = createContext<PermissionsContextType | undefined>(undefined);\n\nexport const usePermissions = () => {\n  const context = useContext(PermissionsContext);\n  if (context === undefined) {\n    throw new Error('usePermissions must be used within a PermissionsProvider');\n  }\n  return context;\n};\n\nexport const PermissionsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user } = useAuth();\n  const [userPermissions, setUserPermissions] = useState<string[]>([]);\n\n  const userCan = (permission: PERMISSIONS): boolean => {\n    if (!user || !user.role) return false;\n    \n    // El SUPERADMIN siempre tiene todos los permisos\n    if (user.role === USER_ROLES.SUPERADMIN) {\n      return true;\n    }\n    \n    // Para otros roles, usar la función de utilidad\n    return hasPermission(user.role as any, permission);\n  };\n\n  const userCanAll = (permissions: PERMISSIONS[]): boolean => {\n    if (!user || !user.role) return false;\n    \n    // El SUPERADMIN siempre tiene todos los permisos\n    if (user.role === USER_ROLES.SUPERADMIN) {\n      return true;\n    }\n    \n    // Para otros roles, verificar cada permiso\n    return hasAllPermissions(user.role as any, permissions);\n  };\n\n  const userCanAny = (permissions: PERMISSIONS[]): boolean => {\n    if (!user || !user.role) return false;\n    \n    // El SUPERADMIN siempre tiene todos los permisos\n    if (user.role === USER_ROLES.SUPERADMIN) {\n      return true;\n    }\n    \n    // Para otros roles, verificar si tiene al menos un permiso\n    return hasAnyPermission(user.role as any, permissions);\n  };\n\n  // Determina si se deben filtrar los datos por entidad (asesor o empresa)\n  const shouldFilterByEntity = (): boolean => {\n    if (!user || !user.role) return false;\n    \n    // Solo los roles de asesor y admin de empresa necesitan filtrado\n    return user.role === USER_ROLES.ADVISOR || user.role === USER_ROLES.COMPANY_ADMIN;\n  };\n\n  // Obtiene el filtro apropiado según el rol del usuario\n  const getEntityFilter = (): Record<string, any> | null => {\n    if (!user || !user.role || !user.entityId) return null;\n    \n    // No filtrar para administradores\n    if (user.role === USER_ROLES.SUPERADMIN) {\n      return null;\n    }\n    \n    // Filtro para asesores: solicitudes donde advisor_id = user.entityId\n    if (user.role === USER_ROLES.ADVISOR) {\n      return { advisor_id: user.entityId };\n    }\n    \n    // Filtro para administradores de empresa: solicitudes donde company_id = user.entityId\n    if (user.role === USER_ROLES.COMPANY_ADMIN) {\n      return { company_id: user.entityId };\n    }\n    \n    return null;\n  };\n\n  const isAdmin = () => {\n    return user?.role === USER_ROLES.SUPERADMIN;\n  };\n  \n  const isAdvisor = () => {\n    return user?.role === USER_ROLES.ADVISOR;\n  };\n  \n  const isCompanyAdmin = () => {\n    return user?.role === USER_ROLES.COMPANY_ADMIN;\n  };\n\n  const loadPermissions = async () => {\n    // Implementation of loadPermissions\n  };\n\n  const value = {\n    userCan,\n    userCanAll,\n    userCanAny,\n    shouldFilterByEntity,\n    getEntityFilter,\n    isAdmin,\n    isAdvisor,\n    isCompanyAdmin,\n    loadPermissions,\n  };\n\n  return <PermissionsContext.Provider value={value}>{children}</PermissionsContext.Provider>;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}