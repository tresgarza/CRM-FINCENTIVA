{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/pages/NewClient.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport MainLayout from '../components/layout/MainLayout';\nimport ClientForm from '../components/clients/ClientForm';\nimport { createClient, updateClient } from '../services/clientService';\nimport Alert from '../components/ui/Alert';\n\n// Default company ID (Herramental)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_COMPANY_ID = \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\";\nconst NewClient = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    user\n  } = useAuth();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [sectionSubmitting, setSectionSubmitting] = useState(false);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [draftClient, setDraftClient] = useState(null);\n  const [temporaryClientId, setTemporaryClientId] = useState(null);\n  const [documents, setDocuments] = useState([]);\n  const [showUserFields, setShowUserFields] = useState(false);\n  const location = useLocation();\n\n  // Check if the user has permission to manage users\n  useEffect(() => {\n    // Only superadmins can create users with roles\n    if (user && user.role === 'SUPERADMIN') {\n      setShowUserFields(true);\n    }\n  }, [user]);\n\n  // Cargar datos del cliente en borrador si existen en localStorage al iniciar\n  useEffect(() => {\n    try {\n      const savedDraft = localStorage.getItem('draftClient');\n      const savedClientId = localStorage.getItem('temporaryClientId');\n      const savedDocuments = localStorage.getItem('temporaryDocuments');\n      if (savedDraft) {\n        console.log('Recuperando datos del cliente del localStorage:', savedDraft);\n        setDraftClient(JSON.parse(savedDraft));\n      }\n      if (savedClientId) {\n        console.log('Recuperando ID de cliente temporal:', savedClientId);\n        setTemporaryClientId(savedClientId);\n      }\n      if (savedDocuments) {\n        console.log('Recuperando documentos temporales del localStorage');\n        // No podemos guardar los objetos File directamente en localStorage, \n        // así que los documentos se gestionan en memoria hasta el envío final\n      }\n    } catch (e) {\n      console.error('Error loading draft from localStorage:', e);\n    }\n  }, []);\n  const handleSubmit = async (data, clientDocuments) => {\n    setIsSubmitting(true);\n    setError(null);\n    console.log('Submitting client data:', data);\n    try {\n      // Si el usuario es asesor o admin de empresa, asignar los IDs correspondientes\n      const clientData = {\n        ...data\n      };\n\n      // Handle advisor_id assignment\n      if (user && user.role === 'ADVISOR') {\n        clientData.advisor_id = user.id;\n      }\n\n      // Handle the company_id requirement - only set default if not selected in form\n      if (!clientData.company_id) {\n        console.log('No company selected in form, applying default/user company logic');\n        if (user) {\n          if (user.role === 'COMPANY_ADMIN') {\n            clientData.company_id = user.entityId;\n            console.log('Using company_id from COMPANY_ADMIN user:', clientData.company_id);\n          } else {\n            // For other roles without company selection, use default\n            clientData.company_id = DEFAULT_COMPANY_ID;\n            console.log('Using default company_id for user with role:', user.role);\n          }\n        } else {\n          // No user information available, use default company_id\n          clientData.company_id = DEFAULT_COMPANY_ID;\n          console.log('No user context, using default company_id');\n        }\n      } else {\n        console.log('Using company_id selected in form:', clientData.company_id);\n      }\n\n      // Si ya tenemos un cliente temporal, actualizar en vez de crear\n      let newClient;\n      if (temporaryClientId) {\n        console.log(`Updating temporary client with ID ${temporaryClientId}`);\n        newClient = await updateClient(temporaryClientId, clientData, clientDocuments, user === null || user === void 0 ? void 0 : user.id);\n        console.log('Client updated successfully:', newClient);\n      } else {\n        // Crear nuevo cliente\n        console.log('Creando nuevo cliente sin ID temporal');\n        newClient = await createClient(clientData, clientDocuments, user === null || user === void 0 ? void 0 : user.id);\n        console.log('Client created successfully:', newClient);\n      }\n\n      // Check if there's a warning message (e.g., some documents failed to upload)\n      if (newClient.warningMessage) {\n        setSuccessMessage(newClient.warningMessage);\n        setIsSubmitting(false);\n        // No limpiamos localStorage ni navegamos para que el usuario pueda intentar subir documentos nuevamente\n        return;\n      }\n      console.log('Client created/updated successfully:', newClient);\n\n      // Clear local storage\n      localStorage.removeItem('draftClient');\n      localStorage.removeItem('clientFormStep');\n      localStorage.removeItem('temporaryClientId');\n      localStorage.removeItem('temporaryDocuments');\n\n      // Redireccionar a la lista de clientes\n      navigate('/clients');\n    } catch (error) {\n      console.error('Error al crear cliente:', error);\n      setError(error.message || 'Error al crear el cliente. Por favor, intente de nuevo.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  const handleSavePartial = async (data, step) => {\n    try {\n      setSectionSubmitting(true);\n      setError(null); // Limpiar errores anteriores\n      console.log(`Saving partial data for step ${step}:`, data);\n\n      // Asegurarnos de que tenemos todos los campos requeridos\n      const partialData = collectFieldsForStep(data, step);\n\n      // Asignar campos importantes si no están presentes\n      if (user && user.role === 'ADVISOR' && !partialData.advisor_id) {\n        partialData.advisor_id = user.id;\n      }\n      if (!partialData.company_id) {\n        if (user && user.role === 'COMPANY_ADMIN') {\n          partialData.company_id = user.entityId;\n        } else {\n          partialData.company_id = DEFAULT_COMPANY_ID;\n        }\n      }\n\n      // Update our local draft client data\n      const updatedDraftClient = {\n        ...draftClient,\n        ...partialData\n      };\n      setDraftClient(updatedDraftClient);\n\n      // Guardar los datos en Supabase\n      try {\n        // Si ya tenemos un ID de cliente temporal, actualizar\n        if (temporaryClientId) {\n          console.log(`Updating temporary client with ID ${temporaryClientId}`);\n          const updatedClient = await updateClient(temporaryClientId, partialData);\n          console.log('Client updated successfully:', updatedClient);\n          if (!updatedClient) {\n            throw new Error('No se recibió respuesta después de la actualización');\n          }\n\n          // Check if there's a warning message\n          if (updatedClient.warningMessage) {\n            setSuccessMessage(updatedClient.warningMessage);\n          } else {\n            setSuccessMessage(`Los datos de la sección ${step} se han guardado correctamente.`);\n          }\n\n          // Clear success message after 3 seconds\n          setTimeout(() => {\n            setSuccessMessage(null);\n          }, 3000);\n        }\n        // Si es la primera vez que guardamos, crear un cliente temporal\n        else if (step === 1) {\n          console.log('Creating temporary client');\n\n          // Nos aseguramos de tener al menos nombre y apellido para el cliente temporal\n          if (!partialData.first_name || !partialData.paternal_surname) {\n            setError('Debe proporcionar al menos nombre y apellido paterno para guardar.');\n            setSectionSubmitting(false);\n            return null;\n          }\n          const newClient = await createClient(partialData, [], user === null || user === void 0 ? void 0 : user.id);\n          console.log('Temporary client created successfully:', newClient);\n          if (newClient && newClient.id) {\n            setTemporaryClientId(newClient.id);\n            localStorage.setItem('temporaryClientId', newClient.id);\n          } else {\n            throw new Error('No se recibió un ID de cliente después de la creación');\n          }\n        } else {\n          console.log('No se puede guardar en Supabase sin haber completado el paso 1 primero');\n          // En este caso, solo guardamos en localStorage\n        }\n\n        // Save to local storage for persistence\n        localStorage.setItem('draftClient', JSON.stringify(updatedDraftClient));\n        return updatedDraftClient;\n      } catch (e) {\n        console.error('Error saving to Supabase:', e);\n\n        // Log more details about the error\n        if (e.message) console.error('Error message:', e.message);\n        if (e.cause) console.error('Error cause:', e.cause);\n        if (e.stack) console.error('Error stack:', e.stack);\n\n        // Try to get more information if it's a Supabase error\n        if (e.code || e.details || e.hint) {\n          console.error('Supabase error details:', {\n            code: e.code,\n            details: e.details,\n            hint: e.hint\n          });\n        }\n        setError(`Error al guardar los datos en el servidor: ${e.message || 'Error desconocido'}`);\n\n        // Aún así actualizamos localStorage\n        try {\n          localStorage.setItem('draftClient', JSON.stringify(updatedDraftClient));\n        } catch (storageError) {\n          console.error('Error saving to localStorage:', storageError);\n        }\n        return null;\n      }\n    } catch (error) {\n      console.error('Error saving partial data:', error);\n      setError('Error al guardar los datos parciales.');\n      return null;\n    } finally {\n      setSectionSubmitting(false);\n    }\n  };\n\n  // Helper to ensure we have all required fields\n  const ensureRequiredFields = clientData => {\n    // Handle advisor_id assignment\n    if (user && user.role === 'ADVISOR') {\n      clientData.advisor_id = user.id;\n    }\n\n    // Handle the company_id requirement - only set default if not selected in form\n    if (!clientData.company_id) {\n      console.log('🔍 No se seleccionó empresa en el formulario, aplicando lógica predeterminada');\n      if (user) {\n        if (user.role === 'COMPANY_ADMIN') {\n          clientData.company_id = user.entityId;\n          console.log('🔍 Usando company_id del usuario COMPANY_ADMIN:', clientData.company_id);\n        } else {\n          // For other roles without company selection, use default\n          clientData.company_id = DEFAULT_COMPANY_ID;\n          console.log('🔍 Usando company_id predeterminado para usuario con rol:', user.role);\n        }\n      } else {\n        // No user information available, use default company_id\n        clientData.company_id = DEFAULT_COMPANY_ID;\n        console.log('🔍 Sin contexto de usuario, usando company_id predeterminado');\n      }\n    } else {\n      console.log('🔍 Usando company_id seleccionado en el formulario:', clientData.company_id);\n    }\n  };\n\n  // Helper to collect fields based on step\n  const collectFieldsForStep = (data, step) => {\n    const result = {};\n\n    // Always preserve these fields if they exist\n    if (data.id) result.id = data.id;\n    if (data.company_id) result.company_id = data.company_id;\n    if (data.advisor_id) result.advisor_id = data.advisor_id;\n    switch (step) {\n      case 1:\n        // Personal data\n        const personalFields = ['first_name', 'paternal_surname', 'maternal_surname', 'email', 'phone', 'rfc', 'curp', 'birth_date', 'gender', 'marital_status', 'address', 'city', 'state', 'postal_code'];\n        personalFields.forEach(field => {\n          if (field in data) {\n            result[field] = data[field];\n          }\n        });\n        break;\n      case 2:\n        // Financial details\n        const financialFields = ['employment_type', 'employment_years', 'monthly_income', 'additional_income', 'monthly_expenses', 'other_loan_balances'];\n        financialFields.forEach(field => {\n          if (field in data) {\n            result[field] = data[field];\n          }\n        });\n        break;\n      case 3:\n        // Bank details\n        const bankFields = ['bank_name', 'bank_clabe', 'bank_account_number', 'bank_account_type', 'bank_account_origin'];\n        bankFields.forEach(field => {\n          if (field in data) {\n            result[field] = data[field];\n          }\n        });\n        break;\n      default:\n        console.warn(`🔍 Paso desconocido para guardado parcial: ${step}`);\n    }\n    return result;\n  };\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-2xl font-bold\",\n          children: [\"Nuevo Cliente\", showUserFields && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ml-2 text-sm text-info\",\n            children: \"(Con gesti\\xF3n de usuarios)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this), user && user.role === 'SUPERADMIN' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-control\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"label cursor-pointer\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"label-text mr-2\",\n              children: \"Gestionar como Usuario\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"toggle toggle-primary\",\n              checked: showUserFields,\n              onChange: () => setShowUserFields(!showUserFields)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          type: \"error\",\n          message: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 11\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          type: \"success\",\n          message: successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card bg-base-100 shadow-xl\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: /*#__PURE__*/_jsxDEV(ClientForm, {\n            initialData: draftClient || {},\n            onSubmit: handleSubmit,\n            onSavePartial: handleSavePartial,\n            isSubmitting: isSubmitting,\n            showUserFields: showUserFields\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 336,\n    columnNumber: 5\n  }, this);\n};\n_s(NewClient, \"niqtuvB1i/ektKFdgEAp5cbVfHM=\", false, function () {\n  return [useNavigate, useAuth, useLocation];\n});\n_c = NewClient;\nexport default NewClient;\nvar _c;\n$RefreshReg$(_c, \"NewClient\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","useAuth","MainLayout","ClientForm","createClient","updateClient","Alert","jsxDEV","_jsxDEV","DEFAULT_COMPANY_ID","NewClient","_s","navigate","user","isSubmitting","setIsSubmitting","sectionSubmitting","setSectionSubmitting","error","setError","successMessage","setSuccessMessage","draftClient","setDraftClient","temporaryClientId","setTemporaryClientId","documents","setDocuments","showUserFields","setShowUserFields","location","role","savedDraft","localStorage","getItem","savedClientId","savedDocuments","console","log","JSON","parse","e","handleSubmit","data","clientDocuments","clientData","advisor_id","id","company_id","entityId","newClient","warningMessage","removeItem","message","handleSavePartial","step","partialData","collectFieldsForStep","updatedDraftClient","updatedClient","Error","setTimeout","first_name","paternal_surname","setItem","stringify","cause","stack","code","details","hint","storageError","ensureRequiredFields","result","personalFields","forEach","field","financialFields","bankFields","warn","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","initialData","onSubmit","onSavePartial","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/pages/NewClient.tsx"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport MainLayout from '../components/layout/MainLayout';\nimport ClientForm from '../components/clients/ClientForm';\nimport { Client, ClientDocument, createClient, updateClient, uploadClientDocuments } from '../services/clientService';\nimport Alert from '../components/ui/Alert';\n\n// Default company ID (Herramental)\nconst DEFAULT_COMPANY_ID = \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\";\n\nconst NewClient: React.FC = () => {\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [sectionSubmitting, setSectionSubmitting] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const [draftClient, setDraftClient] = useState<Partial<Client> | null>(null);\n  const [temporaryClientId, setTemporaryClientId] = useState<string | null>(null);\n  const [documents, setDocuments] = useState<ClientDocument[]>([]);\n  const [showUserFields, setShowUserFields] = useState<boolean>(false);\n  const location = useLocation();\n\n  // Check if the user has permission to manage users\n  useEffect(() => {\n    // Only superadmins can create users with roles\n    if (user && user.role === 'SUPERADMIN') {\n      setShowUserFields(true);\n    }\n  }, [user]);\n\n  // Cargar datos del cliente en borrador si existen en localStorage al iniciar\n  useEffect(() => {\n    try {\n      const savedDraft = localStorage.getItem('draftClient');\n      const savedClientId = localStorage.getItem('temporaryClientId');\n      const savedDocuments = localStorage.getItem('temporaryDocuments');\n      \n      if (savedDraft) {\n        console.log('Recuperando datos del cliente del localStorage:', savedDraft);\n        setDraftClient(JSON.parse(savedDraft));\n      }\n      \n      if (savedClientId) {\n        console.log('Recuperando ID de cliente temporal:', savedClientId);\n        setTemporaryClientId(savedClientId);\n      }\n      \n      if (savedDocuments) {\n        console.log('Recuperando documentos temporales del localStorage');\n        // No podemos guardar los objetos File directamente en localStorage, \n        // así que los documentos se gestionan en memoria hasta el envío final\n      }\n    } catch (e) {\n      console.error('Error loading draft from localStorage:', e);\n    }\n  }, []);\n\n  const handleSubmit = async (data: Partial<Client>, clientDocuments: ClientDocument[]) => {\n    setIsSubmitting(true);\n    setError(null);\n    console.log('Submitting client data:', data);\n    \n    try {\n      // Si el usuario es asesor o admin de empresa, asignar los IDs correspondientes\n      const clientData: Partial<Client> = { ...data };\n      \n      // Handle advisor_id assignment\n      if (user && user.role === 'ADVISOR') {\n        clientData.advisor_id = user.id;\n      }\n      \n      // Handle the company_id requirement - only set default if not selected in form\n      if (!clientData.company_id) {\n        console.log('No company selected in form, applying default/user company logic');\n        \n        if (user) {\n          if (user.role === 'COMPANY_ADMIN') {\n            clientData.company_id = user.entityId;\n            console.log('Using company_id from COMPANY_ADMIN user:', clientData.company_id);\n          } else {\n            // For other roles without company selection, use default\n            clientData.company_id = DEFAULT_COMPANY_ID;\n            console.log('Using default company_id for user with role:', user.role);\n          }\n        } else {\n          // No user information available, use default company_id\n          clientData.company_id = DEFAULT_COMPANY_ID;\n          console.log('No user context, using default company_id');\n        }\n      } else {\n        console.log('Using company_id selected in form:', clientData.company_id);\n      }\n      \n      // Si ya tenemos un cliente temporal, actualizar en vez de crear\n      let newClient;\n      if (temporaryClientId) {\n        console.log(`Updating temporary client with ID ${temporaryClientId}`);\n        newClient = await updateClient(temporaryClientId, clientData, clientDocuments, user?.id);\n        console.log('Client updated successfully:', newClient);\n      } else {\n        // Crear nuevo cliente\n        console.log('Creando nuevo cliente sin ID temporal');\n        newClient = await createClient(clientData as Omit<Client, 'id' | 'created_at'>, clientDocuments, user?.id);\n        console.log('Client created successfully:', newClient);\n      }\n      \n      // Check if there's a warning message (e.g., some documents failed to upload)\n      if (newClient.warningMessage) {\n        setSuccessMessage(newClient.warningMessage);\n        setIsSubmitting(false);\n        // No limpiamos localStorage ni navegamos para que el usuario pueda intentar subir documentos nuevamente\n        return;\n      }\n      \n      console.log('Client created/updated successfully:', newClient);\n      \n      // Clear local storage\n      localStorage.removeItem('draftClient');\n      localStorage.removeItem('clientFormStep');\n      localStorage.removeItem('temporaryClientId');\n      localStorage.removeItem('temporaryDocuments');\n      \n      // Redireccionar a la lista de clientes\n      navigate('/clients');\n    } catch (error: any) {\n      console.error('Error al crear cliente:', error);\n      setError(error.message || 'Error al crear el cliente. Por favor, intente de nuevo.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleSavePartial = async (data: Partial<Client>, step: number) => {\n    try {\n      setSectionSubmitting(true);\n      setError(null); // Limpiar errores anteriores\n      console.log(`Saving partial data for step ${step}:`, data);\n      \n      // Asegurarnos de que tenemos todos los campos requeridos\n      const partialData = collectFieldsForStep(data, step);\n      \n      // Asignar campos importantes si no están presentes\n      if (user && user.role === 'ADVISOR' && !partialData.advisor_id) {\n        partialData.advisor_id = user.id;\n      }\n      \n      if (!partialData.company_id) {\n        if (user && user.role === 'COMPANY_ADMIN') {\n          partialData.company_id = user.entityId;\n        } else {\n          partialData.company_id = DEFAULT_COMPANY_ID;\n        }\n      }\n      \n      // Update our local draft client data\n      const updatedDraftClient = { ...draftClient, ...partialData };\n      setDraftClient(updatedDraftClient);\n      \n      // Guardar los datos en Supabase\n      try {\n        // Si ya tenemos un ID de cliente temporal, actualizar\n        if (temporaryClientId) {\n          console.log(`Updating temporary client with ID ${temporaryClientId}`);\n          const updatedClient = await updateClient(temporaryClientId, partialData);\n          console.log('Client updated successfully:', updatedClient);\n          \n          if (!updatedClient) {\n            throw new Error('No se recibió respuesta después de la actualización');\n          }\n          \n          // Check if there's a warning message\n          if (updatedClient.warningMessage) {\n            setSuccessMessage(updatedClient.warningMessage);\n          } else {\n            setSuccessMessage(`Los datos de la sección ${step} se han guardado correctamente.`);\n          }\n          \n          // Clear success message after 3 seconds\n          setTimeout(() => {\n            setSuccessMessage(null);\n          }, 3000);\n        } \n        // Si es la primera vez que guardamos, crear un cliente temporal\n        else if (step === 1) {\n          console.log('Creating temporary client');\n          \n          // Nos aseguramos de tener al menos nombre y apellido para el cliente temporal\n          if (!partialData.first_name || !partialData.paternal_surname) {\n            setError('Debe proporcionar al menos nombre y apellido paterno para guardar.');\n            setSectionSubmitting(false);\n            return null;\n          }\n          \n          const newClient = await createClient(partialData as Omit<Client, 'id' | 'created_at'>, [], user?.id);\n          console.log('Temporary client created successfully:', newClient);\n          \n          if (newClient && newClient.id) {\n            setTemporaryClientId(newClient.id);\n            localStorage.setItem('temporaryClientId', newClient.id);\n          } else {\n            throw new Error('No se recibió un ID de cliente después de la creación');\n          }\n        } else {\n          console.log('No se puede guardar en Supabase sin haber completado el paso 1 primero');\n          // En este caso, solo guardamos en localStorage\n        }\n        \n        // Save to local storage for persistence\n        localStorage.setItem('draftClient', JSON.stringify(updatedDraftClient));\n        \n        return updatedDraftClient;\n      } catch (e: any) {\n        console.error('Error saving to Supabase:', e);\n        \n        // Log more details about the error\n        if (e.message) console.error('Error message:', e.message);\n        if (e.cause) console.error('Error cause:', e.cause);\n        if (e.stack) console.error('Error stack:', e.stack);\n        \n        // Try to get more information if it's a Supabase error\n        if (e.code || e.details || e.hint) {\n          console.error('Supabase error details:', {\n            code: e.code,\n            details: e.details,\n            hint: e.hint\n          });\n        }\n        \n        setError(`Error al guardar los datos en el servidor: ${e.message || 'Error desconocido'}`);\n        \n        // Aún así actualizamos localStorage\n        try {\n          localStorage.setItem('draftClient', JSON.stringify(updatedDraftClient));\n        } catch (storageError) {\n          console.error('Error saving to localStorage:', storageError);\n        }\n        \n        return null;\n      }\n    } catch (error: any) {\n      console.error('Error saving partial data:', error);\n      setError('Error al guardar los datos parciales.');\n      return null;\n    } finally {\n      setSectionSubmitting(false);\n    }\n  };\n  \n  // Helper to ensure we have all required fields\n  const ensureRequiredFields = (clientData: Partial<Client>) => {\n    // Handle advisor_id assignment\n    if (user && user.role === 'ADVISOR') {\n      clientData.advisor_id = user.id;\n    }\n    \n    // Handle the company_id requirement - only set default if not selected in form\n    if (!clientData.company_id) {\n      console.log('🔍 No se seleccionó empresa en el formulario, aplicando lógica predeterminada');\n      \n      if (user) {\n        if (user.role === 'COMPANY_ADMIN') {\n          clientData.company_id = user.entityId;\n          console.log('🔍 Usando company_id del usuario COMPANY_ADMIN:', clientData.company_id);\n        } else {\n          // For other roles without company selection, use default\n          clientData.company_id = DEFAULT_COMPANY_ID;\n          console.log('🔍 Usando company_id predeterminado para usuario con rol:', user.role);\n        }\n      } else {\n        // No user information available, use default company_id\n        clientData.company_id = DEFAULT_COMPANY_ID;\n        console.log('🔍 Sin contexto de usuario, usando company_id predeterminado');\n      }\n    } else {\n      console.log('🔍 Usando company_id seleccionado en el formulario:', clientData.company_id);\n    }\n  };\n  \n  // Helper to collect fields based on step\n  const collectFieldsForStep = (data: Partial<Client>, step: number): Partial<Client> => {\n    const result: Partial<Client> = {};\n    \n    // Always preserve these fields if they exist\n    if (data.id) result.id = data.id;\n    if (data.company_id) result.company_id = data.company_id;\n    if (data.advisor_id) result.advisor_id = data.advisor_id;\n    \n    switch(step) {\n      case 1: // Personal data\n        const personalFields = [\n          'first_name', 'paternal_surname', 'maternal_surname', 'email', 'phone',\n          'rfc', 'curp', 'birth_date', 'gender', 'marital_status', 'address',\n          'city', 'state', 'postal_code'\n        ];\n        personalFields.forEach(field => {\n          if (field in data) {\n            (result as any)[field] = (data as any)[field];\n          }\n        });\n        break;\n        \n      case 2: // Financial details\n        const financialFields = [\n          'employment_type', 'employment_years', 'monthly_income',\n          'additional_income', 'monthly_expenses', 'other_loan_balances'\n        ];\n        financialFields.forEach(field => {\n          if (field in data) {\n            (result as any)[field] = (data as any)[field];\n          }\n        });\n        break;\n        \n      case 3: // Bank details\n        const bankFields = [\n          'bank_name', 'bank_clabe', 'bank_account_number',\n          'bank_account_type', 'bank_account_origin'\n        ];\n        bankFields.forEach(field => {\n          if (field in data) {\n            (result as any)[field] = (data as any)[field];\n          }\n        });\n        break;\n        \n      default:\n        console.warn(`🔍 Paso desconocido para guardado parcial: ${step}`);\n    }\n    \n    return result;\n  };\n\n  return (\n    <MainLayout>\n      <div className=\"p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h1 className=\"text-2xl font-bold\">\n            Nuevo Cliente\n            {showUserFields && <span className=\"ml-2 text-sm text-info\">(Con gestión de usuarios)</span>}\n          </h1>\n          \n          {/* Add toggle button for superadmin to enable/disable user fields */}\n          {user && user.role === 'SUPERADMIN' && (\n            <div className=\"form-control\">\n              <label className=\"label cursor-pointer\">\n                <span className=\"label-text mr-2\">Gestionar como Usuario</span>\n                <input \n                  type=\"checkbox\" \n                  className=\"toggle toggle-primary\" \n                  checked={showUserFields}\n                  onChange={() => setShowUserFields(!showUserFields)}\n                />\n              </label>\n            </div>\n          )}\n        </div>\n        \n        {error && (\n          <div className=\"mb-4\">\n            <Alert type=\"error\" message={error} />\n          </div>\n        )}\n        \n        {successMessage && (\n          <div className=\"mb-4\">\n            <Alert type=\"success\" message={successMessage} />\n          </div>\n        )}\n        \n        <div className=\"card bg-base-100 shadow-xl\">\n          <div className=\"card-body\">\n            <ClientForm\n              initialData={draftClient || {}}\n              onSubmit={handleSubmit}\n              onSavePartial={handleSavePartial}\n              isSubmitting={isSubmitting}\n              showUserFields={showUserFields}\n            />\n          </div>\n        </div>\n      </div>\n    </MainLayout>\n  );\n};\n\nexport default NewClient; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}