{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { USER_ROLES } from '../utils/constants/roles';\n\n// Tipos\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Constantes para almacenamiento\nconst STORAGE_KEY_USER = 'crm_user';\nconst STORAGE_KEY_TOKEN = 'crm_token';\nconst STORAGE_KEY_TOKEN_EXP = 'crm_token_exp';\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [loading, setLoading] = useState(true); // Cambiado a true para evitar parpadeo\n\n  // Generar un token único para la sesión (simplificado)\n  const generateToken = () => {\n    const randomPart = Math.random().toString(36).substring(2, 15);\n    const timestampPart = Date.now().toString(36);\n    return `${randomPart}${timestampPart}`;\n  };\n\n  // Establecer el token con tiempo de expiración (12 horas por defecto)\n  const setSessionToken = (token, expireHours = 12) => {\n    const expiration = new Date();\n    expiration.setHours(expiration.getHours() + expireHours);\n    localStorage.setItem(STORAGE_KEY_TOKEN, token);\n    localStorage.setItem(STORAGE_KEY_TOKEN_EXP, expiration.toISOString());\n  };\n\n  // Verificar si el token ha expirado\n  const isTokenExpired = () => {\n    const expirationStr = localStorage.getItem(STORAGE_KEY_TOKEN_EXP);\n    if (!expirationStr) return true;\n    const expiration = new Date(expirationStr);\n    return new Date() > expiration;\n  };\n\n  // Verificar sesión al iniciar\n  useEffect(() => {\n    const checkStoredSession = () => {\n      try {\n        // Primero verificar si el token existe y no ha expirado\n        const token = localStorage.getItem(STORAGE_KEY_TOKEN);\n        if (token && !isTokenExpired()) {\n          // Si el token es válido, recuperar datos del usuario\n          const storedUser = localStorage.getItem(STORAGE_KEY_USER);\n          if (storedUser) {\n            setUser(JSON.parse(storedUser));\n          }\n        } else if (token) {\n          // Si el token ha expirado, limpiar la sesión\n          console.log('La sesión ha expirado');\n          localStorage.removeItem(STORAGE_KEY_TOKEN);\n          localStorage.removeItem(STORAGE_KEY_TOKEN_EXP);\n          localStorage.removeItem(STORAGE_KEY_USER);\n        }\n      } catch (error) {\n        console.error('Error checking stored session:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkStoredSession();\n\n    // Listener para sincronizar múltiples pestañas\n    const handleStorageChange = event => {\n      if (event.key === STORAGE_KEY_USER) {\n        if (!event.newValue) {\n          // Usuario se deslogueó en otra pestaña\n          setUser(null);\n          setSession(null);\n        } else {\n          // Usuario se logueó en otra pestaña\n          setUser(JSON.parse(event.newValue));\n        }\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n\n      // Simulación de autenticación\n      if (email === 'admin@fincentiva.com' && password === 'admin123') {\n        const mockUser = {\n          id: '1',\n          email: 'admin@fincentiva.com',\n          name: 'Administrador',\n          role: 'SUPERADMIN'\n        };\n\n        // Generar y guardar token de sesión\n        const token = generateToken();\n        setSessionToken(token);\n\n        // Guardar datos del usuario\n        localStorage.setItem(STORAGE_KEY_USER, JSON.stringify(mockUser));\n        setUser(mockUser);\n        return {\n          data: {\n            user: mockUser\n          },\n          error: null\n        };\n      }\n      return {\n        data: null,\n        error: 'Credenciales inválidas'\n      };\n    } catch (error) {\n      console.error('Error signing in:', error);\n      return {\n        error,\n        data: null\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signInWithCode = async (accessCode, userType) => {\n    try {\n      setLoading(true);\n\n      // Consultar la base de datos para verificar el access_code\n      let queryUrl = 'http://localhost:3100/query';\n      let queryBody = {};\n      if (userType === USER_ROLES.ADVISOR) {\n        queryBody = {\n          query: `SELECT * FROM advisors WHERE access_code = '${accessCode}' LIMIT 1`\n        };\n      } else if (userType === USER_ROLES.COMPANY_ADMIN) {\n        queryBody = {\n          query: `SELECT * FROM company_admins WHERE access_code = '${accessCode}' LIMIT 1`\n        };\n      } else {\n        return {\n          data: null,\n          error: 'Tipo de usuario no válido'\n        };\n      }\n      const response = await fetch(queryUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(queryBody)\n      });\n      const result = await response.json();\n      if (result.error) {\n        console.error('Database error:', result.error);\n        return {\n          data: null,\n          error: 'Error de base de datos'\n        };\n      }\n      if (result.data && result.data.length > 0) {\n        const userData = result.data[0];\n        const userInfo = {\n          id: userData.id,\n          email: userData.email,\n          name: userData.name,\n          role: userType,\n          entityId: userType === USER_ROLES.COMPANY_ADMIN ? userData.company_id : userData.id\n        };\n\n        // Generar y guardar token de sesión\n        const token = generateToken();\n        setSessionToken(token);\n\n        // Guardar datos del usuario\n        localStorage.setItem(STORAGE_KEY_USER, JSON.stringify(userInfo));\n        setUser(userInfo);\n        return {\n          data: {\n            user: userInfo\n          },\n          error: null\n        };\n      }\n      return {\n        data: null,\n        error: 'Código de acceso inválido'\n      };\n    } catch (error) {\n      console.error('Error signing in with code:', error);\n      // Ensure returned error is always a string\n      return {\n        error: error instanceof Error ? error.message : 'Error al iniciar sesión',\n        data: null\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signOut = async () => {\n    try {\n      // Eliminar todos los datos de sesión\n      localStorage.removeItem(STORAGE_KEY_USER);\n      localStorage.removeItem(STORAGE_KEY_TOKEN);\n      localStorage.removeItem(STORAGE_KEY_TOKEN_EXP);\n      setUser(null);\n      setSession(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n  const value = {\n    user,\n    session,\n    loading,\n    signIn,\n    signInWithCode,\n    signOut,\n    setUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"sIDOCMze9iVqwxkgWIhOu8vskSI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","USER_ROLES","jsxDEV","_jsxDEV","STORAGE_KEY_USER","STORAGE_KEY_TOKEN","STORAGE_KEY_TOKEN_EXP","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","session","setSession","loading","setLoading","generateToken","randomPart","Math","random","toString","substring","timestampPart","Date","now","setSessionToken","token","expireHours","expiration","setHours","getHours","localStorage","setItem","toISOString","isTokenExpired","expirationStr","getItem","checkStoredSession","storedUser","JSON","parse","console","log","removeItem","error","handleStorageChange","event","key","newValue","window","addEventListener","removeEventListener","signIn","email","password","mockUser","id","name","role","stringify","data","signInWithCode","accessCode","userType","queryUrl","queryBody","ADVISOR","query","COMPANY_ADMIN","response","fetch","method","headers","body","result","json","length","userData","userInfo","entityId","company_id","message","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Session } from '@supabase/supabase-js';\nimport { USER_ROLES } from '../utils/constants/roles';\n\n// Tipos\ninterface User {\n  id: string;\n  email: string;\n  name?: string;\n  role: string;\n  entityId?: string; // ID del asesor o empresa asociada\n}\n\ninterface AuthContextType {\n  user: User | null;\n  session: Session | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<{\n    error: any | null;\n    data: any | null;\n  }>;\n  signInWithCode: (accessCode: string, userType: string) => Promise<{\n    error: any | null;\n    data: any | null;\n  }>;\n  signOut: () => Promise<void>;\n  setUser: React.Dispatch<React.SetStateAction<User | null>>;\n}\n\n// Constantes para almacenamiento\nconst STORAGE_KEY_USER = 'crm_user';\nconst STORAGE_KEY_TOKEN = 'crm_token';\nconst STORAGE_KEY_TOKEN_EXP = 'crm_token_exp';\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true); // Cambiado a true para evitar parpadeo\n\n  // Generar un token único para la sesión (simplificado)\n  const generateToken = (): string => {\n    const randomPart = Math.random().toString(36).substring(2, 15);\n    const timestampPart = Date.now().toString(36);\n    return `${randomPart}${timestampPart}`;\n  };\n\n  // Establecer el token con tiempo de expiración (12 horas por defecto)\n  const setSessionToken = (token: string, expireHours: number = 12) => {\n    const expiration = new Date();\n    expiration.setHours(expiration.getHours() + expireHours);\n    \n    localStorage.setItem(STORAGE_KEY_TOKEN, token);\n    localStorage.setItem(STORAGE_KEY_TOKEN_EXP, expiration.toISOString());\n  };\n\n  // Verificar si el token ha expirado\n  const isTokenExpired = (): boolean => {\n    const expirationStr = localStorage.getItem(STORAGE_KEY_TOKEN_EXP);\n    if (!expirationStr) return true;\n    \n    const expiration = new Date(expirationStr);\n    return new Date() > expiration;\n  };\n\n  // Verificar sesión al iniciar\n  useEffect(() => {\n    const checkStoredSession = () => {\n      try {\n        // Primero verificar si el token existe y no ha expirado\n        const token = localStorage.getItem(STORAGE_KEY_TOKEN);\n        \n        if (token && !isTokenExpired()) {\n          // Si el token es válido, recuperar datos del usuario\n          const storedUser = localStorage.getItem(STORAGE_KEY_USER);\n          if (storedUser) {\n            setUser(JSON.parse(storedUser));\n          }\n        } else if (token) {\n          // Si el token ha expirado, limpiar la sesión\n          console.log('La sesión ha expirado');\n          localStorage.removeItem(STORAGE_KEY_TOKEN);\n          localStorage.removeItem(STORAGE_KEY_TOKEN_EXP);\n          localStorage.removeItem(STORAGE_KEY_USER);\n        }\n      } catch (error) {\n        console.error('Error checking stored session:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkStoredSession();\n\n    // Listener para sincronizar múltiples pestañas\n    const handleStorageChange = (event: StorageEvent) => {\n      if (event.key === STORAGE_KEY_USER) {\n        if (!event.newValue) {\n          // Usuario se deslogueó en otra pestaña\n          setUser(null);\n          setSession(null);\n        } else {\n          // Usuario se logueó en otra pestaña\n          setUser(JSON.parse(event.newValue));\n        }\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      \n      // Simulación de autenticación\n      if (email === 'admin@fincentiva.com' && password === 'admin123') {\n        const mockUser: User = {\n          id: '1',\n          email: 'admin@fincentiva.com',\n          name: 'Administrador',\n          role: 'SUPERADMIN',\n        };\n        \n        // Generar y guardar token de sesión\n        const token = generateToken();\n        setSessionToken(token);\n        \n        // Guardar datos del usuario\n        localStorage.setItem(STORAGE_KEY_USER, JSON.stringify(mockUser));\n        setUser(mockUser);\n        \n        return { data: { user: mockUser }, error: null };\n      }\n      \n      return { data: null, error: 'Credenciales inválidas' };\n    } catch (error) {\n      console.error('Error signing in:', error);\n      return { error, data: null };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signInWithCode = async (accessCode: string, userType: string) => {\n    try {\n      setLoading(true);\n      \n      // Consultar la base de datos para verificar el access_code\n      let queryUrl = 'http://localhost:3100/query';\n      let queryBody = {};\n      \n      if (userType === USER_ROLES.ADVISOR) {\n        queryBody = {\n          query: `SELECT * FROM advisors WHERE access_code = '${accessCode}' LIMIT 1`\n        };\n      } else if (userType === USER_ROLES.COMPANY_ADMIN) {\n        queryBody = {\n          query: `SELECT * FROM company_admins WHERE access_code = '${accessCode}' LIMIT 1`\n        };\n      } else {\n        return { data: null, error: 'Tipo de usuario no válido' };\n      }\n      \n      const response = await fetch(queryUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(queryBody),\n      });\n      \n      const result = await response.json();\n      \n      if (result.error) {\n        console.error('Database error:', result.error);\n        return { data: null, error: 'Error de base de datos' };\n      }\n      \n      if (result.data && result.data.length > 0) {\n        const userData = result.data[0];\n        const userInfo: User = {\n          id: userData.id,\n          email: userData.email,\n          name: userData.name,\n          role: userType,\n          entityId: userType === USER_ROLES.COMPANY_ADMIN ? userData.company_id : userData.id,\n        };\n        \n        // Generar y guardar token de sesión\n        const token = generateToken();\n        setSessionToken(token);\n        \n        // Guardar datos del usuario\n        localStorage.setItem(STORAGE_KEY_USER, JSON.stringify(userInfo));\n        setUser(userInfo);\n        \n        return { data: { user: userInfo }, error: null };\n      }\n      \n      return { data: null, error: 'Código de acceso inválido' };\n    } catch (error) {\n      console.error('Error signing in with code:', error);\n      // Ensure returned error is always a string\n      return { \n        error: error instanceof Error ? error.message : 'Error al iniciar sesión', \n        data: null \n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      // Eliminar todos los datos de sesión\n      localStorage.removeItem(STORAGE_KEY_USER);\n      localStorage.removeItem(STORAGE_KEY_TOKEN);\n      localStorage.removeItem(STORAGE_KEY_TOKEN_EXP);\n      setUser(null);\n      setSession(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  const value = {\n    user,\n    session,\n    loading,\n    signIn,\n    signInWithCode,\n    signOut,\n    setUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}