{"ast":null,"code":"import{supabase}from'../lib/supabaseClient';import{TABLES}from'../utils/constants/tables';const DOCUMENTS_TABLE=TABLES.DOCUMENTS;const STORAGE_BUCKET='documents';// Get all documents for an application\nexport const getApplicationDocuments=async applicationId=>{const{data,error}=await supabase.from(DOCUMENTS_TABLE).select('*').eq('application_id',applicationId).order('created_at',{ascending:false});if(error){console.error(`Error fetching documents for application ${applicationId}:`,error);throw error;}return data;};// Get all documents for a client\nexport const getClientDocuments=async clientId=>{const{data,error}=await supabase.from(DOCUMENTS_TABLE).select('*').eq('client_id',clientId).order('created_at',{ascending:false});if(error){console.error(`Error fetching documents for client ${clientId}:`,error);throw error;}return data;};// Get a single document by ID\nexport const getDocumentById=async id=>{const{data,error}=await supabase.from(DOCUMENTS_TABLE).select('*').eq('id',id).single();if(error){console.error(`Error fetching document with ID ${id}:`,error);throw error;}return data;};// Upload a document\nexport const uploadDocument=async upload=>{const{file,application_id,client_id,userId,documentName,description,category}=upload;try{var _documentData$;if(!file){console.error('Upload failed: No file provided');throw new Error(\"El archivo es requerido para la carga\");}if(!application_id&&!client_id){console.error('Upload failed: No application_id or client_id provided');throw new Error(\"Se debe proporcionar un ID de solicitud o ID de cliente\");}// Check file size (max 10MB)\nif(file.size>10*1024*1024){console.error('Upload failed: File too large',file.size);throw new Error(\"El archivo es demasiado grande (m√°ximo 10MB)\");}// Generate a unique file path\nconst timestamp=new Date().getTime();const fileName=file.name.replace(/[^a-zA-Z0-9.]/g,'_');// Sanitize filename\nconst fileExtension=fileName.split('.').pop()||'unknown';const prefix=application_id?`applications/${application_id}`:`clients/${client_id}`;const filePath=`${prefix}/${timestamp}_${fileName}`;console.log(`Uploading document: ${documentName} to path: ${filePath}`);// Attempt file upload with retry logic (max 2 attempts)\nlet storageError=null;let uploadResult=null;for(let attempt=0;attempt<2;attempt++){try{const{data,error}=await supabase.storage.from(STORAGE_BUCKET).upload(filePath,file,{cacheControl:'3600',upsert:attempt>0// On retry, allow overwrite\n});if(error){console.error(`Upload attempt ${attempt+1} failed:`,error);storageError=error;}else{uploadResult=data;storageError=null;break;// Success, exit retry loop\n}}catch(err){console.error(`Unexpected error on upload attempt ${attempt+1}:`,err);storageError=err;}// Wait before retry\nif(attempt<1){await new Promise(r=>setTimeout(r,1000));}}if(storageError){console.error('All upload attempts failed:',storageError);// Use a type-safe approach to access error message\nconst errorMessage=storageError instanceof Error?storageError.message:typeof storageError==='object'&&storageError!==null&&'message'in storageError?String(storageError.message):'Error desconocido';throw new Error(`Error al subir el archivo: ${errorMessage}`);}// Create document record in database\nconst documentRecord={file_name:documentName||fileName,file_path:filePath,file_type:file.type||`application/${fileExtension}`,file_size:file.size,uploaded_by_user_id:userId,category};if(application_id){Object.assign(documentRecord,{application_id});}if(client_id){Object.assign(documentRecord,{client_id});}if(description){Object.assign(documentRecord,{description});}console.log('Creating document record in database');const{data:documentData,error:documentError}=await supabase.from(DOCUMENTS_TABLE).insert([documentRecord]).select();if(documentError){console.error('Error creating document record:',documentError);// Clean up: delete the uploaded file if document record creation failed\ntry{await supabase.storage.from(STORAGE_BUCKET).remove([filePath]);console.log('Cleaned up file after database record creation failure');}catch(cleanupError){console.error('Error during cleanup of uploaded file:',cleanupError);}// Use a type-safe approach to access error message  \nconst errorMessage=documentError instanceof Error?documentError.message:typeof documentError==='object'&&documentError!==null&&'message'in documentError?String(documentError.message):'Error desconocido';throw new Error(`Error al guardar el registro del documento: ${errorMessage}`);}console.log('Document uploaded successfully:',(_documentData$=documentData[0])===null||_documentData$===void 0?void 0:_documentData$.id);return documentData[0];}catch(error){console.error('Critical error in document upload process:',error);throw error;}};// Delete a document\nexport const deleteDocument=async documentId=>{// Get document to get file path\nconst{data:document,error:fetchError}=await supabase.from(DOCUMENTS_TABLE).select('file_path').eq('id',documentId).single();if(fetchError){console.error(`Error fetching document ${documentId} for deletion:`,fetchError);throw fetchError;}// Delete file from storage\nconst{error:storageError}=await supabase.storage.from(STORAGE_BUCKET).remove([document.file_path]);if(storageError){console.error(`Error deleting file for document ${documentId}:`,storageError);// Use type-safe error handling\nconst errorMessage=storageError instanceof Error?storageError.message:typeof storageError==='object'&&storageError!==null&&'message'in storageError?String(storageError.message):'Error desconocido';throw new Error(`Error al eliminar el archivo del documento: ${errorMessage}`);}// Delete document record\nconst{error:deleteError}=await supabase.from(DOCUMENTS_TABLE).delete().eq('id',documentId);if(deleteError){console.error(`Error deleting document record ${documentId}:`,deleteError);throw deleteError;}return true;};// Get document download URL\nexport const getDocumentUrl=async filePath=>{const{data,error}=await supabase.storage.from(STORAGE_BUCKET).createSignedUrl(filePath,60*60);// 1 hour expiry\nif(error){console.error(`Error getting URL for document ${filePath}:`,error);throw error;}return data.signedUrl;};// Verify a document\nexport const verifyDocument=async function(documentId,userId){let isVerified=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;const{data,error}=await supabase.from(DOCUMENTS_TABLE).update({is_verified:isVerified,verified_by:userId,verified_at:new Date().toISOString()}).eq('id',documentId).select();if(error){console.error(`Error verifying document ${documentId}:`,error);throw error;}return data[0];};// Get required documents (based on application type)\nexport const getRequiredDocuments=async applicationType=>{const{data,error}=await supabase.from('required_documents').select('*').eq('application_type',applicationType);if(error){console.error(`Error fetching required documents for ${applicationType}:`,error);throw error;}return data;};","map":{"version":3,"names":["supabase","TABLES","DOCUMENTS_TABLE","DOCUMENTS","STORAGE_BUCKET","getApplicationDocuments","applicationId","data","error","from","select","eq","order","ascending","console","getClientDocuments","clientId","getDocumentById","id","single","uploadDocument","upload","file","application_id","client_id","userId","documentName","description","category","_documentData$","Error","size","timestamp","Date","getTime","fileName","name","replace","fileExtension","split","pop","prefix","filePath","log","storageError","uploadResult","attempt","storage","cacheControl","upsert","err","Promise","r","setTimeout","errorMessage","message","String","documentRecord","file_name","file_path","file_type","type","file_size","uploaded_by_user_id","Object","assign","documentData","documentError","insert","remove","cleanupError","deleteDocument","documentId","document","fetchError","deleteError","delete","getDocumentUrl","createSignedUrl","signedUrl","verifyDocument","isVerified","arguments","length","undefined","update","is_verified","verified_by","verified_at","toISOString","getRequiredDocuments","applicationType"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/documentService.ts"],"sourcesContent":["import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from '../utils/constants/tables';\n\nexport interface Document {\n  id: string;\n  created_at: string;\n  file_name: string;\n  file_path: string;\n  file_type: string;\n  file_size: number;\n  category?: string;\n  application_id?: string;\n  client_id?: string;\n  uploaded_by_user_id?: string;\n  is_verified?: boolean;\n  verified_by?: string;\n  verified_at?: string;\n}\n\nexport interface DocumentUpload {\n  file: File;\n  application_id?: string;\n  client_id?: string;\n  userId: string;\n  documentName: string;\n  description?: string;\n  category?: string;\n}\n\nconst DOCUMENTS_TABLE = TABLES.DOCUMENTS;\nconst STORAGE_BUCKET = 'documents';\n\n// Get all documents for an application\nexport const getApplicationDocuments = async (applicationId: string) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select('*')\n    .eq('application_id', applicationId)\n    .order('created_at', { ascending: false });\n\n  if (error) {\n    console.error(`Error fetching documents for application ${applicationId}:`, error);\n    throw error;\n  }\n\n  return data;\n};\n\n// Get all documents for a client\nexport const getClientDocuments = async (clientId: string) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select('*')\n    .eq('client_id', clientId)\n    .order('created_at', { ascending: false });\n\n  if (error) {\n    console.error(`Error fetching documents for client ${clientId}:`, error);\n    throw error;\n  }\n\n  return data;\n};\n\n// Get a single document by ID\nexport const getDocumentById = async (id: string) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select('*')\n    .eq('id', id)\n    .single();\n\n  if (error) {\n    console.error(`Error fetching document with ID ${id}:`, error);\n    throw error;\n  }\n\n  return data as Document;\n};\n\n// Upload a document\nexport const uploadDocument = async (upload: DocumentUpload) => {\n  const { file, application_id, client_id, userId, documentName, description, category } = upload;\n  \n  try {\n    if (!file) {\n      console.error('Upload failed: No file provided');\n      throw new Error(\"El archivo es requerido para la carga\");\n    }\n    \n    if (!application_id && !client_id) {\n      console.error('Upload failed: No application_id or client_id provided');\n      throw new Error(\"Se debe proporcionar un ID de solicitud o ID de cliente\");\n    }\n  \n    // Check file size (max 10MB)\n    if (file.size > 10 * 1024 * 1024) {\n      console.error('Upload failed: File too large', file.size);\n      throw new Error(\"El archivo es demasiado grande (m√°ximo 10MB)\");\n    }\n    \n    // Generate a unique file path\n    const timestamp = new Date().getTime();\n    const fileName = file.name.replace(/[^a-zA-Z0-9.]/g, '_'); // Sanitize filename\n    const fileExtension = fileName.split('.').pop() || 'unknown';\n    const prefix = application_id ? `applications/${application_id}` : `clients/${client_id}`;\n    const filePath = `${prefix}/${timestamp}_${fileName}`;\n    \n    console.log(`Uploading document: ${documentName} to path: ${filePath}`);\n\n    // Attempt file upload with retry logic (max 2 attempts)\n    let storageError = null;\n    let uploadResult = null;\n    \n    for (let attempt = 0; attempt < 2; attempt++) {\n      try {\n        const { data, error } = await supabase.storage\n          .from(STORAGE_BUCKET)\n          .upload(filePath, file, {\n            cacheControl: '3600',\n            upsert: attempt > 0 // On retry, allow overwrite\n          });\n        \n        if (error) {\n          console.error(`Upload attempt ${attempt + 1} failed:`, error);\n          storageError = error;\n        } else {\n          uploadResult = data;\n          storageError = null;\n          break; // Success, exit retry loop\n        }\n      } catch (err) {\n        console.error(`Unexpected error on upload attempt ${attempt + 1}:`, err);\n        storageError = err;\n      }\n      \n      // Wait before retry\n      if (attempt < 1) {\n        await new Promise(r => setTimeout(r, 1000));\n      }\n    }\n\n    if (storageError) {\n      console.error('All upload attempts failed:', storageError);\n      // Use a type-safe approach to access error message\n      const errorMessage = storageError instanceof Error \n        ? storageError.message \n        : (typeof storageError === 'object' && storageError !== null && 'message' in storageError)\n          ? String(storageError.message)\n          : 'Error desconocido';\n      \n      throw new Error(`Error al subir el archivo: ${errorMessage}`);\n    }\n\n    // Create document record in database\n    const documentRecord = {\n      file_name: documentName || fileName,\n      file_path: filePath,\n      file_type: file.type || `application/${fileExtension}`,\n      file_size: file.size,\n      uploaded_by_user_id: userId,\n      category\n    };\n    \n    if (application_id) {\n      Object.assign(documentRecord, { application_id });\n    }\n    \n    if (client_id) {\n      Object.assign(documentRecord, { client_id });\n    }\n    \n    if (description) {\n      Object.assign(documentRecord, { description });\n    }\n\n    console.log('Creating document record in database');\n    const { data: documentData, error: documentError } = await supabase\n      .from(DOCUMENTS_TABLE)\n      .insert([documentRecord])\n      .select();\n\n    if (documentError) {\n      console.error('Error creating document record:', documentError);\n      \n      // Clean up: delete the uploaded file if document record creation failed\n      try {\n        await supabase.storage\n          .from(STORAGE_BUCKET)\n          .remove([filePath]);\n        console.log('Cleaned up file after database record creation failure');\n      } catch (cleanupError) {\n        console.error('Error during cleanup of uploaded file:', cleanupError);\n      }\n      \n      // Use a type-safe approach to access error message  \n      const errorMessage = documentError instanceof Error \n        ? documentError.message \n        : (typeof documentError === 'object' && documentError !== null && 'message' in documentError)\n          ? String((documentError as {message: string}).message)\n          : 'Error desconocido';\n      \n      throw new Error(`Error al guardar el registro del documento: ${errorMessage}`);\n    }\n\n    console.log('Document uploaded successfully:', documentData[0]?.id);\n    return documentData[0] as Document;\n  } catch (error) {\n    console.error('Critical error in document upload process:', error);\n    throw error;\n  }\n};\n\n// Delete a document\nexport const deleteDocument = async (documentId: string) => {\n  // Get document to get file path\n  const { data: document, error: fetchError } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select('file_path')\n    .eq('id', documentId)\n    .single();\n\n  if (fetchError) {\n    console.error(`Error fetching document ${documentId} for deletion:`, fetchError);\n    throw fetchError;\n  }\n\n  // Delete file from storage\n  const { error: storageError } = await supabase.storage\n    .from(STORAGE_BUCKET)\n    .remove([document.file_path]);\n\n  if (storageError) {\n    console.error(`Error deleting file for document ${documentId}:`, storageError);\n    // Use type-safe error handling\n    const errorMessage = storageError instanceof Error \n      ? storageError.message \n      : (typeof storageError === 'object' && storageError !== null && 'message' in storageError)\n        ? String((storageError as {message: string}).message)\n        : 'Error desconocido';\n    \n    throw new Error(`Error al eliminar el archivo del documento: ${errorMessage}`);\n  }\n\n  // Delete document record\n  const { error: deleteError } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .delete()\n    .eq('id', documentId);\n\n  if (deleteError) {\n    console.error(`Error deleting document record ${documentId}:`, deleteError);\n    throw deleteError;\n  }\n\n  return true;\n};\n\n// Get document download URL\nexport const getDocumentUrl = async (filePath: string) => {\n  const { data, error } = await supabase.storage\n    .from(STORAGE_BUCKET)\n    .createSignedUrl(filePath, 60 * 60); // 1 hour expiry\n\n  if (error) {\n    console.error(`Error getting URL for document ${filePath}:`, error);\n    throw error;\n  }\n\n  return data.signedUrl;\n};\n\n// Verify a document\nexport const verifyDocument = async (documentId: string, userId: string, isVerified: boolean = true) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .update({\n      is_verified: isVerified,\n      verified_by: userId,\n      verified_at: new Date().toISOString()\n    })\n    .eq('id', documentId)\n    .select();\n\n  if (error) {\n    console.error(`Error verifying document ${documentId}:`, error);\n    throw error;\n  }\n\n  return data[0] as Document;\n};\n\n// Get required documents (based on application type)\nexport const getRequiredDocuments = async (applicationType: string) => {\n  const { data, error } = await supabase\n    .from('required_documents')\n    .select('*')\n    .eq('application_type', applicationType);\n\n  if (error) {\n    console.error(`Error fetching required documents for ${applicationType}:`, error);\n    throw error;\n  }\n\n  return data;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}