{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/components/ui/NotificationPopup.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { XMarkIcon } from '@heroicons/react/24/outline';\n\n// Map NotificationType to basic types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapNotificationTypeToBasic = type => {\n  switch (type) {\n    case 'info':\n    case 'new_application':\n    case 'new_message':\n      return 'info';\n    case 'success':\n    case 'approval_required':\n    case 'application_status_updated':\n      return 'success';\n    case 'warning':\n      return 'warning';\n    case 'error':\n    case 'application_comment':\n      return 'error';\n    default:\n      return 'info';\n  }\n};\nconst NotificationPopup = ({\n  title,\n  message,\n  type = 'info',\n  duration = 5000,\n  // Por defecto, 5 segundos\n  onClose,\n  playSound = true,\n  soundType = 'notification'\n}) => {\n  _s();\n  const [isVisible, setIsVisible] = useState(true);\n  const [exiting, setExiting] = useState(false);\n\n  // Configurar el auto-cierre\n  useEffect(() => {\n    if (duration > 0) {\n      const timer = setTimeout(() => {\n        closeNotification();\n      }, duration);\n      return () => clearTimeout(timer);\n    }\n  }, [duration]);\n\n  // Reproducir sonido de notificación\n  useEffect(() => {\n    if (playSound) {\n      try {\n        // Create a single standardized audio element\n        const audio = new Audio();\n\n        // Set the source based on the sound type with fallback to WAV format\n        let audioSource = '';\n        switch (soundType) {\n          case 'notification':\n            audioSource = '/sounds/notification';\n            break;\n          case 'alert':\n            audioSource = '/sounds/alert';\n            break;\n          case 'approval':\n            audioSource = '/sounds/approval';\n            break;\n          default:\n            audioSource = '/sounds/notification';\n        }\n\n        // Create a fallback system with different formats\n        audio.innerHTML = `\n          <source src=\"${audioSource}.mp3\" type=\"audio/mp3\">\n          <source src=\"${audioSource}.wav\" type=\"audio/wav\">\n        `;\n\n        // Explicitly set the src for the Audio element too (as backup)\n        audio.src = `${audioSource}.mp3`;\n\n        // Set volume before playing\n        audio.volume = 0.5;\n\n        // Add error handling for the audio element\n        audio.addEventListener('error', e => {\n          console.error('Error playing notification sound', e);\n\n          // Try fallback to WAV if MP3 fails\n          if (audio.src.endsWith('.mp3')) {\n            console.log('Attempting to play WAV fallback');\n            audio.src = `${audioSource}.wav`;\n            audio.load();\n            audio.play().catch(err => {\n              console.error('Fallback sound playback failed:', err);\n            });\n          }\n        });\n\n        // Wait a moment to ensure browser is ready\n        setTimeout(() => {\n          const playPromise = audio.play();\n          if (playPromise !== undefined) {\n            playPromise.catch(err => {\n              console.log('Browser blocked autoplay, needs user interaction first');\n\n              // Mark that we've attempted to play audio\n              if (!document.documentElement.hasAttribute('data-audio-attempted')) {\n                document.documentElement.setAttribute('data-audio-attempted', 'true');\n              }\n            });\n          }\n        }, 100);\n      } catch (error) {\n        console.error('Failed to initialize sound:', error);\n      }\n    }\n  }, [playSound, soundType]);\n  const closeNotification = () => {\n    setExiting(true);\n    // Agregar un pequeño retraso para la animación de salida\n    setTimeout(() => {\n      setIsVisible(false);\n      if (onClose) onClose();\n    }, 300);\n  };\n  if (!isVisible) return null;\n\n  // Mapeo de estilos según el tipo\n  const typeStyles = {\n    info: {\n      bg: 'bg-blue-50',\n      border: 'border-blue-200',\n      text: 'text-blue-800',\n      title: 'text-blue-900'\n    },\n    success: {\n      bg: 'bg-green-50',\n      border: 'border-green-200',\n      text: 'text-green-800',\n      title: 'text-green-900'\n    },\n    warning: {\n      bg: 'bg-yellow-50',\n      border: 'border-yellow-200',\n      text: 'text-yellow-800',\n      title: 'text-yellow-900'\n    },\n    error: {\n      bg: 'bg-red-50',\n      border: 'border-red-200',\n      text: 'text-red-800',\n      title: 'text-red-900'\n    }\n  };\n\n  // Map complex notification types to the basic ones\n  const basicType = mapNotificationTypeToBasic(type);\n\n  // Use the mapped type to get styles\n  const styles = typeStyles[basicType] || typeStyles.info;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed top-5 right-5 z-50 max-w-md w-full animate-popup\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.bg} ${styles.border} ${styles.text} rounded-lg shadow-lg p-4 border ${exiting ? 'animate-popup-exit' : 'animate-popup-entry'}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-start\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: `text-base font-semibold ${styles.title}`,\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-1 text-sm\",\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closeNotification,\n          className: \"flex-shrink-0 ml-2 text-gray-400 hover:text-gray-500 focus:outline-none\",\n          children: /*#__PURE__*/_jsxDEV(XMarkIcon, {\n            className: \"h-5 w-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationPopup, \"bcPZT+kBBVGg6BPgoIbVXJ3hBdw=\");\n_c = NotificationPopup;\nexport default NotificationPopup;\nvar _c;\n$RefreshReg$(_c, \"NotificationPopup\");","map":{"version":3,"names":["React","useEffect","useState","XMarkIcon","jsxDEV","_jsxDEV","mapNotificationTypeToBasic","type","NotificationPopup","title","message","duration","onClose","playSound","soundType","_s","isVisible","setIsVisible","exiting","setExiting","timer","setTimeout","closeNotification","clearTimeout","audio","Audio","audioSource","innerHTML","src","volume","addEventListener","e","console","error","endsWith","log","load","play","catch","err","playPromise","undefined","document","documentElement","hasAttribute","setAttribute","typeStyles","info","bg","border","text","success","warning","basicType","styles","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/components/ui/NotificationPopup.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { XMarkIcon } from '@heroicons/react/24/outline';\n\n// Map NotificationType to basic types\nconst mapNotificationTypeToBasic = (type: string): 'info' | 'success' | 'warning' | 'error' => {\n  switch (type) {\n    case 'info':\n    case 'new_application':\n    case 'new_message':\n      return 'info';\n    case 'success':\n    case 'approval_required':\n    case 'application_status_updated':\n      return 'success';\n    case 'warning':\n      return 'warning';\n    case 'error':\n    case 'application_comment':\n      return 'error';\n    default:\n      return 'info';\n  }\n};\n\ninterface NotificationPopupProps {\n  title: string;\n  message: string;\n  type?: 'info' | 'success' | 'warning' | 'error' | string;\n  duration?: number; // Duración en milisegundos\n  onClose?: () => void;\n  playSound?: boolean;\n  soundType?: 'notification' | 'alert' | 'approval'; // Diferentes tipos de sonido\n}\n\nconst NotificationPopup: React.FC<NotificationPopupProps> = ({\n  title,\n  message,\n  type = 'info',\n  duration = 5000, // Por defecto, 5 segundos\n  onClose,\n  playSound = true,\n  soundType = 'notification'\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n  const [exiting, setExiting] = useState(false);\n\n  // Configurar el auto-cierre\n  useEffect(() => {\n    if (duration > 0) {\n      const timer = setTimeout(() => {\n        closeNotification();\n      }, duration);\n      return () => clearTimeout(timer);\n    }\n  }, [duration]);\n\n  // Reproducir sonido de notificación\n  useEffect(() => {\n    if (playSound) {\n      try {\n        // Create a single standardized audio element\n        const audio = new Audio();\n        \n        // Set the source based on the sound type with fallback to WAV format\n        let audioSource = '';\n        switch (soundType) {\n          case 'notification':\n            audioSource = '/sounds/notification';\n            break;\n          case 'alert':\n            audioSource = '/sounds/alert';\n            break;\n          case 'approval':\n            audioSource = '/sounds/approval';\n            break;\n          default:\n            audioSource = '/sounds/notification';\n        }\n        \n        // Create a fallback system with different formats\n        audio.innerHTML = `\n          <source src=\"${audioSource}.mp3\" type=\"audio/mp3\">\n          <source src=\"${audioSource}.wav\" type=\"audio/wav\">\n        `;\n        \n        // Explicitly set the src for the Audio element too (as backup)\n        audio.src = `${audioSource}.mp3`;\n        \n        // Set volume before playing\n        audio.volume = 0.5;\n        \n        // Add error handling for the audio element\n        audio.addEventListener('error', (e) => {\n          console.error('Error playing notification sound', e);\n          \n          // Try fallback to WAV if MP3 fails\n          if (audio.src.endsWith('.mp3')) {\n            console.log('Attempting to play WAV fallback');\n            audio.src = `${audioSource}.wav`;\n            audio.load();\n            audio.play().catch(err => {\n              console.error('Fallback sound playback failed:', err);\n            });\n          }\n        });\n        \n        // Wait a moment to ensure browser is ready\n        setTimeout(() => {\n          const playPromise = audio.play();\n          if (playPromise !== undefined) {\n            playPromise.catch(err => {\n              console.log('Browser blocked autoplay, needs user interaction first');\n              \n              // Mark that we've attempted to play audio\n              if (!document.documentElement.hasAttribute('data-audio-attempted')) {\n                document.documentElement.setAttribute('data-audio-attempted', 'true');\n              }\n            });\n          }\n        }, 100);\n      } catch (error) {\n        console.error('Failed to initialize sound:', error);\n      }\n    }\n  }, [playSound, soundType]);\n\n  const closeNotification = () => {\n    setExiting(true);\n    // Agregar un pequeño retraso para la animación de salida\n    setTimeout(() => {\n      setIsVisible(false);\n      if (onClose) onClose();\n    }, 300);\n  };\n\n  if (!isVisible) return null;\n\n  // Mapeo de estilos según el tipo\n  const typeStyles = {\n    info: {\n      bg: 'bg-blue-50',\n      border: 'border-blue-200',\n      text: 'text-blue-800',\n      title: 'text-blue-900'\n    },\n    success: {\n      bg: 'bg-green-50',\n      border: 'border-green-200',\n      text: 'text-green-800',\n      title: 'text-green-900'\n    },\n    warning: {\n      bg: 'bg-yellow-50',\n      border: 'border-yellow-200',\n      text: 'text-yellow-800',\n      title: 'text-yellow-900'\n    },\n    error: {\n      bg: 'bg-red-50',\n      border: 'border-red-200',\n      text: 'text-red-800',\n      title: 'text-red-900'\n    }\n  };\n\n  // Map complex notification types to the basic ones\n  const basicType = mapNotificationTypeToBasic(type);\n  \n  // Use the mapped type to get styles\n  const styles = typeStyles[basicType] || typeStyles.info;\n\n  return (\n    <div className=\"fixed top-5 right-5 z-50 max-w-md w-full animate-popup\">\n      <div\n        className={`${styles.bg} ${styles.border} ${styles.text} rounded-lg shadow-lg p-4 border ${\n          exiting ? 'animate-popup-exit' : 'animate-popup-entry'\n        }`}\n      >\n        <div className=\"flex justify-between items-start\">\n          <div className=\"flex-1\">\n            <h3 className={`text-base font-semibold ${styles.title}`}>{title}</h3>\n            <div className=\"mt-1 text-sm\">{message}</div>\n          </div>\n          <button\n            onClick={closeNotification}\n            className=\"flex-shrink-0 ml-2 text-gray-400 hover:text-gray-500 focus:outline-none\"\n          >\n            <XMarkIcon className=\"h-5 w-5\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotificationPopup; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}