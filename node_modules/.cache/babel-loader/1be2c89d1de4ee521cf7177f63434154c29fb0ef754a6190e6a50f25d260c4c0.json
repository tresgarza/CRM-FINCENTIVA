{"ast":null,"code":"import{TABLES}from'../utils/constants/tables';import{executeQuery}from'../utils/databaseUtils';/**\n * Obtiene estadísticas generales para el dashboard\n */export const getGeneralDashboardStats=async()=>{try{var _totalAppResult$,_amountResult$,_amountResult$2,_amountResult$3,_categoryResult$,_categoryResult$2,_categoryResult$3,_categoryResult$4,_totalClientsResult$;// Total de aplicaciones\nconst totalApplicationsQuery=`SELECT COUNT(*) as total FROM ${TABLES.APPLICATIONS}`;const totalAppResult=await executeQuery(totalApplicationsQuery);const totalApplications=parseInt(((_totalAppResult$=totalAppResult[0])===null||_totalAppResult$===void 0?void 0:_totalAppResult$.total)||'0');// Aplicaciones por estado\nconst applicationsByStatusQuery=`\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      GROUP BY status\n    `;const statusResult=await executeQuery(applicationsByStatusQuery);const applicationsByStatus=statusResult.map(row=>({status:row.status,count:parseInt(row.count)}));// Estadísticas de montos\nconst amountStatsQuery=`\n      SELECT \n        AVG(amount) as avg_amount, \n        MIN(amount) as min_amount, \n        MAX(amount) as max_amount \n      FROM ${TABLES.APPLICATIONS} \n      WHERE amount IS NOT NULL\n    `;const amountResult=await executeQuery(amountStatsQuery);const avgAmount=parseFloat(((_amountResult$=amountResult[0])===null||_amountResult$===void 0?void 0:_amountResult$.avg_amount)||'0');const minAmount=parseFloat(((_amountResult$2=amountResult[0])===null||_amountResult$2===void 0?void 0:_amountResult$2.min_amount)||'0');const maxAmount=parseFloat(((_amountResult$3=amountResult[0])===null||_amountResult$3===void 0?void 0:_amountResult$3.max_amount)||'0');// Aplicaciones recientes\nconst recentApplicationsQuery=`\n      SELECT id, created_at, client_name, status, amount, company_name\n      FROM ${TABLES.APPLICATIONS}\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;const recentApplications=await executeQuery(recentApplicationsQuery);// Aplicaciones por mes (últimos 6 meses)\nconst applicationsByMonthQuery=`\n      SELECT \n        TO_CHAR(created_at, 'YYYY-MM') as month, \n        COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE created_at >= NOW() - INTERVAL '6 months'\n      GROUP BY TO_CHAR(created_at, 'YYYY-MM')\n      ORDER BY month\n    `;const monthResult=await executeQuery(applicationsByMonthQuery);const applicationsByMonth=monthResult.map(row=>({month:row.month,count:parseInt(row.count)}));// Totales por categoría principal\nconst totalByMajorCategoryQuery=`\n      SELECT \n        COUNT(*) FILTER (WHERE status IN ('approved', 'APROBADO', 'Aprobado por Asesor')) as approved,\n        COUNT(*) FILTER (WHERE status IN ('rejected', 'RECHAZADO')) as rejected,\n        COUNT(*) FILTER (WHERE status IN ('pending', 'new', 'Solicitud', 'Simulación')) as pending,\n        COUNT(*) FILTER (WHERE \n          (approved_by_advisor = false AND approved_by_company = false) OR\n          (approved_by_advisor = true AND approved_by_company = false) OR\n          (approved_by_advisor = false AND approved_by_company = true)\n        ) as pending_approval\n      FROM ${TABLES.APPLICATIONS}\n    `;const categoryResult=await executeQuery(totalByMajorCategoryQuery);const totalApproved=parseInt(((_categoryResult$=categoryResult[0])===null||_categoryResult$===void 0?void 0:_categoryResult$.approved)||'0');const totalRejected=parseInt(((_categoryResult$2=categoryResult[0])===null||_categoryResult$2===void 0?void 0:_categoryResult$2.rejected)||'0');const totalPending=parseInt(((_categoryResult$3=categoryResult[0])===null||_categoryResult$3===void 0?void 0:_categoryResult$3.pending)||'0');const pendingApproval=parseInt(((_categoryResult$4=categoryResult[0])===null||_categoryResult$4===void 0?void 0:_categoryResult$4.pending_approval)||'0');// Total clients\nconst totalClientsQuery=`SELECT COUNT(*) as total FROM ${TABLES.CLIENTS}`;const totalClientsResult=await executeQuery(totalClientsQuery);const totalClients=parseInt(((_totalClientsResult$=totalClientsResult[0])===null||_totalClientsResult$===void 0?void 0:_totalClientsResult$.total)||'0');return{totalApplications,applicationsByStatus,avgAmount,minAmount,maxAmount,recentApplications,applicationsByMonth,totalApproved,totalRejected,totalPending,pendingApproval,totalClients};}catch(error){console.error('Error al obtener estadísticas del dashboard:',error);throw error;}};/**\n * Obtiene estadísticas específicas para un asesor\n * @param advisorId ID del asesor\n */export const getAdvisorDashboardStats=async advisorId=>{try{var _advisorAppResult$,_clientsResult$,_companiesResult$,_conversionResult$,_conversionResult$2,_timeResult$;// Obtenemos las estadísticas generales primero\nconst baseStats=await getGeneralDashboardStats();// Estadísticas específicas del asesor\n// Total de aplicaciones del asesor\nconst advisorApplicationsQuery=`\n      SELECT COUNT(*) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;const advisorAppResult=await executeQuery(advisorApplicationsQuery);const totalAdvisorApplications=parseInt(((_advisorAppResult$=advisorAppResult[0])===null||_advisorAppResult$===void 0?void 0:_advisorAppResult$.total)||'0');// Aplicaciones por estado del asesor\nconst advisorStatusQuery=`\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n      GROUP BY status\n    `;const advisorStatusResult=await executeQuery(advisorStatusQuery);const advisorApplicationsByStatus=advisorStatusResult.map(row=>({status:row.status,count:parseInt(row.count)}));// Total de clientes del asesor\nconst clientsQuery=`\n      SELECT COUNT(*) as total \n      FROM ${TABLES.CLIENTS} \n      WHERE advisor_id = '${advisorId}'\n    `;const clientsResult=await executeQuery(clientsQuery);const totalClients=parseInt(((_clientsResult$=clientsResult[0])===null||_clientsResult$===void 0?void 0:_clientsResult$.total)||'0');// Total de empresas asignadas al asesor\nconst companiesQuery=`\n      SELECT COUNT(DISTINCT company_id) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;const companiesResult=await executeQuery(companiesQuery);const totalCompanies=parseInt(((_companiesResult$=companiesResult[0])===null||_companiesResult$===void 0?void 0:_companiesResult$.total)||'0');// Tasa de conversión (aprobados / total)\nconst conversionRateQuery=`\n      SELECT \n        COUNT(*) FILTER (WHERE status IN ('approved', 'APROBADO', 'completed')) as approved,\n        COUNT(*) as total\n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;const conversionResult=await executeQuery(conversionRateQuery);const approved=parseInt(((_conversionResult$=conversionResult[0])===null||_conversionResult$===void 0?void 0:_conversionResult$.approved)||'0');const total=parseInt(((_conversionResult$2=conversionResult[0])===null||_conversionResult$2===void 0?void 0:_conversionResult$2.total)||'0');const conversionRate=total>0?approved/total*100:0;// Tiempo promedio hasta aprobación\nconst avgTimeQuery=`\n      SELECT AVG(EXTRACT(EPOCH FROM (approval_date_advisor - created_at))/86400) as avg_days\n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n      AND approval_date_advisor IS NOT NULL\n    `;const timeResult=await executeQuery(avgTimeQuery);const avgTimeToApproval=parseFloat(((_timeResult$=timeResult[0])===null||_timeResult$===void 0?void 0:_timeResult$.avg_days)||'0');// Aplicaciones recientes del asesor\nconst recentAdvisorAppsQuery=`\n      SELECT id, created_at, client_name, status, amount, company_name\n      FROM ${TABLES.APPLICATIONS}\n      WHERE assigned_to = '${advisorId}'\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;const recentAdvisorApps=await executeQuery(recentAdvisorAppsQuery);return{...baseStats,totalApplications:totalAdvisorApplications,applicationsByStatus:advisorApplicationsByStatus,recentApplications:recentAdvisorApps,totalClients,totalCompanies,conversionRate,avgTimeToApproval};}catch(error){console.error(`Error al obtener estadísticas del asesor ${advisorId}:`,error);throw error;}};/**\n * Obtiene estadísticas específicas para una empresa\n * @param companyId ID de la empresa\n */export const getCompanyDashboardStats=async companyId=>{try{var _companyAppResult$,_advisorsResult$,_clientsResult$2,_timeResult$2;// Obtenemos las estadísticas generales primero\nconst baseStats=await getGeneralDashboardStats();// Estadísticas específicas de la empresa\n// Total de aplicaciones de la empresa\nconst companyApplicationsQuery=`\n      SELECT COUNT(*) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n    `;const companyAppResult=await executeQuery(companyApplicationsQuery);const totalCompanyApplications=parseInt(((_companyAppResult$=companyAppResult[0])===null||_companyAppResult$===void 0?void 0:_companyAppResult$.total)||'0');// Aplicaciones por estado de la empresa\nconst companyStatusQuery=`\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n      GROUP BY status\n    `;const companyStatusResult=await executeQuery(companyStatusQuery);const companyApplicationsByStatus=companyStatusResult.map(row=>({status:row.status,count:parseInt(row.count)}));// Total de asesores asignados a la empresa\nconst advisorsQuery=`\n      SELECT COUNT(DISTINCT assigned_to) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n    `;const advisorsResult=await executeQuery(advisorsQuery);const totalAdvisors=parseInt(((_advisorsResult$=advisorsResult[0])===null||_advisorsResult$===void 0?void 0:_advisorsResult$.total)||'0');// Total de clientes de la empresa\nconst clientsQuery=`\n      SELECT COUNT(*) as total \n      FROM ${TABLES.CLIENTS} \n      WHERE company_id = '${companyId}'\n    `;const clientsResult=await executeQuery(clientsQuery);const totalClientsCompany=parseInt(((_clientsResult$2=clientsResult[0])===null||_clientsResult$2===void 0?void 0:_clientsResult$2.total)||'0');// Tiempo promedio de aprobación\nconst avgTimeQuery=`\n      SELECT AVG(EXTRACT(EPOCH FROM (approval_date_company - created_at))/86400) as avg_days\n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n      AND approval_date_company IS NOT NULL\n    `;const timeResult=await executeQuery(avgTimeQuery);const avgApprovalTime=parseFloat(((_timeResult$2=timeResult[0])===null||_timeResult$2===void 0?void 0:_timeResult$2.avg_days)||'0');// Aplicaciones recientes de la empresa\nconst recentCompanyAppsQuery=`\n      SELECT id, created_at, client_name, status, amount, assigned_to\n      FROM ${TABLES.APPLICATIONS}\n      WHERE company_id = '${companyId}'\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;const recentCompanyApps=await executeQuery(recentCompanyAppsQuery);return{...baseStats,totalApplications:totalCompanyApplications,applicationsByStatus:companyApplicationsByStatus,recentApplications:recentCompanyApps,totalAdvisors,totalClientsCompany,avgApprovalTime};}catch(error){console.error(`Error al obtener estadísticas de la empresa ${companyId}:`,error);throw error;}};/**\n * Obtiene estadísticas de aplicaciones pendientes de aprobación\n * @param userId ID del usuario (asesor o admin de empresa)\n * @param isCompanyAdmin Indica si el usuario es un admin de empresa\n */export const getPendingApprovalStats=async(userId,isCompanyAdmin)=>{try{var _result$;let query='';if(isCompanyAdmin){var _companyResult$;// Obtener ID de la compañía del admin\nconst companyQuery=`\n        SELECT company_id FROM ${TABLES.COMPANY_ADMINS} WHERE id = '${userId}'\n      `;const companyResult=await executeQuery(companyQuery);const companyId=(_companyResult$=companyResult[0])===null||_companyResult$===void 0?void 0:_companyResult$.company_id;if(!companyId){throw new Error('No se encontró la compañía para este administrador');}// Aplicaciones pendientes de aprobación por la compañía\nquery=`\n        SELECT COUNT(*) as pending_count\n        FROM ${TABLES.APPLICATIONS}\n        WHERE company_id = '${companyId}'\n        AND approved_by_advisor = true\n        AND approved_by_company = false\n      `;}else{// Aplicaciones pendientes de aprobación por el asesor\nquery=`\n        SELECT COUNT(*) as pending_count\n        FROM ${TABLES.APPLICATIONS}\n        WHERE assigned_to = '${userId}'\n        AND approved_by_advisor = false\n      `;}const result=await executeQuery(query);return{pendingCount:parseInt(((_result$=result[0])===null||_result$===void 0?void 0:_result$.pending_count)||'0')};}catch(error){console.error('Error al obtener estadísticas de aprobaciones pendientes:',error);throw error;}};","map":{"version":3,"names":["TABLES","executeQuery","getGeneralDashboardStats","_totalAppResult$","_amountResult$","_amountResult$2","_amountResult$3","_categoryResult$","_categoryResult$2","_categoryResult$3","_categoryResult$4","_totalClientsResult$","totalApplicationsQuery","APPLICATIONS","totalAppResult","totalApplications","parseInt","total","applicationsByStatusQuery","statusResult","applicationsByStatus","map","row","status","count","amountStatsQuery","amountResult","avgAmount","parseFloat","avg_amount","minAmount","min_amount","maxAmount","max_amount","recentApplicationsQuery","recentApplications","applicationsByMonthQuery","monthResult","applicationsByMonth","month","totalByMajorCategoryQuery","categoryResult","totalApproved","approved","totalRejected","rejected","totalPending","pending","pendingApproval","pending_approval","totalClientsQuery","CLIENTS","totalClientsResult","totalClients","error","console","getAdvisorDashboardStats","advisorId","_advisorAppResult$","_clientsResult$","_companiesResult$","_conversionResult$","_conversionResult$2","_timeResult$","baseStats","advisorApplicationsQuery","advisorAppResult","totalAdvisorApplications","advisorStatusQuery","advisorStatusResult","advisorApplicationsByStatus","clientsQuery","clientsResult","companiesQuery","companiesResult","totalCompanies","conversionRateQuery","conversionResult","conversionRate","avgTimeQuery","timeResult","avgTimeToApproval","avg_days","recentAdvisorAppsQuery","recentAdvisorApps","getCompanyDashboardStats","companyId","_companyAppResult$","_advisorsResult$","_clientsResult$2","_timeResult$2","companyApplicationsQuery","companyAppResult","totalCompanyApplications","companyStatusQuery","companyStatusResult","companyApplicationsByStatus","advisorsQuery","advisorsResult","totalAdvisors","totalClientsCompany","avgApprovalTime","recentCompanyAppsQuery","recentCompanyApps","getPendingApprovalStats","userId","isCompanyAdmin","_result$","query","_companyResult$","companyQuery","COMPANY_ADMINS","companyResult","company_id","Error","result","pendingCount","pending_count"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/dashboardService.ts"],"sourcesContent":["import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from '../utils/constants/tables';\nimport { executeQuery } from '../utils/databaseUtils';\n\nexport interface DashboardStats {\n  totalApplications: number;\n  applicationsByStatus: {\n    status: string;\n    count: number;\n  }[];\n  avgAmount: number;\n  minAmount: number;\n  maxAmount: number;\n  recentApplications: any[];\n  applicationsByMonth: {\n    month: string;\n    count: number;\n  }[];\n  totalApproved: number;\n  totalRejected: number;\n  totalPending: number;\n  pendingApproval: number;\n  totalClients: number;\n}\n\nexport interface AdvisorStats extends DashboardStats {\n  totalClients: number;\n  totalCompanies: number;\n  conversionRate: number;\n  avgTimeToApproval: number;\n}\n\nexport interface CompanyStats extends DashboardStats {\n  totalAdvisors: number;\n  totalClientsCompany: number;\n  avgApprovalTime: number;\n}\n\n/**\n * Obtiene estadísticas generales para el dashboard\n */\nexport const getGeneralDashboardStats = async (): Promise<DashboardStats> => {\n  try {\n    // Total de aplicaciones\n    const totalApplicationsQuery = `SELECT COUNT(*) as total FROM ${TABLES.APPLICATIONS}`;\n    const totalAppResult = await executeQuery(totalApplicationsQuery);\n    const totalApplications = parseInt(totalAppResult[0]?.total || '0');\n\n    // Aplicaciones por estado\n    const applicationsByStatusQuery = `\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      GROUP BY status\n    `;\n    const statusResult = await executeQuery(applicationsByStatusQuery);\n    const applicationsByStatus = statusResult.map((row: any) => ({\n      status: row.status,\n      count: parseInt(row.count)\n    }));\n\n    // Estadísticas de montos\n    const amountStatsQuery = `\n      SELECT \n        AVG(amount) as avg_amount, \n        MIN(amount) as min_amount, \n        MAX(amount) as max_amount \n      FROM ${TABLES.APPLICATIONS} \n      WHERE amount IS NOT NULL\n    `;\n    const amountResult = await executeQuery(amountStatsQuery);\n    const avgAmount = parseFloat(amountResult[0]?.avg_amount || '0');\n    const minAmount = parseFloat(amountResult[0]?.min_amount || '0');\n    const maxAmount = parseFloat(amountResult[0]?.max_amount || '0');\n\n    // Aplicaciones recientes\n    const recentApplicationsQuery = `\n      SELECT id, created_at, client_name, status, amount, company_name\n      FROM ${TABLES.APPLICATIONS}\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;\n    const recentApplications = await executeQuery(recentApplicationsQuery);\n\n    // Aplicaciones por mes (últimos 6 meses)\n    const applicationsByMonthQuery = `\n      SELECT \n        TO_CHAR(created_at, 'YYYY-MM') as month, \n        COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE created_at >= NOW() - INTERVAL '6 months'\n      GROUP BY TO_CHAR(created_at, 'YYYY-MM')\n      ORDER BY month\n    `;\n    const monthResult = await executeQuery(applicationsByMonthQuery);\n    const applicationsByMonth = monthResult.map((row: any) => ({\n      month: row.month,\n      count: parseInt(row.count)\n    }));\n\n    // Totales por categoría principal\n    const totalByMajorCategoryQuery = `\n      SELECT \n        COUNT(*) FILTER (WHERE status IN ('approved', 'APROBADO', 'Aprobado por Asesor')) as approved,\n        COUNT(*) FILTER (WHERE status IN ('rejected', 'RECHAZADO')) as rejected,\n        COUNT(*) FILTER (WHERE status IN ('pending', 'new', 'Solicitud', 'Simulación')) as pending,\n        COUNT(*) FILTER (WHERE \n          (approved_by_advisor = false AND approved_by_company = false) OR\n          (approved_by_advisor = true AND approved_by_company = false) OR\n          (approved_by_advisor = false AND approved_by_company = true)\n        ) as pending_approval\n      FROM ${TABLES.APPLICATIONS}\n    `;\n    const categoryResult = await executeQuery(totalByMajorCategoryQuery);\n    const totalApproved = parseInt(categoryResult[0]?.approved || '0');\n    const totalRejected = parseInt(categoryResult[0]?.rejected || '0');\n    const totalPending = parseInt(categoryResult[0]?.pending || '0');\n    const pendingApproval = parseInt(categoryResult[0]?.pending_approval || '0');\n\n    // Total clients\n    const totalClientsQuery = `SELECT COUNT(*) as total FROM ${TABLES.CLIENTS}`;\n    const totalClientsResult = await executeQuery(totalClientsQuery);\n    const totalClients = parseInt(totalClientsResult[0]?.total || '0');\n\n    return {\n      totalApplications,\n      applicationsByStatus,\n      avgAmount,\n      minAmount,\n      maxAmount,\n      recentApplications,\n      applicationsByMonth,\n      totalApproved,\n      totalRejected,\n      totalPending,\n      pendingApproval,\n      totalClients\n    };\n  } catch (error) {\n    console.error('Error al obtener estadísticas del dashboard:', error);\n    throw error;\n  }\n};\n\n/**\n * Obtiene estadísticas específicas para un asesor\n * @param advisorId ID del asesor\n */\nexport const getAdvisorDashboardStats = async (advisorId: string): Promise<AdvisorStats> => {\n  try {\n    // Obtenemos las estadísticas generales primero\n    const baseStats = await getGeneralDashboardStats();\n\n    // Estadísticas específicas del asesor\n    // Total de aplicaciones del asesor\n    const advisorApplicationsQuery = `\n      SELECT COUNT(*) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;\n    const advisorAppResult = await executeQuery(advisorApplicationsQuery);\n    const totalAdvisorApplications = parseInt(advisorAppResult[0]?.total || '0');\n\n    // Aplicaciones por estado del asesor\n    const advisorStatusQuery = `\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n      GROUP BY status\n    `;\n    const advisorStatusResult = await executeQuery(advisorStatusQuery);\n    const advisorApplicationsByStatus = advisorStatusResult.map((row: any) => ({\n      status: row.status,\n      count: parseInt(row.count)\n    }));\n\n    // Total de clientes del asesor\n    const clientsQuery = `\n      SELECT COUNT(*) as total \n      FROM ${TABLES.CLIENTS} \n      WHERE advisor_id = '${advisorId}'\n    `;\n    const clientsResult = await executeQuery(clientsQuery);\n    const totalClients = parseInt(clientsResult[0]?.total || '0');\n\n    // Total de empresas asignadas al asesor\n    const companiesQuery = `\n      SELECT COUNT(DISTINCT company_id) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;\n    const companiesResult = await executeQuery(companiesQuery);\n    const totalCompanies = parseInt(companiesResult[0]?.total || '0');\n\n    // Tasa de conversión (aprobados / total)\n    const conversionRateQuery = `\n      SELECT \n        COUNT(*) FILTER (WHERE status IN ('approved', 'APROBADO', 'completed')) as approved,\n        COUNT(*) as total\n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;\n    const conversionResult = await executeQuery(conversionRateQuery);\n    const approved = parseInt(conversionResult[0]?.approved || '0');\n    const total = parseInt(conversionResult[0]?.total || '0');\n    const conversionRate = total > 0 ? (approved / total) * 100 : 0;\n\n    // Tiempo promedio hasta aprobación\n    const avgTimeQuery = `\n      SELECT AVG(EXTRACT(EPOCH FROM (approval_date_advisor - created_at))/86400) as avg_days\n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n      AND approval_date_advisor IS NOT NULL\n    `;\n    const timeResult = await executeQuery(avgTimeQuery);\n    const avgTimeToApproval = parseFloat(timeResult[0]?.avg_days || '0');\n\n    // Aplicaciones recientes del asesor\n    const recentAdvisorAppsQuery = `\n      SELECT id, created_at, client_name, status, amount, company_name\n      FROM ${TABLES.APPLICATIONS}\n      WHERE assigned_to = '${advisorId}'\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;\n    const recentAdvisorApps = await executeQuery(recentAdvisorAppsQuery);\n\n    return {\n      ...baseStats,\n      totalApplications: totalAdvisorApplications,\n      applicationsByStatus: advisorApplicationsByStatus,\n      recentApplications: recentAdvisorApps,\n      totalClients,\n      totalCompanies,\n      conversionRate,\n      avgTimeToApproval\n    };\n  } catch (error) {\n    console.error(`Error al obtener estadísticas del asesor ${advisorId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Obtiene estadísticas específicas para una empresa\n * @param companyId ID de la empresa\n */\nexport const getCompanyDashboardStats = async (companyId: string): Promise<CompanyStats> => {\n  try {\n    // Obtenemos las estadísticas generales primero\n    const baseStats = await getGeneralDashboardStats();\n\n    // Estadísticas específicas de la empresa\n    // Total de aplicaciones de la empresa\n    const companyApplicationsQuery = `\n      SELECT COUNT(*) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n    `;\n    const companyAppResult = await executeQuery(companyApplicationsQuery);\n    const totalCompanyApplications = parseInt(companyAppResult[0]?.total || '0');\n\n    // Aplicaciones por estado de la empresa\n    const companyStatusQuery = `\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n      GROUP BY status\n    `;\n    const companyStatusResult = await executeQuery(companyStatusQuery);\n    const companyApplicationsByStatus = companyStatusResult.map((row: any) => ({\n      status: row.status,\n      count: parseInt(row.count)\n    }));\n\n    // Total de asesores asignados a la empresa\n    const advisorsQuery = `\n      SELECT COUNT(DISTINCT assigned_to) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n    `;\n    const advisorsResult = await executeQuery(advisorsQuery);\n    const totalAdvisors = parseInt(advisorsResult[0]?.total || '0');\n\n    // Total de clientes de la empresa\n    const clientsQuery = `\n      SELECT COUNT(*) as total \n      FROM ${TABLES.CLIENTS} \n      WHERE company_id = '${companyId}'\n    `;\n    const clientsResult = await executeQuery(clientsQuery);\n    const totalClientsCompany = parseInt(clientsResult[0]?.total || '0');\n\n    // Tiempo promedio de aprobación\n    const avgTimeQuery = `\n      SELECT AVG(EXTRACT(EPOCH FROM (approval_date_company - created_at))/86400) as avg_days\n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n      AND approval_date_company IS NOT NULL\n    `;\n    const timeResult = await executeQuery(avgTimeQuery);\n    const avgApprovalTime = parseFloat(timeResult[0]?.avg_days || '0');\n\n    // Aplicaciones recientes de la empresa\n    const recentCompanyAppsQuery = `\n      SELECT id, created_at, client_name, status, amount, assigned_to\n      FROM ${TABLES.APPLICATIONS}\n      WHERE company_id = '${companyId}'\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;\n    const recentCompanyApps = await executeQuery(recentCompanyAppsQuery);\n\n    return {\n      ...baseStats,\n      totalApplications: totalCompanyApplications,\n      applicationsByStatus: companyApplicationsByStatus,\n      recentApplications: recentCompanyApps,\n      totalAdvisors,\n      totalClientsCompany,\n      avgApprovalTime\n    };\n  } catch (error) {\n    console.error(`Error al obtener estadísticas de la empresa ${companyId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Obtiene estadísticas de aplicaciones pendientes de aprobación\n * @param userId ID del usuario (asesor o admin de empresa)\n * @param isCompanyAdmin Indica si el usuario es un admin de empresa\n */\nexport const getPendingApprovalStats = async (userId: string, isCompanyAdmin: boolean): Promise<any> => {\n  try {\n    let query = '';\n    \n    if (isCompanyAdmin) {\n      // Obtener ID de la compañía del admin\n      const companyQuery = `\n        SELECT company_id FROM ${TABLES.COMPANY_ADMINS} WHERE id = '${userId}'\n      `;\n      const companyResult = await executeQuery(companyQuery);\n      const companyId = companyResult[0]?.company_id;\n      \n      if (!companyId) {\n        throw new Error('No se encontró la compañía para este administrador');\n      }\n      \n      // Aplicaciones pendientes de aprobación por la compañía\n      query = `\n        SELECT COUNT(*) as pending_count\n        FROM ${TABLES.APPLICATIONS}\n        WHERE company_id = '${companyId}'\n        AND approved_by_advisor = true\n        AND approved_by_company = false\n      `;\n    } else {\n      // Aplicaciones pendientes de aprobación por el asesor\n      query = `\n        SELECT COUNT(*) as pending_count\n        FROM ${TABLES.APPLICATIONS}\n        WHERE assigned_to = '${userId}'\n        AND approved_by_advisor = false\n      `;\n    }\n    \n    const result = await executeQuery(query);\n    return {\n      pendingCount: parseInt(result[0]?.pending_count || '0')\n    };\n  } catch (error) {\n    console.error('Error al obtener estadísticas de aprobaciones pendientes:', error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}