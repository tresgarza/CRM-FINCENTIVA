{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/contexts/NotificationContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { useAuth } from './AuthContext';\nimport { usePermissions } from './PermissionsContext';\nimport { supabase } from '../lib/supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Tipos de notificaciones\nexport let NotificationType = /*#__PURE__*/function (NotificationType) {\n  NotificationType[\"SUCCESS\"] = \"success\";\n  NotificationType[\"ERROR\"] = \"error\";\n  NotificationType[\"INFO\"] = \"info\";\n  NotificationType[\"WARNING\"] = \"warning\";\n  NotificationType[\"NEW_APPLICATION\"] = \"new_application\";\n  NotificationType[\"APPROVAL_REQUIRED\"] = \"approval_required\";\n  return NotificationType;\n}({});\n\n// Interfaz para una notificación\n\n// Interfaz para los datos de aplicación en notificaciones\n\n// Interfaz del contexto\n\n// Configuración predeterminada\nconst DEFAULT_CONTEXT = {\n  notifications: [],\n  unreadCount: 0,\n  addNotification: () => {},\n  markAsRead: () => {},\n  markAllAsRead: () => {},\n  clearNotifications: () => {},\n  playNotificationSound: () => {},\n  soundEnabled: true,\n  setSoundEnabled: () => {}\n};\n\n// Creación del contexto\nconst NotificationContext = /*#__PURE__*/createContext(DEFAULT_CONTEXT);\n\n// Hook personalizado para usar el contexto\n_c = NotificationContext;\nexport const useNotifications = () => {\n  _s();\n  return useContext(NotificationContext);\n};\n\n// Proveedor del contexto\n_s(useNotifications, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n  const {\n    user\n  } = useAuth();\n  const {\n    isAdvisor,\n    isCompanyAdmin\n  } = usePermissions();\n\n  // Referencias a los elementos de audio\n  const defaultSoundRef = React.useRef(null);\n  const approvalSoundRef = React.useRef(null);\n  const newApplicationSoundRef = React.useRef(null);\n\n  // Inicializar elementos de audio\n  useEffect(() => {\n    defaultSoundRef.current = new Audio('/sounds/notification.mp3');\n    approvalSoundRef.current = new Audio('/sounds/approval-needed.mp3');\n    newApplicationSoundRef.current = new Audio('/sounds/new-application.mp3');\n\n    // Cargar configuración de sonido desde localStorage\n    const storedSoundEnabled = localStorage.getItem('soundEnabled');\n    if (storedSoundEnabled !== null) {\n      setSoundEnabled(storedSoundEnabled === 'true');\n    }\n    return () => {\n      defaultSoundRef.current = null;\n      approvalSoundRef.current = null;\n      newApplicationSoundRef.current = null;\n    };\n  }, []);\n\n  // Guardar configuración de sonido en localStorage\n  useEffect(() => {\n    localStorage.setItem('soundEnabled', soundEnabled.toString());\n  }, [soundEnabled]);\n\n  // Suscribirse a nuevas solicitudes o cambios de estado\n  useEffect(() => {\n    if (!user) return;\n\n    // Configurar canal para solicitudes que requieren aprobación\n    const approvalChannel = supabase.channel('approval-notifications').on('postgres_changes', {\n      event: 'UPDATE',\n      schema: 'public',\n      table: 'applications',\n      filter: isAdvisor() ? 'approved_by_advisor=false AND status=in_review' : isCompanyAdmin() ? 'approved_by_company=false AND approved_by_advisor=true' : undefined\n    }, payload => {\n      // Verificar si la solicitud es relevante para el usuario\n      // (Aquí se puede agregar lógica adicional según el rol)\n\n      const application = payload.new;\n      addNotification({\n        type: NotificationType.APPROVAL_REQUIRED,\n        title: 'Solicitud lista para aprobación',\n        message: `La solicitud de ${application.client_name} está lista para tu aprobación`,\n        data: application,\n        soundEnabled: true\n      });\n    }).subscribe();\n\n    // Configurar canal para nuevas solicitudes\n    const newApplicationChannel = supabase.channel('new-application-notifications').on('postgres_changes', {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'applications'\n    }, payload => {\n      const application = payload.new;\n\n      // Verificar si la solicitud es relevante para el usuario\n      // (Aquí se puede agregar lógica según permisos o asignación)\n\n      addNotification({\n        type: NotificationType.NEW_APPLICATION,\n        title: 'Nueva solicitud recibida',\n        message: `Se ha recibido una nueva solicitud de ${application.client_name}`,\n        data: application,\n        soundEnabled: true\n      });\n    }).subscribe();\n    return () => {\n      // Limpiar suscripciones\n      supabase.removeChannel(approvalChannel);\n      supabase.removeChannel(newApplicationChannel);\n    };\n  }, [user, isAdvisor, isCompanyAdmin]);\n\n  // Calcular el número de notificaciones no leídas\n  const unreadCount = notifications.filter(notif => !notif.isRead).length;\n\n  // Función para reproducir sonido de notificación\n  const playNotificationSound = useCallback(type => {\n    if (!soundEnabled) return;\n    try {\n      // Seleccionar el sonido según el tipo de notificación\n      let soundToPlay = defaultSoundRef.current;\n      if (type === NotificationType.APPROVAL_REQUIRED && approvalSoundRef.current) {\n        soundToPlay = approvalSoundRef.current;\n      } else if (type === NotificationType.NEW_APPLICATION && newApplicationSoundRef.current) {\n        soundToPlay = newApplicationSoundRef.current;\n      }\n      if (soundToPlay) {\n        soundToPlay.currentTime = 0;\n        soundToPlay.play().catch(e => console.error('Error playing notification sound:', e));\n      }\n    } catch (error) {\n      console.error('Error playing notification sound:', error);\n    }\n  }, [soundEnabled]);\n\n  // Función para agregar una nueva notificación\n  const addNotification = useCallback(notification => {\n    const newNotification = {\n      id: Date.now().toString(),\n      timestamp: new Date(),\n      isRead: false,\n      ...notification\n    };\n    setNotifications(prev => [newNotification, ...prev]);\n\n    // Reproducir sonido si está habilitado\n    if (notification.soundEnabled !== false) {\n      playNotificationSound(notification.type);\n    }\n  }, [playNotificationSound]);\n\n  // Función para marcar una notificación como leída\n  const markAsRead = useCallback(id => {\n    setNotifications(prev => prev.map(notif => notif.id === id ? {\n      ...notif,\n      isRead: true\n    } : notif));\n  }, []);\n\n  // Función para marcar todas las notificaciones como leídas\n  const markAllAsRead = useCallback(() => {\n    setNotifications(prev => prev.map(notif => ({\n      ...notif,\n      isRead: true\n    })));\n  }, []);\n\n  // Función para eliminar todas las notificaciones\n  const clearNotifications = useCallback(() => {\n    setNotifications([]);\n  }, []);\n\n  // Valor del contexto\n  const contextValue = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    playNotificationSound,\n    soundEnabled,\n    setSoundEnabled\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"yRb2Bx1QOoKmUz9M8IMI6QjbgyQ=\", false, function () {\n  return [useAuth, usePermissions];\n});\n_c2 = NotificationProvider;\nexport default NotificationContext;\nvar _c, _c2;\n$RefreshReg$(_c, \"NotificationContext\");\n$RefreshReg$(_c2, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useAuth","usePermissions","supabase","jsxDEV","_jsxDEV","NotificationType","DEFAULT_CONTEXT","notifications","unreadCount","addNotification","markAsRead","markAllAsRead","clearNotifications","playNotificationSound","soundEnabled","setSoundEnabled","NotificationContext","_c","useNotifications","_s","NotificationProvider","children","_s2","setNotifications","user","isAdvisor","isCompanyAdmin","defaultSoundRef","useRef","approvalSoundRef","newApplicationSoundRef","current","Audio","storedSoundEnabled","localStorage","getItem","setItem","toString","approvalChannel","channel","on","event","schema","table","filter","undefined","payload","application","new","type","APPROVAL_REQUIRED","title","message","client_name","data","subscribe","newApplicationChannel","NEW_APPLICATION","removeChannel","notif","isRead","length","soundToPlay","currentTime","play","catch","e","console","error","notification","newNotification","id","Date","now","timestamp","prev","map","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';\nimport { useAuth } from './AuthContext';\nimport { usePermissions } from './PermissionsContext';\nimport { supabase } from '../lib/supabaseClient';\nimport { RealtimePostgresChangesPayload } from '@supabase/supabase-js';\n\n// Tipos de notificaciones\nexport enum NotificationType {\n  SUCCESS = 'success',\n  ERROR = 'error',\n  INFO = 'info',\n  WARNING = 'warning',\n  NEW_APPLICATION = 'new_application',\n  APPROVAL_REQUIRED = 'approval_required'\n}\n\n// Interfaz para una notificación\ninterface Notification {\n  id: string;\n  type: NotificationType;\n  title: string;\n  message: string;\n  isRead: boolean;\n  timestamp: Date;\n  data?: any;\n  soundEnabled?: boolean;\n}\n\n// Interfaz para los datos de aplicación en notificaciones\ninterface ApplicationPayload {\n  id: string;\n  client_name: string;\n  status: string;\n  [key: string]: any;\n}\n\n// Interfaz del contexto\ninterface NotificationContextType {\n  notifications: Notification[];\n  unreadCount: number;\n  addNotification: (notification: Omit<Notification, 'id' | 'timestamp' | 'isRead'>) => void;\n  markAsRead: (id: string) => void;\n  markAllAsRead: () => void;\n  clearNotifications: () => void;\n  playNotificationSound: (type?: NotificationType) => void;\n  soundEnabled: boolean;\n  setSoundEnabled: (enabled: boolean) => void;\n}\n\n// Configuración predeterminada\nconst DEFAULT_CONTEXT: NotificationContextType = {\n  notifications: [],\n  unreadCount: 0,\n  addNotification: () => {},\n  markAsRead: () => {},\n  markAllAsRead: () => {},\n  clearNotifications: () => {},\n  playNotificationSound: () => {},\n  soundEnabled: true,\n  setSoundEnabled: () => {}\n};\n\n// Creación del contexto\nconst NotificationContext = createContext<NotificationContextType>(DEFAULT_CONTEXT);\n\n// Hook personalizado para usar el contexto\nexport const useNotifications = () => useContext(NotificationContext);\n\n// Proveedor del contexto\nexport const NotificationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [soundEnabled, setSoundEnabled] = useState<boolean>(true);\n  const { user } = useAuth();\n  const { isAdvisor, isCompanyAdmin } = usePermissions();\n\n  // Referencias a los elementos de audio\n  const defaultSoundRef = React.useRef<HTMLAudioElement | null>(null);\n  const approvalSoundRef = React.useRef<HTMLAudioElement | null>(null);\n  const newApplicationSoundRef = React.useRef<HTMLAudioElement | null>(null);\n\n  // Inicializar elementos de audio\n  useEffect(() => {\n    defaultSoundRef.current = new Audio('/sounds/notification.mp3');\n    approvalSoundRef.current = new Audio('/sounds/approval-needed.mp3');\n    newApplicationSoundRef.current = new Audio('/sounds/new-application.mp3');\n\n    // Cargar configuración de sonido desde localStorage\n    const storedSoundEnabled = localStorage.getItem('soundEnabled');\n    if (storedSoundEnabled !== null) {\n      setSoundEnabled(storedSoundEnabled === 'true');\n    }\n\n    return () => {\n      defaultSoundRef.current = null;\n      approvalSoundRef.current = null;\n      newApplicationSoundRef.current = null;\n    };\n  }, []);\n\n  // Guardar configuración de sonido en localStorage\n  useEffect(() => {\n    localStorage.setItem('soundEnabled', soundEnabled.toString());\n  }, [soundEnabled]);\n\n  // Suscribirse a nuevas solicitudes o cambios de estado\n  useEffect(() => {\n    if (!user) return;\n\n    // Configurar canal para solicitudes que requieren aprobación\n    const approvalChannel = supabase\n      .channel('approval-notifications')\n      .on(\n        'postgres_changes',\n        {\n          event: 'UPDATE',\n          schema: 'public',\n          table: 'applications',\n          filter: isAdvisor() \n            ? 'approved_by_advisor=false AND status=in_review' \n            : isCompanyAdmin() \n              ? 'approved_by_company=false AND approved_by_advisor=true' \n              : undefined\n        },\n        (payload: RealtimePostgresChangesPayload<ApplicationPayload>) => {\n          // Verificar si la solicitud es relevante para el usuario\n          // (Aquí se puede agregar lógica adicional según el rol)\n          \n          const application = payload.new as ApplicationPayload;\n          addNotification({\n            type: NotificationType.APPROVAL_REQUIRED,\n            title: 'Solicitud lista para aprobación',\n            message: `La solicitud de ${application.client_name} está lista para tu aprobación`,\n            data: application,\n            soundEnabled: true\n          });\n        }\n      )\n      .subscribe();\n\n    // Configurar canal para nuevas solicitudes\n    const newApplicationChannel = supabase\n      .channel('new-application-notifications')\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'applications'\n        },\n        (payload: RealtimePostgresChangesPayload<ApplicationPayload>) => {\n          const application = payload.new as ApplicationPayload;\n          \n          // Verificar si la solicitud es relevante para el usuario\n          // (Aquí se puede agregar lógica según permisos o asignación)\n          \n          addNotification({\n            type: NotificationType.NEW_APPLICATION,\n            title: 'Nueva solicitud recibida',\n            message: `Se ha recibido una nueva solicitud de ${application.client_name}`,\n            data: application,\n            soundEnabled: true\n          });\n        }\n      )\n      .subscribe();\n\n    return () => {\n      // Limpiar suscripciones\n      supabase.removeChannel(approvalChannel);\n      supabase.removeChannel(newApplicationChannel);\n    };\n  }, [user, isAdvisor, isCompanyAdmin]);\n\n  // Calcular el número de notificaciones no leídas\n  const unreadCount = notifications.filter(notif => !notif.isRead).length;\n\n  // Función para reproducir sonido de notificación\n  const playNotificationSound = useCallback((type?: NotificationType) => {\n    if (!soundEnabled) return;\n\n    try {\n      // Seleccionar el sonido según el tipo de notificación\n      let soundToPlay = defaultSoundRef.current;\n      \n      if (type === NotificationType.APPROVAL_REQUIRED && approvalSoundRef.current) {\n        soundToPlay = approvalSoundRef.current;\n      } else if (type === NotificationType.NEW_APPLICATION && newApplicationSoundRef.current) {\n        soundToPlay = newApplicationSoundRef.current;\n      }\n      \n      if (soundToPlay) {\n        soundToPlay.currentTime = 0;\n        soundToPlay.play().catch(e => console.error('Error playing notification sound:', e));\n      }\n    } catch (error) {\n      console.error('Error playing notification sound:', error);\n    }\n  }, [soundEnabled]);\n\n  // Función para agregar una nueva notificación\n  const addNotification = useCallback((notification: Omit<Notification, 'id' | 'timestamp' | 'isRead'>) => {\n    const newNotification: Notification = {\n      id: Date.now().toString(),\n      timestamp: new Date(),\n      isRead: false,\n      ...notification\n    };\n\n    setNotifications(prev => [newNotification, ...prev]);\n\n    // Reproducir sonido si está habilitado\n    if (notification.soundEnabled !== false) {\n      playNotificationSound(notification.type);\n    }\n  }, [playNotificationSound]);\n\n  // Función para marcar una notificación como leída\n  const markAsRead = useCallback((id: string) => {\n    setNotifications(prev => \n      prev.map(notif => \n        notif.id === id \n          ? { ...notif, isRead: true } \n          : notif\n      )\n    );\n  }, []);\n\n  // Función para marcar todas las notificaciones como leídas\n  const markAllAsRead = useCallback(() => {\n    setNotifications(prev => \n      prev.map(notif => ({ ...notif, isRead: true }))\n    );\n  }, []);\n\n  // Función para eliminar todas las notificaciones\n  const clearNotifications = useCallback(() => {\n    setNotifications([]);\n  }, []);\n\n  // Valor del contexto\n  const contextValue: NotificationContextType = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    playNotificationSound,\n    soundEnabled,\n    setSoundEnabled\n  };\n\n  return (\n    <NotificationContext.Provider value={contextValue}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nexport default NotificationContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}