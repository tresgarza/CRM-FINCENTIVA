{"ast":null,"code":"import{supabase,getAuthenticatedClient}from\"../lib/supabaseClient\";import{TABLES}from\"../utils/constants/tables\";import*as documentService from'./documentService';import{ErrorType,createAppError,logError,handleApiError}from'../utils/errorHandling';import{parseNumericString}from'../utils/numberFormatting';// Re-exportamos las interfaces para mantener compatibilidad\nconst USERS_TABLE='users';const mapUserToClient=userData=>{if(!userData){console.error('Error: userData is undefined in mapUserToClient');throw new Error('No se pudo procesar la información del cliente, los datos son inválidos');}const fullName=userData.name||[userData.first_name,userData.paternal_surname,userData.maternal_surname].filter(Boolean).join(' ');return{id:userData.id,created_at:userData.created_at,name:fullName,first_name:userData.first_name,paternal_surname:userData.paternal_surname,maternal_surname:userData.maternal_surname,email:userData.email,phone:userData.phone,birth_date:userData.birth_date,company_id:userData.company_id,rfc:userData.rfc,curp:userData.curp,advisor_id:userData.advisor_id,address:userData.address,city:userData.city,state:userData.state,postal_code:userData.postal_code,gender:userData.gender,marital_status:userData.marital_status,employment_type:userData.employment_type,employment_years:userData.employment_years,monthly_income:userData.monthly_income,additional_income:userData.additional_income,monthly_expenses:userData.monthly_expenses,other_loan_balances:userData.other_loan_balances,bank_name:userData.bank_name,bank_clabe:userData.bank_clabe,bank_account_number:userData.bank_account_number,bank_account_type:userData.bank_account_type,bank_account_origin:userData.bank_account_origin};};export const getClients=async filters=>{try{let query=supabase.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin',{count:'exact'});if(filters){if(filters.advisor_id){query=query.eq('advisor_id',filters.advisor_id);}if(filters.company_id){query=query.eq('company_id',filters.company_id);}if(filters.dateFrom){query=query.gte('created_at',filters.dateFrom);}if(filters.dateTo){query=query.lte('created_at',filters.dateTo);}if(filters.searchQuery){query=query.or(`first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);}if(filters.page!==undefined&&filters.pageSize){const from=filters.page*filters.pageSize;const to=from+filters.pageSize-1;query=query.range(from,to);}}query=query.order('created_at',{ascending:false});const{data,error,count}=await query;if(error){logError(error,'getClients',{filters});throw handleApiError(error);}const clients=data?data.map(mapUserToClient):[];return{clients,totalCount:count||0};}catch(error){logError(error,'getClients',{filters});throw handleApiError(error);}};export const getClientById=async id=>{try{const{data,error}=await supabase.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin').eq('id',id).single();if(error){logError(error,'getClientById',{clientId:id});throw handleApiError(error);}if(!data){const notFoundError=createAppError(ErrorType.NOT_FOUND,`No se encontró cliente con ID: ${id}`);logError(notFoundError,'getClientById',{clientId:id});throw notFoundError;}return mapUserToClient(data);}catch(error){logError(error,'getClientById',{clientId:id});throw handleApiError(error);}};function escapeSQLString(str){if(!str)return'';return str.replace(/'/g,\"''\");}export const getClientApplications=async clientId=>{try{const client=await getClientById(clientId).catch(err=>{throw handleApiError(err);});if(!client){const notFoundError=createAppError(ErrorType.NOT_FOUND,`El cliente no existe`);logError(notFoundError,'getClientApplications',{clientId});return[];}const query=`\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name||'')}'\n      ORDER BY created_at DESC\n    `;const executeQuery=async query=>{try{const response=await fetch('http://localhost:3100/query',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query:query})});const result=await response.json();if(result.error){console.error('Error en la consulta SQL:',result.error);throw new Error(result.error);}return result.data;}catch(error){console.error('Error ejecutando la consulta:',error);throw error;}};const data=await executeQuery(query);return data;}catch(error){logError(error,'getClientApplications',{clientId});throw handleApiError(error);}};export const uploadClientDocuments=async(clientId,documents,userId)=>{if(!clientId){console.error('Client ID is required for uploading documents');throw new Error('El ID del cliente es requerido para subir documentos');}// Verificar que se proporcionaron documentos válidos\nif(!documents||!Array.isArray(documents)||documents.length===0){console.error('No valid documents provided for upload');throw new Error('No se proporcionaron documentos válidos para subir');}if(!userId){console.error('User ID is required for uploading documents');throw new Error('Se requiere el ID del usuario para subir documentos');}try{// Obtener cliente autenticado para cargas seguras\nconst authClient=getAuthenticatedClient();// Asegurarse de que el bucket de almacenamiento exista\nawait documentService.ensureStorageBucketExists(authClient);// Intentar subir cada documento\nconst uploadPromises=documents.map(async document=>{try{// Verificar que el documento tenga datos válidos\nif(!document.file||!document.name){console.error('Invalid document data',document);throw new Error('Datos de documento inválidos: se requiere archivo y nombre');}// Create a document upload request compatible with the document service\nconst uploadParams={file:document.file,category:document.category,documentName:document.name,description:document.description,userId:userId,client_id:clientId,authClient:authClient};// Subir el documento\nreturn await documentService.uploadDocument(uploadParams);}catch(docError){// Manejo de errores específicos de permisos RLS\nif(docError.message&&(docError.message.includes('permission denied')||docError.message.includes('not authorized')||docError.message.includes('row level security'))){console.error('Permission error when uploading document:',docError);throw new Error('No tienes permiso para subir documentos para este cliente. Verifica tus permisos.');}// Registrar el error pero permitir que otros uploads continúen\nconsole.error(`Error uploading document for client ${clientId}:`,docError);throw docError;}});const results=await Promise.all(uploadPromises);return results;}catch(error){logError(error,'uploadClientDocuments',{clientId});throw handleApiError(error);}};export const createClient=async(client,documents,userId)=>{try{// Create a copy to avoid modifying the original object\nconst userData={email:client.email,first_name:client.first_name||'',paternal_surname:client.paternal_surname||'',maternal_surname:client.maternal_surname||'',phone:client.phone,birth_date:client.birth_date,company_id:client.company_id,rfc:client.rfc,curp:client.curp,advisor_id:client.advisor_id,address:client.address,city:client.city,state:client.state,postal_code:client.postal_code,gender:client.gender,marital_status:client.marital_status,employment_type:client.employment_type,employment_years:client.employment_years,monthly_income:client.monthly_income,additional_income:client.additional_income,monthly_expenses:client.monthly_expenses,other_loan_balances:client.other_loan_balances,bank_name:client.bank_name,bank_clabe:client.bank_clabe,bank_account_number:client.bank_account_number,bank_account_type:client.bank_account_type,bank_account_origin:client.bank_account_origin};// Ensure company_id is present as it's required by the database schema\nif(!userData.company_id){console.warn('No company_id provided when creating client - using default company');userData.company_id=\"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\";// Default company (Herramental)\n}// Get the authenticated client for this operation\nconst authClient=getAuthenticatedClient();const{data,error,count}=await authClient.from(USERS_TABLE).insert([userData]).select();if(error){// Check for RLS policy violations specifically\nif(error.message&&(error.message.includes('violates row-level security policy')||error.message.includes('permission denied')||error.message.includes('Unauthorized')||error.message.includes('403'))){const rlsError=createAppError(ErrorType.AUTHORIZATION,'No tienes permisos para crear clientes. Esto puede deberse a políticas de seguridad RLS en Supabase.',{originalError:error.message});logError(rlsError,'createClient.RLS_VIOLATION');throw rlsError;}logError(error,'createClient');throw handleApiError(error);}// Verify that rows were affected\nif(!data||data.length===0||count===0){const noDataError=createAppError(ErrorType.SERVER,'No se pudo crear el cliente. No se recibieron datos del servidor.');logError(noDataError,'createClient');throw noDataError;}const newClient=mapUserToClient(data[0]);let documentResult=null;if(documents&&documents.length>0&&userId&&newClient.id){try{documentResult=await uploadClientDocuments(newClient.id,documents,userId);// Check if any documents failed to upload\nif(documentResult&&documentResult.length>0){console.warn(`${documentResult.length} documents failed to upload during client creation`);// We'll continue but note the warning\nnewClient.warningMessage=`Se creó el cliente, pero ${documentResult.length} ${documentResult.length===1?'documento falló':'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;}}catch(docError){console.error('Error uploading documents during client creation:',docError);// Continue with client creation but add warning\nnewClient.warningMessage='Se creó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';}}return newClient;}catch(error){logError(error,'createClient',{clientData:client});throw handleApiError(error);}};export const updateClient=async(id,updates,documents,userId)=>{try{console.log(`Starting client update for ID ${id}`,updates);// Create a copy to avoid modifying the original object\nconst userUpdates={email:updates.email,first_name:updates.first_name,paternal_surname:updates.paternal_surname,maternal_surname:updates.maternal_surname,phone:updates.phone,birth_date:updates.birth_date,company_id:updates.company_id,rfc:updates.rfc,curp:updates.curp,advisor_id:updates.advisor_id,address:updates.address,city:updates.city,state:updates.state,postal_code:updates.postal_code,gender:updates.gender,marital_status:updates.marital_status,employment_type:updates.employment_type,employment_years:updates.employment_years,monthly_income:updates.monthly_income,additional_income:updates.additional_income,monthly_expenses:updates.monthly_expenses,other_loan_balances:updates.other_loan_balances,bank_name:updates.bank_name,bank_clabe:updates.bank_clabe,bank_account_number:updates.bank_account_number,bank_account_type:updates.bank_account_type,bank_account_origin:updates.bank_account_origin};// Process numeric fields\n// Special handling to ensure numbers are correctly processed\nconst processNumericField=function(value){let isInteger=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(value===''||value===null||value===undefined){return undefined;// Use undefined for empty numeric fields to match type\n}return parseNumericString(String(value));};// Apply numeric conversions to all numeric fields\nif('employment_years'in updates){userUpdates.employment_years=processNumericField(updates.employment_years,true);}if('monthly_income'in updates){userUpdates.monthly_income=processNumericField(updates.monthly_income);}if('additional_income'in updates){userUpdates.additional_income=processNumericField(updates.additional_income);}if('monthly_expenses'in updates){userUpdates.monthly_expenses=processNumericField(updates.monthly_expenses);}if('other_loan_balances'in updates){userUpdates.other_loan_balances=processNumericField(updates.other_loan_balances);}// Remove undefined fields\nObject.keys(userUpdates).forEach(key=>{const typedKey=key;if(userUpdates[typedKey]===undefined){delete userUpdates[typedKey];}});console.log(`Updating client ${id} with sanitized data:`,JSON.stringify(userUpdates));// Get the authenticated client for this operation\nconst authClient=getAuthenticatedClient();// First, verify the client exists\nconst{data:existingClient,error:existingError}=await authClient.from(USERS_TABLE).select('id').eq('id',id).single();if(existingError||!existingClient){const notFoundError=createAppError(ErrorType.NOT_FOUND,`No se encontró el cliente con ID ${id}. Verifique que el cliente exista.`);logError(notFoundError,'updateClient',{clientId:id});throw notFoundError;}// Perform the update with the authenticated client\nconst{data,error,count}=await authClient.from(USERS_TABLE).update(userUpdates).eq('id',id).select();if(error){// Check for RLS policy violations specifically\nif(error.message&&(error.message.includes('violates row-level security policy')||error.message.includes('permission denied')||error.message.includes('Unauthorized')||error.message.includes('403'))){const rlsError=createAppError(ErrorType.AUTHORIZATION,'No tienes permisos para actualizar este cliente. Esto puede deberse a políticas de seguridad RLS en Supabase.',{originalError:error.message});logError(rlsError,'updateClient.RLS_VIOLATION',{clientId:id});throw rlsError;}logError(error,'updateClient',{clientId:id});throw handleApiError(error);}// Verify that the update affected rows\nif(!data||data.length===0||count===0){console.warn(`Update operation didn't affect any rows for client ${id}`);const noEffectError=createAppError(ErrorType.DATABASE,'La actualización no tuvo efecto en la base de datos. Esto puede deberse a permisos insuficientes o a que los datos no cambiaron.',{clientId:id});logError(noEffectError,'updateClient.NO_EFFECT',{clientId:id});throw noEffectError;}let updatedClient;if(!data||data.length===0){console.log(`No data returned when updating client with ID ${id}, fetching client data separately`);// Fallback: fetch the client data separately\nconst{data:fetchedData,error:fetchError}=await authClient.from(USERS_TABLE).select('*').eq('id',id).single();if(fetchError){console.error(`Error fetching updated client with ID ${id}:`,fetchError);throw new Error('El cliente fue actualizado pero no se pudieron recuperar sus datos. Por favor, recargue la página.');}if(!fetchedData){console.error(`No data found for client with ID ${id} after update`);throw new Error('No se encontró el cliente después de la actualización. Por favor, verifique que el cliente exista.');}console.log(`Successfully retrieved client data after update for ID ${id}`);updatedClient=mapUserToClient(fetchedData);}else{console.log(`Successfully updated client with data returned, ID ${id}`);updatedClient=mapUserToClient(data[0]);}let documentResult=null;// Upload documents if provided\nif(documents&&documents.length>0&&userId){try{console.log(`Uploading ${documents.length} documents for client ${id}`);documentResult=await uploadClientDocuments(id,documents,userId);// Check if any documents failed to upload\nif(documentResult&&documentResult.length>0){console.warn(`${documentResult.length} documents failed to upload during client update`);// We'll continue but note the warning\nupdatedClient.warningMessage=`Se actualizó el cliente, pero ${documentResult.length} ${documentResult.length===1?'documento falló':'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;}}catch(docError){console.error(`Error uploading documents for client ${id}:`,docError);// Continue with client update but add warning\nupdatedClient.warningMessage='Se actualizó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';}}console.log(`Client update complete for ID ${id}`);console.log('Returning updated client:',updatedClient);return updatedClient;}catch(error){logError(error,'updateClient',{clientId:id,updates});throw handleApiError(error);}};export const deleteClient=async id=>{try{// Get the authenticated client for this operation\nconst authClient=getAuthenticatedClient();const{error,count}=await authClient.from(USERS_TABLE).delete().eq('id',id);if(error){// Check for RLS policy violations specifically\nif(error.message&&(error.message.includes('violates row-level security policy')||error.message.includes('permission denied')||error.message.includes('Unauthorized')||error.message.includes('403'))){const rlsError=createAppError(ErrorType.AUTHORIZATION,'No tienes permisos para eliminar este cliente. Esto puede deberse a políticas de seguridad RLS en Supabase.',{originalError:error.message});logError(rlsError,'deleteClient.RLS_VIOLATION',{clientId:id});throw rlsError;}logError(error,'deleteClient',{clientId:id});throw handleApiError(error);}// Verify that rows were affected\nif(count===0){console.warn(`Delete operation didn't affect any rows for client ${id}`);const noEffectError=createAppError(ErrorType.DATABASE,'La eliminación no tuvo efecto en la base de datos. Esto puede deberse a permisos insuficientes.',{clientId:id});logError(noEffectError,'deleteClient.NO_EFFECT',{clientId:id});throw noEffectError;}return true;}catch(error){logError(error,'deleteClient',{clientId:id});throw handleApiError(error);}};export const checkClientExists=async(email,rfc)=>{try{let query=supabase.from(USERS_TABLE).select('id, email, rfc').eq('email',email);if(rfc){query=query.or(`rfc.eq.${rfc}`);}const{data,error}=await query;if(error){logError(error,'checkClientExists',{email,rfc});throw handleApiError(error);}return data.length>0?data[0]:null;}catch(error){logError(error,'checkClientExists',{email,rfc});throw handleApiError(error);}};export const getClientCount=async filters=>{try{let query=supabase.from(USERS_TABLE).select('id',{count:'exact',head:true});if(filters){if(filters.advisor_id){query=query.eq('advisor_id',filters.advisor_id);}if(filters.company_id){query=query.eq('company_id',filters.company_id);}if(filters.dateFrom){query=query.gte('created_at',filters.dateFrom);}if(filters.dateTo){query=query.lte('created_at',filters.dateTo);}if(filters.searchQuery){query=query.or(`first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);}}const{count,error}=await query;if(error){logError(error,'getClientCount',{filters});throw handleApiError(error);}return count||0;}catch(error){logError(error,'getClientCount',{filters});return 0;}};","map":{"version":3,"names":["supabase","getAuthenticatedClient","TABLES","documentService","ErrorType","createAppError","logError","handleApiError","parseNumericString","USERS_TABLE","mapUserToClient","userData","console","error","Error","fullName","name","first_name","paternal_surname","maternal_surname","filter","Boolean","join","id","created_at","email","phone","birth_date","company_id","rfc","curp","advisor_id","address","city","state","postal_code","gender","marital_status","employment_type","employment_years","monthly_income","additional_income","monthly_expenses","other_loan_balances","bank_name","bank_clabe","bank_account_number","bank_account_type","bank_account_origin","getClients","filters","query","from","select","count","eq","dateFrom","gte","dateTo","lte","searchQuery","or","page","undefined","pageSize","to","range","order","ascending","data","clients","map","totalCount","getClientById","single","clientId","notFoundError","NOT_FOUND","escapeSQLString","str","replace","getClientApplications","client","catch","err","APPLICATIONS","executeQuery","response","fetch","method","headers","body","JSON","stringify","result","json","uploadClientDocuments","documents","userId","Array","isArray","length","authClient","ensureStorageBucketExists","uploadPromises","document","file","uploadParams","category","documentName","description","client_id","uploadDocument","docError","message","includes","results","Promise","all","createClient","warn","insert","rlsError","AUTHORIZATION","originalError","noDataError","SERVER","newClient","documentResult","warningMessage","clientData","updateClient","updates","log","userUpdates","processNumericField","value","isInteger","arguments","String","Object","keys","forEach","key","typedKey","existingClient","existingError","update","noEffectError","DATABASE","updatedClient","fetchedData","fetchError","deleteClient","delete","checkClientExists","getClientCount","head"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/clientService.ts"],"sourcesContent":["import { supabase, getAuthenticatedClient } from \"../lib/supabaseClient\";\nimport { TABLES } from \"../utils/constants/tables\";\nimport * as documentService from './documentService';\nimport { Client, ClientDocument } from \"../types/client\";\nimport { \n  ErrorType, \n  createAppError, \n  logError, \n  handleApiError \n} from '../utils/errorHandling';\nimport { parseNumericString } from '../utils/numberFormatting';\n\n// Re-exportamos las interfaces para mantener compatibilidad\nexport type { Client, ClientDocument };\n\nexport interface ClientFilter {\n  searchQuery?: string;\n  advisor_id?: string;\n  company_id?: string;\n  dateFrom?: string;\n  dateTo?: string;\n  page?: number;\n  pageSize?: number;\n}\n\nconst USERS_TABLE = 'users';\n\nconst mapUserToClient = (userData: any): Client => {\n  if (!userData) {\n    console.error('Error: userData is undefined in mapUserToClient');\n    throw new Error('No se pudo procesar la información del cliente, los datos son inválidos');\n  }\n  \n  const fullName = userData.name || [\n    userData.first_name,\n    userData.paternal_surname,\n    userData.maternal_surname\n  ].filter(Boolean).join(' ');\n  \n  return {\n    id: userData.id,\n    created_at: userData.created_at,\n    name: fullName,\n    first_name: userData.first_name,\n    paternal_surname: userData.paternal_surname,\n    maternal_surname: userData.maternal_surname,\n    email: userData.email,\n    phone: userData.phone,\n    birth_date: userData.birth_date,\n    company_id: userData.company_id,\n    rfc: userData.rfc,\n    curp: userData.curp,\n    advisor_id: userData.advisor_id,\n    address: userData.address,\n    city: userData.city,\n    state: userData.state,\n    postal_code: userData.postal_code,\n    gender: userData.gender,\n    marital_status: userData.marital_status,\n    employment_type: userData.employment_type,\n    employment_years: userData.employment_years,\n    monthly_income: userData.monthly_income,\n    additional_income: userData.additional_income,\n    monthly_expenses: userData.monthly_expenses,\n    other_loan_balances: userData.other_loan_balances,\n    bank_name: userData.bank_name,\n    bank_clabe: userData.bank_clabe,\n    bank_account_number: userData.bank_account_number,\n    bank_account_type: userData.bank_account_type,\n    bank_account_origin: userData.bank_account_origin,\n  };\n};\n\nexport const getClients = async (filters?: ClientFilter) => {\n  try {\n    let query = supabase.from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin', { count: 'exact' });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n\n    query = query.order('created_at', { ascending: false });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      logError(error, 'getClients', { filters });\n      throw handleApiError(error);\n    }\n\n    const clients = data ? data.map(mapUserToClient) : [];\n\n    return {\n      clients,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    logError(error, 'getClients', { filters });\n    throw handleApiError(error);\n  }\n};\n\nexport const getClientById = async (id: string) => {\n  try {\n    const { data, error } = await supabase\n      .from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      logError(error, 'getClientById', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    if (!data) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `No se encontró cliente con ID: ${id}`\n      );\n      logError(notFoundError, 'getClientById', { clientId: id });\n      throw notFoundError;\n    }\n\n    return mapUserToClient(data);\n  } catch (error) {\n    logError(error, 'getClientById', { clientId: id });\n    throw handleApiError(error);\n  }\n};\n\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\nexport const getClientApplications = async (clientId: string) => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      throw handleApiError(err);\n    });\n    \n    if (!client) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `El cliente no existe`\n      );\n      logError(notFoundError, 'getClientApplications', { clientId });\n      return [];\n    }\n    \n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name || '')}'\n      ORDER BY created_at DESC\n    `;\n    \n    const executeQuery = async (query: string) => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query: query }),\n        });\n        \n        const result = await response.json();\n        \n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        \n        return result.data;\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    \n    const data = await executeQuery(query);\n    return data;\n  } catch (error) {\n    logError(error, 'getClientApplications', { clientId });\n    throw handleApiError(error);\n  }\n};\n\nexport const uploadClientDocuments = async (\n  clientId: string,\n  documents: ClientDocument[],\n  userId: string\n): Promise<documentService.Document[]> => {\n  if (!clientId) {\n    console.error('Client ID is required for uploading documents');\n    throw new Error('El ID del cliente es requerido para subir documentos');\n  }\n\n  // Verificar que se proporcionaron documentos válidos\n  if (!documents || !Array.isArray(documents) || documents.length === 0) {\n    console.error('No valid documents provided for upload');\n    throw new Error('No se proporcionaron documentos válidos para subir');\n  }\n\n  if (!userId) {\n    console.error('User ID is required for uploading documents');\n    throw new Error('Se requiere el ID del usuario para subir documentos');\n  }\n\n  try {\n    // Obtener cliente autenticado para cargas seguras\n    const authClient = getAuthenticatedClient();\n    \n    // Asegurarse de que el bucket de almacenamiento exista\n    await documentService.ensureStorageBucketExists(authClient);\n\n    // Intentar subir cada documento\n    const uploadPromises = documents.map(async (document) => {\n      try {\n        // Verificar que el documento tenga datos válidos\n        if (!document.file || !document.name) {\n          console.error('Invalid document data', document);\n          throw new Error(\n            'Datos de documento inválidos: se requiere archivo y nombre'\n          );\n        }\n\n        // Create a document upload request compatible with the document service\n        const uploadParams: documentService.UploadDocumentParams = {\n          file: document.file,\n          category: document.category,\n          documentName: document.name,\n          description: document.description,\n          userId: userId,\n          client_id: clientId,\n          authClient: authClient\n        };\n\n        // Subir el documento\n        return await documentService.uploadDocument(uploadParams);\n      } catch (docError: any) {\n        // Manejo de errores específicos de permisos RLS\n        if (docError.message && (\n            docError.message.includes('permission denied') || \n            docError.message.includes('not authorized') ||\n            docError.message.includes('row level security')\n          )) {\n          console.error('Permission error when uploading document:', docError);\n          throw new Error('No tienes permiso para subir documentos para este cliente. Verifica tus permisos.');\n        }\n        \n        // Registrar el error pero permitir que otros uploads continúen\n        console.error(`Error uploading document for client ${clientId}:`, docError);\n        throw docError;\n      }\n    });\n\n    const results = await Promise.all(uploadPromises);\n    \n    return results;\n  } catch (error) {\n    logError(error, 'uploadClientDocuments', { clientId });\n    throw handleApiError(error);\n  }\n};\n\nexport const createClient = async (client: Omit<Client, 'id' | 'created_at'>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    // Create a copy to avoid modifying the original object\n    const userData = {\n      email: client.email,\n      first_name: client.first_name || '',\n      paternal_surname: client.paternal_surname || '',\n      maternal_surname: client.maternal_surname || '',\n      phone: client.phone,\n      birth_date: client.birth_date,\n      company_id: client.company_id,\n      rfc: client.rfc,\n      curp: client.curp,\n      advisor_id: client.advisor_id,\n      address: client.address,\n      city: client.city,\n      state: client.state,\n      postal_code: client.postal_code,\n      gender: client.gender,\n      marital_status: client.marital_status,\n      employment_type: client.employment_type,\n      employment_years: client.employment_years,\n      monthly_income: client.monthly_income,\n      additional_income: client.additional_income,\n      monthly_expenses: client.monthly_expenses,\n      other_loan_balances: client.other_loan_balances,\n      bank_name: client.bank_name,\n      bank_clabe: client.bank_clabe,\n      bank_account_number: client.bank_account_number,\n      bank_account_type: client.bank_account_type,\n      bank_account_origin: client.bank_account_origin,\n    };\n\n    // Ensure company_id is present as it's required by the database schema\n    if (!userData.company_id) {\n      console.warn('No company_id provided when creating client - using default company');\n      userData.company_id = \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\"; // Default company (Herramental)\n    }\n\n    // Get the authenticated client for this operation\n    const authClient = getAuthenticatedClient();\n\n    const { data, error, count } = await authClient\n      .from(USERS_TABLE)\n      .insert([userData])\n      .select();\n\n    if (error) {\n      // Check for RLS policy violations specifically\n      if (error.message && (\n        error.message.includes('violates row-level security policy') ||\n        error.message.includes('permission denied') ||\n        error.message.includes('Unauthorized') ||\n        error.message.includes('403')\n      )) {\n        const rlsError = createAppError(\n          ErrorType.AUTHORIZATION,\n          'No tienes permisos para crear clientes. Esto puede deberse a políticas de seguridad RLS en Supabase.',\n          { originalError: error.message }\n        );\n        logError(rlsError, 'createClient.RLS_VIOLATION');\n        throw rlsError;\n      }\n      \n      logError(error, 'createClient');\n      throw handleApiError(error);\n    }\n\n    // Verify that rows were affected\n    if (!data || data.length === 0 || count === 0) {\n      const noDataError = createAppError(\n        ErrorType.SERVER,\n        'No se pudo crear el cliente. No se recibieron datos del servidor.'\n      );\n      logError(noDataError, 'createClient');\n      throw noDataError;\n    }\n\n    const newClient = mapUserToClient(data[0]);\n    let documentResult = null;\n    \n    if (documents && documents.length > 0 && userId && newClient.id) {\n      try {\n        documentResult = await uploadClientDocuments(newClient.id, documents, userId);\n        \n        // Check if any documents failed to upload\n        if (documentResult && documentResult.length > 0) {\n          console.warn(`${documentResult.length} documents failed to upload during client creation`);\n          \n          // We'll continue but note the warning\n          newClient.warningMessage = `Se creó el cliente, pero ${documentResult.length} ${documentResult.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error('Error uploading documents during client creation:', docError);\n        \n        // Continue with client creation but add warning\n        newClient.warningMessage = 'Se creó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n\n    return newClient;\n  } catch (error) {\n    logError(error, 'createClient', { clientData: client });\n    throw handleApiError(error);\n  }\n};\n\nexport const updateClient = async (id: string, updates: Partial<Client>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    console.log(`Starting client update for ID ${id}`, updates);\n    \n    // Create a copy to avoid modifying the original object\n    const userUpdates = {\n      email: updates.email,\n      first_name: updates.first_name,\n      paternal_surname: updates.paternal_surname,\n      maternal_surname: updates.maternal_surname,\n      phone: updates.phone,\n      birth_date: updates.birth_date,\n      company_id: updates.company_id,\n      rfc: updates.rfc,\n      curp: updates.curp,\n      advisor_id: updates.advisor_id,\n      address: updates.address,\n      city: updates.city,\n      state: updates.state,\n      postal_code: updates.postal_code,\n      gender: updates.gender,\n      marital_status: updates.marital_status,\n      employment_type: updates.employment_type,\n      employment_years: updates.employment_years,\n      monthly_income: updates.monthly_income,\n      additional_income: updates.additional_income,\n      monthly_expenses: updates.monthly_expenses,\n      other_loan_balances: updates.other_loan_balances,\n      bank_name: updates.bank_name,\n      bank_clabe: updates.bank_clabe,\n      bank_account_number: updates.bank_account_number,\n      bank_account_type: updates.bank_account_type,\n      bank_account_origin: updates.bank_account_origin,\n    };\n\n    // Process numeric fields\n    // Special handling to ensure numbers are correctly processed\n    const processNumericField = (value: any, isInteger = false) => {\n      if (value === '' || value === null || value === undefined) {\n        return undefined; // Use undefined for empty numeric fields to match type\n      }\n      \n      return parseNumericString(String(value));\n    };\n\n    // Apply numeric conversions to all numeric fields\n    if ('employment_years' in updates) {\n      userUpdates.employment_years = processNumericField(updates.employment_years, true);\n    }\n    if ('monthly_income' in updates) {\n      userUpdates.monthly_income = processNumericField(updates.monthly_income);\n    }\n    if ('additional_income' in updates) {\n      userUpdates.additional_income = processNumericField(updates.additional_income);\n    }\n    if ('monthly_expenses' in updates) {\n      userUpdates.monthly_expenses = processNumericField(updates.monthly_expenses);\n    }\n    if ('other_loan_balances' in updates) {\n      userUpdates.other_loan_balances = processNumericField(updates.other_loan_balances);\n    }\n\n    // Remove undefined fields\n    Object.keys(userUpdates).forEach(key => {\n      const typedKey = key as keyof typeof userUpdates;\n      if (userUpdates[typedKey] === undefined) {\n        delete userUpdates[typedKey];\n      }\n    });\n\n    console.log(`Updating client ${id} with sanitized data:`, JSON.stringify(userUpdates));\n\n    // Get the authenticated client for this operation\n    const authClient = getAuthenticatedClient();\n\n    // First, verify the client exists\n    const { data: existingClient, error: existingError } = await authClient\n      .from(USERS_TABLE)\n      .select('id')\n      .eq('id', id)\n      .single();\n\n    if (existingError || !existingClient) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `No se encontró el cliente con ID ${id}. Verifique que el cliente exista.`\n      );\n      logError(notFoundError, 'updateClient', { clientId: id });\n      throw notFoundError;\n    }\n\n    // Perform the update with the authenticated client\n    const { data, error, count } = await authClient\n      .from(USERS_TABLE)\n      .update(userUpdates)\n      .eq('id', id)\n      .select();\n\n    if (error) {\n      // Check for RLS policy violations specifically\n      if (error.message && (\n        error.message.includes('violates row-level security policy') ||\n        error.message.includes('permission denied') ||\n        error.message.includes('Unauthorized') ||\n        error.message.includes('403')\n      )) {\n        const rlsError = createAppError(\n          ErrorType.AUTHORIZATION,\n          'No tienes permisos para actualizar este cliente. Esto puede deberse a políticas de seguridad RLS en Supabase.',\n          { originalError: error.message }\n        );\n        logError(rlsError, 'updateClient.RLS_VIOLATION', { clientId: id });\n        throw rlsError;\n      }\n      \n      logError(error, 'updateClient', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    // Verify that the update affected rows\n    if (!data || data.length === 0 || count === 0) {\n      console.warn(`Update operation didn't affect any rows for client ${id}`);\n      const noEffectError = createAppError(\n        ErrorType.DATABASE,\n        'La actualización no tuvo efecto en la base de datos. Esto puede deberse a permisos insuficientes o a que los datos no cambiaron.',\n        { clientId: id }\n      );\n      logError(noEffectError, 'updateClient.NO_EFFECT', { clientId: id });\n      throw noEffectError;\n    }\n\n    let updatedClient: Client;\n\n    if (!data || data.length === 0) {\n      console.log(`No data returned when updating client with ID ${id}, fetching client data separately`);\n      \n      // Fallback: fetch the client data separately\n      const { data: fetchedData, error: fetchError } = await authClient\n        .from(USERS_TABLE)\n        .select('*')\n        .eq('id', id)\n        .single();\n      \n      if (fetchError) {\n        console.error(`Error fetching updated client with ID ${id}:`, fetchError);\n        throw new Error('El cliente fue actualizado pero no se pudieron recuperar sus datos. Por favor, recargue la página.');\n      }\n      \n      if (!fetchedData) {\n        console.error(`No data found for client with ID ${id} after update`);\n        throw new Error('No se encontró el cliente después de la actualización. Por favor, verifique que el cliente exista.');\n      }\n      \n      console.log(`Successfully retrieved client data after update for ID ${id}`);\n      updatedClient = mapUserToClient(fetchedData);\n    } else {\n      console.log(`Successfully updated client with data returned, ID ${id}`);\n      updatedClient = mapUserToClient(data[0]);\n    }\n    \n    let documentResult = null;\n    \n    // Upload documents if provided\n    if (documents && documents.length > 0 && userId) {\n      try {\n        console.log(`Uploading ${documents.length} documents for client ${id}`);\n        documentResult = await uploadClientDocuments(id, documents, userId);\n        \n        // Check if any documents failed to upload\n        if (documentResult && documentResult.length > 0) {\n          console.warn(`${documentResult.length} documents failed to upload during client update`);\n          \n          // We'll continue but note the warning\n          updatedClient.warningMessage = `Se actualizó el cliente, pero ${documentResult.length} ${documentResult.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error(`Error uploading documents for client ${id}:`, docError);\n        \n        // Continue with client update but add warning\n        updatedClient.warningMessage = 'Se actualizó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n\n    console.log(`Client update complete for ID ${id}`);\n    console.log('Returning updated client:', updatedClient);\n    return updatedClient;\n  } catch (error) {\n    logError(error, 'updateClient', { clientId: id, updates });\n    throw handleApiError(error);\n  }\n};\n\nexport const deleteClient = async (id: string) => {\n  try {\n    // Get the authenticated client for this operation\n    const authClient = getAuthenticatedClient();\n    \n    const { error, count } = await authClient\n      .from(USERS_TABLE)\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      // Check for RLS policy violations specifically\n      if (error.message && (\n        error.message.includes('violates row-level security policy') ||\n        error.message.includes('permission denied') ||\n        error.message.includes('Unauthorized') ||\n        error.message.includes('403')\n      )) {\n        const rlsError = createAppError(\n          ErrorType.AUTHORIZATION,\n          'No tienes permisos para eliminar este cliente. Esto puede deberse a políticas de seguridad RLS en Supabase.',\n          { originalError: error.message }\n        );\n        logError(rlsError, 'deleteClient.RLS_VIOLATION', { clientId: id });\n        throw rlsError;\n      }\n      \n      logError(error, 'deleteClient', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    // Verify that rows were affected\n    if (count === 0) {\n      console.warn(`Delete operation didn't affect any rows for client ${id}`);\n      const noEffectError = createAppError(\n        ErrorType.DATABASE,\n        'La eliminación no tuvo efecto en la base de datos. Esto puede deberse a permisos insuficientes.',\n        { clientId: id }\n      );\n      logError(noEffectError, 'deleteClient.NO_EFFECT', { clientId: id });\n      throw noEffectError;\n    }\n\n    return true;\n  } catch (error) {\n    logError(error, 'deleteClient', { clientId: id });\n    throw handleApiError(error);\n  }\n};\n\nexport const checkClientExists = async (email: string, rfc?: string) => {\n  try {\n    let query = supabase\n      .from(USERS_TABLE)\n      .select('id, email, rfc')\n      .eq('email', email);\n\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      logError(error, 'checkClientExists', { email, rfc });\n      throw handleApiError(error);\n    }\n\n    return data.length > 0 ? data[0] : null;\n  } catch (error) {\n    logError(error, 'checkClientExists', { email, rfc });\n    throw handleApiError(error);\n  }\n};\n\nexport const getClientCount = async (filters?: ClientFilter) => {\n  try {\n    let query = supabase\n      .from(USERS_TABLE)\n      .select('id', { count: 'exact', head: true });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n    }\n\n    const { count, error } = await query;\n\n    if (error) {\n      logError(error, 'getClientCount', { filters });\n      throw handleApiError(error);\n    }\n\n    return count || 0;\n  } catch (error) {\n    logError(error, 'getClientCount', { filters });\n    return 0;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}