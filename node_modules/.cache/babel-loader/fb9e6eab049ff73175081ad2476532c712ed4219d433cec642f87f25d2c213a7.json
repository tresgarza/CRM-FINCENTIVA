{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/contexts/NotificationContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { useAuth } from './AuthContext';\nimport NotificationPopup from '../components/ui/NotificationPopup';\n\n// Generate a proper UUID for notification IDs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateUUID() {\n  // Use a more standard implementation for UUID v4\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\n// For test notifications, use a valid UUID format - don't use app-timestamp\nfunction getTestApplicationId() {\n  // Use a small set of real UUIDs as sample application IDs\n  const sampleIds = ['110cc76a-1762-4df4-840e-a503fea9d7aa', '220cc76a-1762-4df4-840e-a503fea9d7bb', '330cc76a-1762-4df4-840e-a503fea9d7cc', '440cc76a-1762-4df4-840e-a503fea9d7dd', '550cc76a-1762-4df4-840e-a503fea9d7ee'];\n\n  // Pick a random ID from the sample list\n  return sampleIds[Math.floor(Math.random() * sampleIds.length)];\n}\n\n// Enum for notification types\nexport let NotificationType = /*#__PURE__*/function (NotificationType) {\n  NotificationType[\"INFO\"] = \"info\";\n  NotificationType[\"SUCCESS\"] = \"success\";\n  NotificationType[\"WARNING\"] = \"warning\";\n  NotificationType[\"ERROR\"] = \"error\";\n  NotificationType[\"NEW_APPLICATION\"] = \"new_application\";\n  NotificationType[\"APPROVAL_REQUIRED\"] = \"approval_required\";\n  NotificationType[\"NEW_MESSAGE\"] = \"new_message\";\n  NotificationType[\"APPLICATION_STATUS_UPDATED\"] = \"application_status_updated\";\n  NotificationType[\"APPLICATION_COMMENT\"] = \"application_comment\";\n  return NotificationType;\n}({});\n\n// Interfaces\n\nexport const NotificationContext = /*#__PURE__*/createContext(undefined);\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user\n  } = useAuth();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n\n  // Estado para la notificación emergente actual\n  const [currentPopup, setCurrentPopup] = useState(null);\n\n  // Referencia al ID del polling interval\n  const pollingIntervalRef = useRef(null);\n\n  // State to keep track of already notified application IDs with timestamps\n  // This helps prevent showing the same notification multiple times\n  const [notifiedApplications, setNotifiedApplications] = useState(new Map());\n\n  // Referencia para evitar múltiples ejecuciones simultáneas\n  const checkingRef = useRef(false);\n\n  // Reference to the latest known notification time\n  const lastNotificationTimeRef = useRef(new Date());\n\n  // Avoid duplicate notifications by ensuring we have a minimum interval between checks\n  const lastCheckTimeRef = useRef(new Date());\n\n  // Efecto para manejar la carga inicial de notificaciones y configurar el polling\n  useEffect(() => {\n    if (user) {\n      // Cargar notificaciones al inicio\n      loadNotifications();\n\n      // Cargar aplicaciones ya notificadas desde localStorage\n      try {\n        const storedNotifications = localStorage.getItem('notified_application_ids');\n        if (storedNotifications) {\n          const parsedData = JSON.parse(storedNotifications);\n\n          // Handle both old format (array) and new format (object with timestamps)\n          if (Array.isArray(parsedData)) {\n            // Old format - convert to new Map with current timestamp\n            const notifiedMap = new Map();\n            const now = Date.now();\n            parsedData.forEach(id => {\n              notifiedMap.set(id, now);\n            });\n            setNotifiedApplications(notifiedMap);\n          } else if (typeof parsedData === 'object') {\n            // New format - convert object to Map\n            const notifiedMap = new Map();\n            Object.entries(parsedData).forEach(([id, timestamp]) => {\n              notifiedMap.set(id, timestamp);\n            });\n            setNotifiedApplications(notifiedMap);\n          }\n        }\n      } catch (error) {\n        console.error('Error loading notified applications:', error);\n        // Reset if there's an error\n        setNotifiedApplications(new Map());\n      }\n\n      // Wait 3 seconds before first check to ensure UI is fully loaded\n      setTimeout(() => {\n        // Verificar al inicio si hay solicitudes recientes\n        checkForNewNotifications();\n\n        // Configurar polling para verificar nuevas notificaciones cada 30 seconds\n        // Increased from 15 to 30 seconds to reduce duplicate risks\n        pollingIntervalRef.current = setInterval(() => {\n          const now = new Date();\n          const timeSinceLastCheck = now.getTime() - lastCheckTimeRef.current.getTime();\n\n          // Only check if it's been at least 25 seconds since last check\n          if (timeSinceLastCheck > 25000) {\n            checkForNewNotifications();\n          } else {\n            console.log(`Skipping notification check (last check was ${timeSinceLastCheck / 1000}s ago)`);\n          }\n        }, 30000);\n      }, 3000);\n\n      // Limpiar el intervalo cuando el componente se desmonte\n      return () => {\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n        }\n      };\n    }\n  }, [user]);\n\n  // Cálculo de notificaciones no leídas\n  useEffect(() => {\n    const count = notifications.filter(notification => !notification.read).length;\n    setUnreadCount(count);\n  }, [notifications]);\n\n  // Cargar notificaciones del almacenamiento local o del servidor\n  const loadNotifications = async () => {\n    try {\n      // En un escenario real, aquí se cargarían las notificaciones del servidor\n      // Por ahora, usaremos el localStorage como ejemplo\n      const storedNotifications = localStorage.getItem('notifications');\n      if (storedNotifications) {\n        const parsed = JSON.parse(storedNotifications);\n        setNotifications(parsed.map(n => ({\n          ...n,\n          createdAt: new Date(n.createdAt)\n        })));\n      }\n    } catch (error) {\n      console.error('Error loading notifications:', error);\n    }\n  };\n\n  // Save notified applications with timestamps to localStorage\n  const saveNotifiedApplications = notifiedMap => {\n    try {\n      // Convert Map to object for storage\n      const notifiedObject = {};\n      notifiedMap.forEach((timestamp, id) => {\n        notifiedObject[id] = timestamp;\n      });\n      localStorage.setItem('notified_application_ids', JSON.stringify(notifiedObject));\n    } catch (error) {\n      console.error('Error saving notified applications:', error);\n    }\n  };\n\n  // Mark an application as notified to prevent duplicate notifications\n  const markApplicationAsNotified = applicationId => {\n    const updatedMap = new Map(notifiedApplications);\n    updatedMap.set(applicationId, Date.now());\n    setNotifiedApplications(updatedMap);\n    saveNotifiedApplications(updatedMap);\n    console.log(`Marked application ${applicationId} as notified`);\n  };\n\n  // Verificar nuevas notificaciones en el servidor\n  const checkForNewNotifications = async () => {\n    // Record the check time immediately to prevent race conditions\n    lastCheckTimeRef.current = new Date();\n\n    // Avoid multiple executions at the same time\n    if (checkingRef.current) {\n      console.log('Already checking for notifications');\n      return;\n    }\n\n    // Make sure we don't have any lingering popups\n    clearPopups();\n    checkingRef.current = true;\n    console.log('Checking for new notifications...');\n    try {\n      // Convert notified IDs Map to array for the query\n      const notifiedIdsArray = Array.from(notifiedApplications.keys());\n      console.log(`${notifiedIdsArray.length} already notified application IDs`);\n\n      // IMPORTANT: Add additional check in JavaScript to prevent showing already notified applications\n      // This is a safeguard in case the SQL query doesn't filter them out properly\n      const alreadyShownIds = new Set(notifiedIdsArray);\n\n      // Query recent applications that haven't been shown yet\n      const response = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: `\n            SELECT id, client_name, application_type, company_name, created_at, status, \n                   amount, term, interest_rate, monthly_payment\n            FROM applications \n            WHERE created_at > NOW() - INTERVAL '24 hours'\n            ${notifiedIdsArray.length > 0 ? `AND id NOT IN ('${notifiedIdsArray.join(\"','\")}')` : ''}\n            ORDER BY created_at DESC\n            LIMIT 5\n          `\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error querying recent applications');\n      }\n      const data = await response.json();\n\n      // If there are new applications, show notification\n      if (data.data && data.data.length > 0) {\n        // Filter out any applications that are already in our tracked IDs\n        // This is a double-check to prevent duplicates\n        const newApps = data.data.filter(app => !alreadyShownIds.has(app.id));\n        if (newApps.length === 0) {\n          console.log('No truly new applications found (already notified about these)');\n          return;\n        }\n\n        // Take only the first new application to show\n        const newApp = newApps[0];\n        const appId = newApp.id;\n        console.log(`New application detected: ${appId}`);\n\n        // IMPORTANT: Mark as notified IMMEDIATELY to prevent duplicates\n        // even if processing fails later\n        markApplicationAsNotified(appId);\n\n        // Format data for notification\n        const createdAt = new Date(newApp.created_at);\n        const formattedDate = new Intl.DateTimeFormat('es-MX', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric'\n        }).format(createdAt);\n        const formattedTime = new Intl.DateTimeFormat('es-MX', {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: true\n        }).format(createdAt);\n\n        // Format amount with thousands separator and 2 decimals\n        const formattedAmount = new Intl.NumberFormat('es-MX', {\n          style: 'currency',\n          currency: 'MXN',\n          minimumFractionDigits: 2\n        }).format(Number(newApp.amount || 0));\n\n        // Format interest rate with percentage\n        const formattedRate = `${newApp.interest_rate || 0}%`;\n\n        // Format monthly payment\n        const formattedMonthly = new Intl.NumberFormat('es-MX', {\n          style: 'currency',\n          currency: 'MXN',\n          minimumFractionDigits: 2\n        }).format(Number(newApp.monthly_payment || 0));\n\n        // Transform application type to a more readable format\n        let appType = 'No especificado';\n        if (newApp.application_type) {\n          // Remove any trailing slash if it exists\n          const cleanType = newApp.application_type.replace(/\\/$/, '');\n          if (cleanType === 'selected_plans') {\n            appType = 'Planes seleccionados';\n          } else if (cleanType === 'product_simulations') {\n            appType = 'Simulación de producto';\n          } else {\n            appType = cleanType.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n          }\n        }\n\n        // Create a well-structured HTML message for the popup\n        const detailedMessage = `\n          <div class=\"grid grid-cols-2 gap-2 text-sm mt-2\">\n            <div class=\"font-semibold text-gray-700\">Cliente:</div>\n            <div class=\"text-gray-900\">${newApp.client_name || 'Sin nombre'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Empresa:</div>\n            <div class=\"text-gray-900\">${newApp.company_name || 'No especificada'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Tipo:</div>\n            <div class=\"text-gray-900\">${appType}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Monto:</div>\n            <div class=\"text-gray-900\">${formattedAmount}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Plazo:</div>\n            <div class=\"text-gray-900\">${newApp.term || 'N/A'} ${newApp.term === 1 ? 'mes' : 'meses'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Tasa:</div>\n            <div class=\"text-gray-900\">${formattedRate}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Pago mensual:</div>\n            <div class=\"text-gray-900\">${formattedMonthly}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Fecha:</div>\n            <div class=\"text-gray-900\">${formattedDate} ${formattedTime}</div>\n          </div>\n        `;\n        const notificationTitle = '💼 Nueva solicitud recibida';\n\n        // Create the notification for the panel\n        const newNotification = {\n          title: notificationTitle,\n          message: `Cliente: ${newApp.client_name || 'Sin nombre'} - ${newApp.company_name || 'Empresa no especificada'}`,\n          type: NotificationType.NEW_APPLICATION,\n          relatedItemType: 'application',\n          relatedItemId: appId\n        };\n\n        // Add the notification to the panel\n        addNotification(newNotification);\n\n        // Show popup with complete details\n        showPopup({\n          title: notificationTitle,\n          message: detailedMessage,\n          type: NotificationType.NEW_APPLICATION,\n          playSound: soundEnabled,\n          soundType: 'notification',\n          duration: 10000,\n          // 10 seconds\n          customSound: '/sounds/clean-notification.mp3',\n          centerScreen: true\n        });\n\n        // Update last notification time to avoid duplicates\n        lastNotificationTimeRef.current = new Date();\n      } else {\n        console.log('No new applications found');\n      }\n\n      // Test notification simulation - very rarely show a test notification (0.05% probability)\n      // This only happens if no real applications were found\n      if (Math.random() > 0.9995) {\n        const testId = getTestApplicationId();\n\n        // Avoid showing test notifications for IDs already notified\n        if (!notifiedApplications.has(testId)) {\n          console.log(`Showing test notification with ID: ${testId}`);\n\n          // Mark as notified immediately to prevent duplicates\n          markApplicationAsNotified(testId);\n          const testNotification = {\n            title: 'Nueva solicitud asignada',\n            message: 'Se ha asignado una nueva solicitud de crédito a tu bandeja',\n            type: NotificationType.NEW_APPLICATION,\n            relatedItemType: 'application',\n            relatedItemId: testId\n          };\n\n          // Add notification and show popup\n          addNotification(testNotification);\n          showPopup({\n            ...testNotification,\n            playSound: soundEnabled,\n            soundType: 'notification',\n            customSound: '/sounds/notification-simple.mp3'\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error checking for new notifications:', error);\n    } finally {\n      // Always mark as not running regardless of the result\n      checkingRef.current = false;\n    }\n  };\n\n  // Añadir una nueva notificación\n  const addNotification = notification => {\n    const newNotification = {\n      ...notification,\n      // Using a proper UUID for the notification ID\n      id: generateUUID(),\n      createdAt: new Date(),\n      read: false,\n      timestamp: new Date()\n    };\n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Guardar en localStorage (en producción esto iría al servidor)\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar una notificación como leída\n  const markAsRead = id => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => notification.id === id ? {\n        ...notification,\n        read: true,\n        isRead: true\n      } : notification);\n\n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar todas las notificaciones como leídas\n  const markAllAsRead = () => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => ({\n        ...notification,\n        read: true,\n        isRead: true\n      }));\n\n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Limpiar todas las notificaciones\n  const clearNotifications = () => {\n    setNotifications([]);\n    // Limpiar del localStorage\n    localStorage.setItem('notifications', JSON.stringify([]));\n  };\n\n  // Mostrar una notificación emergente\n  const showPopup = config => {\n    // Clear any existing popups to prevent stacking\n    setCurrentPopup(null);\n\n    // Short timeout to ensure DOM updates before showing the new popup\n    setTimeout(() => {\n      setCurrentPopup(config);\n\n      // Automatically close popup after the specified duration\n      setTimeout(() => {\n        setCurrentPopup(null);\n      }, config.duration || 5000);\n    }, 50);\n  };\n\n  // Clear any pending popups\n  const clearPopups = () => {\n    setCurrentPopup(null);\n  };\n\n  // Activar/desactivar sonidos de notificación\n  const toggleSound = () => {\n    const newValue = !soundEnabled;\n    setSoundEnabled(newValue);\n    // Guardar preferencia en localStorage\n    localStorage.setItem('notification_sound_enabled', newValue.toString());\n  };\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    showPopup,\n    soundEnabled,\n    toggleSound,\n    setSoundEnabled\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: [children, currentPopup && /*#__PURE__*/_jsxDEV(NotificationPopup, {\n      title: currentPopup.title,\n      message: currentPopup.message,\n      type: currentPopup.type,\n      duration: currentPopup.duration,\n      playSound: currentPopup.playSound,\n      soundType: currentPopup.soundType,\n      customSound: currentPopup.customSound,\n      onClose: () => setCurrentPopup(null),\n      centerScreen: currentPopup.centerScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 548,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"761ZEwnDqoPaVf275MjxyO3vdG8=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","useAuth","NotificationPopup","jsxDEV","_jsxDEV","generateUUID","replace","c","r","Math","random","v","toString","getTestApplicationId","sampleIds","floor","length","NotificationType","NotificationContext","undefined","useNotifications","_s","context","Error","NotificationProvider","children","_s2","user","notifications","setNotifications","unreadCount","setUnreadCount","soundEnabled","setSoundEnabled","currentPopup","setCurrentPopup","pollingIntervalRef","notifiedApplications","setNotifiedApplications","Map","checkingRef","lastNotificationTimeRef","Date","lastCheckTimeRef","loadNotifications","storedNotifications","localStorage","getItem","parsedData","JSON","parse","Array","isArray","notifiedMap","now","forEach","id","set","Object","entries","timestamp","error","console","setTimeout","checkForNewNotifications","current","setInterval","timeSinceLastCheck","getTime","log","clearInterval","count","filter","notification","read","parsed","map","n","createdAt","saveNotifiedApplications","notifiedObject","setItem","stringify","markApplicationAsNotified","applicationId","updatedMap","clearPopups","notifiedIdsArray","from","keys","alreadyShownIds","Set","response","fetch","method","headers","body","query","join","ok","data","json","newApps","app","has","newApp","appId","created_at","formattedDate","Intl","DateTimeFormat","day","month","year","format","formattedTime","hour","minute","hour12","formattedAmount","NumberFormat","style","currency","minimumFractionDigits","Number","amount","formattedRate","interest_rate","formattedMonthly","monthly_payment","appType","application_type","cleanType","split","word","charAt","toUpperCase","slice","detailedMessage","client_name","company_name","term","notificationTitle","newNotification","title","message","type","NEW_APPLICATION","relatedItemType","relatedItemId","addNotification","showPopup","playSound","soundType","duration","customSound","centerScreen","testId","testNotification","prev","updated","markAsRead","isRead","markAllAsRead","clearNotifications","config","toggleSound","newValue","value","Provider","onClose","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { useAuth } from './AuthContext';\nimport NotificationPopup from '../components/ui/NotificationPopup';\n\n// Generate a proper UUID for notification IDs\nfunction generateUUID() {\n  // Use a more standard implementation for UUID v4\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n// For test notifications, use a valid UUID format - don't use app-timestamp\nfunction getTestApplicationId() {\n  // Use a small set of real UUIDs as sample application IDs\n  const sampleIds = [\n    '110cc76a-1762-4df4-840e-a503fea9d7aa',\n    '220cc76a-1762-4df4-840e-a503fea9d7bb',\n    '330cc76a-1762-4df4-840e-a503fea9d7cc',\n    '440cc76a-1762-4df4-840e-a503fea9d7dd',\n    '550cc76a-1762-4df4-840e-a503fea9d7ee'\n  ];\n  \n  // Pick a random ID from the sample list\n  return sampleIds[Math.floor(Math.random() * sampleIds.length)];\n}\n\n// Enum for notification types\nexport enum NotificationType {\n  INFO = 'info',\n  SUCCESS = 'success',\n  WARNING = 'warning',\n  ERROR = 'error',\n  NEW_APPLICATION = 'new_application',\n  APPROVAL_REQUIRED = 'approval_required',\n  NEW_MESSAGE = 'new_message',\n  APPLICATION_STATUS_UPDATED = 'application_status_updated',\n  APPLICATION_COMMENT = 'application_comment',\n}\n\n// Interfaces\ninterface Notification {\n  id: string;\n  title: string;\n  message: string;\n  createdAt: Date;\n  read: boolean;\n  type: NotificationType | 'info' | 'success' | 'warning' | 'error';\n  relatedItemId?: string;\n  relatedItemType?: string;\n  data?: any;\n  timestamp?: Date;\n  isRead?: boolean;\n}\n\ninterface NotificationPopupConfig {\n  title: string;\n  message: string;\n  type?: NotificationType | 'info' | 'success' | 'warning' | 'error';\n  duration?: number;\n  playSound?: boolean;\n  soundType?: 'notification' | 'alert' | 'approval';\n  customSound?: string;\n  centerScreen?: boolean;\n}\n\ninterface NotificationContextType {\n  notifications: Notification[];\n  unreadCount: number;\n  addNotification: (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => void;\n  markAsRead: (id: string) => void;\n  markAllAsRead: () => void;\n  clearNotifications: () => void;\n  showPopup: (config: NotificationPopupConfig) => void;\n  soundEnabled: boolean;\n  toggleSound: () => void;\n  setSoundEnabled: (enabled: boolean) => void;\n}\n\nexport const NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user } = useAuth();\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [unreadCount, setUnreadCount] = useState<number>(0);\n  const [soundEnabled, setSoundEnabled] = useState<boolean>(true);\n  \n  // Estado para la notificación emergente actual\n  const [currentPopup, setCurrentPopup] = useState<NotificationPopupConfig | null>(null);\n  \n  // Referencia al ID del polling interval\n  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // State to keep track of already notified application IDs with timestamps\n  // This helps prevent showing the same notification multiple times\n  const [notifiedApplications, setNotifiedApplications] = useState<Map<string, number>>(new Map());\n\n  // Referencia para evitar múltiples ejecuciones simultáneas\n  const checkingRef = useRef<boolean>(false);\n  \n  // Reference to the latest known notification time\n  const lastNotificationTimeRef = useRef<Date>(new Date());\n  \n  // Avoid duplicate notifications by ensuring we have a minimum interval between checks\n  const lastCheckTimeRef = useRef<Date>(new Date());\n\n  // Efecto para manejar la carga inicial de notificaciones y configurar el polling\n  useEffect(() => {\n    if (user) {\n      // Cargar notificaciones al inicio\n      loadNotifications();\n\n      // Cargar aplicaciones ya notificadas desde localStorage\n      try {\n        const storedNotifications = localStorage.getItem('notified_application_ids');\n        if (storedNotifications) {\n          const parsedData = JSON.parse(storedNotifications);\n          \n          // Handle both old format (array) and new format (object with timestamps)\n          if (Array.isArray(parsedData)) {\n            // Old format - convert to new Map with current timestamp\n            const notifiedMap = new Map();\n            const now = Date.now();\n            parsedData.forEach((id: string) => {\n              notifiedMap.set(id, now);\n            });\n            setNotifiedApplications(notifiedMap);\n          } else if (typeof parsedData === 'object') {\n            // New format - convert object to Map\n            const notifiedMap = new Map();\n            Object.entries(parsedData).forEach(([id, timestamp]) => {\n              notifiedMap.set(id, timestamp as number);\n            });\n            setNotifiedApplications(notifiedMap);\n          }\n        }\n      } catch (error) {\n        console.error('Error loading notified applications:', error);\n        // Reset if there's an error\n        setNotifiedApplications(new Map());\n      }\n      \n      // Wait 3 seconds before first check to ensure UI is fully loaded\n      setTimeout(() => {\n        // Verificar al inicio si hay solicitudes recientes\n        checkForNewNotifications();\n        \n        // Configurar polling para verificar nuevas notificaciones cada 30 seconds\n        // Increased from 15 to 30 seconds to reduce duplicate risks\n        pollingIntervalRef.current = setInterval(() => {\n          const now = new Date();\n          const timeSinceLastCheck = now.getTime() - lastCheckTimeRef.current.getTime();\n          \n          // Only check if it's been at least 25 seconds since last check\n          if (timeSinceLastCheck > 25000) {\n            checkForNewNotifications();\n          } else {\n            console.log(`Skipping notification check (last check was ${timeSinceLastCheck/1000}s ago)`);\n          }\n        }, 30000);\n      }, 3000);\n      \n      // Limpiar el intervalo cuando el componente se desmonte\n      return () => {\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n        }\n      };\n    }\n  }, [user]);\n\n  // Cálculo de notificaciones no leídas\n  useEffect(() => {\n    const count = notifications.filter(notification => !notification.read).length;\n    setUnreadCount(count);\n  }, [notifications]);\n\n  // Cargar notificaciones del almacenamiento local o del servidor\n  const loadNotifications = async () => {\n    try {\n      // En un escenario real, aquí se cargarían las notificaciones del servidor\n      // Por ahora, usaremos el localStorage como ejemplo\n      const storedNotifications = localStorage.getItem('notifications');\n      if (storedNotifications) {\n        const parsed = JSON.parse(storedNotifications);\n        setNotifications(parsed.map((n: any) => ({\n          ...n,\n          createdAt: new Date(n.createdAt)\n        })));\n      }\n    } catch (error) {\n      console.error('Error loading notifications:', error);\n    }\n  };\n\n  // Save notified applications with timestamps to localStorage\n  const saveNotifiedApplications = (notifiedMap: Map<string, number>) => {\n    try {\n      // Convert Map to object for storage\n      const notifiedObject: Record<string, number> = {};\n      notifiedMap.forEach((timestamp, id) => {\n        notifiedObject[id] = timestamp;\n      });\n      \n      localStorage.setItem('notified_application_ids', JSON.stringify(notifiedObject));\n    } catch (error) {\n      console.error('Error saving notified applications:', error);\n    }\n  };\n\n  // Mark an application as notified to prevent duplicate notifications\n  const markApplicationAsNotified = (applicationId: string) => {\n    const updatedMap = new Map(notifiedApplications);\n    updatedMap.set(applicationId, Date.now());\n    setNotifiedApplications(updatedMap);\n    saveNotifiedApplications(updatedMap);\n    \n    console.log(`Marked application ${applicationId} as notified`);\n  };\n\n  // Verificar nuevas notificaciones en el servidor\n  const checkForNewNotifications = async () => {\n    // Record the check time immediately to prevent race conditions\n    lastCheckTimeRef.current = new Date();\n    \n    // Avoid multiple executions at the same time\n    if (checkingRef.current) {\n      console.log('Already checking for notifications');\n      return;\n    }\n    \n    // Make sure we don't have any lingering popups\n    clearPopups();\n    \n    checkingRef.current = true;\n    console.log('Checking for new notifications...');\n    \n    try {\n      // Convert notified IDs Map to array for the query\n      const notifiedIdsArray = Array.from(notifiedApplications.keys());\n      console.log(`${notifiedIdsArray.length} already notified application IDs`);\n      \n      // IMPORTANT: Add additional check in JavaScript to prevent showing already notified applications\n      // This is a safeguard in case the SQL query doesn't filter them out properly\n      const alreadyShownIds = new Set(notifiedIdsArray);\n      \n      // Query recent applications that haven't been shown yet\n      const response = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: `\n            SELECT id, client_name, application_type, company_name, created_at, status, \n                   amount, term, interest_rate, monthly_payment\n            FROM applications \n            WHERE created_at > NOW() - INTERVAL '24 hours'\n            ${notifiedIdsArray.length > 0 \n              ? `AND id NOT IN ('${notifiedIdsArray.join(\"','\")}')`\n              : ''}\n            ORDER BY created_at DESC\n            LIMIT 5\n          `\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Error querying recent applications');\n      }\n      \n      const data = await response.json();\n      \n      // If there are new applications, show notification\n      if (data.data && data.data.length > 0) {\n        // Filter out any applications that are already in our tracked IDs\n        // This is a double-check to prevent duplicates\n        const newApps = data.data.filter((app: any) => !alreadyShownIds.has(app.id));\n        \n        if (newApps.length === 0) {\n          console.log('No truly new applications found (already notified about these)');\n          return;\n        }\n        \n        // Take only the first new application to show\n        const newApp = newApps[0];\n        const appId = newApp.id;\n        \n        console.log(`New application detected: ${appId}`);\n        \n        // IMPORTANT: Mark as notified IMMEDIATELY to prevent duplicates\n        // even if processing fails later\n        markApplicationAsNotified(appId);\n          \n        // Format data for notification\n        const createdAt = new Date(newApp.created_at);\n        const formattedDate = new Intl.DateTimeFormat('es-MX', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric'\n        }).format(createdAt);\n        \n        const formattedTime = new Intl.DateTimeFormat('es-MX', {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: true\n        }).format(createdAt);\n        \n        // Format amount with thousands separator and 2 decimals\n        const formattedAmount = new Intl.NumberFormat('es-MX', {\n          style: 'currency',\n          currency: 'MXN',\n          minimumFractionDigits: 2\n        }).format(Number(newApp.amount || 0));\n        \n        // Format interest rate with percentage\n        const formattedRate = `${newApp.interest_rate || 0}%`;\n        \n        // Format monthly payment\n        const formattedMonthly = new Intl.NumberFormat('es-MX', {\n          style: 'currency',\n          currency: 'MXN',\n          minimumFractionDigits: 2\n        }).format(Number(newApp.monthly_payment || 0));\n        \n        // Transform application type to a more readable format\n        let appType = 'No especificado';\n        if (newApp.application_type) {\n          // Remove any trailing slash if it exists\n          const cleanType = newApp.application_type.replace(/\\/$/, '');\n          \n          if (cleanType === 'selected_plans') {\n            appType = 'Planes seleccionados';\n          } else if (cleanType === 'product_simulations') {\n            appType = 'Simulación de producto';\n          } else {\n            appType = cleanType\n              .split('_')\n              .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))\n              .join(' ');\n          }\n        }\n        \n        // Create a well-structured HTML message for the popup\n        const detailedMessage = `\n          <div class=\"grid grid-cols-2 gap-2 text-sm mt-2\">\n            <div class=\"font-semibold text-gray-700\">Cliente:</div>\n            <div class=\"text-gray-900\">${newApp.client_name || 'Sin nombre'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Empresa:</div>\n            <div class=\"text-gray-900\">${newApp.company_name || 'No especificada'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Tipo:</div>\n            <div class=\"text-gray-900\">${appType}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Monto:</div>\n            <div class=\"text-gray-900\">${formattedAmount}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Plazo:</div>\n            <div class=\"text-gray-900\">${newApp.term || 'N/A'} ${newApp.term === 1 ? 'mes' : 'meses'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Tasa:</div>\n            <div class=\"text-gray-900\">${formattedRate}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Pago mensual:</div>\n            <div class=\"text-gray-900\">${formattedMonthly}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Fecha:</div>\n            <div class=\"text-gray-900\">${formattedDate} ${formattedTime}</div>\n          </div>\n        `;\n        \n        const notificationTitle = '💼 Nueva solicitud recibida';\n        \n        // Create the notification for the panel\n        const newNotification = {\n          title: notificationTitle,\n          message: `Cliente: ${newApp.client_name || 'Sin nombre'} - ${newApp.company_name || 'Empresa no especificada'}`,\n          type: NotificationType.NEW_APPLICATION,\n          relatedItemType: 'application',\n          relatedItemId: appId\n        };\n        \n        // Add the notification to the panel\n        addNotification(newNotification);\n        \n        // Show popup with complete details\n        showPopup({\n          title: notificationTitle,\n          message: detailedMessage,\n          type: NotificationType.NEW_APPLICATION,\n          playSound: soundEnabled,\n          soundType: 'notification',\n          duration: 10000, // 10 seconds\n          customSound: '/sounds/clean-notification.mp3',\n          centerScreen: true\n        });\n        \n        // Update last notification time to avoid duplicates\n        lastNotificationTimeRef.current = new Date();\n      } else {\n        console.log('No new applications found');\n      }\n      \n      // Test notification simulation - very rarely show a test notification (0.05% probability)\n      // This only happens if no real applications were found\n      if (Math.random() > 0.9995) {\n        const testId = getTestApplicationId();\n        \n        // Avoid showing test notifications for IDs already notified\n        if (!notifiedApplications.has(testId)) {\n          console.log(`Showing test notification with ID: ${testId}`);\n          \n          // Mark as notified immediately to prevent duplicates\n          markApplicationAsNotified(testId);\n          \n          const testNotification = {\n            title: 'Nueva solicitud asignada',\n            message: 'Se ha asignado una nueva solicitud de crédito a tu bandeja',\n            type: NotificationType.NEW_APPLICATION,\n            relatedItemType: 'application',\n            relatedItemId: testId\n          };\n          \n          // Add notification and show popup\n          addNotification(testNotification);\n          showPopup({\n            ...testNotification,\n            playSound: soundEnabled,\n            soundType: 'notification',\n            customSound: '/sounds/notification-simple.mp3'\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error checking for new notifications:', error);\n    } finally {\n      // Always mark as not running regardless of the result\n      checkingRef.current = false;\n    }\n  };\n\n  // Añadir una nueva notificación\n  const addNotification = (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => {\n    const newNotification: Notification = {\n      ...notification,\n      // Using a proper UUID for the notification ID\n      id: generateUUID(),\n      createdAt: new Date(),\n      read: false,\n      timestamp: new Date()\n    };\n    \n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Guardar en localStorage (en producción esto iría al servidor)\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar una notificación como leída\n  const markAsRead = (id: string) => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => \n        notification.id === id \n          ? { ...notification, read: true, isRead: true } \n          : notification\n      );\n      \n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar todas las notificaciones como leídas\n  const markAllAsRead = () => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => ({ ...notification, read: true, isRead: true }));\n      \n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Limpiar todas las notificaciones\n  const clearNotifications = () => {\n    setNotifications([]);\n    // Limpiar del localStorage\n    localStorage.setItem('notifications', JSON.stringify([]));\n  };\n\n  // Mostrar una notificación emergente\n  const showPopup = (config: NotificationPopupConfig) => {\n    // Clear any existing popups to prevent stacking\n    setCurrentPopup(null);\n    \n    // Short timeout to ensure DOM updates before showing the new popup\n    setTimeout(() => {\n      setCurrentPopup(config);\n      \n      // Automatically close popup after the specified duration\n      setTimeout(() => {\n        setCurrentPopup(null);\n      }, config.duration || 5000);\n    }, 50);\n  };\n\n  // Clear any pending popups\n  const clearPopups = () => {\n    setCurrentPopup(null);\n  };\n\n  // Activar/desactivar sonidos de notificación\n  const toggleSound = () => {\n    const newValue = !soundEnabled;\n    setSoundEnabled(newValue);\n    // Guardar preferencia en localStorage\n    localStorage.setItem('notification_sound_enabled', newValue.toString());\n  };\n\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    showPopup,\n    soundEnabled,\n    toggleSound,\n    setSoundEnabled\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n      {currentPopup && (\n        <NotificationPopup\n          title={currentPopup.title}\n          message={currentPopup.message}\n          type={currentPopup.type as any}\n          duration={currentPopup.duration}\n          playSound={currentPopup.playSound}\n          soundType={currentPopup.soundType}\n          customSound={currentPopup.customSound}\n          onClose={() => setCurrentPopup(null)}\n          centerScreen={currentPopup.centerScreen}\n        />\n      )}\n    </NotificationContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}