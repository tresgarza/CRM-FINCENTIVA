{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/components/ui/KanbanBoard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getApprovalStatus, approveByAdvisor, approveByCompany } from '../../services/applicationService';\nimport { APPLICATION_STATUS, STATUS_LABELS } from '../../utils/constants/statuses';\nimport { usePermissions } from '../../contexts/PermissionsContext';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { TABLES } from '../../utils/constants/tables';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Verificar si APPLICATION_HISTORY tabla está definida\nconst APPLICATION_HISTORY_TABLE = TABLES.APPLICATION_HISTORY || 'application_history';\n\n// Función para escapar cadenas de texto para SQL\nfunction escapeSQLString(str) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\n// Interfaz para el estado de aprobación\n\n// Crear un tipo para aplicaciones con su estado de aprobación\n\nconst KanbanBoard = ({\n  applications,\n  onStatusChange\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [appsWithApproval, setAppsWithApproval] = useState([]);\n  const [processingAppId, setProcessingAppId] = useState(null);\n  const {\n    shouldFilterByEntity,\n    getEntityFilter,\n    isAdvisor,\n    isCompanyAdmin\n  } = usePermissions();\n  const {\n    user\n  } = useAuth();\n  const dragItemRef = useRef(null);\n  const dragImageRef = useRef(null);\n  const draggedItemIndexRef = useRef(-1);\n  const draggedItemNewStatusRef = useRef('');\n  const [autoTransitionMessage, setAutoTransitionMessage] = useState(null);\n\n  // Primero, modificar useEffect para cargar aplicaciones con datos de aprobación\n  useEffect(() => {\n    const loadApprovalStatuses = async () => {\n      if (!applications || applications.length === 0) return;\n      setIsLoading(true);\n      try {\n        const appsWithStatus = await Promise.all(applications.map(async app => {\n          // Obtener el estado de aprobación real de la API\n          const status = await getApprovalStatus(app.id);\n\n          // Devolver la aplicación con su estado de aprobación\n          return {\n            ...app,\n            approvalStatus: status || {\n              approvedByAdvisor: false,\n              approvedByCompany: false\n            },\n            // Para administradores de empresa, agregar un campo que maneja su \"estado virtual\"\n            company_review_status: isCompanyAdmin() ?\n            // Si la aplicación está en revisión o aprobada por empresa, marcarla\n            app.status === APPLICATION_STATUS.IN_REVIEW || status && status.approvedByCompany : false\n          };\n        }));\n        setAppsWithApproval(appsWithStatus);\n      } catch (error) {\n        console.error(\"Error loading approval statuses:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadApprovalStatuses();\n  }, [applications]);\n\n  // Actualizar la lógica para nuevas aplicaciones para incluir todas las nuevas notificaciones\n  useEffect(() => {\n    // Verificar si hay aplicaciones que deberían estar en \"nuevo\" (recién creadas)\n    const newApplications = applications.filter(app => {\n      // Identificar aplicaciones recién creadas (menos de 24 horas)\n      const isNew = !app.status || app.status === 'pending' || app.status === 'solicitud';\n      const createdAt = new Date(app.created_at);\n      const now = new Date();\n      const hoursElapsed = (now.getTime() - createdAt.getTime()) / (1000 * 60 * 60);\n      const isRecent = hoursElapsed < 24;\n      return isRecent && (isNew || app.status === 'new');\n    });\n\n    // Si hay aplicaciones nuevas sin status o con status pendiente/solicitud, asignarles \"nuevo\"\n    if (newApplications.length > 0) {\n      console.log('Aplicaciones nuevas detectadas:', newApplications);\n      const updatedApps = [...appsWithApproval];\n      newApplications.forEach(newApp => {\n        const index = updatedApps.findIndex(app => app.id === newApp.id);\n        if (index !== -1 && (!updatedApps[index].status || updatedApps[index].status === 'pending' || updatedApps[index].status === 'solicitud')) {\n          updatedApps[index] = {\n            ...updatedApps[index],\n            status: APPLICATION_STATUS.NEW\n          };\n          console.log(`Aplicación ${newApp.id} movida a estado NUEVO`);\n        }\n      });\n      setAppsWithApproval(updatedApps);\n    }\n  }, [applications]); // Usar applications como dependencia en lugar de appsWithApproval\n\n  // Asegurar que nuevas aplicaciones se muestren inmediatamente\n  // añadiendo una función de comprobación en el useEffect principal\n  useEffect(() => {\n    const checkForNewApplications = async () => {\n      // Verificar que tenemos usuario y permisos\n      if (!(user !== null && user !== void 0 && user.id)) return;\n      try {\n        // Ejecutar esta comprobación solo si somos admin de empresa\n        if (isCompanyAdmin() && applications.length > 0) {\n          // Obtener la fecha de hace 24 horas\n          const oneDayAgo = new Date();\n          oneDayAgo.setHours(oneDayAgo.getHours() - 24);\n\n          // Buscar aplicaciones creadas en las últimas 24 horas\n          const recentApps = applications.filter(app => {\n            const createdAt = new Date(app.created_at);\n            return createdAt >= oneDayAgo;\n          });\n\n          // Si hay aplicaciones recientes, asegurarnos de que aparezcan en el tablero\n          if (recentApps.length > 0) {\n            console.log(`Encontradas ${recentApps.length} aplicaciones recientes`);\n\n            // Asegurar que todas estas aplicaciones están en nuestro estado local\n            // y que tienen el estado correcto (NEW si no tienen un estado específico)\n            const updatedApps = [...appsWithApproval];\n            let hasChanges = false;\n            recentApps.forEach(recentApp => {\n              const index = updatedApps.findIndex(app => app.id === recentApp.id);\n\n              // Si la aplicación no está en nuestro estado, agregarla\n              if (index === -1) {\n                console.log(`Agregando aplicación nueva ${recentApp.id} al estado`);\n                updatedApps.push({\n                  ...recentApp,\n                  status: recentApp.status || APPLICATION_STATUS.NEW,\n                  approvalStatus: {\n                    approvedByAdvisor: recentApp.approved_by_advisor || false,\n                    approvedByCompany: recentApp.approved_by_company || false\n                  }\n                });\n                hasChanges = true;\n              }\n              // Si no tiene estado o está en estado pendiente/solicitud, asignarle NEW\n              else if (!updatedApps[index].status || updatedApps[index].status === 'pending' || updatedApps[index].status === 'solicitud') {\n                console.log(`Actualizando estado de ${recentApp.id} a NUEVO`);\n                updatedApps[index] = {\n                  ...updatedApps[index],\n                  status: APPLICATION_STATUS.NEW\n                };\n                hasChanges = true;\n              }\n            });\n\n            // Actualizar el estado solo si hubo cambios\n            if (hasChanges) {\n              setAppsWithApproval(updatedApps);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error verificando nuevas aplicaciones:', error);\n      }\n    };\n\n    // Ejecutar la función de comprobación\n    checkForNewApplications();\n  }, [applications, user === null || user === void 0 ? void 0 : user.id, isCompanyAdmin]);\n\n  // Modificar la lógica para actualizar todas las aplicaciones con estado \"pending\" o \"solicitud\" a \"new\"\n  useEffect(() => {\n    // Si no hay aplicaciones, no hacer nada\n    if (!applications || applications.length === 0) return;\n    console.log('Verificando estado de aplicaciones:', applications.map(a => ({\n      id: a.id,\n      status: a.status\n    })));\n\n    // Actualizar solo las aplicaciones con estado específico a \"new\" sin afectar las demás\n    const updatedApps = [...appsWithApproval];\n    let hasChanges = false;\n    applications.forEach(app => {\n      const index = updatedApps.findIndex(a => a.id === app.id);\n      const needsUpdate = !app.status || app.status === 'pending' || app.status === 'solicitud';\n\n      // Solo actualizar si el estado necesita cambiar a \"new\"\n      if (index !== -1 && needsUpdate) {\n        console.log(`Actualizando estado de aplicación ${app.id} de \"${app.status}\" a \"new\"`);\n        updatedApps[index] = {\n          ...updatedApps[index],\n          status: APPLICATION_STATUS.NEW\n        };\n        hasChanges = true;\n      } else if (index === -1) {\n        // Si la aplicación no está en el array, agregarla con su estado original\n        // o \"new\" si no tiene estado o es pending/solicitud\n        const newStatus = needsUpdate ? APPLICATION_STATUS.NEW : app.status;\n        console.log(`Agregando aplicación ${app.id} con estado \"${newStatus}\"`);\n        updatedApps.push({\n          ...app,\n          status: newStatus,\n          approvalStatus: {\n            approvedByAdvisor: app.approved_by_advisor || false,\n            approvedByCompany: app.approved_by_company || false\n          }\n        });\n        hasChanges = true;\n      }\n      // Si existe y no necesita actualización, la dejamos como está\n    });\n    if (hasChanges) {\n      console.log('Actualizando aplicaciones:');\n      updatedApps.forEach(app => console.log(`- ${app.id}: ${app.status}`));\n      setAppsWithApproval(updatedApps);\n    }\n  }, [applications]);\n\n  // Modificar la forma en que agrupamos las aplicaciones por estado para los administradores de empresa\n  // para crear un flujo de trabajo independiente\n  const groupedApplications = React.useMemo(() => {\n    // Crear un objeto con todos los estados posibles como claves y arrays vacíos como valores\n    const initialGroups = Object.values(APPLICATION_STATUS).reduce((acc, status) => {\n      acc[status] = [];\n      return acc;\n    }, {});\n\n    // Para los administradores de empresa, usaremos un agrupamiento virtual basado en las aprobaciones\n    if (isCompanyAdmin()) {\n      return appsWithApproval.reduce((acc, app) => {\n        // Si está en movimiento, respetar el estado de destino\n        if (app.isMoving && app.targetStatus) {\n          // Verificar que el estado existe antes de intentar agregar la aplicación\n          if (acc[app.targetStatus]) {\n            acc[app.targetStatus].push(app);\n          } else {\n            // Si el estado no existe, usar NEW como fallback\n            console.warn(`Estado inválido detectado: ${app.targetStatus}, usando NEW como fallback`);\n            acc[APPLICATION_STATUS.NEW].push(app);\n          }\n          return acc;\n        }\n\n        // Normalizar estados \"pending\" y \"solicitud\" a \"new\"\n        if (!app.status || app.status === 'pending' || app.status === 'solicitud') {\n          acc[APPLICATION_STATUS.NEW].push(app);\n          return acc;\n        }\n\n        // Estados compartidos que siempre se muestran igual para todos los usuarios\n        const sharedStatuses = [APPLICATION_STATUS.POR_DISPERSAR, APPLICATION_STATUS.COMPLETED, APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.REJECTED];\n        if (sharedStatuses.includes(app.status)) {\n          // Verificar que el estado existe\n          if (acc[app.status]) {\n            acc[app.status].push(app);\n          } else {\n            console.warn(`Estado compartido inválido detectado: ${app.status}, usando NEW como fallback`);\n            acc[APPLICATION_STATUS.NEW].push(app);\n          }\n          return acc;\n        }\n\n        // Para los estados independientes, usar la lógica personalizada para admin de empresa\n        if (app.status === APPLICATION_STATUS.APPROVED) {\n          var _app$approvalStatus, _app$approvalStatus2, _app$approvalStatus3;\n          // Si está aprobada por la empresa pero no por el asesor, mostrarla en \"aprobado por mi\" \n          if ((_app$approvalStatus = app.approvalStatus) !== null && _app$approvalStatus !== void 0 && _app$approvalStatus.approvedByCompany && !app.approvalStatus.approvedByAdvisor) {\n            acc[APPLICATION_STATUS.APPROVED].push(app);\n            return acc;\n          }\n\n          // Si está aprobada por ambos, y el estado real es aprobado, mostrarla en aprobado\n          if ((_app$approvalStatus2 = app.approvalStatus) !== null && _app$approvalStatus2 !== void 0 && _app$approvalStatus2.approvedByCompany && (_app$approvalStatus3 = app.approvalStatus) !== null && _app$approvalStatus3 !== void 0 && _app$approvalStatus3.approvedByAdvisor) {\n            acc[APPLICATION_STATUS.APPROVED].push(app);\n            return acc;\n          }\n\n          // En otros casos, mostrarla en el estado que tenga según otras reglas\n        }\n\n        // Si está en revisión según la empresa\n        if (app.status === APPLICATION_STATUS.IN_REVIEW) {\n          var _app$approvalStatus4;\n          // Si no está aprobada por la empresa, mostrarla en \"en revisión\"\n          if (!((_app$approvalStatus4 = app.approvalStatus) !== null && _app$approvalStatus4 !== void 0 && _app$approvalStatus4.approvedByCompany)) {\n            acc[APPLICATION_STATUS.IN_REVIEW].push(app);\n            return acc;\n          }\n\n          // Si está aprobada por la empresa, mostrarla en \"aprobado por mi\"\n          acc[APPLICATION_STATUS.APPROVED].push(app);\n          return acc;\n        }\n\n        // Para nuevas aplicaciones sin aprobación\n        if (app.status === APPLICATION_STATUS.NEW) {\n          var _app$approvalStatus5;\n          // Si está aprobada por la empresa, mostrarla en \"aprobado por mi\"\n          if ((_app$approvalStatus5 = app.approvalStatus) !== null && _app$approvalStatus5 !== void 0 && _app$approvalStatus5.approvedByCompany) {\n            acc[APPLICATION_STATUS.APPROVED].push(app);\n            return acc;\n          }\n\n          // Si está en revisión por la empresa\n          if (app.company_review_status === true) {\n            acc[APPLICATION_STATUS.IN_REVIEW].push(app);\n            return acc;\n          }\n\n          // Si no tiene marca especial, mostrarla como nueva\n          acc[APPLICATION_STATUS.NEW].push(app);\n          return acc;\n        }\n\n        // Para cualquier otro caso, usar el estado real si existe, o NEW como fallback\n        if (acc[app.status]) {\n          acc[app.status].push(app);\n        } else {\n          console.warn(`Estado desconocido detectado: ${app.status}, usando NEW como fallback`);\n          acc[APPLICATION_STATUS.NEW].push(app);\n        }\n        return acc;\n      }, initialGroups);\n    }\n\n    // Para asesores y otros roles, usamos el agrupamiento normal basado en estado\n    return appsWithApproval.reduce((acc, app) => {\n      if (app.isMoving && app.targetStatus) {\n        // Si está en movimiento, verificar que el estado de destino existe\n        if (acc[app.targetStatus]) {\n          acc[app.targetStatus].push(app);\n        } else {\n          console.warn(`Estado de destino inválido: ${app.targetStatus}, usando NEW como fallback`);\n          acc[APPLICATION_STATUS.NEW].push(app);\n        }\n      } else {\n        // Si no, usar el estado normal, normalizando \"pending\" y \"solicitud\" a \"new\"\n        let status = app.status || 'new';\n\n        // Normalizar estados \"pending\" y \"solicitud\" a \"new\"\n        if (status === 'pending' || status === 'solicitud') {\n          status = APPLICATION_STATUS.NEW;\n        }\n\n        // Verificar que el estado existe antes de agregar\n        if (acc[status]) {\n          acc[status].push(app);\n        } else {\n          console.warn(`Estado inválido detectado: ${status}, usando NEW como fallback`);\n          acc[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      return acc;\n    }, initialGroups);\n  }, [appsWithApproval, isCompanyAdmin, isAdvisor]);\n\n  // Modificar la lógica de agrupamiento de aplicaciones para separar flujos\n  // Esta es la parte clave que separa completamente los flujos\n  const columns = useMemo(() => {\n    // Estados estándar del Kanban\n    const statusGroups = {\n      [APPLICATION_STATUS.NEW]: [],\n      [APPLICATION_STATUS.IN_REVIEW]: [],\n      [APPLICATION_STATUS.APPROVED]: [],\n      [APPLICATION_STATUS.POR_DISPERSAR]: [],\n      [APPLICATION_STATUS.COMPLETED]: [],\n      [APPLICATION_STATUS.EXPIRED]: [],\n      [APPLICATION_STATUS.REJECTED]: [],\n      [APPLICATION_STATUS.CANCELLED]: []\n    };\n\n    // Agrupar aplicaciones por estado\n    appsWithApproval.forEach(app => {\n      // Asegurarnos de que el app.status no es undefined antes de usarlo\n      const currentStatus = app.status || APPLICATION_STATUS.NEW;\n\n      // Lógica específica para administradores de empresa - flujo sincronizado\n      if (isCompanyAdmin()) {\n        var _app$approvalStatus6, _app$approvalStatus7;\n        // Los estados avanzados siempre deben mostrarse en su columna correspondiente\n        // independientemente del flujo (esto garantiza que se sincronicen con la vista del asesor)\n        const advancedStatuses = [APPLICATION_STATUS.POR_DISPERSAR, APPLICATION_STATUS.COMPLETED, APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.REJECTED];\n        if (advancedStatuses.includes(currentStatus)) {\n          console.log(`Mostrando tarjeta ${app.id} en estado avanzado: ${currentStatus}`);\n          statusGroups[currentStatus].push(app);\n          return;\n        }\n\n        // Para los estados básicos, aplicar la lógica personalizada del admin de empresa\n\n        // 1. Si está aprobada por empresa -> va a \"Aprobado por mi\"\n        if ((_app$approvalStatus6 = app.approvalStatus) !== null && _app$approvalStatus6 !== void 0 && _app$approvalStatus6.approvedByCompany) {\n          statusGroups[APPLICATION_STATUS.APPROVED].push(app);\n        }\n        // 2. Si está en revisión por empresa -> va a \"En Revisión\"\n        else if (app.company_review_status) {\n          statusGroups[APPLICATION_STATUS.IN_REVIEW].push(app);\n        }\n        // 3. Si no está ni en revisión ni aprobada por empresa -> va a \"Nuevo\"\n        else if (currentStatus === APPLICATION_STATUS.NEW || currentStatus === APPLICATION_STATUS.PENDING || !app.company_review_status && !((_app$approvalStatus7 = app.approvalStatus) !== null && _app$approvalStatus7 !== void 0 && _app$approvalStatus7.approvedByCompany)) {\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      // Lógica para asesores - flujo normal basado en estado real\n      else if (isAdvisor()) {\n        if (currentStatus) {\n          // Verificar que el estado existe en nuestros grupos antes de agregar\n          if (statusGroups[currentStatus]) {\n            statusGroups[currentStatus].push(app);\n          } else {\n            // Si no existe, log warning y usar NEW como fallback\n            console.warn(`Estado desconocido en columns para asesor: ${currentStatus}, usando NEW como fallback`);\n            statusGroups[APPLICATION_STATUS.NEW].push(app);\n          }\n        } else {\n          // Si no tiene estado, ponerla en \"Nuevo\"\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      // Lógica para otros roles\n      else {\n        if (currentStatus) {\n          // Verificar que el estado existe en nuestros grupos\n          if (statusGroups[currentStatus]) {\n            statusGroups[currentStatus].push(app);\n          } else {\n            // Si no existe, usar NEW como fallback\n            console.warn(`Estado desconocido en columns para otros roles: ${currentStatus}, usando NEW como fallback`);\n            statusGroups[APPLICATION_STATUS.NEW].push(app);\n          }\n        } else {\n          // Si no tiene estado, ponerla en \"Nuevo\"\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n    });\n\n    // Definición de colores para cada columna\n    const columnDefinitions = [{\n      id: APPLICATION_STATUS.NEW,\n      title: 'Nuevo',\n      color: 'warning',\n      applications: statusGroups[APPLICATION_STATUS.NEW]\n    }, {\n      id: APPLICATION_STATUS.IN_REVIEW,\n      title: 'En Revisión',\n      color: 'info',\n      applications: statusGroups[APPLICATION_STATUS.IN_REVIEW]\n    }, {\n      id: APPLICATION_STATUS.APPROVED,\n      title: 'Aprobado por mi',\n      color: 'success',\n      applications: statusGroups[APPLICATION_STATUS.APPROVED]\n    }, {\n      id: APPLICATION_STATUS.POR_DISPERSAR,\n      title: 'Por Dispersar',\n      color: 'accent',\n      applications: statusGroups[APPLICATION_STATUS.POR_DISPERSAR]\n    }, {\n      id: APPLICATION_STATUS.COMPLETED,\n      title: 'Completado',\n      color: 'primary',\n      applications: statusGroups[APPLICATION_STATUS.COMPLETED]\n    }, {\n      id: APPLICATION_STATUS.EXPIRED,\n      title: 'Expirado',\n      color: 'error',\n      applications: statusGroups[APPLICATION_STATUS.EXPIRED]\n    }, {\n      id: APPLICATION_STATUS.REJECTED,\n      title: 'Rechazado',\n      color: 'error',\n      applications: statusGroups[APPLICATION_STATUS.REJECTED]\n    }, {\n      id: APPLICATION_STATUS.CANCELLED,\n      title: 'Cancelado',\n      color: 'neutral',\n      applications: statusGroups[APPLICATION_STATUS.CANCELLED]\n    }];\n    return columnDefinitions;\n  }, [appsWithApproval, isAdvisor, isCompanyAdmin]);\n\n  // Función para actualizar localmente el estado de aprobación de una aplicación\n  const updateLocalApprovalStatus = (applicationId, updates, newStatus) => {\n    console.log(`Actualizando estado de aprobación para ${applicationId}:`, updates);\n\n    // Crear una copia del estado actual\n    const currentApps = [...appsWithApproval];\n    const appIndex = currentApps.findIndex(app => app.id === applicationId);\n    if (appIndex === -1) {\n      console.warn(`No se encontró la aplicación ${applicationId} para actualizar approval status`);\n      return;\n    }\n\n    // Crear copia profunda de la aplicación para evitar mutaciones directas\n    const updatedApp = {\n      ...currentApps[appIndex]\n    };\n\n    // Asegurar que el objeto approvalStatus exista\n    const currentApprovalStatus = updatedApp.approvalStatus || {\n      approvedByAdvisor: false,\n      approvedByCompany: false\n    };\n\n    // Crear el nuevo objeto de aprobación, asegurando que mantenemos los valores existentes\n    // a menos que se especifiquen explícitamente en el parámetro updates\n    const newApprovalStatus = {\n      approvedByAdvisor: updates.approvedByAdvisor !== undefined ? updates.approvedByAdvisor : currentApprovalStatus.approvedByAdvisor,\n      approvedByCompany: updates.approvedByCompany !== undefined ? updates.approvedByCompany : currentApprovalStatus.approvedByCompany\n    };\n    console.log(`Approval Status anterior: ${JSON.stringify(currentApprovalStatus)}`);\n    console.log(`Nuevo Approval Status: ${JSON.stringify(newApprovalStatus)}`);\n\n    // Actualizar la aplicación con el nuevo estado de aprobación\n    updatedApp.approvalStatus = newApprovalStatus;\n\n    // Para mantener sincronizados los estados, cuando quitamos la aprobación de empresa,\n    // también actualizamos el company_review_status\n    if (updates.approvedByCompany === false && isCompanyAdmin()) {\n      console.log(`Actualizando company_review_status a true porque estamos quitando aprobación`);\n      updatedApp.company_review_status = true;\n    }\n\n    // Si ambos están aprobados, asegurarnos de moverla a por_dispersar\n    if (newApprovalStatus.approvedByAdvisor && newApprovalStatus.approvedByCompany) {\n      console.log(`Ambas aprobaciones están presentes, verificando si necesita moverse a Por Dispersar`);\n      if (updatedApp.status !== APPLICATION_STATUS.POR_DISPERSAR && updatedApp.status !== APPLICATION_STATUS.COMPLETED) {\n        console.log(`Actualizando estado a Por Dispersar debido a doble aprobación`);\n        updatedApp.status = APPLICATION_STATUS.POR_DISPERSAR;\n      }\n    }\n\n    // Actualizar el array de aplicaciones\n    currentApps[appIndex] = updatedApp;\n\n    // Establecer el nuevo estado\n    setAppsWithApproval(currentApps);\n  };\n  const handleDragStart = (e, application, idx) => {\n    // Guardar la aplicación que estamos arrastrando\n    draggedItemIndexRef.current = idx;\n\n    // Almacenar el elemento que estamos arrastrando para gestionar mejor el evento\n    dragItemRef.current = e.currentTarget;\n\n    // Establecer los datos que queremos transferir\n    e.dataTransfer.setData('text/plain', application.id);\n    e.dataTransfer.effectAllowed = 'move';\n\n    // Crear una copia visual para el arrastre\n    if (!dragImageRef.current) {\n      dragImageRef.current = e.currentTarget.cloneNode(true);\n      dragImageRef.current.style.position = 'absolute';\n      dragImageRef.current.style.top = '-1000px';\n      dragImageRef.current.style.opacity = '0.8';\n      dragImageRef.current.style.transform = 'scale(0.9)';\n      dragImageRef.current.style.width = `${e.currentTarget.offsetWidth}px`;\n      document.body.appendChild(dragImageRef.current);\n    }\n\n    // Establecer la imagen de arrastre\n    if (dragImageRef.current) {\n      const rect = e.currentTarget.getBoundingClientRect();\n      e.dataTransfer.setDragImage(dragImageRef.current, rect.width / 2, 20);\n    }\n\n    // Añadir clase CSS para mostrar visualmente que el elemento está siendo arrastrado\n    if (e.currentTarget) {\n      e.currentTarget.classList.add('dragging');\n    }\n  };\n  const handleDragEnd = e => {\n    // Eliminar clase CSS de arrastre\n    if (dragItemRef.current) {\n      dragItemRef.current.classList.remove('dragging');\n      dragItemRef.current = null;\n    }\n    if (e.currentTarget) {\n      e.currentTarget.classList.remove('dragging');\n    }\n\n    // Eliminar el elemento clonado para el arrastre\n    if (dragImageRef.current) {\n      document.body.removeChild(dragImageRef.current);\n      dragImageRef.current = null;\n    }\n    draggedItemIndexRef.current = -1;\n    draggedItemNewStatusRef.current = '';\n  };\n  const handleDragOver = (e, columnStatus) => {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = 'move';\n\n    // Guardar el nuevo estado para la actualización optimista\n    if (draggedItemNewStatusRef.current !== columnStatus) {\n      draggedItemNewStatusRef.current = columnStatus;\n    }\n\n    // Añadir clase visual para indicar la columna destino\n    if (e.currentTarget.classList.contains('kanban-column')) {\n      document.querySelectorAll('.kanban-column').forEach(col => {\n        col.classList.remove('drag-over');\n      });\n      e.currentTarget.classList.add('drag-over');\n    }\n  };\n\n  // Verificar si el usuario puede arrastrar una tarjeta\n  const canDragCard = app => {\n    // No permitir arrastrar si la aplicación no tiene status o id\n    if (!app.status || !app.id) {\n      return false;\n    }\n\n    // No permitir arrastrar tarjetas que están en proceso de cambio de estado\n    if (app.isMoving) {\n      return false;\n    }\n\n    // No permitir arrastrar tarjetas que están siendo procesadas\n    if (processingAppId === app.id) {\n      return false;\n    }\n\n    // Restricciones específicas basadas en el rol del usuario\n\n    // Para asesores\n    if (isAdvisor()) {\n      var _app$approvalStatus8, _app$approvalStatus9;\n      // Estados que nunca pueden ser movidos por ningún usuario\n      const restrictedStatuses = [APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.POR_DISPERSAR];\n\n      // No permitir arrastrar si está en un estado restringido\n      if (restrictedStatuses.includes(app.status)) {\n        return false;\n      }\n\n      // Si tiene aprobaciones de ambos (asesor y empresa), no permitir mover\n      if ((_app$approvalStatus8 = app.approvalStatus) !== null && _app$approvalStatus8 !== void 0 && _app$approvalStatus8.approvedByAdvisor && (_app$approvalStatus9 = app.approvalStatus) !== null && _app$approvalStatus9 !== void 0 && _app$approvalStatus9.approvedByCompany) {\n        return false;\n      }\n      return true;\n    }\n\n    // Para administradores de empresa\n    if (isCompanyAdmin()) {\n      var _app$approvalStatus10, _app$approvalStatus11;\n      // Estados que nunca pueden ser movidos por un admin de empresa\n      const restrictedStatuses = [APPLICATION_STATUS.POR_DISPERSAR, APPLICATION_STATUS.COMPLETED, APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.REJECTED];\n\n      // No permitir arrastrar si está en un estado restringido\n      if (restrictedStatuses.includes(app.status)) {\n        return false;\n      }\n\n      // Si tiene aprobaciones de ambos (asesor y empresa), no permitir mover\n      if ((_app$approvalStatus10 = app.approvalStatus) !== null && _app$approvalStatus10 !== void 0 && _app$approvalStatus10.approvedByAdvisor && (_app$approvalStatus11 = app.approvalStatus) !== null && _app$approvalStatus11 !== void 0 && _app$approvalStatus11.approvedByCompany) {\n        return false;\n      }\n      return true;\n    }\n\n    // Para otros roles, no permitir arrastrar\n    return false;\n  };\n\n  // Modificar handleDrop para manejar correctamente el flujo independiente\n  const handleDrop = async (e, newStatus) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Eliminar todas las clases de arrastre\n    document.querySelectorAll('.kanban-column').forEach(col => {\n      col.classList.remove('drag-over');\n    });\n\n    // Verificar que el newStatus es válido\n    const validStatuses = Object.values(APPLICATION_STATUS);\n    if (!validStatuses.includes(newStatus)) {\n      console.error(`Estado inválido para drop: ${newStatus}`);\n      setErrorMessage(`Error: estado \"${newStatus}\" no es válido.`);\n      return;\n    }\n\n    // Recuperar el ID de la aplicación\n    const applicationId = e.dataTransfer.getData('text/plain');\n    if (!applicationId || !(user !== null && user !== void 0 && user.id)) return;\n    const application = appsWithApproval.find(app => app.id === applicationId);\n    if (!application) return;\n    const oldStatus = application.status || APPLICATION_STATUS.NEW;\n\n    // No hacer nada si el estatus es el mismo\n    if (oldStatus === newStatus) return;\n    console.log(`Intentando mover tarjeta ${applicationId} de ${oldStatus} a ${newStatus}`);\n\n    // Establecer el ID de la aplicación que se está procesando\n    setProcessingAppId(applicationId);\n    try {\n      // Para administradores de empresa (FLUJO INDEPENDIENTE)\n      if (isCompanyAdmin()) {\n        // El admin de empresa solo puede mover tarjetas entre estos estados\n        const allowedTargetStates = [APPLICATION_STATUS.NEW, APPLICATION_STATUS.IN_REVIEW, APPLICATION_STATUS.APPROVED];\n\n        // Si intenta mover a un estado que no está permitido\n        if (!allowedTargetStates.includes(newStatus)) {\n          setErrorMessage(`No puedes mover solicitudes al estado \"${STATUS_LABELS[newStatus] || newStatus}\". Solo puedes mover entre Nuevo, En Revisión y Aprobado por mí.`);\n          setProcessingAppId(null);\n          return;\n        }\n\n        // Estados que nunca pueden ser movidos por un admin de empresa\n        const restrictedStatuses = [APPLICATION_STATUS.POR_DISPERSAR, APPLICATION_STATUS.COMPLETED, APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.REJECTED];\n\n        // Si la tarjeta está en un estado restringido, no permitir moverla\n        if (restrictedStatuses.includes(oldStatus)) {\n          setErrorMessage(`No puedes mover solicitudes que están en estado \"${STATUS_LABELS[oldStatus] || oldStatus}\".`);\n          setProcessingAppId(null);\n          return;\n        }\n\n        // Actualización optimista en UI para mejor fluidez\n        const updatedApps = [...appsWithApproval];\n        const appIndex = updatedApps.findIndex(app => app.id === applicationId);\n        if (appIndex !== -1) {\n          // Crear copia profunda para evitar referencias\n          const updatedApp = {\n            ...updatedApps[appIndex],\n            isMoving: true,\n            targetStatus: newStatus\n          };\n          if (newStatus === APPLICATION_STATUS.NEW) {\n            var _updatedApp$approvalS;\n            // Mover a Nuevo\n            updatedApp.company_review_status = false;\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              }),\n              approvedByCompany: false\n            };\n\n            // Si estaba aprobado y se mueve a Nuevo, hay que quitar la aprobación de la empresa\n            if ((_updatedApp$approvalS = updatedApp.approvalStatus) !== null && _updatedApp$approvalS !== void 0 && _updatedApp$approvalS.approvedByCompany && user !== null && user !== void 0 && user.entityId && application.company_id) {\n              try {\n                console.log(\"Quitando aprobación de empresa en la base de datos\");\n                // Ejecutamos una consulta SQL para quitar la aprobación\n                const query = `\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_company = false, \n                      approval_date_company = NULL\n                  WHERE id = '${applicationId}' AND company_id = '${application.company_id}'\n                  RETURNING *\n                `;\n                const response = await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    query\n                  })\n                });\n                const result = await response.json();\n                if (result.error) {\n                  throw new Error(result.error);\n                }\n                console.log(\"✅ Aprobación de empresa removida correctamente:\", result.data);\n\n                // Registrar en historial\n                const historyQuery = `\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'new', 'Regresado a Nuevo por administrador de empresa', '${user.entityId}')\n                  RETURNING *\n                `;\n                await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    query: historyQuery\n                  })\n                });\n\n                // Actualizar UI explícitamente\n                updateLocalApprovalStatus(applicationId, {\n                  approvedByCompany: false\n                }, APPLICATION_STATUS.NEW);\n              } catch (error) {\n                console.error(\"❌ Error al quitar aprobación de empresa:\", error);\n                setErrorMessage(`Error al quitar aprobación: ${error.message}`);\n              }\n            }\n          } else if (newStatus === APPLICATION_STATUS.IN_REVIEW) {\n            var _updatedApp$approvalS2;\n            // Mover a En Revisión\n            updatedApp.company_review_status = true;\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              }),\n              approvedByCompany: false\n            };\n\n            // Si estaba aprobado y se mueve a En Revisión, hay que quitar la aprobación de la empresa\n            if (oldStatus === APPLICATION_STATUS.APPROVED && (_updatedApp$approvalS2 = updatedApp.approvalStatus) !== null && _updatedApp$approvalS2 !== void 0 && _updatedApp$approvalS2.approvedByCompany && user !== null && user !== void 0 && user.entityId && application.company_id) {\n              try {\n                console.log(\"Quitando aprobación de empresa en la base de datos\");\n                // Ejecutamos una consulta SQL para quitar la aprobación\n                const query = `\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_company = false, \n                      approval_date_company = NULL,\n                      status = '${APPLICATION_STATUS.IN_REVIEW}'\n                  WHERE id = '${applicationId}' AND company_id = '${application.company_id}'\n                  RETURNING *\n                `;\n                const response = await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    query\n                  })\n                });\n                const result = await response.json();\n                if (result.error) {\n                  throw new Error(result.error);\n                }\n                console.log(\"✅ Aprobación de empresa removida correctamente:\", result.data);\n\n                // Registrar en historial\n                const historyQuery = `\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'in_review', 'Revisión adicional requerida por empresa', '${user.entityId}')\n                  RETURNING *\n                `;\n                await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    query: historyQuery\n                  })\n                });\n\n                // Actualizar UI explícitamente con ambas propiedades\n                updateLocalApprovalStatus(applicationId, {\n                  approvedByCompany: false\n                }, APPLICATION_STATUS.IN_REVIEW);\n\n                // Forzar actualización global de la aplicación para todos los usuarios\n                // llamando a la API de cambio de estado\n                if (onStatusChange) {\n                  try {\n                    await onStatusChange(application, APPLICATION_STATUS.IN_REVIEW);\n                    console.log(\"✅ Estado actualizado correctamente a EN REVISIÓN\");\n                  } catch (error) {\n                    console.error(\"❌ Error al actualizar estado:\", error);\n                  }\n                }\n              } catch (error) {\n                console.error(\"❌ Error al quitar aprobación de empresa:\", error);\n                setErrorMessage(`Error al quitar aprobación: ${error.message}`);\n              }\n            } else {\n              // Incluso si no estaba aprobada, forzar actualización de estado\n              if (onStatusChange) {\n                try {\n                  await onStatusChange(application, APPLICATION_STATUS.IN_REVIEW);\n                  console.log(\"✅ Estado actualizado correctamente a EN REVISIÓN\");\n                } catch (error) {\n                  console.error(\"❌ Error al actualizar estado:\", error);\n                }\n              }\n            }\n          } else if (newStatus === APPLICATION_STATUS.APPROVED) {\n            // Mover a Aprobado por mí\n            updatedApp.company_review_status = true; // Se considera revisado si está aprobado\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              }),\n              approvedByCompany: true\n            };\n\n            // Llamar a la API para aprobar por empresa\n            if (user !== null && user !== void 0 && user.entityId && application.company_id) {\n              try {\n                console.log(`Empresa ${user.entityId} está aprobando la solicitud ${applicationId}`);\n\n                // Aplicar cambio optimista a la UI primero\n                updatedApps[appIndex] = updatedApp;\n                setAppsWithApproval([...updatedApps]);\n\n                // Llamar a la API y esperar a que termine\n                const result = await approveByCompany(applicationId, \"Aprobado vía Kanban\", user.entityId, application.company_id, {\n                  company_id: application.company_id\n                } // Pasar company_id en el entityFilter\n                );\n                console.log(\"✅ Aplicación aprobada por empresa:\", result);\n\n                // Actualizar UI con respuesta del servidor\n                updateLocalApprovalStatus(applicationId, {\n                  approvedByCompany: true\n                });\n\n                // Verificar si la aplicación ya está aprobada por el asesor\n                const approvalStatus = await getApprovalStatus(applicationId);\n                console.log(\"Estado de aprobación actual:\", approvalStatus);\n\n                // Si está aprobada por ambos, mover automáticamente a \"por_dispersar\"\n                if (approvalStatus !== null && approvalStatus !== void 0 && approvalStatus.approvedByAdvisor) {\n                  console.log(\"❇️ Ambas aprobaciones completadas, moviendo a Por Dispersar\");\n                  // Mostrar notificación de transición automática\n                  setAutoTransitionMessage(`La solicitud ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR] || 'Por Dispersar'}\"`);\n\n                  // Cambiar el estado a \"por_dispersar\" después de un breve retraso\n                  setTimeout(() => {\n                    if (onStatusChange) {\n                      onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                    }\n                    // Limpiar el mensaje después de mostrar\n                    setTimeout(() => setAutoTransitionMessage(null), 3000);\n                  }, 500);\n                }\n              } catch (error) {\n                console.error(\"❌ Error al aprobar por empresa:\", error);\n                setErrorMessage(`Error al aprobar: ${error.message}`);\n\n                // Revertir el estado optimista en caso de error\n                updatedApp.approvalStatus = {\n                  ...(updatedApp.approvalStatus || {\n                    approvedByAdvisor: false,\n                    approvedByCompany: false\n                  }),\n                  approvedByCompany: false\n                };\n                updatedApps[appIndex] = updatedApp;\n                setAppsWithApproval([...updatedApps]);\n              }\n            }\n          }\n\n          // Actualizar la app en el estado\n          updatedApps[appIndex] = updatedApp;\n          setAppsWithApproval(updatedApps);\n\n          // Quitar la marca de movimiento después de un breve retraso\n          setTimeout(() => {\n            setAppsWithApproval(prev => prev.map(app => app.id === applicationId ? {\n              ...app,\n              isMoving: false,\n              targetStatus: undefined\n            } : app));\n            setProcessingAppId(null);\n          }, 500);\n        }\n      }\n      // Para asesores (flujo normal)\n      else if (isAdvisor()) {\n        // Verificar que el estado es válido\n        if (!validStatuses.includes(newStatus)) {\n          setErrorMessage(`Estado de destino \"${newStatus}\" no es válido.`);\n          setProcessingAppId(null);\n          return;\n        }\n\n        // Actualización optimista en UI\n        const updatedApps = [...appsWithApproval];\n        const appIndex = updatedApps.findIndex(app => app.id === applicationId);\n        if (appIndex !== -1) {\n          // Crear copia profunda para evitar referencias\n          const updatedApp = {\n            ...updatedApps[appIndex],\n            isMoving: true,\n            targetStatus: newStatus,\n            status: newStatus // actualizar el estado directamente\n          };\n\n          // Lógica para manejar aprobaciones de manera optimista\n          if (newStatus === APPLICATION_STATUS.APPROVED) {\n            console.log(`Advisor ${user === null || user === void 0 ? void 0 : user.id} está aprobando la solicitud ${applicationId}`);\n\n            // Actualizar inmediatamente el estado visual de aprobación del asesor\n            // para una respuesta inmediata en la UI\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              }),\n              approvedByAdvisor: true // Optimistically set to true\n            };\n\n            // Aplicar cambio optimista a la UI\n            updatedApps[appIndex] = updatedApp;\n            setAppsWithApproval([...updatedApps]); // Clone to trigger re-render\n\n            // Llamar a la API para aprobar por asesor\n            if (user !== null && user !== void 0 && user.entityId) {\n              try {\n                // Llamar a la API y esperar a que termine\n                console.log(\"Llamando a approveByAdvisor API...\");\n                const result = await approveByAdvisor(applicationId, \"Aprobado vía Kanban\", user.entityId, {\n                  advisor_id: user.entityId\n                } // Ensure we're using the advisor filter\n                );\n                console.log(\"✅ Aplicación aprobada por asesor:\", result);\n\n                // Actualizar UI con respuesta del servidor explícitamente\n                // para asegurar que el indicador se actualiza correctamente\n                updateLocalApprovalStatus(applicationId, {\n                  approvedByAdvisor: true\n                });\n\n                // Verificar si la aplicación ya está aprobada por la empresa\n                const approvalStatus = await getApprovalStatus(applicationId);\n                console.log(\"Estado de aprobación actual:\", approvalStatus);\n\n                // Si está aprobada por ambos, mover automáticamente a \"por_dispersar\"\n                if (approvalStatus !== null && approvalStatus !== void 0 && approvalStatus.approvedByCompany) {\n                  // Mostrar notificación de transición automática\n                  setAutoTransitionMessage(`La solicitud ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR] || 'Por Dispersar'}\"`);\n\n                  // Cambiar el estado a \"por_dispersar\" después de un breve retraso\n                  setTimeout(() => {\n                    if (onStatusChange) {\n                      onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                    }\n                    // Limpiar el mensaje después de mostrar\n                    setTimeout(() => setAutoTransitionMessage(null), 3000);\n                  }, 500);\n                }\n              } catch (error) {\n                console.error(\"❌ Error al aprobar por asesor:\", error);\n                setErrorMessage(`Error al aprobar: ${error.message}`);\n\n                // Revertir el estado optimista en caso de error\n                // pero solo si realmente falló la aprobación\n                const appToPatch = appsWithApproval.find(app => app.id === applicationId);\n                if (appToPatch) {\n                  updateLocalApprovalStatus(applicationId, {\n                    approvedByAdvisor: false\n                  });\n                }\n              }\n            }\n          }\n          // Si se mueve de APPROVED a otro estado, quitar la aprobación\n          else if (oldStatus === APPLICATION_STATUS.APPROVED && newStatus !== APPLICATION_STATUS.POR_DISPERSAR) {\n            console.log(\"Moviendo de aprobado a otro estado, resetear aprobación de asesor\");\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              }),\n              approvedByAdvisor: false\n            };\n\n            // Actualizar en BD para quitar aprobación (nueva API)\n            if (user !== null && user !== void 0 && user.entityId && newStatus === APPLICATION_STATUS.IN_REVIEW) {\n              try {\n                console.log(\"Quitando aprobación de asesor en la base de datos\");\n                // Ejecutamos una consulta SQL para quitar la aprobación\n                const query = `\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_advisor = false, \n                      approval_date_advisor = NULL\n                  WHERE id = '${applicationId}' AND assigned_to = '${user.entityId}'\n                  RETURNING *\n                `;\n                const response = await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    query\n                  })\n                });\n                const result = await response.json();\n                if (result.error) {\n                  throw new Error(result.error);\n                }\n                console.log(\"✅ Aprobación de asesor removida correctamente:\", result.data);\n\n                // Registrar en historial\n                const historyQuery = `\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'in_review', 'Revisión adicional requerida', '${user.entityId}')\n                  RETURNING *\n                `;\n                await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    query: historyQuery\n                  })\n                });\n\n                // Actualizar UI explícitamente\n                updateLocalApprovalStatus(applicationId, {\n                  approvedByAdvisor: false\n                });\n              } catch (error) {\n                console.error(\"❌ Error al quitar aprobación del asesor:\", error);\n                setErrorMessage(`Error al quitar aprobación: ${error.message}`);\n              }\n            }\n          }\n\n          // Actualizar la app en el estado solo si no es una aprobación (ese caso ya lo manejamos arriba)\n          if (newStatus !== APPLICATION_STATUS.APPROVED) {\n            updatedApps[appIndex] = updatedApp;\n            setAppsWithApproval(updatedApps);\n          }\n\n          // Llamar a la API para actualizar el estado\n          if (onStatusChange) {\n            try {\n              await onStatusChange(application, newStatus);\n            } catch (error) {\n              console.error(\"Error updating status:\", error);\n              setErrorMessage(`Error al actualizar el estado: ${error.message}`);\n\n              // Revertir cambios en caso de error\n              setAppsWithApproval(prev => prev.map(app => app.id === applicationId ? {\n                ...app,\n                status: oldStatus,\n                isMoving: false,\n                targetStatus: undefined\n              } : app));\n            }\n          }\n\n          // Quitar la marca de movimiento después de un breve retraso\n          setTimeout(() => {\n            setAppsWithApproval(prev => prev.map(app => app.id === applicationId ? {\n              ...app,\n              isMoving: false,\n              targetStatus: undefined\n            } : app));\n            setProcessingAppId(null);\n          }, 500);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error in handleDrop:\", error);\n      setErrorMessage(`Error al actualizar el estado: ${error.message}`);\n      setProcessingAppId(null);\n    }\n  };\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat('es-MX', {\n      style: 'currency',\n      currency: 'MXN'\n    }).format(amount);\n  };\n\n  // Renderizar los indicadores de aprobación con mejor formato y legibilidad\n  const renderApprovalIndicators = app => {\n    if (!app.approvalStatus) return null;\n    const {\n      approvedByAdvisor,\n      approvedByCompany\n    } = app.approvalStatus;\n    const hasFullApproval = approvedByAdvisor && approvedByCompany;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col mt-1 space-y-1\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tooltip tooltip-top flex items-center\",\n          \"data-tip\": approvedByAdvisor ? \"Aprobado por asesor\" : \"Pendiente de aprobación por asesor\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs mr-1 whitespace-nowrap\",\n            children: \"Asesor:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-3 h-3 rounded-full ${approvedByAdvisor ? 'bg-success' : 'bg-warning'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1204,\n            columnNumber: 13\n          }, this), approvedByAdvisor && /*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"h-4 w-4 ml-1 text-success\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            stroke: \"currentColor\",\n            strokeWidth: 2,\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              d: \"M5 13l4 4L19 7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1207,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1206,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tooltip tooltip-top flex items-center ml-3\",\n          \"data-tip\": approvedByCompany ? \"Aprobado por empresa\" : \"Pendiente de aprobación por empresa\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs mr-1 whitespace-nowrap\",\n            children: \"Empresa:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1213,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-3 h-3 rounded-full ${approvedByCompany ? 'bg-success' : 'bg-warning'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1214,\n            columnNumber: 13\n          }, this), approvedByCompany && /*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"h-4 w-4 ml-1 text-success\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            stroke: \"currentColor\",\n            strokeWidth: 2,\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              d: \"M5 13l4 4L19 7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1217,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1216,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1201,\n        columnNumber: 9\n      }, this), hasFullApproval && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full flex justify-center mt-1\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"badge badge-success text-xs px-2 py-1 text-white font-medium\",\n          children: \"Aprobado Total\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1226,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1225,\n        columnNumber: 11\n      }, this), isCompanyAdmin() && approvedByCompany && app.status === APPLICATION_STATUS.APPROVED && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full flex justify-center mt-1\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => {\n            e.stopPropagation(); // Evitar que se propague al card\n            handleDrop(e, APPLICATION_STATUS.IN_REVIEW);\n          },\n          className: \"btn btn-xs btn-error w-full\",\n          children: \"Deshacer Aprobaci\\xF3n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1235,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1234,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1200,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Mejorar el formato de las etiquetas de producto para mayor legibilidad\n  const getProductLabel = type => {\n    const labels = {\n      'selected_plans': 'Crédito a Plazos',\n      'product_simulations': 'Simulación',\n      'auto_loan': 'Crédito Auto',\n      'car_backed_loan': 'Crédito con Garantía',\n      'personal_loan': 'Préstamo Personal',\n      'cash_advance': 'Adelanto de Efectivo'\n    };\n    return labels[type] || type;\n  };\n\n  // Función para renderizar el producto como una etiqueta bien formateada\n  const renderProductLabel = (type, color) => {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `badge badge-${color} badge-md text-xs px-3 py-1 whitespace-nowrap inline-block`,\n      children: getProductLabel(type || '')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1267,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Función para obtener el color apropiado para la tarjeta según estado y aprobaciones\n  const getCardColor = app => {\n    const status = app.status || '';\n\n    // Colores específicos según el estado\n    switch (status.toLowerCase()) {\n      case APPLICATION_STATUS.REJECTED:\n        return 'border-error bg-red-50';\n      case APPLICATION_STATUS.APPROVED:\n        // Si está aprobado, verificar el estado de las aprobaciones\n        if (app.approvalStatus) {\n          const {\n            approvedByAdvisor,\n            approvedByCompany\n          } = app.approvalStatus;\n          if (approvedByAdvisor && approvedByCompany) {\n            return 'border-success bg-green-100'; // Aprobado por ambos\n          } else if (approvedByAdvisor) {\n            return 'border-success bg-green-50'; // Aprobado solo por asesor\n          } else if (approvedByCompany) {\n            return 'border-info bg-blue-50'; // Aprobado solo por empresa\n          }\n        }\n        return 'border-success bg-green-50';\n      case APPLICATION_STATUS.IN_REVIEW:\n        return 'border-info bg-blue-50';\n      case APPLICATION_STATUS.NEW:\n        return 'border-warning bg-yellow-50';\n      case APPLICATION_STATUS.PENDING:\n        return 'border-warning bg-amber-50';\n      case APPLICATION_STATUS.POR_DISPERSAR:\n        return 'border-accent bg-purple-50';\n      case APPLICATION_STATUS.COMPLETED:\n        return 'border-primary bg-indigo-50';\n      case APPLICATION_STATUS.EXPIRED:\n        return 'border-error bg-red-100';\n      case APPLICATION_STATUS.CANCELLED:\n        return 'border-neutral bg-gray-100';\n      default:\n        // Si el estado no coincide con ninguno de los anteriores, usar el color de la columna\n        return `border-${app.status || 'neutral'}`;\n    }\n  };\n\n  // Estilos personalizados para mostrar claramente cuáles tarjetas se pueden arrastrar\n  const customStyles = `\n    .custom-scrollbar::-webkit-scrollbar {\n      width: 8px;\n      height: 8px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-track {\n      background: #f1f1f1;\n      border-radius: 10px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-thumb {\n      background: #888;\n      border-radius: 10px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n      background: #555;\n    }\n    \n    .kanban-card {\n      transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out, box-shadow 0.3s ease-in-out, border-color 0.3s ease;\n      touch-action: none;\n      user-select: none;\n      will-change: transform, opacity;\n    }\n    \n    .kanban-card-draggable {\n      cursor: grab !important;\n      position: relative;\n    }\n    \n    .kanban-card-draggable:hover {\n      transform: translateY(-4px);\n      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n      border-color: #a855f7;\n      z-index: 10;\n    }\n    \n    .kanban-card-draggable:active {\n      cursor: grabbing !important;\n    }\n    \n    /* Indicator for draggable cards */\n    .kanban-card-draggable::after {\n      content: '';\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      width: 20px;\n      height: 20px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23666'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M7 11.5V14m0-2.5v-6a1.5 1.5 0 113 0m-3 6a1.5 1.5 0 00-3 0v2a7.5 7.5 0 0015 0v-5a1.5 1.5 0 013 0m-6-3V11m0-5.5v-1a1.5 1.5 0 013 0v1m0 0V11' /%3E%3C/svg%3E\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      opacity: 0.7;\n      transition: opacity 0.2s ease;\n    }\n    \n    .kanban-card-draggable:hover::after {\n      opacity: 1;\n    }\n    \n    .kanban-card-locked {\n      position: relative;\n      cursor: not-allowed !important;\n      opacity: 0.8;\n    }\n    \n    .kanban-card-locked::after {\n      content: '';\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      width: 20px;\n      height: 20px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23999'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z' /%3E%3C/svg%3E\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      opacity: 0.7;\n    }\n    \n    .kanban-card.dragging {\n      opacity: 0.8;\n      transform: scale(1.03);\n      box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n      z-index: 50;\n    }\n    \n    .kanban-column {\n      transition: all 0.2s ease;\n      border-radius: 0.75rem;\n      will-change: transform, background-color;\n    }\n    \n    .kanban-column.drag-over {\n      background-color: rgba(var(--b2, 217 217 217) / 0.5);\n      transform: scale(1.01);\n      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);\n      border: 2px dashed #a855f7 !important;\n    }\n\n    .kanban-container {\n      scroll-behavior: smooth;\n    }\n\n    @media (min-width: 768px) {\n      .kanban-card-draggable:hover {\n        transform: translateY(-4px);\n        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n      }\n    }\n    \n    /* Animaciones para cambios de estado */\n    @keyframes fadeIn {\n      0% { opacity: 0; }\n      100% { opacity: 1; }\n    }\n    \n    @keyframes slideIn {\n      0% { transform: translateY(10px); opacity: 0; }\n      100% { transform: translateY(0); opacity: 1; }\n    }\n    \n    @keyframes processingPulse {\n      0% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0.4); }\n      70% { box-shadow: 0 0 0 6px rgba(124, 58, 237, 0); }\n      100% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0); }\n    }\n    \n    .kanban-card {\n      animation: fadeIn 0.3s ease-out;\n    }\n    \n    .processing-toast {\n      position: fixed;\n      bottom: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      padding: 10px 20px;\n      background-color: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      animation: slideIn 0.3s ease-out;\n    }\n    \n    .auto-transition-toast {\n      position: fixed;\n      bottom: 70px;\n      left: 50%;\n      transform: translateX(-50%);\n      padding: 10px 20px;\n      background-color: #dcfce7;\n      border: 1px solid #86efac;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      animation: slideIn 0.3s ease-out;\n    }\n    \n    /* Pop-up tooltip con instrucciones para arrastrar */\n    .drag-instructions {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background-color: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      padding: 12px 16px;\n      z-index: 1000;\n      max-width: 300px;\n      animation: fadeIn 0.3s ease-out;\n    }\n    \n    /* Mejoras para vista mobile */\n    @media (max-width: 640px) {\n      .kanban-column {\n        min-height: 300px;\n      }\n    }\n  `;\n\n  // Función para obtener clases draggable\n  const getDraggableClasses = app => {\n    // Usar la función canDragCard que está definida en el ámbito superior\n    const isDraggable = canDragCard(app) && app.id !== processingAppId;\n    return isDraggable ? 'cursor-grab kanban-card-draggable' : 'cursor-not-allowed opacity-80 kanban-card-locked';\n  };\n\n  // Función para definir los tooltips con información clara y precisa\n  const getDragTooltip = app => {\n    var _app$approvalStatus12, _app$approvalStatus13;\n    if (app.id === processingAppId) {\n      return \"Esta tarjeta está siendo procesada\";\n    }\n\n    // Si la tarjeta se puede arrastrar, mostrar mensaje informativo\n    if (canDragCard(app)) {\n      return \"Arrastra para cambiar el estado\";\n    }\n\n    // Mensajes específicos para casos donde no se puede arrastrar\n    if ((_app$approvalStatus12 = app.approvalStatus) !== null && _app$approvalStatus12 !== void 0 && _app$approvalStatus12.approvedByAdvisor && (_app$approvalStatus13 = app.approvalStatus) !== null && _app$approvalStatus13 !== void 0 && _app$approvalStatus13.approvedByCompany) {\n      return \"Esta solicitud ya está completamente aprobada y no puede ser movida\";\n    }\n\n    // Asegurarse de que app.status no es undefined\n    const status = app.status || APPLICATION_STATUS.NEW;\n\n    // Mensajes específicos según el rol y estado\n    if (isCompanyAdmin()) {\n      if (status === APPLICATION_STATUS.REJECTED) {\n        return \"Las solicitudes rechazadas solo pueden ser movidas por asesores\";\n      } else if (status === APPLICATION_STATUS.POR_DISPERSAR) {\n        return \"Esta solicitud ya está lista para dispersión y no puede regresar a estados anteriores\";\n      } else if (status === APPLICATION_STATUS.COMPLETED) {\n        return \"Esta solicitud ya está completada y no puede cambiar de estado\";\n      } else if (status === APPLICATION_STATUS.EXPIRED) {\n        return \"Esta solicitud ha expirado y no puede cambiar de estado\";\n      } else if (status === APPLICATION_STATUS.CANCELLED) {\n        return \"Esta solicitud fue cancelada y no puede cambiar de estado\";\n      }\n    }\n    return \"No puedes mover esta tarjeta en este momento\";\n  };\n\n  // Efecto para mover automáticamente tarjetas con ambas aprobaciones a \"Por Dispersar\"\n  useEffect(() => {\n    const moveFullyApprovedCards = async () => {\n      // Encontrar tarjetas que tienen ambas aprobaciones pero no están en Por Dispersar\n      const fullyApprovedCards = appsWithApproval.filter(app => {\n        var _app$approvalStatus14, _app$approvalStatus15;\n        return ((_app$approvalStatus14 = app.approvalStatus) === null || _app$approvalStatus14 === void 0 ? void 0 : _app$approvalStatus14.approvedByAdvisor) && ((_app$approvalStatus15 = app.approvalStatus) === null || _app$approvalStatus15 === void 0 ? void 0 : _app$approvalStatus15.approvedByCompany) && app.status !== APPLICATION_STATUS.POR_DISPERSAR && app.status !== APPLICATION_STATUS.COMPLETED;\n      });\n      if (fullyApprovedCards.length > 0) {\n        console.log(`Encontradas ${fullyApprovedCards.length} tarjetas con aprobación total, moviendo a Por Dispersar...`);\n\n        // Mover cada tarjeta a Por Dispersar\n        for (const app of fullyApprovedCards) {\n          if (onStatusChange) {\n            try {\n              console.log(`Moviendo tarjeta ${app.id} a Por Dispersar automáticamente...`);\n              await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n            } catch (error) {\n              console.error(`Error al mover tarjeta ${app.id} a Por Dispersar:`, error);\n            }\n          }\n        }\n      }\n    };\n\n    // Ejecutar después de un breve retraso para permitir que los estados se inicialicen\n    const timer = setTimeout(() => {\n      moveFullyApprovedCards();\n    }, 2000);\n    return () => clearTimeout(timer);\n  }, [appsWithApproval, onStatusChange]);\n\n  // Agregar una sincronización de estados avanzados para las aplicaciones existentes\n  useEffect(() => {\n    const syncAdvancedStatusCards = async () => {\n      if (!isCompanyAdmin() || applications.length === 0) return;\n      console.log(\"Sincronizando tarjetas en estados avanzados para el administrador de empresa...\");\n\n      // Estados avanzados que siempre deben sincronizarse entre ambas vistas\n      const advancedStatuses = [APPLICATION_STATUS.POR_DISPERSAR, APPLICATION_STATUS.COMPLETED, APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.REJECTED];\n\n      // Buscar aplicaciones con ambas aprobaciones que deberían estar en Por Dispersar\n      const needsStatusUpdate = applications.filter(app => {\n        // Si la aplicación ya está en un estado avanzado, respetar ese estado\n        if (advancedStatuses.includes(app.status)) {\n          return false;\n        }\n\n        // Verificar si tiene ambas aprobaciones\n        return app.approved_by_advisor && app.approved_by_company;\n      });\n      if (needsStatusUpdate.length > 0) {\n        console.log(`Encontradas ${needsStatusUpdate.length} aplicaciones que necesitan actualización de estado:`);\n        const updatedApps = [...appsWithApproval];\n        let hasChanges = false;\n        for (const app of needsStatusUpdate) {\n          console.log(`- Aplicación ${app.id} con ambas aprobaciones, actualizando a Por Dispersar`);\n          const index = updatedApps.findIndex(a => a.id === app.id);\n          if (index !== -1) {\n            updatedApps[index] = {\n              ...updatedApps[index],\n              status: APPLICATION_STATUS.POR_DISPERSAR\n            };\n            hasChanges = true;\n\n            // Actualizar en la base de datos si es necesario\n            if (onStatusChange) {\n              try {\n                await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n                console.log(`✅ Estado de aplicación ${app.id} actualizado a Por Dispersar`);\n              } catch (error) {\n                console.error(`Error al actualizar estado de ${app.id}:`, error);\n              }\n            }\n          }\n        }\n        if (hasChanges) {\n          console.log(\"Actualizando estado local con aplicaciones sincronizadas\");\n          setAppsWithApproval(updatedApps);\n        }\n      }\n    };\n\n    // Ejecutar la sincronización después de cargar las aplicaciones\n    syncAdvancedStatusCards();\n  }, [applications, isCompanyAdmin, onStatusChange]);\n\n  // Mejora para sincronizar estados entre vistas del asesor y administrador de empresa\n  useEffect(() => {\n    const syncCardStatusesWithAdvisorView = () => {\n      if (!isCompanyAdmin() || applications.length === 0) return;\n\n      // Obtener todas las aplicaciones que no están en los estados básicos de flujo de empresa\n      const applicationsWithAdvancedStatus = applications.filter(app => {\n        const isBasicStatus = [APPLICATION_STATUS.NEW, APPLICATION_STATUS.IN_REVIEW, APPLICATION_STATUS.APPROVED].includes(app.status);\n        return !isBasicStatus;\n      });\n      if (applicationsWithAdvancedStatus.length > 0) {\n        console.log(`Sincronizando ${applicationsWithAdvancedStatus.length} tarjetas con estados avanzados:`);\n\n        // Crear copia del estado actual\n        const updatedApps = [...appsWithApproval];\n        let hasChanges = false;\n\n        // Actualizar cada aplicación para que refleje el estado real\n        applicationsWithAdvancedStatus.forEach(app => {\n          const index = updatedApps.findIndex(a => a.id === app.id);\n          if (index !== -1 && updatedApps[index].status !== app.status) {\n            console.log(`- Sincronizando aplicación ${app.id} de estado '${updatedApps[index].status}' a '${app.status}'`);\n\n            // Actualizar el estado para que coincida con el estado real\n            updatedApps[index] = {\n              ...updatedApps[index],\n              status: app.status\n            };\n            hasChanges = true;\n          }\n        });\n\n        // Actualizar el estado solo si hubo cambios\n        if (hasChanges) {\n          console.log(\"Actualizando estado local con aplicaciones sincronizadas\");\n          setAppsWithApproval(updatedApps);\n        }\n      }\n    };\n\n    // Ejecutar la sincronización\n    syncCardStatusesWithAdvisorView();\n  }, [applications, appsWithApproval, isCompanyAdmin]);\n\n  // Agregar un nuevo useEffect para refrescar los estados de aprobación periódicamente\n  useEffect(() => {\n    // Función para refrescar los estados de aprobación desde la API\n    const refreshApprovalStatuses = async () => {\n      if (!applications || applications.length === 0) return;\n      console.log(\"Refrescando estados de aprobación desde la API...\");\n      try {\n        const updatedApps = [...appsWithApproval];\n        let hasChanges = false;\n        for (const app of updatedApps) {\n          var _app$approvalStatus16, _app$approvalStatus17;\n          // Obtener el estado de aprobación actualizado desde la API\n          const status = await getApprovalStatus(app.id);\n\n          // Si el estado es diferente al actual, actualizarlo\n          if (status && (status.approvedByAdvisor !== ((_app$approvalStatus16 = app.approvalStatus) === null || _app$approvalStatus16 === void 0 ? void 0 : _app$approvalStatus16.approvedByAdvisor) || status.approvedByCompany !== ((_app$approvalStatus17 = app.approvalStatus) === null || _app$approvalStatus17 === void 0 ? void 0 : _app$approvalStatus17.approvedByCompany))) {\n            console.log(`Actualización encontrada para app ${app.id}:`, {\n              actual: app.approvalStatus,\n              nuevo: status\n            });\n\n            // Actualizar el estado de aprobación\n            app.approvalStatus = status;\n            hasChanges = true;\n\n            // Si hay doble aprobación y no está en Por Dispersar, actualizarlo\n            if (status.approvedByAdvisor && status.approvedByCompany && app.status !== APPLICATION_STATUS.POR_DISPERSAR && app.status !== APPLICATION_STATUS.COMPLETED) {\n              console.log(`Aplicación ${app.id} tiene doble aprobación, moviendo a Por Dispersar`);\n\n              // Actualizar el estado localmente\n              app.status = APPLICATION_STATUS.POR_DISPERSAR;\n\n              // Actualizar en la BD\n              if (onStatusChange) {\n                try {\n                  await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n                } catch (error) {\n                  console.error(`Error actualizando estado a Por Dispersar:`, error);\n                }\n              }\n            }\n          }\n        }\n\n        // Si hubo cambios, actualizar el estado\n        if (hasChanges) {\n          console.log(\"Actualizando aplicaciones con estados de aprobación refrescados\");\n          setAppsWithApproval(updatedApps);\n        }\n      } catch (error) {\n        console.error(\"Error al refrescar estados de aprobación:\", error);\n      }\n    };\n\n    // Refrescar los estados inicialmente y cada 10 segundos\n    refreshApprovalStatuses();\n    const intervalId = setInterval(() => {\n      refreshApprovalStatuses();\n    }, 10000); // 10 segundos\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [applications, appsWithApproval, onStatusChange]);\n\n  // Mejora para funcionamiento con tarjetas existentes\n  useEffect(() => {\n    // Solo ejecutar para admin de empresa\n    if (!isCompanyAdmin() || applications.length === 0) return;\n    console.log(\"Verificando y sincronizando estados de tarjetas existentes...\");\n\n    // Encontrar tarjetas que deben mostrar el mismo estado que en la vista del asesor\n    const appsNeedingSync = applications.filter(app => {\n      // Si no está en uno de los estados básicos del flujo de admin de empresa,\n      // debe sincronizarse exactamente con la vista del asesor\n      const isBasicStatus = [APPLICATION_STATUS.NEW, APPLICATION_STATUS.IN_REVIEW, APPLICATION_STATUS.APPROVED].includes(app.status);\n      return !isBasicStatus;\n    });\n    if (appsNeedingSync.length > 0) {\n      console.log(`Encontradas ${appsNeedingSync.length} tarjetas que necesitan sincronización con vista del asesor`);\n\n      // Crear copia del estado actual\n      const updatedApps = [...appsWithApproval];\n      let hasChanges = false;\n\n      // Para cada aplicación que necesita sincronización\n      appsNeedingSync.forEach(app => {\n        const index = updatedApps.findIndex(a => a.id === app.id);\n\n        // Si encontramos la aplicación y su estado es diferente al que debería tener\n        if (index !== -1 && updatedApps[index].status !== app.status) {\n          console.log(`- Actualizando tarjeta ${app.id}: de '${updatedApps[index].status}' a '${app.status}'`);\n\n          // Actualizar el estado para que coincida con el de la vista del asesor\n          updatedApps[index] = {\n            ...updatedApps[index],\n            status: app.status\n          };\n          hasChanges = true;\n        }\n      });\n\n      // Si hubo cambios, actualizar el estado\n      if (hasChanges) {\n        console.log(\"Actualizando estados para sincronizar con vista del asesor\");\n        setAppsWithApproval(updatedApps);\n      }\n    }\n  }, [applications, appsWithApproval, isCompanyAdmin]);\n  if (applications.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-base-200 p-6 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-medium text-center\",\n        children: \"No hay solicitudes para mostrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1832,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center text-gray-500 mt-2\",\n        children: \"No se encontraron solicitudes en el sistema\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1833,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1831,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full overflow-x-auto custom-scrollbar relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: customStyles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1840,\n      columnNumber: 7\n    }, this), processingAppId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"processing-toast\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"loading loading-spinner loading-sm text-primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1845,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-medium\",\n        children: \"Actualizando estado...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1846,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1844,\n      columnNumber: 9\n    }, this), autoTransitionMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auto-transition-toast\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"loading loading-spinner loading-sm text-success\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1853,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-medium\",\n        children: autoTransitionMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1854,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1852,\n      columnNumber: 9\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 alert alert-error shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          className: \"stroke-current flex-shrink-0 h-6 w-6\",\n          fill: \"none\",\n          viewBox: \"0 0 24 24\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            strokeWidth: \"2\",\n            d: \"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1862,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1861,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1864,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1860,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-none\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-sm\",\n          onClick: () => setErrorMessage(null),\n          children: \"Cerrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1867,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1866,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1859,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 2xl:grid-cols-6 gap-4 pb-4 kanban-container p-4\",\n      style: {\n        minWidth: '1000px'\n      },\n      children: columns.map(column => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `bg-base-100 rounded-xl shadow-md border-t-4 border-${column.color} border-l border-r border-b flex flex-col h-full kanban-column`,\n        onDragOver: e => {\n          handleDragOver(e, column.id);\n        },\n        onDragLeave: e => {\n          e.currentTarget.classList.remove('drag-over');\n        },\n        onDrop: e => {\n          handleDrop(e, column.id);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `text-center py-3 px-4 font-bold rounded-t-lg flex items-center justify-between bg-${column.color} bg-opacity-10`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: `text-${column.color} font-bold text-lg`,\n            children: column.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1889,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `badge badge-${column.color} badge-lg`,\n            children: column.applications.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1890,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1888,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-3 space-y-3 min-h-[500px] max-h-[calc(100vh-220px)] overflow-y-auto custom-scrollbar flex-grow\",\n          children: column.applications.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center justify-center h-full opacity-50 border-2 border-dashed border-base-300 rounded-lg p-6\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                className: \"h-12 w-12 mx-auto text-gray-400\",\n                fill: \"none\",\n                viewBox: \"0 0 24 24\",\n                stroke: \"currentColor\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  strokeLinecap: \"round\",\n                  strokeLinejoin: \"round\",\n                  strokeWidth: 1,\n                  d: \"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1898,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1897,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm mt-2\",\n                children: \"No hay solicitudes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1900,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1896,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1895,\n            columnNumber: 17\n          }, this) : column.applications.map((app, index) => {\n            var _app$approvalStatus18, _app$approvalStatus19;\n            const isCardDraggable = canDragCard(app) && app.id !== processingAppId;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              \"data-tip\": getDragTooltip(app),\n              className: `card shadow hover:shadow-lg transition-all ${getCardColor(app)} border-l-4 border-t border-r border-b hover:border-primary kanban-card relative ${app.id === processingAppId ? 'processing' : ''} ${app.isMoving ? 'opacity-90' : ''} ${getDraggableClasses(app)}`,\n              draggable: isCardDraggable,\n              onDragStart: isCardDraggable ? e => handleDragStart(e, app, index) : undefined,\n              onDragEnd: isCardDraggable ? handleDragEnd : undefined,\n              style: {\n                animation: app.id === processingAppId ? 'processingPulse 1.5s infinite' : ''\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-body p-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex justify-between items-start mb-2\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"flex flex-col\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"font-semibold mb-1\",\n                      children: app.client_name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1921,\n                      columnNumber: 27\n                    }, this), renderProductLabel(app.application_type || '', column.color)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1920,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1919,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mt-1\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-sm text-gray-600 mb-2 flex items-center\",\n                    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                      xmlns: \"http://www.w3.org/2000/svg\",\n                      className: \"h-4 w-4 mr-1 inline flex-shrink-0\",\n                      fill: \"none\",\n                      viewBox: \"0 0 24 24\",\n                      stroke: \"currentColor\",\n                      children: /*#__PURE__*/_jsxDEV(\"path\", {\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\",\n                        strokeWidth: 2,\n                        d: \"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1930,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1929,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"truncate max-w-[180px] font-medium\",\n                      children: app.company_name || \"Sin empresa\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1932,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1928,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"flex items-center mb-3\",\n                    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                      xmlns: \"http://www.w3.org/2000/svg\",\n                      className: \"h-4 w-4 mr-1 text-primary flex-shrink-0\",\n                      fill: \"none\",\n                      viewBox: \"0 0 24 24\",\n                      stroke: \"currentColor\",\n                      children: /*#__PURE__*/_jsxDEV(\"path\", {\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\",\n                        strokeWidth: 2,\n                        d: \"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1940,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1939,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"text-base font-bold text-primary\",\n                      children: formatCurrency(app.requested_amount || 0)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1942,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1938,\n                    columnNumber: 25\n                  }, this), renderApprovalIndicators(app), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"card-actions justify-end mt-3\",\n                    children: [isAdvisor() && app.status === APPLICATION_STATUS.POR_DISPERSAR && /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: e => {\n                        e.stopPropagation(); // Evitar navegación al detalle\n                        e.preventDefault();\n                        if (onStatusChange) {\n                          setProcessingAppId(app.id);\n                          onStatusChange(app, APPLICATION_STATUS.COMPLETED).then(() => {\n                            setAutoTransitionMessage(`Solicitud ${app.id} marcada como Completada correctamente`);\n                            setTimeout(() => setAutoTransitionMessage(null), 3000);\n                          }).catch(error => {\n                            setErrorMessage(`Error al marcar como completado: ${error.message}`);\n                          }).finally(() => {\n                            setProcessingAppId(null);\n                          });\n                        }\n                      },\n                      className: \"btn btn-sm btn-accent w-full mb-2\",\n                      children: \"Marcar como Dispersado\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1953,\n                      columnNumber: 29\n                    }, this), isAdvisor() && app.status === APPLICATION_STATUS.POR_DISPERSAR && /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: e => {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        if (onStatusChange && !processingAppId) {\n                          setProcessingAppId(app.id);\n                          onStatusChange(app, APPLICATION_STATUS.COMPLETED).then(() => {\n                            setAutoTransitionMessage(`Solicitud marcada como Completada`);\n                            setTimeout(() => setAutoTransitionMessage(null), 3000);\n                          }).catch(error => {\n                            console.error(\"Error al marcar como completado:\", error);\n                          }).finally(() => {\n                            setTimeout(() => setProcessingAppId(null), 500);\n                          });\n                        }\n                      },\n                      className: \"btn btn-xs btn-primary w-full mt-2\",\n                      children: \"Marcar como Completado\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1979,\n                      columnNumber: 29\n                    }, this), isAdvisor() && ((_app$approvalStatus18 = app.approvalStatus) === null || _app$approvalStatus18 === void 0 ? void 0 : _app$approvalStatus18.approvedByAdvisor) && ((_app$approvalStatus19 = app.approvalStatus) === null || _app$approvalStatus19 === void 0 ? void 0 : _app$approvalStatus19.approvedByCompany) && app.status !== APPLICATION_STATUS.POR_DISPERSAR && app.status !== APPLICATION_STATUS.COMPLETED && /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: e => {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        if (onStatusChange && !processingAppId) {\n                          setProcessingAppId(app.id);\n                          onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR).then(() => {\n                            setAutoTransitionMessage(`Solicitud movida a Por Dispersar`);\n                            setTimeout(() => setAutoTransitionMessage(null), 3000);\n                          }).catch(error => {\n                            console.error(\"Error al mover a Por Dispersar:\", error);\n                          }).finally(() => {\n                            setTimeout(() => setProcessingAppId(null), 500);\n                          });\n                        }\n                      },\n                      className: \"btn btn-xs btn-accent w-full mt-2\",\n                      children: \"Mover a Por Dispersar\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2010,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(Link, {\n                      to: `/applications/${app.id}`,\n                      className: \"btn btn-sm btn-primary w-full\",\n                      children: \"Ver Detalle\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2034,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1950,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1926,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1918,\n                columnNumber: 21\n              }, this)\n            }, app.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1907,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1893,\n          columnNumber: 13\n        }, this)]\n      }, column.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1874,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1872,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1839,\n    columnNumber: 5\n  }, this);\n};\n_s(KanbanBoard, \"sJ7XqUvso5u4hvnrrPA+iODLxcM=\", false, function () {\n  return [usePermissions, useAuth];\n});\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","Link","getApprovalStatus","approveByAdvisor","approveByCompany","APPLICATION_STATUS","STATUS_LABELS","usePermissions","useAuth","TABLES","jsxDEV","_jsxDEV","APPLICATION_HISTORY_TABLE","APPLICATION_HISTORY","escapeSQLString","str","replace","KanbanBoard","applications","onStatusChange","_s","isLoading","setIsLoading","errorMessage","setErrorMessage","appsWithApproval","setAppsWithApproval","processingAppId","setProcessingAppId","shouldFilterByEntity","getEntityFilter","isAdvisor","isCompanyAdmin","user","dragItemRef","dragImageRef","draggedItemIndexRef","draggedItemNewStatusRef","autoTransitionMessage","setAutoTransitionMessage","loadApprovalStatuses","length","appsWithStatus","Promise","all","map","app","status","id","approvalStatus","approvedByAdvisor","approvedByCompany","company_review_status","IN_REVIEW","error","console","newApplications","filter","isNew","createdAt","Date","created_at","now","hoursElapsed","getTime","isRecent","log","updatedApps","forEach","newApp","index","findIndex","NEW","checkForNewApplications","oneDayAgo","setHours","getHours","recentApps","hasChanges","recentApp","push","approved_by_advisor","approved_by_company","a","needsUpdate","newStatus","groupedApplications","initialGroups","Object","values","reduce","acc","isMoving","targetStatus","warn","sharedStatuses","POR_DISPERSAR","COMPLETED","EXPIRED","CANCELLED","REJECTED","includes","APPROVED","_app$approvalStatus","_app$approvalStatus2","_app$approvalStatus3","_app$approvalStatus4","_app$approvalStatus5","columns","statusGroups","currentStatus","_app$approvalStatus6","_app$approvalStatus7","advancedStatuses","PENDING","columnDefinitions","title","color","updateLocalApprovalStatus","applicationId","updates","currentApps","appIndex","updatedApp","currentApprovalStatus","newApprovalStatus","undefined","JSON","stringify","handleDragStart","e","application","idx","current","currentTarget","dataTransfer","setData","effectAllowed","cloneNode","style","position","top","opacity","transform","width","offsetWidth","document","body","appendChild","rect","getBoundingClientRect","setDragImage","classList","add","handleDragEnd","remove","removeChild","handleDragOver","columnStatus","preventDefault","stopPropagation","dropEffect","contains","querySelectorAll","col","canDragCard","_app$approvalStatus8","_app$approvalStatus9","restrictedStatuses","_app$approvalStatus10","_app$approvalStatus11","handleDrop","validStatuses","getData","find","oldStatus","allowedTargetStates","_updatedApp$approvalS","entityId","company_id","query","APPLICATIONS","response","fetch","method","headers","result","json","Error","data","historyQuery","message","_updatedApp$approvalS2","setTimeout","prev","advisor_id","appToPatch","formatCurrency","amount","Intl","NumberFormat","currency","format","renderApprovalIndicators","hasFullApproval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","onClick","getProductLabel","type","labels","renderProductLabel","getCardColor","toLowerCase","customStyles","getDraggableClasses","isDraggable","getDragTooltip","_app$approvalStatus12","_app$approvalStatus13","moveFullyApprovedCards","fullyApprovedCards","_app$approvalStatus14","_app$approvalStatus15","timer","clearTimeout","syncAdvancedStatusCards","needsStatusUpdate","syncCardStatusesWithAdvisorView","applicationsWithAdvancedStatus","isBasicStatus","refreshApprovalStatuses","_app$approvalStatus16","_app$approvalStatus17","actual","nuevo","intervalId","setInterval","clearInterval","appsNeedingSync","minWidth","column","onDragOver","onDragLeave","onDrop","_app$approvalStatus18","_app$approvalStatus19","isCardDraggable","draggable","onDragStart","onDragEnd","animation","client_name","application_type","company_name","requested_amount","then","catch","finally","to","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/components/ui/KanbanBoard.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Application, getApprovalStatus, approveByAdvisor, approveByCompany } from '../../services/applicationService';\nimport { STATUS_COLORS, APPLICATION_STATUS, STATUS_LABELS } from '../../utils/constants/statuses';\nimport { usePermissions } from '../../contexts/PermissionsContext';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { TABLES } from '../../utils/constants/tables';\nimport { useNotifications } from '../../contexts/NotificationContext';\n\n// Verificar si APPLICATION_HISTORY tabla está definida\nconst APPLICATION_HISTORY_TABLE = TABLES.APPLICATION_HISTORY || 'application_history';\n\n// Función para escapar cadenas de texto para SQL\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\ninterface KanbanBoardProps {\n  applications: Application[];\n  onStatusChange?: (application: Application, newStatus: string) => Promise<void>;\n}\n\n// Interfaz para el estado de aprobación\ninterface ApprovalStatus {\n  approvedByAdvisor: boolean;\n  approvedByCompany: boolean;\n}\n\n// Crear un tipo para aplicaciones con su estado de aprobación\ntype ApplicationWithApproval = Application & {\n  approvalStatus?: ApprovalStatus;\n  isMoving?: boolean;\n  targetStatus?: string;\n  company_review_status?: boolean;\n};\n\nconst KanbanBoard: React.FC<KanbanBoardProps> = ({ applications, onStatusChange }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const [appsWithApproval, setAppsWithApproval] = useState<ApplicationWithApproval[]>([]);\n  const [processingAppId, setProcessingAppId] = useState<string | null>(null);\n  const { shouldFilterByEntity, getEntityFilter, isAdvisor, isCompanyAdmin } = usePermissions();\n  const { user } = useAuth();\n  const dragItemRef = useRef<HTMLDivElement | null>(null);\n  const dragImageRef = useRef<HTMLDivElement | null>(null);\n  const draggedItemIndexRef = useRef<number>(-1);\n  const draggedItemNewStatusRef = useRef<string>('');\n  const [autoTransitionMessage, setAutoTransitionMessage] = useState<string | null>(null);\n  \n  // Primero, modificar useEffect para cargar aplicaciones con datos de aprobación\n  useEffect(() => {\n    const loadApprovalStatuses = async () => {\n      if (!applications || applications.length === 0) return;\n      \n      setIsLoading(true);\n      try {\n        const appsWithStatus: ApplicationWithApproval[] = await Promise.all(\n          applications.map(async (app) => {\n            // Obtener el estado de aprobación real de la API\n            const status = await getApprovalStatus(app.id);\n            \n            // Devolver la aplicación con su estado de aprobación\n            return {\n              ...app,\n              approvalStatus: status || { approvedByAdvisor: false, approvedByCompany: false },\n              // Para administradores de empresa, agregar un campo que maneja su \"estado virtual\"\n              company_review_status: isCompanyAdmin() ? \n                // Si la aplicación está en revisión o aprobada por empresa, marcarla\n                (app.status === APPLICATION_STATUS.IN_REVIEW || \n                 (status && status.approvedByCompany)) : false\n            };\n          })\n        );\n        \n        setAppsWithApproval(appsWithStatus);\n      } catch (error) {\n        console.error(\"Error loading approval statuses:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    loadApprovalStatuses();\n  }, [applications]);\n  \n  // Actualizar la lógica para nuevas aplicaciones para incluir todas las nuevas notificaciones\n  useEffect(() => {\n    // Verificar si hay aplicaciones que deberían estar en \"nuevo\" (recién creadas)\n    const newApplications = applications.filter(app => {\n      // Identificar aplicaciones recién creadas (menos de 24 horas)\n      const isNew = !app.status || app.status === 'pending' || app.status === 'solicitud';\n      const createdAt = new Date(app.created_at);\n      const now = new Date();\n      const hoursElapsed = (now.getTime() - createdAt.getTime()) / (1000 * 60 * 60);\n      const isRecent = hoursElapsed < 24;\n      \n      return isRecent && (isNew || app.status === 'new');\n    });\n    \n    // Si hay aplicaciones nuevas sin status o con status pendiente/solicitud, asignarles \"nuevo\"\n    if (newApplications.length > 0) {\n      console.log('Aplicaciones nuevas detectadas:', newApplications);\n      const updatedApps = [...appsWithApproval];\n      newApplications.forEach(newApp => {\n        const index = updatedApps.findIndex(app => app.id === newApp.id);\n        if (index !== -1 && (!updatedApps[index].status || updatedApps[index].status === 'pending' || updatedApps[index].status === 'solicitud')) {\n          updatedApps[index] = {\n            ...updatedApps[index],\n            status: APPLICATION_STATUS.NEW\n          };\n          console.log(`Aplicación ${newApp.id} movida a estado NUEVO`);\n        }\n      });\n      \n      setAppsWithApproval(updatedApps);\n    }\n  }, [applications]); // Usar applications como dependencia en lugar de appsWithApproval\n\n  // Asegurar que nuevas aplicaciones se muestren inmediatamente\n  // añadiendo una función de comprobación en el useEffect principal\n  useEffect(() => {\n    const checkForNewApplications = async () => {\n      // Verificar que tenemos usuario y permisos\n      if (!user?.id) return;\n      \n      try {\n        // Ejecutar esta comprobación solo si somos admin de empresa\n        if (isCompanyAdmin() && applications.length > 0) {\n          // Obtener la fecha de hace 24 horas\n          const oneDayAgo = new Date();\n          oneDayAgo.setHours(oneDayAgo.getHours() - 24);\n          \n          // Buscar aplicaciones creadas en las últimas 24 horas\n          const recentApps = applications.filter(app => {\n            const createdAt = new Date(app.created_at);\n            return createdAt >= oneDayAgo;\n          });\n          \n          // Si hay aplicaciones recientes, asegurarnos de que aparezcan en el tablero\n          if (recentApps.length > 0) {\n            console.log(`Encontradas ${recentApps.length} aplicaciones recientes`);\n            \n            // Asegurar que todas estas aplicaciones están en nuestro estado local\n            // y que tienen el estado correcto (NEW si no tienen un estado específico)\n            const updatedApps = [...appsWithApproval];\n            let hasChanges = false;\n            \n            recentApps.forEach(recentApp => {\n              const index = updatedApps.findIndex(app => app.id === recentApp.id);\n              \n              // Si la aplicación no está en nuestro estado, agregarla\n              if (index === -1) {\n                console.log(`Agregando aplicación nueva ${recentApp.id} al estado`);\n                updatedApps.push({\n                  ...recentApp,\n                  status: recentApp.status || APPLICATION_STATUS.NEW,\n                  approvalStatus: {\n                    approvedByAdvisor: recentApp.approved_by_advisor || false,\n                    approvedByCompany: recentApp.approved_by_company || false\n                  }\n                });\n                hasChanges = true;\n              } \n              // Si no tiene estado o está en estado pendiente/solicitud, asignarle NEW\n              else if (!updatedApps[index].status || updatedApps[index].status === 'pending' || updatedApps[index].status === 'solicitud') {\n                console.log(`Actualizando estado de ${recentApp.id} a NUEVO`);\n                updatedApps[index] = {\n                  ...updatedApps[index],\n                  status: APPLICATION_STATUS.NEW\n                };\n                hasChanges = true;\n              }\n            });\n            \n            // Actualizar el estado solo si hubo cambios\n            if (hasChanges) {\n              setAppsWithApproval(updatedApps);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error verificando nuevas aplicaciones:', error);\n      }\n    };\n    \n    // Ejecutar la función de comprobación\n    checkForNewApplications();\n  }, [applications, user?.id, isCompanyAdmin]);\n  \n  // Modificar la lógica para actualizar todas las aplicaciones con estado \"pending\" o \"solicitud\" a \"new\"\n  useEffect(() => {\n    // Si no hay aplicaciones, no hacer nada\n    if (!applications || applications.length === 0) return;\n    \n    console.log('Verificando estado de aplicaciones:', applications.map(a => ({ id: a.id, status: a.status })));\n    \n    // Actualizar solo las aplicaciones con estado específico a \"new\" sin afectar las demás\n    const updatedApps = [...appsWithApproval];\n    let hasChanges = false;\n    \n    applications.forEach(app => {\n      const index = updatedApps.findIndex(a => a.id === app.id);\n      const needsUpdate = \n        !app.status || \n        app.status === 'pending' || \n        app.status === 'solicitud';\n      \n      // Solo actualizar si el estado necesita cambiar a \"new\"\n      if (index !== -1 && needsUpdate) {\n        console.log(`Actualizando estado de aplicación ${app.id} de \"${app.status}\" a \"new\"`);\n        updatedApps[index] = {\n          ...updatedApps[index],\n          status: APPLICATION_STATUS.NEW\n        };\n        hasChanges = true;\n      } else if (index === -1) {\n        // Si la aplicación no está en el array, agregarla con su estado original\n        // o \"new\" si no tiene estado o es pending/solicitud\n        const newStatus = needsUpdate ? APPLICATION_STATUS.NEW : (app.status as Application['status']);\n        console.log(`Agregando aplicación ${app.id} con estado \"${newStatus}\"`);\n        updatedApps.push({\n          ...app,\n          status: newStatus,\n          approvalStatus: {\n            approvedByAdvisor: app.approved_by_advisor || false,\n            approvedByCompany: app.approved_by_company || false\n          }\n        });\n        hasChanges = true;\n      }\n      // Si existe y no necesita actualización, la dejamos como está\n    });\n    \n    if (hasChanges) {\n      console.log('Actualizando aplicaciones:');\n      updatedApps.forEach(app => console.log(`- ${app.id}: ${app.status}`));\n      setAppsWithApproval(updatedApps);\n    }\n  }, [applications]);\n  \n  // Modificar la forma en que agrupamos las aplicaciones por estado para los administradores de empresa\n  // para crear un flujo de trabajo independiente\n  const groupedApplications = React.useMemo(() => {\n    // Crear un objeto con todos los estados posibles como claves y arrays vacíos como valores\n    const initialGroups = Object.values(APPLICATION_STATUS).reduce((acc, status) => {\n      acc[status] = [];\n      return acc;\n    }, {} as Record<string, ApplicationWithApproval[]>);\n    \n    // Para los administradores de empresa, usaremos un agrupamiento virtual basado en las aprobaciones\n    if (isCompanyAdmin()) {\n    return appsWithApproval.reduce((acc, app) => {\n        // Si está en movimiento, respetar el estado de destino\n      if (app.isMoving && app.targetStatus) {\n          // Verificar que el estado existe antes de intentar agregar la aplicación\n          if (acc[app.targetStatus]) {\n        acc[app.targetStatus].push(app);\n      } else {\n            // Si el estado no existe, usar NEW como fallback\n            console.warn(`Estado inválido detectado: ${app.targetStatus}, usando NEW como fallback`);\n            acc[APPLICATION_STATUS.NEW].push(app);\n          }\n          return acc;\n        }\n        \n        // Normalizar estados \"pending\" y \"solicitud\" a \"new\"\n        if (!app.status || app.status === 'pending' || app.status === 'solicitud') {\n          acc[APPLICATION_STATUS.NEW].push(app);\n          return acc;\n        }\n        \n        // Estados compartidos que siempre se muestran igual para todos los usuarios\n        const sharedStatuses = [\n          APPLICATION_STATUS.POR_DISPERSAR,\n          APPLICATION_STATUS.COMPLETED,\n          APPLICATION_STATUS.EXPIRED,\n          APPLICATION_STATUS.CANCELLED,\n          APPLICATION_STATUS.REJECTED\n        ];\n        \n        if (sharedStatuses.includes(app.status as APPLICATION_STATUS)) {\n          // Verificar que el estado existe\n          if (acc[app.status]) {\n            acc[app.status].push(app);\n          } else {\n            console.warn(`Estado compartido inválido detectado: ${app.status}, usando NEW como fallback`);\n            acc[APPLICATION_STATUS.NEW].push(app);\n          }\n          return acc;\n        }\n        \n        // Para los estados independientes, usar la lógica personalizada para admin de empresa\n        if (app.status === APPLICATION_STATUS.APPROVED) {\n          // Si está aprobada por la empresa pero no por el asesor, mostrarla en \"aprobado por mi\" \n          if (app.approvalStatus?.approvedByCompany && !app.approvalStatus.approvedByAdvisor) {\n            acc[APPLICATION_STATUS.APPROVED].push(app);\n            return acc;\n          }\n          \n          // Si está aprobada por ambos, y el estado real es aprobado, mostrarla en aprobado\n          if (app.approvalStatus?.approvedByCompany && app.approvalStatus?.approvedByAdvisor) {\n            acc[APPLICATION_STATUS.APPROVED].push(app);\n            return acc;\n          }\n          \n          // En otros casos, mostrarla en el estado que tenga según otras reglas\n        }\n        \n        // Si está en revisión según la empresa\n        if (app.status === APPLICATION_STATUS.IN_REVIEW) {\n          // Si no está aprobada por la empresa, mostrarla en \"en revisión\"\n          if (!app.approvalStatus?.approvedByCompany) {\n            acc[APPLICATION_STATUS.IN_REVIEW].push(app);\n            return acc;\n          }\n          \n          // Si está aprobada por la empresa, mostrarla en \"aprobado por mi\"\n          acc[APPLICATION_STATUS.APPROVED].push(app);\n          return acc;\n        }\n        \n        // Para nuevas aplicaciones sin aprobación\n        if (app.status === APPLICATION_STATUS.NEW) {\n          // Si está aprobada por la empresa, mostrarla en \"aprobado por mi\"\n          if (app.approvalStatus?.approvedByCompany) {\n            acc[APPLICATION_STATUS.APPROVED].push(app);\n            return acc;\n          }\n          \n          // Si está en revisión por la empresa\n          if (app.company_review_status === true) {\n            acc[APPLICATION_STATUS.IN_REVIEW].push(app);\n            return acc;\n          }\n          \n          // Si no tiene marca especial, mostrarla como nueva\n          acc[APPLICATION_STATUS.NEW].push(app);\n          return acc;\n        }\n        \n        // Para cualquier otro caso, usar el estado real si existe, o NEW como fallback\n        if (acc[app.status]) {\n          acc[app.status].push(app);\n        } else {\n          console.warn(`Estado desconocido detectado: ${app.status}, usando NEW como fallback`);\n          acc[APPLICATION_STATUS.NEW].push(app);\n        }\n        return acc;\n      }, initialGroups);\n    }\n    \n    // Para asesores y otros roles, usamos el agrupamiento normal basado en estado\n    return appsWithApproval.reduce((acc, app) => {\n      if (app.isMoving && app.targetStatus) {\n        // Si está en movimiento, verificar que el estado de destino existe\n        if (acc[app.targetStatus]) {\n          acc[app.targetStatus].push(app);\n        } else {\n          console.warn(`Estado de destino inválido: ${app.targetStatus}, usando NEW como fallback`);\n          acc[APPLICATION_STATUS.NEW].push(app);\n        }\n      } else {\n        // Si no, usar el estado normal, normalizando \"pending\" y \"solicitud\" a \"new\"\n        let status = app.status || 'new';\n        \n        // Normalizar estados \"pending\" y \"solicitud\" a \"new\"\n        if (status === 'pending' || status === 'solicitud') {\n          status = APPLICATION_STATUS.NEW;\n        }\n        \n        // Verificar que el estado existe antes de agregar\n        if (acc[status]) {\n        acc[status].push(app);\n        } else {\n          console.warn(`Estado inválido detectado: ${status}, usando NEW como fallback`);\n          acc[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      return acc;\n    }, initialGroups);\n  }, [appsWithApproval, isCompanyAdmin, isAdvisor]);\n  \n  // Modificar la lógica de agrupamiento de aplicaciones para separar flujos\n  // Esta es la parte clave que separa completamente los flujos\n  const columns = useMemo(() => {\n    // Estados estándar del Kanban\n    const statusGroups: Record<string, ApplicationWithApproval[]> = {\n      [APPLICATION_STATUS.NEW]: [],\n      [APPLICATION_STATUS.IN_REVIEW]: [],\n      [APPLICATION_STATUS.APPROVED]: [],\n      [APPLICATION_STATUS.POR_DISPERSAR]: [],\n      [APPLICATION_STATUS.COMPLETED]: [],\n      [APPLICATION_STATUS.EXPIRED]: [],\n      [APPLICATION_STATUS.REJECTED]: [],\n      [APPLICATION_STATUS.CANCELLED]: []\n    };\n    \n    // Agrupar aplicaciones por estado\n    appsWithApproval.forEach(app => {\n      // Asegurarnos de que el app.status no es undefined antes de usarlo\n      const currentStatus = app.status || APPLICATION_STATUS.NEW;\n      \n      // Lógica específica para administradores de empresa - flujo sincronizado\n      if (isCompanyAdmin()) {\n        // Los estados avanzados siempre deben mostrarse en su columna correspondiente\n        // independientemente del flujo (esto garantiza que se sincronicen con la vista del asesor)\n        const advancedStatuses = [\n          APPLICATION_STATUS.POR_DISPERSAR,\n          APPLICATION_STATUS.COMPLETED,\n          APPLICATION_STATUS.EXPIRED,\n          APPLICATION_STATUS.CANCELLED,\n          APPLICATION_STATUS.REJECTED\n        ];\n        \n        if (advancedStatuses.includes(currentStatus as APPLICATION_STATUS)) {\n          console.log(`Mostrando tarjeta ${app.id} en estado avanzado: ${currentStatus}`);\n          statusGroups[currentStatus].push(app);\n          return;\n        }\n        \n        // Para los estados básicos, aplicar la lógica personalizada del admin de empresa\n        \n        // 1. Si está aprobada por empresa -> va a \"Aprobado por mi\"\n        if (app.approvalStatus?.approvedByCompany) {\n          statusGroups[APPLICATION_STATUS.APPROVED].push(app);\n        }\n        // 2. Si está en revisión por empresa -> va a \"En Revisión\"\n        else if (app.company_review_status) {\n          statusGroups[APPLICATION_STATUS.IN_REVIEW].push(app);\n        }\n        // 3. Si no está ni en revisión ni aprobada por empresa -> va a \"Nuevo\"\n        else if (currentStatus === APPLICATION_STATUS.NEW || \n                currentStatus === APPLICATION_STATUS.PENDING || \n                (!app.company_review_status && !app.approvalStatus?.approvedByCompany)) {\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      // Lógica para asesores - flujo normal basado en estado real\n      else if (isAdvisor()) {\n        if (currentStatus) {\n          // Verificar que el estado existe en nuestros grupos antes de agregar\n          if (statusGroups[currentStatus]) {\n            statusGroups[currentStatus].push(app);\n          } else {\n            // Si no existe, log warning y usar NEW como fallback\n            console.warn(`Estado desconocido en columns para asesor: ${currentStatus}, usando NEW como fallback`);\n            statusGroups[APPLICATION_STATUS.NEW].push(app);\n          }\n        } else {\n          // Si no tiene estado, ponerla en \"Nuevo\"\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      // Lógica para otros roles\n      else {\n        if (currentStatus) {\n          // Verificar que el estado existe en nuestros grupos\n          if (statusGroups[currentStatus]) {\n            statusGroups[currentStatus].push(app);\n          } else {\n            // Si no existe, usar NEW como fallback\n            console.warn(`Estado desconocido en columns para otros roles: ${currentStatus}, usando NEW como fallback`);\n            statusGroups[APPLICATION_STATUS.NEW].push(app);\n          }\n        } else {\n          // Si no tiene estado, ponerla en \"Nuevo\"\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n    });\n    \n    // Definición de colores para cada columna\n    const columnDefinitions = [\n      { id: APPLICATION_STATUS.NEW, title: 'Nuevo', color: 'warning', applications: statusGroups[APPLICATION_STATUS.NEW] },\n      { id: APPLICATION_STATUS.IN_REVIEW, title: 'En Revisión', color: 'info', applications: statusGroups[APPLICATION_STATUS.IN_REVIEW] },\n      { id: APPLICATION_STATUS.APPROVED, title: 'Aprobado por mi', color: 'success', applications: statusGroups[APPLICATION_STATUS.APPROVED] },\n      { id: APPLICATION_STATUS.POR_DISPERSAR, title: 'Por Dispersar', color: 'accent', applications: statusGroups[APPLICATION_STATUS.POR_DISPERSAR] },\n      { id: APPLICATION_STATUS.COMPLETED, title: 'Completado', color: 'primary', applications: statusGroups[APPLICATION_STATUS.COMPLETED] },\n      { id: APPLICATION_STATUS.EXPIRED, title: 'Expirado', color: 'error', applications: statusGroups[APPLICATION_STATUS.EXPIRED] },\n      { id: APPLICATION_STATUS.REJECTED, title: 'Rechazado', color: 'error', applications: statusGroups[APPLICATION_STATUS.REJECTED] },\n      { id: APPLICATION_STATUS.CANCELLED, title: 'Cancelado', color: 'neutral', applications: statusGroups[APPLICATION_STATUS.CANCELLED] }\n    ];\n    \n    return columnDefinitions;\n  }, [appsWithApproval, isAdvisor, isCompanyAdmin]);\n  \n  // Función para actualizar localmente el estado de aprobación de una aplicación\n  const updateLocalApprovalStatus = (applicationId: string, updates: Partial<{ approvedByAdvisor: boolean, approvedByCompany: boolean }>, newStatus?: string) => {\n    console.log(`Actualizando estado de aprobación para ${applicationId}:`, updates);\n    \n    // Crear una copia del estado actual\n    const currentApps = [...appsWithApproval];\n    const appIndex = currentApps.findIndex(app => app.id === applicationId);\n    \n    if (appIndex === -1) {\n      console.warn(`No se encontró la aplicación ${applicationId} para actualizar approval status`);\n      return;\n    }\n    \n    // Crear copia profunda de la aplicación para evitar mutaciones directas\n    const updatedApp = { ...currentApps[appIndex] };\n    \n    // Asegurar que el objeto approvalStatus exista\n    const currentApprovalStatus = updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false };\n    \n    // Crear el nuevo objeto de aprobación, asegurando que mantenemos los valores existentes\n    // a menos que se especifiquen explícitamente en el parámetro updates\n    const newApprovalStatus = {\n      approvedByAdvisor: updates.approvedByAdvisor !== undefined ? updates.approvedByAdvisor : currentApprovalStatus.approvedByAdvisor,\n      approvedByCompany: updates.approvedByCompany !== undefined ? updates.approvedByCompany : currentApprovalStatus.approvedByCompany\n    };\n    \n    console.log(`Approval Status anterior: ${JSON.stringify(currentApprovalStatus)}`);\n    console.log(`Nuevo Approval Status: ${JSON.stringify(newApprovalStatus)}`);\n    \n    // Actualizar la aplicación con el nuevo estado de aprobación\n    updatedApp.approvalStatus = newApprovalStatus;\n    \n    // Para mantener sincronizados los estados, cuando quitamos la aprobación de empresa,\n    // también actualizamos el company_review_status\n    if (updates.approvedByCompany === false && isCompanyAdmin()) {\n      console.log(`Actualizando company_review_status a true porque estamos quitando aprobación`);\n      updatedApp.company_review_status = true;\n    }\n\n    // Si ambos están aprobados, asegurarnos de moverla a por_dispersar\n    if (newApprovalStatus.approvedByAdvisor && newApprovalStatus.approvedByCompany) {\n      console.log(`Ambas aprobaciones están presentes, verificando si necesita moverse a Por Dispersar`);\n      if (updatedApp.status !== APPLICATION_STATUS.POR_DISPERSAR && \n          updatedApp.status !== APPLICATION_STATUS.COMPLETED) {\n        console.log(`Actualizando estado a Por Dispersar debido a doble aprobación`);\n        updatedApp.status = APPLICATION_STATUS.POR_DISPERSAR;\n      }\n    }\n    \n    // Actualizar el array de aplicaciones\n    currentApps[appIndex] = updatedApp;\n    \n    // Establecer el nuevo estado\n    setAppsWithApproval(currentApps);\n  };\n  \n  const handleDragStart = (e: React.DragEvent<HTMLDivElement>, application: ApplicationWithApproval, idx: number) => {\n    // Guardar la aplicación que estamos arrastrando\n    draggedItemIndexRef.current = idx;\n    \n    // Almacenar el elemento que estamos arrastrando para gestionar mejor el evento\n    dragItemRef.current = e.currentTarget;\n    \n    // Establecer los datos que queremos transferir\n    e.dataTransfer.setData('text/plain', application.id);\n    e.dataTransfer.effectAllowed = 'move';\n    \n    // Crear una copia visual para el arrastre\n    if (!dragImageRef.current) {\n      dragImageRef.current = e.currentTarget.cloneNode(true) as HTMLDivElement;\n      dragImageRef.current.style.position = 'absolute';\n      dragImageRef.current.style.top = '-1000px';\n      dragImageRef.current.style.opacity = '0.8';\n      dragImageRef.current.style.transform = 'scale(0.9)';\n      dragImageRef.current.style.width = `${e.currentTarget.offsetWidth}px`;\n      document.body.appendChild(dragImageRef.current);\n    }\n    \n    // Establecer la imagen de arrastre\n    if (dragImageRef.current) {\n      const rect = e.currentTarget.getBoundingClientRect();\n      e.dataTransfer.setDragImage(dragImageRef.current, rect.width / 2, 20);\n    }\n    \n    // Añadir clase CSS para mostrar visualmente que el elemento está siendo arrastrado\n    if (e.currentTarget) {\n      e.currentTarget.classList.add('dragging');\n    }\n  };\n  \n  const handleDragEnd = (e: React.DragEvent<HTMLDivElement>) => {\n    // Eliminar clase CSS de arrastre\n    if (dragItemRef.current) {\n      dragItemRef.current.classList.remove('dragging');\n      dragItemRef.current = null;\n    }\n    \n    if (e.currentTarget) {\n      e.currentTarget.classList.remove('dragging');\n    }\n    \n    // Eliminar el elemento clonado para el arrastre\n    if (dragImageRef.current) {\n      document.body.removeChild(dragImageRef.current);\n      dragImageRef.current = null;\n    }\n    \n    draggedItemIndexRef.current = -1;\n    draggedItemNewStatusRef.current = '';\n  };\n  \n  const handleDragOver = (e: React.DragEvent, columnStatus: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = 'move';\n    \n    // Guardar el nuevo estado para la actualización optimista\n    if (draggedItemNewStatusRef.current !== columnStatus) {\n      draggedItemNewStatusRef.current = columnStatus;\n    }\n    \n    // Añadir clase visual para indicar la columna destino\n    if (e.currentTarget.classList.contains('kanban-column')) {\n      document.querySelectorAll('.kanban-column').forEach(col => {\n        col.classList.remove('drag-over');\n      });\n      e.currentTarget.classList.add('drag-over');\n    }\n  };\n  \n  // Verificar si el usuario puede arrastrar una tarjeta\n  const canDragCard = (app: ApplicationWithApproval): boolean => {\n    // No permitir arrastrar si la aplicación no tiene status o id\n    if (!app.status || !app.id) {\n      return false;\n    }\n    \n    // No permitir arrastrar tarjetas que están en proceso de cambio de estado\n    if (app.isMoving) {\n      return false;\n    }\n    \n    // No permitir arrastrar tarjetas que están siendo procesadas\n    if (processingAppId === app.id) {\n      return false;\n    }\n    \n    // Restricciones específicas basadas en el rol del usuario\n    \n    // Para asesores\n    if (isAdvisor()) {\n      // Estados que nunca pueden ser movidos por ningún usuario\n      const restrictedStatuses = [\n        APPLICATION_STATUS.EXPIRED,\n        APPLICATION_STATUS.CANCELLED,\n        APPLICATION_STATUS.POR_DISPERSAR\n      ];\n      \n      // No permitir arrastrar si está en un estado restringido\n      if (restrictedStatuses.includes(app.status as APPLICATION_STATUS)) {\n        return false;\n      }\n      \n      // Si tiene aprobaciones de ambos (asesor y empresa), no permitir mover\n      if (app.approvalStatus?.approvedByAdvisor && app.approvalStatus?.approvedByCompany) {\n        return false;\n      }\n      \n      return true;\n    }\n    \n    // Para administradores de empresa\n    if (isCompanyAdmin()) {\n      // Estados que nunca pueden ser movidos por un admin de empresa\n      const restrictedStatuses = [\n        APPLICATION_STATUS.POR_DISPERSAR,\n        APPLICATION_STATUS.COMPLETED,\n        APPLICATION_STATUS.EXPIRED,\n        APPLICATION_STATUS.CANCELLED,\n        APPLICATION_STATUS.REJECTED\n      ];\n      \n      // No permitir arrastrar si está en un estado restringido\n      if (restrictedStatuses.includes(app.status as APPLICATION_STATUS)) {\n        return false;\n      }\n      \n      // Si tiene aprobaciones de ambos (asesor y empresa), no permitir mover\n      if (app.approvalStatus?.approvedByAdvisor && app.approvalStatus?.approvedByCompany) {\n        return false;\n      }\n      \n      return true;\n    }\n    \n    // Para otros roles, no permitir arrastrar\n    return false;\n  };\n  \n  // Modificar handleDrop para manejar correctamente el flujo independiente\n  const handleDrop = async (e: React.DragEvent<HTMLDivElement>, newStatus: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    // Eliminar todas las clases de arrastre\n    document.querySelectorAll('.kanban-column').forEach(col => {\n      col.classList.remove('drag-over');\n    });\n    \n    // Verificar que el newStatus es válido\n    const validStatuses = Object.values(APPLICATION_STATUS);\n    if (!validStatuses.includes(newStatus as APPLICATION_STATUS)) {\n      console.error(`Estado inválido para drop: ${newStatus}`);\n      setErrorMessage(`Error: estado \"${newStatus}\" no es válido.`);\n      return;\n    }\n    \n    // Recuperar el ID de la aplicación\n    const applicationId = e.dataTransfer.getData('text/plain');\n    if (!applicationId || !user?.id) return;\n    \n    const application = appsWithApproval.find(app => app.id === applicationId);\n    if (!application) return;\n    \n    const oldStatus = application.status || APPLICATION_STATUS.NEW;\n    \n    // No hacer nada si el estatus es el mismo\n    if (oldStatus === newStatus) return;\n    \n    console.log(`Intentando mover tarjeta ${applicationId} de ${oldStatus} a ${newStatus}`);\n    \n      // Establecer el ID de la aplicación que se está procesando\n      setProcessingAppId(applicationId);\n      \n    try {\n      // Para administradores de empresa (FLUJO INDEPENDIENTE)\n      if (isCompanyAdmin()) {\n        // El admin de empresa solo puede mover tarjetas entre estos estados\n        const allowedTargetStates = [\n          APPLICATION_STATUS.NEW,\n          APPLICATION_STATUS.IN_REVIEW,\n          APPLICATION_STATUS.APPROVED\n        ];\n        \n        // Si intenta mover a un estado que no está permitido\n        if (!allowedTargetStates.includes(newStatus as APPLICATION_STATUS)) {\n          setErrorMessage(`No puedes mover solicitudes al estado \"${STATUS_LABELS[newStatus as keyof typeof STATUS_LABELS] || newStatus}\". Solo puedes mover entre Nuevo, En Revisión y Aprobado por mí.`);\n          setProcessingAppId(null);\n          return;\n        }\n        \n        // Estados que nunca pueden ser movidos por un admin de empresa\n        const restrictedStatuses = [\n          APPLICATION_STATUS.POR_DISPERSAR,\n          APPLICATION_STATUS.COMPLETED,\n          APPLICATION_STATUS.EXPIRED,\n          APPLICATION_STATUS.CANCELLED,\n          APPLICATION_STATUS.REJECTED\n        ];\n        \n        // Si la tarjeta está en un estado restringido, no permitir moverla\n        if (restrictedStatuses.includes(oldStatus as APPLICATION_STATUS)) {\n          setErrorMessage(`No puedes mover solicitudes que están en estado \"${STATUS_LABELS[oldStatus as keyof typeof STATUS_LABELS] || oldStatus}\".`);\n          setProcessingAppId(null);\n          return;\n        }\n        \n        // Actualización optimista en UI para mejor fluidez\n      const updatedApps = [...appsWithApproval];\n      const appIndex = updatedApps.findIndex(app => app.id === applicationId);\n      \n      if (appIndex !== -1) {\n          // Crear copia profunda para evitar referencias\n        const updatedApp = { \n          ...updatedApps[appIndex], \n          isMoving: true,\n          targetStatus: newStatus \n        };\n        \n          if (newStatus === APPLICATION_STATUS.NEW) {\n            // Mover a Nuevo\n            updatedApp.company_review_status = false;\n          updatedApp.approvalStatus = {\n            ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByCompany: false\n            };\n            \n            // Si estaba aprobado y se mueve a Nuevo, hay que quitar la aprobación de la empresa\n            if (updatedApp.approvalStatus?.approvedByCompany && user?.entityId && application.company_id) {\n              try {\n                console.log(\"Quitando aprobación de empresa en la base de datos\");\n                // Ejecutamos una consulta SQL para quitar la aprobación\n                const query = `\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_company = false, \n                      approval_date_company = NULL\n                  WHERE id = '${applicationId}' AND company_id = '${application.company_id}'\n                  RETURNING *\n                `;\n                \n                const response = await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query }),\n                });\n                \n                const result = await response.json();\n                if (result.error) {\n                  throw new Error(result.error);\n                }\n                \n                console.log(\"✅ Aprobación de empresa removida correctamente:\", result.data);\n                \n                // Registrar en historial\n                const historyQuery = `\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'new', 'Regresado a Nuevo por administrador de empresa', '${user.entityId}')\n                  RETURNING *\n                `;\n                \n                await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query: historyQuery }),\n                });\n                \n                // Actualizar UI explícitamente\n                updateLocalApprovalStatus(applicationId, { approvedByCompany: false }, APPLICATION_STATUS.NEW);\n              } catch (error) {\n                console.error(\"❌ Error al quitar aprobación de empresa:\", error);\n                setErrorMessage(`Error al quitar aprobación: ${(error as Error).message}`);\n              }\n            }\n          } \n          else if (newStatus === APPLICATION_STATUS.IN_REVIEW) {\n            // Mover a En Revisión\n            updatedApp.company_review_status = true;\n          updatedApp.approvalStatus = {\n            ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByCompany: false\n            };\n            \n            // Si estaba aprobado y se mueve a En Revisión, hay que quitar la aprobación de la empresa\n            if (oldStatus === APPLICATION_STATUS.APPROVED && \n                updatedApp.approvalStatus?.approvedByCompany && \n                user?.entityId && \n                application.company_id) {\n              try {\n                console.log(\"Quitando aprobación de empresa en la base de datos\");\n                // Ejecutamos una consulta SQL para quitar la aprobación\n                const query = `\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_company = false, \n                      approval_date_company = NULL,\n                      status = '${APPLICATION_STATUS.IN_REVIEW}'\n                  WHERE id = '${applicationId}' AND company_id = '${application.company_id}'\n                  RETURNING *\n                `;\n                \n                const response = await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query }),\n                });\n                \n                const result = await response.json();\n                if (result.error) {\n                  throw new Error(result.error);\n                }\n                \n                console.log(\"✅ Aprobación de empresa removida correctamente:\", result.data);\n                \n                // Registrar en historial\n                const historyQuery = `\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'in_review', 'Revisión adicional requerida por empresa', '${user.entityId}')\n                  RETURNING *\n                `;\n                \n                await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query: historyQuery }),\n                });\n                \n                // Actualizar UI explícitamente con ambas propiedades\n                updateLocalApprovalStatus(applicationId, { \n                  approvedByCompany: false \n                }, APPLICATION_STATUS.IN_REVIEW);\n                \n                // Forzar actualización global de la aplicación para todos los usuarios\n                // llamando a la API de cambio de estado\n                if (onStatusChange) {\n                  try {\n                    await onStatusChange(application, APPLICATION_STATUS.IN_REVIEW);\n                    console.log(\"✅ Estado actualizado correctamente a EN REVISIÓN\");\n                  } catch (error) {\n                    console.error(\"❌ Error al actualizar estado:\", error);\n                  }\n                }\n              } catch (error) {\n                console.error(\"❌ Error al quitar aprobación de empresa:\", error);\n                setErrorMessage(`Error al quitar aprobación: ${(error as Error).message}`);\n              }\n            } else {\n              // Incluso si no estaba aprobada, forzar actualización de estado\n              if (onStatusChange) {\n                try {\n                  await onStatusChange(application, APPLICATION_STATUS.IN_REVIEW);\n                  console.log(\"✅ Estado actualizado correctamente a EN REVISIÓN\");\n                } catch (error) {\n                  console.error(\"❌ Error al actualizar estado:\", error);\n                }\n              }\n            }\n          } \n          else if (newStatus === APPLICATION_STATUS.APPROVED) {\n            // Mover a Aprobado por mí\n            updatedApp.company_review_status = true; // Se considera revisado si está aprobado\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByCompany: true\n            };\n            \n            // Llamar a la API para aprobar por empresa\n            if (user?.entityId && application.company_id) {\n              try {\n                console.log(`Empresa ${user.entityId} está aprobando la solicitud ${applicationId}`);\n                \n                // Aplicar cambio optimista a la UI primero\n                updatedApps[appIndex] = updatedApp;\n                setAppsWithApproval([...updatedApps]);\n                \n                // Llamar a la API y esperar a que termine\n                const result = await approveByCompany(\n                  applicationId, \n                  \"Aprobado vía Kanban\", \n                  user.entityId, \n                  application.company_id, \n                  { company_id: application.company_id } // Pasar company_id en el entityFilter\n                );\n                \n                console.log(\"✅ Aplicación aprobada por empresa:\", result);\n                \n                // Actualizar UI con respuesta del servidor\n                updateLocalApprovalStatus(applicationId, { approvedByCompany: true });\n                \n                // Verificar si la aplicación ya está aprobada por el asesor\n                const approvalStatus = await getApprovalStatus(applicationId);\n                console.log(\"Estado de aprobación actual:\", approvalStatus);\n                \n                // Si está aprobada por ambos, mover automáticamente a \"por_dispersar\"\n                if (approvalStatus?.approvedByAdvisor) {\n                  console.log(\"❇️ Ambas aprobaciones completadas, moviendo a Por Dispersar\");\n                  // Mostrar notificación de transición automática\n                  setAutoTransitionMessage(`La solicitud ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR] || 'Por Dispersar'}\"`);\n                  \n                  // Cambiar el estado a \"por_dispersar\" después de un breve retraso\n                  setTimeout(() => {\n                    if (onStatusChange) {\n                      onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                    }\n                    // Limpiar el mensaje después de mostrar\n                    setTimeout(() => setAutoTransitionMessage(null), 3000);\n                  }, 500);\n                }\n              } catch (error) {\n                console.error(\"❌ Error al aprobar por empresa:\", error);\n                setErrorMessage(`Error al aprobar: ${(error as Error).message}`);\n                \n                // Revertir el estado optimista en caso de error\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByCompany: false\n            };\n                updatedApps[appIndex] = updatedApp;\n                setAppsWithApproval([...updatedApps]);\n              }\n          }\n        }\n        \n          // Actualizar la app en el estado\n        updatedApps[appIndex] = updatedApp;\n        setAppsWithApproval(updatedApps);\n          \n          // Quitar la marca de movimiento después de un breve retraso\n          setTimeout(() => {\n            setAppsWithApproval(prev => \n              prev.map(app => \n                app.id === applicationId\n                  ? { ...app, isMoving: false, targetStatus: undefined }\n                  : app\n              )\n            );\n            setProcessingAppId(null);\n          }, 500);\n        }\n      }\n      // Para asesores (flujo normal)\n      else if (isAdvisor()) {\n        // Verificar que el estado es válido\n        if (!validStatuses.includes(newStatus as APPLICATION_STATUS)) {\n          setErrorMessage(`Estado de destino \"${newStatus}\" no es válido.`);\n          setProcessingAppId(null);\n          return;\n        }\n        \n        // Actualización optimista en UI\n        const updatedApps = [...appsWithApproval];\n        const appIndex = updatedApps.findIndex(app => app.id === applicationId);\n        \n        if (appIndex !== -1) {\n          // Crear copia profunda para evitar referencias\n          const updatedApp = { \n            ...updatedApps[appIndex], \n            isMoving: true, \n            targetStatus: newStatus, \n            status: newStatus as Application['status'] // actualizar el estado directamente\n          };\n          \n          // Lógica para manejar aprobaciones de manera optimista\n          if (newStatus === APPLICATION_STATUS.APPROVED) {\n            console.log(`Advisor ${user?.id} está aprobando la solicitud ${applicationId}`);\n            \n            // Actualizar inmediatamente el estado visual de aprobación del asesor\n            // para una respuesta inmediata en la UI\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByAdvisor: true  // Optimistically set to true\n            };\n            \n            // Aplicar cambio optimista a la UI\n            updatedApps[appIndex] = updatedApp;\n            setAppsWithApproval([...updatedApps]);  // Clone to trigger re-render\n            \n            // Llamar a la API para aprobar por asesor\n            if (user?.entityId) {\n              try {\n                // Llamar a la API y esperar a que termine\n                console.log(\"Llamando a approveByAdvisor API...\");\n                const result = await approveByAdvisor(\n            applicationId, \n            \"Aprobado vía Kanban\", \n            user.entityId, \n                  { advisor_id: user.entityId }  // Ensure we're using the advisor filter\n                );\n                \n                console.log(\"✅ Aplicación aprobada por asesor:\", result);\n                \n                // Actualizar UI con respuesta del servidor explícitamente\n                // para asegurar que el indicador se actualiza correctamente\n                updateLocalApprovalStatus(applicationId, { approvedByAdvisor: true });\n                \n                // Verificar si la aplicación ya está aprobada por la empresa\n                const approvalStatus = await getApprovalStatus(applicationId);\n                console.log(\"Estado de aprobación actual:\", approvalStatus);\n                \n                // Si está aprobada por ambos, mover automáticamente a \"por_dispersar\"\n                if (approvalStatus?.approvedByCompany) {\n                  // Mostrar notificación de transición automática\n                  setAutoTransitionMessage(`La solicitud ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR] || 'Por Dispersar'}\"`);\n                  \n                  // Cambiar el estado a \"por_dispersar\" después de un breve retraso\n                  setTimeout(() => {\n                    if (onStatusChange) {\n                      onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                    }\n                    // Limpiar el mensaje después de mostrar\n                    setTimeout(() => setAutoTransitionMessage(null), 3000);\n                  }, 500);\n                }\n              } catch (error) {\n                console.error(\"❌ Error al aprobar por asesor:\", error);\n                setErrorMessage(`Error al aprobar: ${(error as Error).message}`);\n                \n                // Revertir el estado optimista en caso de error\n                // pero solo si realmente falló la aprobación\n                const appToPatch = appsWithApproval.find(app => app.id === applicationId);\n                if (appToPatch) {\n                  updateLocalApprovalStatus(applicationId, { approvedByAdvisor: false });\n                }\n              }\n            }\n          }\n          // Si se mueve de APPROVED a otro estado, quitar la aprobación\n          else if (oldStatus === APPLICATION_STATUS.APPROVED && newStatus !== APPLICATION_STATUS.POR_DISPERSAR) {\n            console.log(\"Moviendo de aprobado a otro estado, resetear aprobación de asesor\");\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByAdvisor: false\n            };\n            \n            // Actualizar en BD para quitar aprobación (nueva API)\n            if (user?.entityId && newStatus === APPLICATION_STATUS.IN_REVIEW) {\n              try {\n                console.log(\"Quitando aprobación de asesor en la base de datos\");\n                // Ejecutamos una consulta SQL para quitar la aprobación\n                const query = `\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_advisor = false, \n                      approval_date_advisor = NULL\n                  WHERE id = '${applicationId}' AND assigned_to = '${user.entityId}'\n                  RETURNING *\n                `;\n                \n                const response = await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query }),\n                });\n                \n                const result = await response.json();\n                if (result.error) {\n                  throw new Error(result.error);\n                }\n                \n                console.log(\"✅ Aprobación de asesor removida correctamente:\", result.data);\n                \n                // Registrar en historial\n                const historyQuery = `\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'in_review', 'Revisión adicional requerida', '${user.entityId}')\n                  RETURNING *\n                `;\n                \n                await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query: historyQuery }),\n                });\n                \n                // Actualizar UI explícitamente\n                updateLocalApprovalStatus(applicationId, { approvedByAdvisor: false });\n              } catch (error) {\n                console.error(\"❌ Error al quitar aprobación del asesor:\", error);\n                setErrorMessage(`Error al quitar aprobación: ${(error as Error).message}`);\n              }\n            }\n          }\n          \n          // Actualizar la app en el estado solo si no es una aprobación (ese caso ya lo manejamos arriba)\n          if (newStatus !== APPLICATION_STATUS.APPROVED) {\n            updatedApps[appIndex] = updatedApp;\n            setAppsWithApproval(updatedApps);\n          }\n          \n          // Llamar a la API para actualizar el estado\n          if (onStatusChange) {\n            try {\n              await onStatusChange(application, newStatus);\n            } catch (error) {\n          console.error(\"Error updating status:\", error);\n              setErrorMessage(`Error al actualizar el estado: ${(error as Error).message}`);\n          \n              // Revertir cambios en caso de error\n          setAppsWithApproval(prev => \n            prev.map(app => \n              app.id === applicationId\n                    ? { ...app, status: oldStatus as Application['status'], isMoving: false, targetStatus: undefined }\n                : app\n            )\n          );\n            }\n          }\n          \n          // Quitar la marca de movimiento después de un breve retraso\n          setTimeout(() => {\n      setAppsWithApproval(prev => \n        prev.map(app => \n          app.id === applicationId\n                  ? { ...app, isMoving: false, targetStatus: undefined }\n            : app\n        )\n      );\n            setProcessingAppId(null);\n          }, 500);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error in handleDrop:\", error);\n      setErrorMessage(`Error al actualizar el estado: ${(error as Error).message}`);\n      setProcessingAppId(null);\n    }\n  };\n  \n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('es-MX', {\n      style: 'currency',\n      currency: 'MXN',\n    }).format(amount);\n  };\n  \n  // Renderizar los indicadores de aprobación con mejor formato y legibilidad\n  const renderApprovalIndicators = (app: ApplicationWithApproval) => {\n    if (!app.approvalStatus) return null;\n    \n    const { approvedByAdvisor, approvedByCompany } = app.approvalStatus;\n    const hasFullApproval = approvedByAdvisor && approvedByCompany;\n    \n    return (\n      <div className=\"flex flex-col mt-1 space-y-1\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"tooltip tooltip-top flex items-center\" data-tip={approvedByAdvisor ? \"Aprobado por asesor\" : \"Pendiente de aprobación por asesor\"}>\n            <span className=\"text-xs mr-1 whitespace-nowrap\">Asesor:</span>\n            <div className={`w-3 h-3 rounded-full ${approvedByAdvisor ? 'bg-success' : 'bg-warning'}`}></div>\n            {approvedByAdvisor && (\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 ml-1 text-success\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M5 13l4 4L19 7\" />\n              </svg>\n            )}\n          </div>\n          \n          <div className=\"tooltip tooltip-top flex items-center ml-3\" data-tip={approvedByCompany ? \"Aprobado por empresa\" : \"Pendiente de aprobación por empresa\"}>\n            <span className=\"text-xs mr-1 whitespace-nowrap\">Empresa:</span>\n            <div className={`w-3 h-3 rounded-full ${approvedByCompany ? 'bg-success' : 'bg-warning'}`}></div>\n            {approvedByCompany && (\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 ml-1 text-success\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M5 13l4 4L19 7\" />\n              </svg>\n            )}\n          </div>\n        </div>\n        \n        {/* Indicador de doble aprobación */}\n        {hasFullApproval && (\n          <div className=\"w-full flex justify-center mt-1\">\n            <div className=\"badge badge-success text-xs px-2 py-1 text-white font-medium\">\n              Aprobado Total\n            </div>\n          </div>\n        )}\n        \n        {/* Botón para deshacer aprobación (solo para empresa y si está aprobado) */}\n        {isCompanyAdmin() && approvedByCompany && app.status === APPLICATION_STATUS.APPROVED && (\n          <div className=\"w-full flex justify-center mt-1\">\n            <button \n              onClick={(e) => {\n                e.stopPropagation(); // Evitar que se propague al card\n                handleDrop(e as unknown as React.DragEvent<HTMLDivElement>, APPLICATION_STATUS.IN_REVIEW);\n              }}\n              className=\"btn btn-xs btn-error w-full\"\n            >\n              Deshacer Aprobación\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  };\n  \n  // Mejorar el formato de las etiquetas de producto para mayor legibilidad\n  const getProductLabel = (type: string) => {\n    const labels: Record<string, string> = {\n      'selected_plans': 'Crédito a Plazos',\n      'product_simulations': 'Simulación',\n      'auto_loan': 'Crédito Auto',\n      'car_backed_loan': 'Crédito con Garantía',\n      'personal_loan': 'Préstamo Personal',\n      'cash_advance': 'Adelanto de Efectivo'\n    };\n    \n    return labels[type] || type;\n  };\n  \n  // Función para renderizar el producto como una etiqueta bien formateada\n  const renderProductLabel = (type: string, color: string) => {\n    return (\n      <span className={`badge badge-${color} badge-md text-xs px-3 py-1 whitespace-nowrap inline-block`}>\n        {getProductLabel(type || '')}\n      </span>\n    );\n  };\n  \n  // Función para obtener el color apropiado para la tarjeta según estado y aprobaciones\n  const getCardColor = (app: ApplicationWithApproval) => {\n    const status = app.status || '';\n    \n    // Colores específicos según el estado\n    switch (status.toLowerCase()) {\n      case APPLICATION_STATUS.REJECTED:\n        return 'border-error bg-red-50';\n      case APPLICATION_STATUS.APPROVED:\n        // Si está aprobado, verificar el estado de las aprobaciones\n        if (app.approvalStatus) {\n          const { approvedByAdvisor, approvedByCompany } = app.approvalStatus;\n          if (approvedByAdvisor && approvedByCompany) {\n            return 'border-success bg-green-100'; // Aprobado por ambos\n          } else if (approvedByAdvisor) {\n            return 'border-success bg-green-50'; // Aprobado solo por asesor\n          } else if (approvedByCompany) {\n            return 'border-info bg-blue-50'; // Aprobado solo por empresa\n          }\n        }\n        return 'border-success bg-green-50';\n      case APPLICATION_STATUS.IN_REVIEW:\n        return 'border-info bg-blue-50';\n      case APPLICATION_STATUS.NEW:\n        return 'border-warning bg-yellow-50';\n      case APPLICATION_STATUS.PENDING:\n        return 'border-warning bg-amber-50';\n      case APPLICATION_STATUS.POR_DISPERSAR:\n        return 'border-accent bg-purple-50';\n      case APPLICATION_STATUS.COMPLETED:\n        return 'border-primary bg-indigo-50';\n      case APPLICATION_STATUS.EXPIRED:\n        return 'border-error bg-red-100';\n      case APPLICATION_STATUS.CANCELLED:\n        return 'border-neutral bg-gray-100';\n      default:\n        // Si el estado no coincide con ninguno de los anteriores, usar el color de la columna\n        return `border-${app.status || 'neutral'}`;\n    }\n  };\n  \n  // Estilos personalizados para mostrar claramente cuáles tarjetas se pueden arrastrar\n  const customStyles = `\n    .custom-scrollbar::-webkit-scrollbar {\n      width: 8px;\n      height: 8px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-track {\n      background: #f1f1f1;\n      border-radius: 10px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-thumb {\n      background: #888;\n      border-radius: 10px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n      background: #555;\n    }\n    \n    .kanban-card {\n      transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out, box-shadow 0.3s ease-in-out, border-color 0.3s ease;\n      touch-action: none;\n      user-select: none;\n      will-change: transform, opacity;\n    }\n    \n    .kanban-card-draggable {\n      cursor: grab !important;\n      position: relative;\n    }\n    \n    .kanban-card-draggable:hover {\n      transform: translateY(-4px);\n      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n      border-color: #a855f7;\n      z-index: 10;\n    }\n    \n    .kanban-card-draggable:active {\n      cursor: grabbing !important;\n    }\n    \n    /* Indicator for draggable cards */\n    .kanban-card-draggable::after {\n      content: '';\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      width: 20px;\n      height: 20px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23666'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M7 11.5V14m0-2.5v-6a1.5 1.5 0 113 0m-3 6a1.5 1.5 0 00-3 0v2a7.5 7.5 0 0015 0v-5a1.5 1.5 0 013 0m-6-3V11m0-5.5v-1a1.5 1.5 0 013 0v1m0 0V11' /%3E%3C/svg%3E\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      opacity: 0.7;\n      transition: opacity 0.2s ease;\n    }\n    \n    .kanban-card-draggable:hover::after {\n      opacity: 1;\n    }\n    \n    .kanban-card-locked {\n      position: relative;\n      cursor: not-allowed !important;\n      opacity: 0.8;\n    }\n    \n    .kanban-card-locked::after {\n      content: '';\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      width: 20px;\n      height: 20px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23999'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z' /%3E%3C/svg%3E\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      opacity: 0.7;\n    }\n    \n    .kanban-card.dragging {\n      opacity: 0.8;\n      transform: scale(1.03);\n      box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n      z-index: 50;\n    }\n    \n    .kanban-column {\n      transition: all 0.2s ease;\n      border-radius: 0.75rem;\n      will-change: transform, background-color;\n    }\n    \n    .kanban-column.drag-over {\n      background-color: rgba(var(--b2, 217 217 217) / 0.5);\n      transform: scale(1.01);\n      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);\n      border: 2px dashed #a855f7 !important;\n    }\n\n    .kanban-container {\n      scroll-behavior: smooth;\n    }\n\n    @media (min-width: 768px) {\n      .kanban-card-draggable:hover {\n        transform: translateY(-4px);\n        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n      }\n    }\n    \n    /* Animaciones para cambios de estado */\n    @keyframes fadeIn {\n      0% { opacity: 0; }\n      100% { opacity: 1; }\n    }\n    \n    @keyframes slideIn {\n      0% { transform: translateY(10px); opacity: 0; }\n      100% { transform: translateY(0); opacity: 1; }\n    }\n    \n    @keyframes processingPulse {\n      0% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0.4); }\n      70% { box-shadow: 0 0 0 6px rgba(124, 58, 237, 0); }\n      100% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0); }\n    }\n    \n    .kanban-card {\n      animation: fadeIn 0.3s ease-out;\n    }\n    \n    .processing-toast {\n      position: fixed;\n      bottom: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      padding: 10px 20px;\n      background-color: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      animation: slideIn 0.3s ease-out;\n    }\n    \n    .auto-transition-toast {\n      position: fixed;\n      bottom: 70px;\n      left: 50%;\n      transform: translateX(-50%);\n      padding: 10px 20px;\n      background-color: #dcfce7;\n      border: 1px solid #86efac;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      animation: slideIn 0.3s ease-out;\n    }\n    \n    /* Pop-up tooltip con instrucciones para arrastrar */\n    .drag-instructions {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background-color: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      padding: 12px 16px;\n      z-index: 1000;\n      max-width: 300px;\n      animation: fadeIn 0.3s ease-out;\n    }\n    \n    /* Mejoras para vista mobile */\n    @media (max-width: 640px) {\n      .kanban-column {\n        min-height: 300px;\n      }\n    }\n  `;\n  \n  // Función para obtener clases draggable\n  const getDraggableClasses = (app: ApplicationWithApproval): string => {\n    // Usar la función canDragCard que está definida en el ámbito superior\n    const isDraggable = canDragCard(app) && app.id !== processingAppId;\n    return isDraggable \n      ? 'cursor-grab kanban-card-draggable' \n      : 'cursor-not-allowed opacity-80 kanban-card-locked';\n  };\n\n  // Función para definir los tooltips con información clara y precisa\n  const getDragTooltip = (app: ApplicationWithApproval): string => {\n    if (app.id === processingAppId) {\n      return \"Esta tarjeta está siendo procesada\";\n    }\n    \n    // Si la tarjeta se puede arrastrar, mostrar mensaje informativo\n    if (canDragCard(app)) {\n      return \"Arrastra para cambiar el estado\";\n    }\n    \n    // Mensajes específicos para casos donde no se puede arrastrar\n    if (app.approvalStatus?.approvedByAdvisor && app.approvalStatus?.approvedByCompany) {\n      return \"Esta solicitud ya está completamente aprobada y no puede ser movida\";\n    }\n    \n    // Asegurarse de que app.status no es undefined\n    const status = app.status || APPLICATION_STATUS.NEW;\n    \n    // Mensajes específicos según el rol y estado\n    if (isCompanyAdmin()) {\n      if (status === APPLICATION_STATUS.REJECTED) {\n        return \"Las solicitudes rechazadas solo pueden ser movidas por asesores\";\n      } else if (status === APPLICATION_STATUS.POR_DISPERSAR) {\n        return \"Esta solicitud ya está lista para dispersión y no puede regresar a estados anteriores\";\n      } else if (status === APPLICATION_STATUS.COMPLETED) {\n        return \"Esta solicitud ya está completada y no puede cambiar de estado\";\n      } else if (status === APPLICATION_STATUS.EXPIRED) {\n        return \"Esta solicitud ha expirado y no puede cambiar de estado\";\n      } else if (status === APPLICATION_STATUS.CANCELLED) {\n        return \"Esta solicitud fue cancelada y no puede cambiar de estado\";\n      }\n    }\n    \n    return \"No puedes mover esta tarjeta en este momento\";\n  };\n\n  // Efecto para mover automáticamente tarjetas con ambas aprobaciones a \"Por Dispersar\"\n  useEffect(() => {\n    const moveFullyApprovedCards = async () => {\n      // Encontrar tarjetas que tienen ambas aprobaciones pero no están en Por Dispersar\n      const fullyApprovedCards = appsWithApproval.filter(app => \n        app.approvalStatus?.approvedByAdvisor && \n        app.approvalStatus?.approvedByCompany && \n        app.status !== APPLICATION_STATUS.POR_DISPERSAR &&\n        app.status !== APPLICATION_STATUS.COMPLETED\n      );\n      \n      if (fullyApprovedCards.length > 0) {\n        console.log(`Encontradas ${fullyApprovedCards.length} tarjetas con aprobación total, moviendo a Por Dispersar...`);\n        \n        // Mover cada tarjeta a Por Dispersar\n        for (const app of fullyApprovedCards) {\n          if (onStatusChange) {\n            try {\n              console.log(`Moviendo tarjeta ${app.id} a Por Dispersar automáticamente...`);\n              await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n            } catch (error) {\n              console.error(`Error al mover tarjeta ${app.id} a Por Dispersar:`, error);\n            }\n          }\n        }\n      }\n    };\n    \n    // Ejecutar después de un breve retraso para permitir que los estados se inicialicen\n    const timer = setTimeout(() => {\n      moveFullyApprovedCards();\n    }, 2000);\n    \n    return () => clearTimeout(timer);\n  }, [appsWithApproval, onStatusChange]);\n\n  // Agregar una sincronización de estados avanzados para las aplicaciones existentes\n  useEffect(() => {\n    const syncAdvancedStatusCards = async () => {\n      if (!isCompanyAdmin() || applications.length === 0) return;\n      \n      console.log(\"Sincronizando tarjetas en estados avanzados para el administrador de empresa...\");\n      \n      // Estados avanzados que siempre deben sincronizarse entre ambas vistas\n      const advancedStatuses = [\n        APPLICATION_STATUS.POR_DISPERSAR,\n        APPLICATION_STATUS.COMPLETED,\n        APPLICATION_STATUS.EXPIRED,\n        APPLICATION_STATUS.CANCELLED,\n        APPLICATION_STATUS.REJECTED\n      ];\n      \n      // Buscar aplicaciones con ambas aprobaciones que deberían estar en Por Dispersar\n      const needsStatusUpdate = applications.filter(app => {\n        // Si la aplicación ya está en un estado avanzado, respetar ese estado\n        if (advancedStatuses.includes(app.status as APPLICATION_STATUS)) {\n          return false;\n        }\n        \n        // Verificar si tiene ambas aprobaciones\n        return app.approved_by_advisor && app.approved_by_company;\n      });\n      \n      if (needsStatusUpdate.length > 0) {\n        console.log(`Encontradas ${needsStatusUpdate.length} aplicaciones que necesitan actualización de estado:`);\n        \n        const updatedApps = [...appsWithApproval];\n        let hasChanges = false;\n        \n        for (const app of needsStatusUpdate) {\n          console.log(`- Aplicación ${app.id} con ambas aprobaciones, actualizando a Por Dispersar`);\n          \n          const index = updatedApps.findIndex(a => a.id === app.id);\n          if (index !== -1) {\n            updatedApps[index] = {\n              ...updatedApps[index],\n              status: APPLICATION_STATUS.POR_DISPERSAR\n            };\n            hasChanges = true;\n            \n            // Actualizar en la base de datos si es necesario\n            if (onStatusChange) {\n              try {\n                await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n                console.log(`✅ Estado de aplicación ${app.id} actualizado a Por Dispersar`);\n              } catch (error) {\n                console.error(`Error al actualizar estado de ${app.id}:`, error);\n              }\n            }\n          }\n        }\n        \n        if (hasChanges) {\n          console.log(\"Actualizando estado local con aplicaciones sincronizadas\");\n          setAppsWithApproval(updatedApps);\n        }\n      }\n    };\n    \n    // Ejecutar la sincronización después de cargar las aplicaciones\n    syncAdvancedStatusCards();\n  }, [applications, isCompanyAdmin, onStatusChange]);\n\n  // Mejora para sincronizar estados entre vistas del asesor y administrador de empresa\n  useEffect(() => {\n    const syncCardStatusesWithAdvisorView = () => {\n      if (!isCompanyAdmin() || applications.length === 0) return;\n      \n      // Obtener todas las aplicaciones que no están en los estados básicos de flujo de empresa\n      const applicationsWithAdvancedStatus = applications.filter(app => {\n        const isBasicStatus = [\n          APPLICATION_STATUS.NEW,\n          APPLICATION_STATUS.IN_REVIEW,\n          APPLICATION_STATUS.APPROVED\n        ].includes(app.status as APPLICATION_STATUS);\n        \n        return !isBasicStatus;\n      });\n      \n      if (applicationsWithAdvancedStatus.length > 0) {\n        console.log(`Sincronizando ${applicationsWithAdvancedStatus.length} tarjetas con estados avanzados:`);\n        \n        // Crear copia del estado actual\n        const updatedApps = [...appsWithApproval];\n        let hasChanges = false;\n        \n        // Actualizar cada aplicación para que refleje el estado real\n        applicationsWithAdvancedStatus.forEach(app => {\n          const index = updatedApps.findIndex(a => a.id === app.id);\n          \n          if (index !== -1 && updatedApps[index].status !== app.status) {\n            console.log(`- Sincronizando aplicación ${app.id} de estado '${updatedApps[index].status}' a '${app.status}'`);\n            \n            // Actualizar el estado para que coincida con el estado real\n            updatedApps[index] = {\n              ...updatedApps[index],\n              status: app.status\n            };\n            \n            hasChanges = true;\n          }\n        });\n        \n        // Actualizar el estado solo si hubo cambios\n        if (hasChanges) {\n          console.log(\"Actualizando estado local con aplicaciones sincronizadas\");\n          setAppsWithApproval(updatedApps);\n        }\n      }\n    };\n    \n    // Ejecutar la sincronización\n    syncCardStatusesWithAdvisorView();\n  }, [applications, appsWithApproval, isCompanyAdmin]);\n\n  // Agregar un nuevo useEffect para refrescar los estados de aprobación periódicamente\n  useEffect(() => {\n    // Función para refrescar los estados de aprobación desde la API\n    const refreshApprovalStatuses = async () => {\n      if (!applications || applications.length === 0) return;\n      \n      console.log(\"Refrescando estados de aprobación desde la API...\");\n      try {\n        const updatedApps = [...appsWithApproval];\n        let hasChanges = false;\n        \n        for (const app of updatedApps) {\n          // Obtener el estado de aprobación actualizado desde la API\n          const status = await getApprovalStatus(app.id);\n          \n          // Si el estado es diferente al actual, actualizarlo\n          if (status && \n              (status.approvedByAdvisor !== app.approvalStatus?.approvedByAdvisor ||\n               status.approvedByCompany !== app.approvalStatus?.approvedByCompany)) {\n            \n            console.log(`Actualización encontrada para app ${app.id}:`, {\n              actual: app.approvalStatus,\n              nuevo: status\n            });\n            \n            // Actualizar el estado de aprobación\n            app.approvalStatus = status;\n            hasChanges = true;\n            \n            // Si hay doble aprobación y no está en Por Dispersar, actualizarlo\n            if (status.approvedByAdvisor && status.approvedByCompany && \n                app.status !== APPLICATION_STATUS.POR_DISPERSAR &&\n                app.status !== APPLICATION_STATUS.COMPLETED) {\n              console.log(`Aplicación ${app.id} tiene doble aprobación, moviendo a Por Dispersar`);\n              \n              // Actualizar el estado localmente\n              app.status = APPLICATION_STATUS.POR_DISPERSAR;\n              \n              // Actualizar en la BD\n              if (onStatusChange) {\n                try {\n                  await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n                } catch (error) {\n                  console.error(`Error actualizando estado a Por Dispersar:`, error);\n                }\n              }\n            }\n          }\n        }\n        \n        // Si hubo cambios, actualizar el estado\n        if (hasChanges) {\n          console.log(\"Actualizando aplicaciones con estados de aprobación refrescados\");\n          setAppsWithApproval(updatedApps);\n        }\n      } catch (error) {\n        console.error(\"Error al refrescar estados de aprobación:\", error);\n      }\n    };\n    \n    // Refrescar los estados inicialmente y cada 10 segundos\n    refreshApprovalStatuses();\n    \n    const intervalId = setInterval(() => {\n      refreshApprovalStatuses();\n    }, 10000); // 10 segundos\n    \n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [applications, appsWithApproval, onStatusChange]);\n\n  // Mejora para funcionamiento con tarjetas existentes\n  useEffect(() => {\n    // Solo ejecutar para admin de empresa\n    if (!isCompanyAdmin() || applications.length === 0) return;\n    \n    console.log(\"Verificando y sincronizando estados de tarjetas existentes...\");\n    \n    // Encontrar tarjetas que deben mostrar el mismo estado que en la vista del asesor\n    const appsNeedingSync = applications.filter(app => {\n      // Si no está en uno de los estados básicos del flujo de admin de empresa,\n      // debe sincronizarse exactamente con la vista del asesor\n      const isBasicStatus = [\n        APPLICATION_STATUS.NEW,\n        APPLICATION_STATUS.IN_REVIEW,\n        APPLICATION_STATUS.APPROVED\n      ].includes(app.status as APPLICATION_STATUS);\n      \n      return !isBasicStatus;\n    });\n    \n    if (appsNeedingSync.length > 0) {\n      console.log(`Encontradas ${appsNeedingSync.length} tarjetas que necesitan sincronización con vista del asesor`);\n      \n      // Crear copia del estado actual\n      const updatedApps = [...appsWithApproval];\n      let hasChanges = false;\n      \n      // Para cada aplicación que necesita sincronización\n      appsNeedingSync.forEach(app => {\n        const index = updatedApps.findIndex(a => a.id === app.id);\n        \n        // Si encontramos la aplicación y su estado es diferente al que debería tener\n        if (index !== -1 && updatedApps[index].status !== app.status) {\n          console.log(`- Actualizando tarjeta ${app.id}: de '${updatedApps[index].status}' a '${app.status}'`);\n          \n          // Actualizar el estado para que coincida con el de la vista del asesor\n          updatedApps[index] = {\n            ...updatedApps[index],\n            status: app.status\n          };\n          \n          hasChanges = true;\n        }\n      });\n      \n      // Si hubo cambios, actualizar el estado\n      if (hasChanges) {\n        console.log(\"Actualizando estados para sincronizar con vista del asesor\");\n        setAppsWithApproval(updatedApps);\n      }\n    }\n  }, [applications, appsWithApproval, isCompanyAdmin]);\n\n  if (applications.length === 0) {\n    return (\n      <div className=\"bg-base-200 p-6 rounded-lg\">\n        <h3 className=\"text-xl font-medium text-center\">No hay solicitudes para mostrar</h3>\n        <p className=\"text-center text-gray-500 mt-2\">No se encontraron solicitudes en el sistema</p>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"w-full overflow-x-auto custom-scrollbar relative\">\n      <style>{customStyles}</style>\n      \n      {/* Reemplazar el overlay de carga con una notificación flotante más sutil */}\n      {processingAppId && (\n        <div className=\"processing-toast\">\n          <span className=\"loading loading-spinner loading-sm text-primary\"></span>\n          <p className=\"font-medium\">Actualizando estado...</p>\n        </div>\n      )}\n      \n      {/* Notificación para transiciones automáticas */}\n      {autoTransitionMessage && (\n        <div className=\"auto-transition-toast\">\n          <span className=\"loading loading-spinner loading-sm text-success\"></span>\n          <p className=\"font-medium\">{autoTransitionMessage}</p>\n        </div>\n      )}\n      \n      {errorMessage && (\n        <div className=\"mb-4 alert alert-error shadow-lg\">\n          <div>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"stroke-current flex-shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n            <span>{errorMessage}</span>\n          </div>\n          <div className=\"flex-none\">\n            <button className=\"btn btn-sm\" onClick={() => setErrorMessage(null)}>Cerrar</button>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 2xl:grid-cols-6 gap-4 pb-4 kanban-container p-4\" style={{ minWidth: '1000px' }}>\n        {columns.map(column => (\n          <div \n            key={column.id}\n            className={`bg-base-100 rounded-xl shadow-md border-t-4 border-${column.color} border-l border-r border-b flex flex-col h-full kanban-column`}\n            onDragOver={(e) => {\n              handleDragOver(e, column.id);\n            }}\n            onDragLeave={(e) => {\n              e.currentTarget.classList.remove('drag-over');\n            }}\n            onDrop={(e) => {\n              handleDrop(e, column.id);\n            }}\n          >\n            {/* Cabecera de columna con indicador de color */}\n            <div className={`text-center py-3 px-4 font-bold rounded-t-lg flex items-center justify-between bg-${column.color} bg-opacity-10`}>\n              <span className={`text-${column.color} font-bold text-lg`}>{column.title}</span>\n              <span className={`badge badge-${column.color} badge-lg`}>{column.applications.length}</span>\n            </div>\n            \n            <div className=\"p-3 space-y-3 min-h-[500px] max-h-[calc(100vh-220px)] overflow-y-auto custom-scrollbar flex-grow\">\n              {column.applications.length === 0 ? (\n                <div className=\"flex items-center justify-center h-full opacity-50 border-2 border-dashed border-base-300 rounded-lg p-6\">\n                  <div className=\"text-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-12 w-12 mx-auto text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                    </svg>\n                    <p className=\"text-sm mt-2\">No hay solicitudes</p>\n                  </div>\n                </div>\n              ) : (\n                column.applications.map((app, index) => {\n                  const isCardDraggable = canDragCard(app) && app.id !== processingAppId;\n                  return (\n                  <div\n                    key={app.id}\n                      data-tip={getDragTooltip(app)}\n                      className={`card shadow hover:shadow-lg transition-all ${getCardColor(app)} border-l-4 border-t border-r border-b hover:border-primary kanban-card relative ${app.id === processingAppId ? 'processing' : ''} ${app.isMoving ? 'opacity-90' : ''} ${getDraggableClasses(app)}`}\n                      draggable={isCardDraggable}\n                      onDragStart={isCardDraggable ? (e) => handleDragStart(e, app, index) : undefined}\n                      onDragEnd={isCardDraggable ? handleDragEnd : undefined}\n                    style={{\n                      animation: app.id === processingAppId ? 'processingPulse 1.5s infinite' : ''\n                    }}\n                  >\n                    <div className=\"card-body p-4\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <div className=\"flex flex-col\">\n                          <div className=\"font-semibold mb-1\">{app.client_name}</div>\n                          {renderProductLabel(app.application_type || '', column.color)}\n                        </div>\n                      </div>\n                      \n                      <div className=\"mt-1\">\n                        {/* Info de la empresa */}\n                        <div className=\"text-sm text-gray-600 mb-2 flex items-center\">\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1 inline flex-shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\" />\n                          </svg>\n                          <span className=\"truncate max-w-[180px] font-medium\">\n                            {app.company_name || \"Sin empresa\"}\n                          </span>\n                        </div>\n                        \n                        {/* Monto */}\n                        <div className=\"flex items-center mb-3\">\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1 text-primary flex-shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                          </svg>\n                          <span className=\"text-base font-bold text-primary\">\n                              {formatCurrency(app.requested_amount || 0)}\n                          </span>\n                        </div>\n                        \n                        {/* Indicadores de estado de aprobación */}\n                        {renderApprovalIndicators(app)}\n                        \n                        <div className=\"card-actions justify-end mt-3\">\n                          {/* Botón para marcar como completado/dispersado (solo para asesores y tarjetas en Por Dispersar) */}\n                          {isAdvisor() && app.status === APPLICATION_STATUS.POR_DISPERSAR && (\n                            <button \n                              onClick={(e) => {\n                                e.stopPropagation(); // Evitar navegación al detalle\n                                e.preventDefault();\n                                if (onStatusChange) {\n                                  setProcessingAppId(app.id);\n                                  onStatusChange(app, APPLICATION_STATUS.COMPLETED)\n                                    .then(() => {\n                                      setAutoTransitionMessage(`Solicitud ${app.id} marcada como Completada correctamente`);\n                                      setTimeout(() => setAutoTransitionMessage(null), 3000);\n                                    })\n                                    .catch(error => {\n                                      setErrorMessage(`Error al marcar como completado: ${error.message}`);\n                                    })\n                                    .finally(() => {\n                                      setProcessingAppId(null);\n                                    });\n                                }\n                              }}\n                              className=\"btn btn-sm btn-accent w-full mb-2\"\n                            >\n                              Marcar como Dispersado\n                            </button>\n                          )}\n                          {/* Botones de acción rápida para tarjetas según su estado */}\n                          {isAdvisor() && app.status === APPLICATION_STATUS.POR_DISPERSAR && (\n                            <button \n                              onClick={(e) => {\n                                e.stopPropagation();\n                                e.preventDefault();\n                                if (onStatusChange && !processingAppId) {\n                                  setProcessingAppId(app.id);\n                                  onStatusChange(app, APPLICATION_STATUS.COMPLETED)\n                                    .then(() => {\n                                      setAutoTransitionMessage(`Solicitud marcada como Completada`);\n                                      setTimeout(() => setAutoTransitionMessage(null), 3000);\n                                    })\n                                    .catch(error => {\n                                      console.error(\"Error al marcar como completado:\", error);\n                                    })\n                                    .finally(() => {\n                                      setTimeout(() => setProcessingAppId(null), 500);\n                                    });\n                                }\n                              }}\n                              className=\"btn btn-xs btn-primary w-full mt-2\"\n                            >\n                              Marcar como Completado\n                            </button>\n                          )}\n                          \n                          {/* Botón para mover a Por Dispersar cuando hay ambas aprobaciones pero no está en ese estado */}\n                          {isAdvisor() && \n                           app.approvalStatus?.approvedByAdvisor && \n                           app.approvalStatus?.approvedByCompany && \n                           app.status !== APPLICATION_STATUS.POR_DISPERSAR &&\n                           app.status !== APPLICATION_STATUS.COMPLETED && (\n                            <button \n                              onClick={(e) => {\n                                e.stopPropagation();\n                                e.preventDefault();\n                                if (onStatusChange && !processingAppId) {\n                                  setProcessingAppId(app.id);\n                                  onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR)\n                                    .then(() => {\n                                      setAutoTransitionMessage(`Solicitud movida a Por Dispersar`);\n                                      setTimeout(() => setAutoTransitionMessage(null), 3000);\n                                    })\n                                    .catch(error => {\n                                      console.error(\"Error al mover a Por Dispersar:\", error);\n                                    })\n                                    .finally(() => {\n                                      setTimeout(() => setProcessingAppId(null), 500);\n                                    });\n                                }\n                              }}\n                              className=\"btn btn-xs btn-accent w-full mt-2\"\n                            >\n                              Mover a Por Dispersar\n                            </button>\n                          )}\n                          <Link to={`/applications/${app.id}`} className=\"btn btn-sm btn-primary w-full\">\n                            Ver Detalle\n                          </Link>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  );\n                })\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default KanbanBoard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}