{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/contexts/NotificationContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { useAuth } from './AuthContext';\nimport NotificationPopup from '../components/ui/NotificationPopup';\n\n// Generate a proper UUID for notification IDs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateUUID() {\n  // Use a more standard implementation for UUID v4\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\n// For test notifications, use a valid UUID format - don't use app-timestamp\nfunction getTestApplicationId() {\n  // Use a small set of real UUIDs as sample application IDs\n  const sampleIds = ['110cc76a-1762-4df4-840e-a503fea9d7aa', '220cc76a-1762-4df4-840e-a503fea9d7bb', '330cc76a-1762-4df4-840e-a503fea9d7cc', '440cc76a-1762-4df4-840e-a503fea9d7dd', '550cc76a-1762-4df4-840e-a503fea9d7ee'];\n\n  // Pick a random ID from the sample list\n  return sampleIds[Math.floor(Math.random() * sampleIds.length)];\n}\n\n// Enum for notification types\nexport let NotificationType = /*#__PURE__*/function (NotificationType) {\n  NotificationType[\"INFO\"] = \"info\";\n  NotificationType[\"SUCCESS\"] = \"success\";\n  NotificationType[\"WARNING\"] = \"warning\";\n  NotificationType[\"ERROR\"] = \"error\";\n  NotificationType[\"NEW_APPLICATION\"] = \"new_application\";\n  NotificationType[\"APPROVAL_REQUIRED\"] = \"approval_required\";\n  NotificationType[\"NEW_MESSAGE\"] = \"new_message\";\n  NotificationType[\"APPLICATION_STATUS_UPDATED\"] = \"application_status_updated\";\n  NotificationType[\"APPLICATION_COMMENT\"] = \"application_comment\";\n  return NotificationType;\n}({});\n\n// Interfaces\n\nexport const NotificationContext = /*#__PURE__*/createContext(undefined);\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\n// Utilidad para manejar errores de forma segura y siempre devolver strings\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst handleErrorSafely = error => {\n  console.error('Error en NotificationContext:', error);\n\n  // Convertir el error a string de forma segura\n  if (error instanceof Error) {\n    return error.message;\n  } else if (typeof error === 'string') {\n    return error;\n  } else {\n    return 'Ocurrió un error desconocido';\n  }\n};\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user\n  } = useAuth();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n\n  // Estado para la notificación emergente actual\n  const [currentPopup, setCurrentPopup] = useState(null);\n\n  // Referencia al ID del polling interval\n  const pollingIntervalRef = useRef(null);\n\n  // State to keep track of already notified application IDs with timestamps\n  // This helps prevent showing the same notification multiple times\n  const [notifiedApplications, setNotifiedApplications] = useState(new Map());\n\n  // Referencia para evitar múltiples ejecuciones simultáneas\n  const checkingRef = useRef(false);\n\n  // Reference to the latest known notification time\n  const lastNotificationTimeRef = useRef(new Date());\n\n  // Avoid duplicate notifications by ensuring we have a minimum interval between checks\n  const lastCheckTimeRef = useRef(new Date());\n\n  // Efecto para manejar la carga inicial de notificaciones y configurar el polling\n  useEffect(() => {\n    if (user) {\n      // Cargar notificaciones al inicio\n      loadNotifications();\n\n      // Cargar aplicaciones ya notificadas desde localStorage\n      try {\n        const storedNotifications = localStorage.getItem('notified_application_ids');\n        if (storedNotifications) {\n          const parsedData = JSON.parse(storedNotifications);\n\n          // Handle both old format (array) and new format (object with timestamps)\n          if (Array.isArray(parsedData)) {\n            // Old format - convert to new Map with current timestamp\n            const notifiedMap = new Map();\n            const now = Date.now();\n            parsedData.forEach(id => {\n              notifiedMap.set(id, now);\n            });\n            setNotifiedApplications(notifiedMap);\n            // Re-save with the new format\n            saveNotifiedApplications(notifiedMap);\n            console.log(`Converted ${notifiedMap.size} notified application IDs from old format to new format`);\n          } else if (typeof parsedData === 'object') {\n            // New format - convert object to Map\n            const notifiedMap = new Map();\n            Object.entries(parsedData).forEach(([id, timestamp]) => {\n              notifiedMap.set(id, timestamp);\n            });\n            setNotifiedApplications(notifiedMap);\n            console.log(`Loaded ${notifiedMap.size} notified application IDs from localStorage`);\n          }\n        } else {\n          console.log('No previously notified applications found in localStorage');\n        }\n\n        // Limpiar notificaciones antiguas (más de 48 horas)\n        cleanupOldNotifications();\n      } catch (error) {\n        console.error('Error loading notified applications:', error);\n        // Reset if there's an error\n        setNotifiedApplications(new Map());\n      }\n\n      // Set the initial last check time to now\n      lastCheckTimeRef.current = new Date();\n      // Set the initial last notification time to 10 seconds ago to avoid immediate checks\n      lastNotificationTimeRef.current = new Date(Date.now() - 10000);\n\n      // Wait 5 seconds before first check to ensure UI is fully loaded\n      const initialCheckTimeout = setTimeout(() => {\n        // Primero obtenemos la fecha de la última aplicación para inicializar el sistema\n        initializeWithLastApplicationTimestamp();\n\n        // Configurar polling para verificar nuevas notificaciones cada 30 seconds\n        // Utilizamos un intervalo más corto para estar más atentos a nuevas solicitudes\n        pollingIntervalRef.current = setInterval(() => {\n          const now = new Date();\n          const timeSinceLastCheck = now.getTime() - lastCheckTimeRef.current.getTime();\n          const timeSinceLastNotification = now.getTime() - lastNotificationTimeRef.current.getTime();\n\n          // Only check if:\n          // 1. It's been at least 15 seconds since last check AND\n          // 2. It's been at least 5 seconds since showing a notification\n          if (timeSinceLastCheck > 15000 && timeSinceLastNotification > 5000) {\n            checkForNewNotifications();\n          } else {\n            console.log(`Skipping notification check (last check: ${(timeSinceLastCheck / 1000).toFixed(1)}s ago, last notification: ${(timeSinceLastNotification / 1000).toFixed(1)}s ago)`);\n          }\n        }, 20000);\n      }, 5000);\n\n      // Limpiar el intervalo cuando el componente se desmonte\n      return () => {\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n        }\n        clearTimeout(initialCheckTimeout);\n      };\n    }\n  }, [user]);\n\n  // Inicializar con el timestamp de la última aplicación\n  const initializeWithLastApplicationTimestamp = async () => {\n    try {\n      // Obtener la última aplicación para usarla como referencia inicial\n      const response = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: `\n            SELECT id, created_at, application_type, client_name, company_name, status, amount\n            FROM applications \n            ORDER BY created_at DESC\n            LIMIT 1\n          `\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error querying most recent application');\n      }\n      const data = await response.json();\n      if (data.data && data.data.length > 0) {\n        const lastApp = data.data[0];\n        const lastAppId = lastApp.id;\n        const lastAppCreatedAt = new Date(lastApp.created_at);\n        console.log(`System initialized with reference to last application: ${lastAppId} created at ${lastAppCreatedAt.toISOString()}`);\n\n        // Marcar la aplicación más reciente como ya notificada para evitar duplicados al inicio\n        if (!notifiedApplications.has(lastAppId)) {\n          const appMetadata = {\n            notifiedAt: new Date().toISOString(),\n            notificationType: 'initialization',\n            applicationType: lastApp.application_type,\n            amount: lastApp.amount,\n            clientName: lastApp.client_name,\n            companyName: lastApp.company_name,\n            status: lastApp.status\n          };\n          markApplicationAsNotified(lastAppId, lastApp.created_at, appMetadata);\n        }\n      }\n\n      // Realizar la primera verificación de notificaciones\n      checkForNewNotifications();\n    } catch (error) {\n      console.error('Error initializing with last application timestamp:', error);\n      // Si falla, aún intentamos la primera verificación\n      checkForNewNotifications();\n    }\n  };\n\n  // Cálculo de notificaciones no leídas\n  useEffect(() => {\n    const count = notifications.filter(notification => !notification.read).length;\n    setUnreadCount(count);\n  }, [notifications]);\n\n  // Cargar notificaciones del almacenamiento local o del servidor\n  const loadNotifications = async () => {\n    try {\n      // En un escenario real, aquí se cargarían las notificaciones del servidor\n      // Por ahora, usaremos el localStorage como ejemplo\n      const storedNotifications = localStorage.getItem('notifications');\n      if (storedNotifications) {\n        const parsed = JSON.parse(storedNotifications);\n        setNotifications(parsed.map(n => ({\n          ...n,\n          createdAt: new Date(n.createdAt)\n        })));\n      }\n    } catch (error) {\n      console.error('Error loading notifications:', error);\n    }\n  };\n\n  // Save notified applications with timestamps to localStorage\n  const saveNotifiedApplications = notifiedMap => {\n    try {\n      // Convert Map to object for storage\n      const notifiedObject = {};\n      notifiedMap.forEach((timestamp, id) => {\n        notifiedObject[id] = timestamp;\n      });\n      localStorage.setItem('notified_application_ids', JSON.stringify(notifiedObject));\n      console.log(`Saved ${notifiedMap.size} notified application IDs to localStorage`);\n    } catch (error) {\n      console.error('Error saving notified applications:', error);\n    }\n  };\n\n  // Función para limpiar notificaciones antiguas\n  const cleanupOldNotifications = () => {\n    try {\n      const now = Date.now();\n      const twentyFourHoursAgo = now - 24 * 60 * 60 * 1000; // 24 horas en milisegundos\n\n      let totalCount = 0;\n      let cleanedCount = 0;\n\n      // Crear un nuevo mapa para guardar solo las notificaciones más recientes\n      const updatedNotifications = new Map();\n      notifiedApplications.forEach((timestamp, id) => {\n        totalCount++;\n        if (timestamp > twentyFourHoursAgo) {\n          // Mantener solo las notificaciones de las últimas 24 horas\n          updatedNotifications.set(id, timestamp);\n        } else {\n          cleanedCount++;\n        }\n      });\n      if (cleanedCount > 0) {\n        console.log(`Cleaned up ${cleanedCount} old notification records (${totalCount - cleanedCount} retained)`);\n        setNotifiedApplications(updatedNotifications);\n        saveNotifiedApplications(updatedNotifications);\n      } else if (totalCount > 0) {\n        console.log(`No old notifications to clean up (${totalCount} notifications are all within 24 hours)`);\n      }\n    } catch (error) {\n      console.error('Error cleaning up old notifications:', error);\n    }\n  };\n\n  // Marcar una aplicación como notificada\n  const markApplicationAsNotified = (applicationId, createdTimestamp, metadata) => {\n    // Check if already marked as notified\n    if (notifiedApplications.has(applicationId)) {\n      console.log(`Application ${applicationId} already marked as notified (duplicate protection)`);\n      return; // Already notified, don't do anything\n    }\n    try {\n      let notificationTime;\n\n      // If createdTimestamp is provided, use it to set notification time just after creation\n      if (createdTimestamp) {\n        try {\n          // Try to parse the creation timestamp\n          const creationTime = new Date(createdTimestamp);\n          // Set notification time 1 second after creation to ensure proper ordering\n          notificationTime = creationTime.getTime() + 1000;\n          console.log(`Using application creation time for notification: ${creationTime.toISOString()}`);\n        } catch (error) {\n          // If parsing fails, use current time as fallback\n          console.warn(`Error parsing creation timestamp \"${createdTimestamp}\":`, error);\n          notificationTime = Date.now();\n        }\n      } else {\n        // If no timestamp provided, use current time\n        notificationTime = Date.now();\n      }\n\n      // Crear un objeto de metadatos para esta aplicación si no se proporcionó uno\n      const appMetadata = metadata || {\n        notifiedAt: new Date(notificationTime).toISOString(),\n        notificationType: 'application'\n      };\n\n      // Save to the notified applications map\n      const updatedMap = new Map(notifiedApplications);\n      updatedMap.set(applicationId, notificationTime);\n      setNotifiedApplications(updatedMap);\n\n      // Guardar también los metadatos si es necesario para futuras optimizaciones\n      try {\n        const metadataKey = `notification_metadata_${applicationId}`;\n        localStorage.setItem(metadataKey, JSON.stringify(appMetadata));\n      } catch (error) {\n        console.warn('Error saving notification metadata:', error);\n      }\n\n      // Save to localStorage\n      saveNotifiedApplications(updatedMap);\n\n      // Update last notification time\n      lastNotificationTimeRef.current = new Date();\n      console.log(`Marked application ${applicationId} as notified at ${new Date(notificationTime).toISOString()}`);\n    } catch (error) {\n      console.error('Error marking application as notified:', error);\n    }\n  };\n\n  // Función para obtener la consulta SQL optimizada según el tipo de aplicación más reciente\n  const getOptimizedQuery = async () => {\n    try {\n      // Primero, verificar el tipo de la aplicación más reciente para optimizar la consulta\n      const typeCheckResponse = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: `\n            SELECT application_type\n            FROM applications \n            ORDER BY created_at DESC\n            LIMIT 1\n          `\n        })\n      });\n      if (!typeCheckResponse.ok) {\n        console.warn('Error checking latest application type, using default query');\n        return getDefaultQuery();\n      }\n      const typeData = await typeCheckResponse.json();\n      if (!typeData.data || typeData.data.length === 0) {\n        console.log('No applications found, using default query');\n        return getDefaultQuery();\n      }\n      const latestType = typeData.data[0].application_type;\n      console.log(`Latest application type: ${latestType}`);\n\n      // Personalizar los campos según el tipo de aplicación\n      let additionalFields = '';\n      switch (latestType) {\n        case 'selected_plans':\n          // Para planes seleccionados, necesitamos plazo, tasa y pago mensual\n          additionalFields = '';\n          break;\n        case 'product_simulations':\n          // Para simulaciones, podríamos necesitar campos específicos del producto\n          additionalFields = '';\n          break;\n        case 'cash_requests':\n          // Para solicitudes de efectivo\n          additionalFields = '';\n          break;\n        case 'car_backed_loan_applications':\n        case 'auto_loan_applications':\n          // Para préstamos de auto, podríamos necesitar datos del vehículo\n          additionalFields = '';\n          break;\n        default:\n          additionalFields = '';\n      }\n\n      // Construir consulta con base en el tipo\n      return `\n        SELECT id, client_name, application_type, company_name, created_at, status, \n               amount, term, interest_rate, monthly_payment, client_email, client_phone ${additionalFields}\n        FROM applications \n        WHERE created_at > NOW() - INTERVAL '30 seconds'\n        ORDER BY created_at DESC\n        LIMIT 5\n      `;\n    } catch (error) {\n      console.error('Error building optimized query:', error);\n      return getDefaultQuery();\n    }\n  };\n\n  // Consulta predeterminada con campos básicos\n  const getDefaultQuery = () => {\n    return `\n      SELECT id, client_name, application_type, company_name, created_at, status, \n             amount, term, interest_rate, monthly_payment, client_email, client_phone\n      FROM applications \n      WHERE created_at > NOW() - INTERVAL '30 seconds'\n      ORDER BY created_at DESC\n      LIMIT 5\n    `;\n  };\n  const checkForNewNotifications = async () => {\n    // Record the check time immediately to prevent race conditions\n    lastCheckTimeRef.current = new Date();\n\n    // Avoid multiple executions at the same time\n    if (checkingRef.current) {\n      console.log('Already checking for notifications');\n      return;\n    }\n\n    // Make sure we don't have any lingering popups\n    clearPopups();\n\n    // Sincronizar con localStorage antes de verificar para evitar duplicados\n    try {\n      const storedNotifications = localStorage.getItem('notified_application_ids');\n      if (storedNotifications) {\n        const parsedData = JSON.parse(storedNotifications);\n        if (typeof parsedData === 'object' && !Array.isArray(parsedData)) {\n          // Fusionar con las notificaciones actuales\n          const updatedMap = new Map(notifiedApplications);\n          let hasChanges = false;\n          Object.entries(parsedData).forEach(([id, timestamp]) => {\n            if (!updatedMap.has(id)) {\n              updatedMap.set(id, timestamp);\n              hasChanges = true;\n            }\n          });\n          if (hasChanges) {\n            console.log('Synchronized notification IDs from localStorage before checking');\n            setNotifiedApplications(updatedMap);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error synchronizing notifications from localStorage:', error);\n    }\n    checkingRef.current = true;\n    console.log('Checking for new notifications...');\n    try {\n      // Convert notified IDs Map to array for logging\n      const notifiedIdsArray = Array.from(notifiedApplications.keys());\n      console.log(`${notifiedIdsArray.length} already notified application IDs: ${notifiedIdsArray.join(', ').substring(0, 200)}${notifiedIdsArray.length > 5 ? '...' : ''}`);\n\n      // Obtener consulta optimizada según tipo de aplicación\n      const optimizedQuery = await getOptimizedQuery();\n      console.log('Using optimized query for latest application type');\n      const response = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: optimizedQuery\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error querying recent applications');\n      }\n      const data = await response.json();\n\n      // If there are applications, filter them first and then show notification\n      if (data.data && data.data.length > 0) {\n        console.log(`Received ${data.data.length} applications from the last 30 seconds`);\n\n        // Filter out any applications that have already been notified\n        const newApps = data.data.filter(app => {\n          const isAlreadyNotified = notifiedApplications.has(app.id);\n          if (isAlreadyNotified) {\n            console.log(`Skipping already notified application: ${app.id}`);\n            return false;\n          }\n\n          // Convertir el timestamp de la aplicación a Date para comparar\n          const appCreatedAt = new Date(app.created_at);\n\n          // Si la aplicación es de hace más de 60 segundos, no notificar\n          const isTooOld = new Date().getTime() - appCreatedAt.getTime() > 60000;\n          if (isTooOld) {\n            console.log(`Skipping too old application: ${app.id} created at ${appCreatedAt.toISOString()}`);\n            // Marcar como notificada para evitar mostrarla en futuras verificaciones\n            const appMetadata = {\n              notifiedAt: new Date().toISOString(),\n              notificationType: 'application',\n              applicationType: app.application_type,\n              amount: app.amount,\n              clientName: app.client_name,\n              companyName: app.company_name,\n              status: app.status\n            };\n            markApplicationAsNotified(app.id, app.created_at, appMetadata);\n            return false;\n          }\n          return true;\n        });\n        console.log(`Found ${newApps.length} new applications after filtering`);\n        if (newApps.length === 0) {\n          console.log('No truly new applications found (already notified or too old)');\n          checkingRef.current = false;\n          return;\n        }\n\n        // Take only the first new application to show\n        const newApp = newApps[0];\n        const appId = newApp.id;\n\n        // Verificar si ya está en proceso de notificación (para evitar doble notificación)\n        if (currentPopup && currentPopup.relatedItemId === appId) {\n          console.log(`Already showing notification for application ${appId} - skipping`);\n          checkingRef.current = false;\n          return;\n        }\n        console.log(`New application detected: ${appId} (created ${new Date(newApp.created_at).toISOString()})`);\n\n        // IMPORTANT: Mark as notified IMMEDIATELY to prevent duplicates\n        // even if processing fails later\n        const appMetadata = {\n          notifiedAt: new Date().toISOString(),\n          notificationType: 'application',\n          applicationType: newApp.application_type,\n          amount: newApp.amount,\n          clientName: newApp.client_name,\n          companyName: newApp.company_name,\n          status: newApp.status\n        };\n        markApplicationAsNotified(appId, newApp.created_at, appMetadata);\n\n        // Format data for notification\n        const createdAt = new Date(newApp.created_at);\n        const formattedDate = new Intl.DateTimeFormat('es-MX', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric'\n        }).format(createdAt);\n        const formattedTime = new Intl.DateTimeFormat('es-MX', {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: true\n        }).format(createdAt);\n\n        // Format amount with thousands separator and 2 decimals\n        const formattedAmount = new Intl.NumberFormat('es-MX', {\n          style: 'currency',\n          currency: 'MXN',\n          minimumFractionDigits: 2\n        }).format(Number(newApp.amount || 0));\n\n        // Format interest rate with percentage\n        const formattedRate = newApp.interest_rate !== null && newApp.interest_rate !== undefined ? `${newApp.interest_rate}%` : \"N/A\";\n\n        // Format monthly payment\n        const formattedMonthly = newApp.monthly_payment !== null && newApp.monthly_payment !== undefined ? new Intl.NumberFormat('es-MX', {\n          style: 'currency',\n          currency: 'MXN',\n          minimumFractionDigits: 2\n        }).format(Number(newApp.monthly_payment)) : \"N/A\";\n\n        // Transform application type to a more readable format\n        let appType = 'No especificado';\n        if (newApp.application_type) {\n          // Remove any trailing slash if it exists\n          const cleanType = newApp.application_type.replace(/\\/$/, '');\n          if (cleanType === 'selected_plans') {\n            appType = 'Planes seleccionados';\n          } else if (cleanType === 'product_simulations') {\n            appType = 'Simulación de producto';\n          } else if (cleanType === 'cash_requests') {\n            appType = 'Solicitud de efectivo';\n          } else if (cleanType === 'car_backed_loan_applications') {\n            appType = 'Préstamo con garantía de auto';\n          } else if (cleanType === 'auto_loan_applications') {\n            appType = 'Préstamo para auto';\n          } else {\n            appType = cleanType.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n          }\n        }\n\n        // Adaptar la información según el tipo de aplicación\n        const getApplicationSpecificHtml = (appType, app) => {\n          // Base de los campos comunes para todos los tipos\n          const commonFields = `\n            <div class=\"font-semibold text-gray-700\">Cliente:</div>\n            <div class=\"text-gray-900\">${app.client_name || 'Sin nombre'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Empresa:</div>\n            <div class=\"text-gray-900\">${app.company_name || 'No especificada'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Tipo:</div>\n            <div class=\"text-gray-900\">${appType}</div>\n          `;\n\n          // Campos específicos según el tipo de aplicación\n          let specificFields = '';\n\n          // Planes seleccionados - enfatizar plazo, tasa, pago mensual\n          if (app.application_type === 'selected_plans') {\n            specificFields = `\n              <div class=\"font-semibold text-gray-700\">Monto:</div>\n              <div class=\"text-gray-900\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term || 'N/A'} ${app.term === 1 ? 'mes' : 'meses'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Pago mensual:</div>\n              <div class=\"text-gray-900\">${formattedMonthly}</div>\n            `;\n          }\n          // Simulación de producto - enfatizar tipo de producto y monto total\n          else if (app.application_type === 'product_simulations') {\n            specificFields = `\n              <div class=\"font-semibold text-gray-700\">Monto:</div>\n              <div class=\"text-gray-900 font-bold\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term && app.term > 0 ? app.term + (app.term === 1 ? ' mes' : ' meses') : 'N/A'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n            `;\n          }\n          // Solicitudes de efectivo - enfatizar monto solicitado\n          else if (app.application_type === 'cash_requests') {\n            specificFields = `\n              <div class=\"font-semibold text-gray-700\">Monto solicitado:</div>\n              <div class=\"text-gray-900 font-bold\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term && app.term > 0 ? app.term + (app.term === 1 ? ' mes' : ' meses') : 'N/A'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n            `;\n          }\n          // Préstamos relacionados con autos\n          else if (app.application_type === 'car_backed_loan_applications' || app.application_type === 'auto_loan_applications') {\n            specificFields = `\n              <div class=\"font-semibold text-gray-700\">Monto del préstamo:</div>\n              <div class=\"text-gray-900 font-bold\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term && app.term > 0 ? app.term + (app.term === 1 ? ' mes' : ' meses') : 'N/A'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Pago mensual:</div>\n              <div class=\"text-gray-900\">${formattedMonthly}</div>\n            `;\n          }\n          // Para cualquier otro tipo\n          else {\n            specificFields = `\n              <div class=\"font-semibold text-gray-700\">Monto:</div>\n              <div class=\"text-gray-900\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term && app.term > 0 ? app.term + (app.term === 1 ? ' mes' : ' meses') : 'N/A'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Pago mensual:</div>\n              <div class=\"text-gray-900\">${formattedMonthly}</div>\n            `;\n          }\n\n          // Contacto y fecha - comunes para todos\n          const contactFields = `\n            <div class=\"font-semibold text-gray-700\">Email:</div>\n            <div class=\"text-gray-900\">${app.client_email || 'No especificado'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Teléfono:</div>\n            <div class=\"text-gray-900\">${app.client_phone || 'No especificado'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Fecha:</div>\n            <div class=\"text-gray-900\">${formattedDate} ${formattedTime}</div>\n          `;\n          return `\n            <div class=\"grid grid-cols-2 gap-2 text-sm mt-2\">\n              ${commonFields}\n              ${specificFields}\n              ${contactFields}\n            </div>\n          `;\n        };\n\n        // Obtener el HTML específico según el tipo de aplicación\n        const detailedMessage = getApplicationSpecificHtml(appType, newApp);\n        const notificationTitle = '💼 Nueva solicitud recibida';\n\n        // Create the notification for the panel\n        const newNotification = {\n          title: notificationTitle,\n          message: `Cliente: ${newApp.client_name || 'Sin nombre'} - ${newApp.company_name || 'Empresa no especificada'}`,\n          type: NotificationType.NEW_APPLICATION,\n          relatedItemType: 'application',\n          relatedItemId: appId\n        };\n\n        // Add the notification to the panel\n        addNotification(newNotification);\n\n        // Show popup with complete details\n        showPopup({\n          title: notificationTitle,\n          message: detailedMessage,\n          type: NotificationType.NEW_APPLICATION,\n          playSound: soundEnabled,\n          soundType: 'notification',\n          duration: 10000,\n          // 10 seconds\n          customSound: '/sounds/clean-notification.mp3',\n          centerScreen: true,\n          relatedItemId: appId\n        });\n\n        // Update last notification time to avoid duplicates\n        lastNotificationTimeRef.current = new Date();\n      } else {\n        console.log('No new applications found in the last 30 seconds');\n      }\n    } catch (error) {\n      console.error('Error checking for new notifications:', error);\n    } finally {\n      // Always mark as not running regardless of the result\n      checkingRef.current = false;\n    }\n  };\n\n  // Añadir una nueva notificación\n  const addNotification = notification => {\n    const newNotification = {\n      ...notification,\n      // Using a proper UUID for the notification ID\n      id: generateUUID(),\n      createdAt: new Date(),\n      read: false,\n      timestamp: new Date()\n    };\n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Guardar en localStorage (en producción esto iría al servidor)\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar una notificación como leída\n  const markAsRead = id => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => notification.id === id ? {\n        ...notification,\n        read: true,\n        isRead: true\n      } : notification);\n\n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar todas las notificaciones como leídas\n  const markAllAsRead = () => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => ({\n        ...notification,\n        read: true,\n        isRead: true\n      }));\n\n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Limpiar todas las notificaciones\n  const clearNotifications = () => {\n    setNotifications([]);\n    // Limpiar del localStorage\n    localStorage.setItem('notifications', JSON.stringify([]));\n  };\n\n  // Mostrar una notificación emergente\n  const showPopup = config => {\n    // Verificar si ya hay un popup con el mismo título y mensaje o mismo ID relacionado (posible duplicado)\n    if (currentPopup && (currentPopup.title === config.title && currentPopup.message === config.message || config.relatedItemId && currentPopup.relatedItemId === config.relatedItemId)) {\n      console.log(`Ignoring duplicate popup: ${config.relatedItemId || 'unknown ID'}`);\n      return;\n    }\n\n    // Clear any existing popups to prevent stacking\n    clearPopups();\n\n    // Log what we're showing\n    console.log(`Showing popup: ${config.title} ${config.relatedItemId ? `(ID: ${config.relatedItemId})` : ''}`);\n\n    // Short timeout to ensure DOM updates before showing the new popup\n    setTimeout(() => {\n      setCurrentPopup(config);\n\n      // Automatically close popup after the specified duration\n      setTimeout(() => {\n        setCurrentPopup(null);\n      }, config.duration || 5000);\n    }, 50);\n  };\n\n  // Clear any pending popups\n  const clearPopups = () => {\n    if (currentPopup) {\n      console.log('Clearing existing popup');\n      setCurrentPopup(null);\n    }\n  };\n\n  // Activar/desactivar sonidos de notificación\n  const toggleSound = () => {\n    const newValue = !soundEnabled;\n    setSoundEnabled(newValue);\n    // Guardar preferencia en localStorage\n    localStorage.setItem('notification_sound_enabled', newValue.toString());\n  };\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    showPopup,\n    soundEnabled,\n    toggleSound,\n    setSoundEnabled\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: [children, currentPopup && /*#__PURE__*/_jsxDEV(NotificationPopup, {\n      title: currentPopup.title,\n      message: currentPopup.message,\n      type: currentPopup.type,\n      duration: currentPopup.duration,\n      playSound: currentPopup.playSound,\n      soundType: currentPopup.soundType,\n      customSound: currentPopup.customSound,\n      onClose: () => setCurrentPopup(null),\n      centerScreen: currentPopup.centerScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 956,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 953,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"761ZEwnDqoPaVf275MjxyO3vdG8=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","useAuth","NotificationPopup","jsxDEV","_jsxDEV","generateUUID","replace","c","r","Math","random","v","toString","getTestApplicationId","sampleIds","floor","length","NotificationType","NotificationContext","undefined","useNotifications","_s","context","Error","handleErrorSafely","error","console","message","NotificationProvider","children","_s2","user","notifications","setNotifications","unreadCount","setUnreadCount","soundEnabled","setSoundEnabled","currentPopup","setCurrentPopup","pollingIntervalRef","notifiedApplications","setNotifiedApplications","Map","checkingRef","lastNotificationTimeRef","Date","lastCheckTimeRef","loadNotifications","storedNotifications","localStorage","getItem","parsedData","JSON","parse","Array","isArray","notifiedMap","now","forEach","id","set","saveNotifiedApplications","log","size","Object","entries","timestamp","cleanupOldNotifications","current","initialCheckTimeout","setTimeout","initializeWithLastApplicationTimestamp","setInterval","timeSinceLastCheck","getTime","timeSinceLastNotification","checkForNewNotifications","toFixed","clearInterval","clearTimeout","response","fetch","method","headers","body","stringify","query","ok","data","json","lastApp","lastAppId","lastAppCreatedAt","created_at","toISOString","has","appMetadata","notifiedAt","notificationType","applicationType","application_type","amount","clientName","client_name","companyName","company_name","status","markApplicationAsNotified","count","filter","notification","read","parsed","map","n","createdAt","notifiedObject","setItem","twentyFourHoursAgo","totalCount","cleanedCount","updatedNotifications","applicationId","createdTimestamp","metadata","notificationTime","creationTime","warn","updatedMap","metadataKey","getOptimizedQuery","typeCheckResponse","getDefaultQuery","typeData","latestType","additionalFields","clearPopups","hasChanges","notifiedIdsArray","from","keys","join","substring","optimizedQuery","newApps","app","isAlreadyNotified","appCreatedAt","isTooOld","newApp","appId","relatedItemId","formattedDate","Intl","DateTimeFormat","day","month","year","format","formattedTime","hour","minute","hour12","formattedAmount","NumberFormat","style","currency","minimumFractionDigits","Number","formattedRate","interest_rate","formattedMonthly","monthly_payment","appType","cleanType","split","word","charAt","toUpperCase","slice","getApplicationSpecificHtml","commonFields","specificFields","term","contactFields","client_email","client_phone","detailedMessage","notificationTitle","newNotification","title","type","NEW_APPLICATION","relatedItemType","addNotification","showPopup","playSound","soundType","duration","customSound","centerScreen","prev","updated","markAsRead","isRead","markAllAsRead","clearNotifications","config","toggleSound","newValue","value","Provider","onClose","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { useAuth } from './AuthContext';\nimport NotificationPopup from '../components/ui/NotificationPopup';\n\n// Generate a proper UUID for notification IDs\nfunction generateUUID() {\n  // Use a more standard implementation for UUID v4\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n// For test notifications, use a valid UUID format - don't use app-timestamp\nfunction getTestApplicationId() {\n  // Use a small set of real UUIDs as sample application IDs\n  const sampleIds = [\n    '110cc76a-1762-4df4-840e-a503fea9d7aa',\n    '220cc76a-1762-4df4-840e-a503fea9d7bb',\n    '330cc76a-1762-4df4-840e-a503fea9d7cc',\n    '440cc76a-1762-4df4-840e-a503fea9d7dd',\n    '550cc76a-1762-4df4-840e-a503fea9d7ee'\n  ];\n  \n  // Pick a random ID from the sample list\n  return sampleIds[Math.floor(Math.random() * sampleIds.length)];\n}\n\n// Enum for notification types\nexport enum NotificationType {\n  INFO = 'info',\n  SUCCESS = 'success',\n  WARNING = 'warning',\n  ERROR = 'error',\n  NEW_APPLICATION = 'new_application',\n  APPROVAL_REQUIRED = 'approval_required',\n  NEW_MESSAGE = 'new_message',\n  APPLICATION_STATUS_UPDATED = 'application_status_updated',\n  APPLICATION_COMMENT = 'application_comment',\n}\n\n// Interfaces\ninterface Notification {\n  id: string;\n  title: string;\n  message: string;\n  createdAt: Date;\n  read: boolean;\n  type: NotificationType | 'info' | 'success' | 'warning' | 'error';\n  relatedItemId?: string;\n  relatedItemType?: string;\n  data?: any;\n  timestamp?: Date;\n  isRead?: boolean;\n}\n\ninterface NotificationPopupConfig {\n  title: string;\n  message: string;\n  type?: NotificationType | 'info' | 'success' | 'warning' | 'error';\n  duration?: number;\n  playSound?: boolean;\n  soundType?: 'notification' | 'alert' | 'approval';\n  customSound?: string;\n  centerScreen?: boolean;\n  relatedItemId?: string; // ID del elemento relacionado (como una aplicación)\n}\n\ninterface NotificationContextType {\n  notifications: Notification[];\n  unreadCount: number;\n  addNotification: (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => void;\n  markAsRead: (id: string) => void;\n  markAllAsRead: () => void;\n  clearNotifications: () => void;\n  showPopup: (config: NotificationPopupConfig) => void;\n  soundEnabled: boolean;\n  toggleSound: () => void;\n  setSoundEnabled: (enabled: boolean) => void;\n}\n\nexport const NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\n// Utilidad para manejar errores de forma segura y siempre devolver strings\nconst handleErrorSafely = (error: unknown): string => {\n  console.error('Error en NotificationContext:', error);\n  \n  // Convertir el error a string de forma segura\n  if (error instanceof Error) {\n    return error.message;\n  } else if (typeof error === 'string') {\n    return error;\n  } else {\n    return 'Ocurrió un error desconocido';\n  }\n};\n\nexport const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user } = useAuth();\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [unreadCount, setUnreadCount] = useState<number>(0);\n  const [soundEnabled, setSoundEnabled] = useState<boolean>(true);\n  \n  // Estado para la notificación emergente actual\n  const [currentPopup, setCurrentPopup] = useState<NotificationPopupConfig | null>(null);\n  \n  // Referencia al ID del polling interval\n  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // State to keep track of already notified application IDs with timestamps\n  // This helps prevent showing the same notification multiple times\n  const [notifiedApplications, setNotifiedApplications] = useState<Map<string, number>>(new Map());\n\n  // Referencia para evitar múltiples ejecuciones simultáneas\n  const checkingRef = useRef<boolean>(false);\n  \n  // Reference to the latest known notification time\n  const lastNotificationTimeRef = useRef<Date>(new Date());\n  \n  // Avoid duplicate notifications by ensuring we have a minimum interval between checks\n  const lastCheckTimeRef = useRef<Date>(new Date());\n\n  // Efecto para manejar la carga inicial de notificaciones y configurar el polling\n  useEffect(() => {\n    if (user) {\n      // Cargar notificaciones al inicio\n      loadNotifications();\n\n      // Cargar aplicaciones ya notificadas desde localStorage\n      try {\n        const storedNotifications = localStorage.getItem('notified_application_ids');\n        if (storedNotifications) {\n          const parsedData = JSON.parse(storedNotifications);\n          \n          // Handle both old format (array) and new format (object with timestamps)\n          if (Array.isArray(parsedData)) {\n            // Old format - convert to new Map with current timestamp\n            const notifiedMap = new Map();\n            const now = Date.now();\n            parsedData.forEach((id: string) => {\n              notifiedMap.set(id, now);\n            });\n            setNotifiedApplications(notifiedMap);\n            // Re-save with the new format\n            saveNotifiedApplications(notifiedMap);\n            console.log(`Converted ${notifiedMap.size} notified application IDs from old format to new format`);\n          } else if (typeof parsedData === 'object') {\n            // New format - convert object to Map\n            const notifiedMap = new Map();\n            Object.entries(parsedData).forEach(([id, timestamp]) => {\n              notifiedMap.set(id, timestamp as number);\n            });\n            setNotifiedApplications(notifiedMap);\n            console.log(`Loaded ${notifiedMap.size} notified application IDs from localStorage`);\n          }\n        } else {\n          console.log('No previously notified applications found in localStorage');\n        }\n        \n        // Limpiar notificaciones antiguas (más de 48 horas)\n        cleanupOldNotifications();\n      } catch (error) {\n        console.error('Error loading notified applications:', error);\n        // Reset if there's an error\n        setNotifiedApplications(new Map());\n      }\n      \n      // Set the initial last check time to now\n      lastCheckTimeRef.current = new Date();\n      // Set the initial last notification time to 10 seconds ago to avoid immediate checks\n      lastNotificationTimeRef.current = new Date(Date.now() - 10000);\n      \n      // Wait 5 seconds before first check to ensure UI is fully loaded\n      const initialCheckTimeout = setTimeout(() => {\n        // Primero obtenemos la fecha de la última aplicación para inicializar el sistema\n        initializeWithLastApplicationTimestamp();\n        \n        // Configurar polling para verificar nuevas notificaciones cada 30 seconds\n        // Utilizamos un intervalo más corto para estar más atentos a nuevas solicitudes\n        pollingIntervalRef.current = setInterval(() => {\n          const now = new Date();\n          const timeSinceLastCheck = now.getTime() - lastCheckTimeRef.current.getTime();\n          const timeSinceLastNotification = now.getTime() - lastNotificationTimeRef.current.getTime();\n          \n          // Only check if:\n          // 1. It's been at least 15 seconds since last check AND\n          // 2. It's been at least 5 seconds since showing a notification\n          if (timeSinceLastCheck > 15000 && timeSinceLastNotification > 5000) {\n            checkForNewNotifications();\n          } else {\n            console.log(`Skipping notification check (last check: ${(timeSinceLastCheck/1000).toFixed(1)}s ago, last notification: ${(timeSinceLastNotification/1000).toFixed(1)}s ago)`);\n          }\n        }, 20000);\n      }, 5000);\n      \n      // Limpiar el intervalo cuando el componente se desmonte\n      return () => {\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n        }\n        clearTimeout(initialCheckTimeout);\n      };\n    }\n  }, [user]);\n\n  // Inicializar con el timestamp de la última aplicación\n  const initializeWithLastApplicationTimestamp = async () => {\n    try {\n      // Obtener la última aplicación para usarla como referencia inicial\n      const response = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: `\n            SELECT id, created_at, application_type, client_name, company_name, status, amount\n            FROM applications \n            ORDER BY created_at DESC\n            LIMIT 1\n          `\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Error querying most recent application');\n      }\n      \n      const data = await response.json();\n      \n      if (data.data && data.data.length > 0) {\n        const lastApp = data.data[0];\n        const lastAppId = lastApp.id;\n        const lastAppCreatedAt = new Date(lastApp.created_at);\n        \n        console.log(`System initialized with reference to last application: ${lastAppId} created at ${lastAppCreatedAt.toISOString()}`);\n        \n        // Marcar la aplicación más reciente como ya notificada para evitar duplicados al inicio\n        if (!notifiedApplications.has(lastAppId)) {\n          const appMetadata = {\n            notifiedAt: new Date().toISOString(),\n            notificationType: 'initialization',\n            applicationType: lastApp.application_type,\n            amount: lastApp.amount,\n            clientName: lastApp.client_name,\n            companyName: lastApp.company_name,\n            status: lastApp.status\n          };\n          markApplicationAsNotified(lastAppId, lastApp.created_at, appMetadata);\n        }\n      }\n      \n      // Realizar la primera verificación de notificaciones\n      checkForNewNotifications();\n    } catch (error) {\n      console.error('Error initializing with last application timestamp:', error);\n      // Si falla, aún intentamos la primera verificación\n      checkForNewNotifications();\n    }\n  };\n\n  // Cálculo de notificaciones no leídas\n  useEffect(() => {\n    const count = notifications.filter(notification => !notification.read).length;\n    setUnreadCount(count);\n  }, [notifications]);\n\n  // Cargar notificaciones del almacenamiento local o del servidor\n  const loadNotifications = async () => {\n    try {\n      // En un escenario real, aquí se cargarían las notificaciones del servidor\n      // Por ahora, usaremos el localStorage como ejemplo\n      const storedNotifications = localStorage.getItem('notifications');\n      if (storedNotifications) {\n        const parsed = JSON.parse(storedNotifications);\n        setNotifications(parsed.map((n: any) => ({\n          ...n,\n          createdAt: new Date(n.createdAt)\n        })));\n      }\n    } catch (error) {\n      console.error('Error loading notifications:', error);\n    }\n  };\n\n  // Save notified applications with timestamps to localStorage\n  const saveNotifiedApplications = (notifiedMap: Map<string, number>) => {\n    try {\n      // Convert Map to object for storage\n      const notifiedObject: Record<string, number> = {};\n      notifiedMap.forEach((timestamp, id) => {\n        notifiedObject[id] = timestamp;\n      });\n      \n      localStorage.setItem('notified_application_ids', JSON.stringify(notifiedObject));\n      console.log(`Saved ${notifiedMap.size} notified application IDs to localStorage`);\n    } catch (error) {\n      console.error('Error saving notified applications:', error);\n    }\n  };\n\n  // Función para limpiar notificaciones antiguas\n  const cleanupOldNotifications = () => {\n    try {\n      const now = Date.now();\n      const twentyFourHoursAgo = now - (24 * 60 * 60 * 1000); // 24 horas en milisegundos\n      \n      let totalCount = 0;\n      let cleanedCount = 0;\n      \n      // Crear un nuevo mapa para guardar solo las notificaciones más recientes\n      const updatedNotifications = new Map();\n      \n      notifiedApplications.forEach((timestamp, id) => {\n        totalCount++;\n        if (timestamp > twentyFourHoursAgo) {\n          // Mantener solo las notificaciones de las últimas 24 horas\n          updatedNotifications.set(id, timestamp);\n        } else {\n          cleanedCount++;\n        }\n      });\n      \n      if (cleanedCount > 0) {\n        console.log(`Cleaned up ${cleanedCount} old notification records (${totalCount - cleanedCount} retained)`);\n        setNotifiedApplications(updatedNotifications);\n        saveNotifiedApplications(updatedNotifications);\n      } else if (totalCount > 0) {\n        console.log(`No old notifications to clean up (${totalCount} notifications are all within 24 hours)`);\n      }\n    } catch (error) {\n      console.error('Error cleaning up old notifications:', error);\n    }\n  };\n\n  // Marcar una aplicación como notificada\n  const markApplicationAsNotified = (applicationId: string, createdTimestamp?: string, metadata?: any) => {\n    // Check if already marked as notified\n    if (notifiedApplications.has(applicationId)) {\n      console.log(`Application ${applicationId} already marked as notified (duplicate protection)`);\n      return; // Already notified, don't do anything\n    }\n    \n    try {\n      let notificationTime: number;\n      \n      // If createdTimestamp is provided, use it to set notification time just after creation\n      if (createdTimestamp) {\n        try {\n          // Try to parse the creation timestamp\n          const creationTime = new Date(createdTimestamp);\n          // Set notification time 1 second after creation to ensure proper ordering\n          notificationTime = creationTime.getTime() + 1000;\n          console.log(`Using application creation time for notification: ${creationTime.toISOString()}`);\n        } catch (error) {\n          // If parsing fails, use current time as fallback\n          console.warn(`Error parsing creation timestamp \"${createdTimestamp}\":`, error);\n          notificationTime = Date.now();\n        }\n      } else {\n        // If no timestamp provided, use current time\n        notificationTime = Date.now();\n      }\n      \n      // Crear un objeto de metadatos para esta aplicación si no se proporcionó uno\n      const appMetadata = metadata || {\n        notifiedAt: new Date(notificationTime).toISOString(),\n        notificationType: 'application',\n      };\n      \n      // Save to the notified applications map\n      const updatedMap = new Map(notifiedApplications);\n      updatedMap.set(applicationId, notificationTime);\n      setNotifiedApplications(updatedMap);\n      \n      // Guardar también los metadatos si es necesario para futuras optimizaciones\n      try {\n        const metadataKey = `notification_metadata_${applicationId}`;\n        localStorage.setItem(metadataKey, JSON.stringify(appMetadata));\n      } catch (error) {\n        console.warn('Error saving notification metadata:', error);\n      }\n      \n      // Save to localStorage\n      saveNotifiedApplications(updatedMap);\n      \n      // Update last notification time\n      lastNotificationTimeRef.current = new Date();\n      \n      console.log(`Marked application ${applicationId} as notified at ${new Date(notificationTime).toISOString()}`);\n    } catch (error) {\n      console.error('Error marking application as notified:', error);\n    }\n  };\n\n  // Función para obtener la consulta SQL optimizada según el tipo de aplicación más reciente\n  const getOptimizedQuery = async (): Promise<string> => {\n    try {\n      // Primero, verificar el tipo de la aplicación más reciente para optimizar la consulta\n      const typeCheckResponse = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: `\n            SELECT application_type\n            FROM applications \n            ORDER BY created_at DESC\n            LIMIT 1\n          `\n        })\n      });\n      \n      if (!typeCheckResponse.ok) {\n        console.warn('Error checking latest application type, using default query');\n        return getDefaultQuery();\n      }\n      \n      const typeData = await typeCheckResponse.json();\n      \n      if (!typeData.data || typeData.data.length === 0) {\n        console.log('No applications found, using default query');\n        return getDefaultQuery();\n      }\n      \n      const latestType = typeData.data[0].application_type;\n      console.log(`Latest application type: ${latestType}`);\n      \n      // Personalizar los campos según el tipo de aplicación\n      let additionalFields = '';\n      \n      switch(latestType) {\n        case 'selected_plans':\n          // Para planes seleccionados, necesitamos plazo, tasa y pago mensual\n          additionalFields = '';\n          break;\n        case 'product_simulations':\n          // Para simulaciones, podríamos necesitar campos específicos del producto\n          additionalFields = '';\n          break;\n        case 'cash_requests':\n          // Para solicitudes de efectivo\n          additionalFields = '';\n          break;\n        case 'car_backed_loan_applications':\n        case 'auto_loan_applications':\n          // Para préstamos de auto, podríamos necesitar datos del vehículo\n          additionalFields = '';\n          break;\n        default:\n          additionalFields = '';\n      }\n      \n      // Construir consulta con base en el tipo\n      return `\n        SELECT id, client_name, application_type, company_name, created_at, status, \n               amount, term, interest_rate, monthly_payment, client_email, client_phone ${additionalFields}\n        FROM applications \n        WHERE created_at > NOW() - INTERVAL '30 seconds'\n        ORDER BY created_at DESC\n        LIMIT 5\n      `;\n      \n    } catch (error) {\n      console.error('Error building optimized query:', error);\n      return getDefaultQuery();\n    }\n  };\n  \n  // Consulta predeterminada con campos básicos\n  const getDefaultQuery = (): string => {\n    return `\n      SELECT id, client_name, application_type, company_name, created_at, status, \n             amount, term, interest_rate, monthly_payment, client_email, client_phone\n      FROM applications \n      WHERE created_at > NOW() - INTERVAL '30 seconds'\n      ORDER BY created_at DESC\n      LIMIT 5\n    `;\n  };\n\n  const checkForNewNotifications = async () => {\n    // Record the check time immediately to prevent race conditions\n    lastCheckTimeRef.current = new Date();\n    \n    // Avoid multiple executions at the same time\n    if (checkingRef.current) {\n      console.log('Already checking for notifications');\n      return;\n    }\n    \n    // Make sure we don't have any lingering popups\n    clearPopups();\n    \n    // Sincronizar con localStorage antes de verificar para evitar duplicados\n    try {\n      const storedNotifications = localStorage.getItem('notified_application_ids');\n      if (storedNotifications) {\n        const parsedData = JSON.parse(storedNotifications);\n        if (typeof parsedData === 'object' && !Array.isArray(parsedData)) {\n          // Fusionar con las notificaciones actuales\n          const updatedMap = new Map(notifiedApplications);\n          let hasChanges = false;\n          \n          Object.entries(parsedData).forEach(([id, timestamp]) => {\n            if (!updatedMap.has(id)) {\n              updatedMap.set(id, timestamp as number);\n              hasChanges = true;\n            }\n          });\n          \n          if (hasChanges) {\n            console.log('Synchronized notification IDs from localStorage before checking');\n            setNotifiedApplications(updatedMap);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error synchronizing notifications from localStorage:', error);\n    }\n    \n    checkingRef.current = true;\n    console.log('Checking for new notifications...');\n    \n    try {\n      // Convert notified IDs Map to array for logging\n      const notifiedIdsArray = Array.from(notifiedApplications.keys());\n      console.log(`${notifiedIdsArray.length} already notified application IDs: ${notifiedIdsArray.join(', ').substring(0, 200)}${notifiedIdsArray.length > 5 ? '...' : ''}`);\n      \n      // Obtener consulta optimizada según tipo de aplicación\n      const optimizedQuery = await getOptimizedQuery();\n      console.log('Using optimized query for latest application type');\n      \n      const response = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ query: optimizedQuery })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Error querying recent applications');\n      }\n      \n      const data = await response.json();\n      \n      // If there are applications, filter them first and then show notification\n      if (data.data && data.data.length > 0) {\n        console.log(`Received ${data.data.length} applications from the last 30 seconds`);\n        \n        // Filter out any applications that have already been notified\n        const newApps = data.data.filter((app: any) => {\n          const isAlreadyNotified = notifiedApplications.has(app.id);\n          if (isAlreadyNotified) {\n            console.log(`Skipping already notified application: ${app.id}`);\n            return false;\n          }\n          \n          // Convertir el timestamp de la aplicación a Date para comparar\n          const appCreatedAt = new Date(app.created_at);\n          \n          // Si la aplicación es de hace más de 60 segundos, no notificar\n          const isTooOld = (new Date().getTime() - appCreatedAt.getTime()) > 60000;\n          if (isTooOld) {\n            console.log(`Skipping too old application: ${app.id} created at ${appCreatedAt.toISOString()}`);\n            // Marcar como notificada para evitar mostrarla en futuras verificaciones\n            const appMetadata = {\n              notifiedAt: new Date().toISOString(),\n              notificationType: 'application',\n              applicationType: app.application_type,\n              amount: app.amount,\n              clientName: app.client_name,\n              companyName: app.company_name,\n              status: app.status\n            };\n            markApplicationAsNotified(app.id, app.created_at, appMetadata);\n            return false;\n          }\n          \n          return true;\n        });\n        \n        console.log(`Found ${newApps.length} new applications after filtering`);\n        \n        if (newApps.length === 0) {\n          console.log('No truly new applications found (already notified or too old)');\n          checkingRef.current = false;\n          return;\n        }\n        \n        // Take only the first new application to show\n        const newApp = newApps[0];\n        const appId = newApp.id;\n        \n        // Verificar si ya está en proceso de notificación (para evitar doble notificación)\n        if (currentPopup && currentPopup.relatedItemId === appId) {\n          console.log(`Already showing notification for application ${appId} - skipping`);\n          checkingRef.current = false;\n          return;\n        }\n        \n        console.log(`New application detected: ${appId} (created ${new Date(newApp.created_at).toISOString()})`);\n        \n        // IMPORTANT: Mark as notified IMMEDIATELY to prevent duplicates\n        // even if processing fails later\n        const appMetadata = {\n          notifiedAt: new Date().toISOString(),\n          notificationType: 'application',\n          applicationType: newApp.application_type,\n          amount: newApp.amount,\n          clientName: newApp.client_name,\n          companyName: newApp.company_name,\n          status: newApp.status\n        };\n        markApplicationAsNotified(appId, newApp.created_at, appMetadata);\n          \n        // Format data for notification\n        const createdAt = new Date(newApp.created_at);\n        const formattedDate = new Intl.DateTimeFormat('es-MX', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric'\n        }).format(createdAt);\n        \n        const formattedTime = new Intl.DateTimeFormat('es-MX', {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: true\n        }).format(createdAt);\n        \n        // Format amount with thousands separator and 2 decimals\n        const formattedAmount = new Intl.NumberFormat('es-MX', {\n          style: 'currency',\n          currency: 'MXN',\n          minimumFractionDigits: 2\n        }).format(Number(newApp.amount || 0));\n        \n        // Format interest rate with percentage\n        const formattedRate = newApp.interest_rate !== null && newApp.interest_rate !== undefined \n          ? `${newApp.interest_rate}%` \n          : \"N/A\";\n        \n        // Format monthly payment\n        const formattedMonthly = newApp.monthly_payment !== null && newApp.monthly_payment !== undefined\n          ? new Intl.NumberFormat('es-MX', {\n              style: 'currency',\n              currency: 'MXN',\n              minimumFractionDigits: 2\n            }).format(Number(newApp.monthly_payment))\n          : \"N/A\";\n        \n        // Transform application type to a more readable format\n        let appType = 'No especificado';\n        if (newApp.application_type) {\n          // Remove any trailing slash if it exists\n          const cleanType = newApp.application_type.replace(/\\/$/, '');\n          \n          if (cleanType === 'selected_plans') {\n            appType = 'Planes seleccionados';\n          } else if (cleanType === 'product_simulations') {\n            appType = 'Simulación de producto';\n          } else if (cleanType === 'cash_requests') {\n            appType = 'Solicitud de efectivo';\n          } else if (cleanType === 'car_backed_loan_applications') {\n            appType = 'Préstamo con garantía de auto';\n          } else if (cleanType === 'auto_loan_applications') {\n            appType = 'Préstamo para auto';\n          } else {\n            appType = cleanType\n              .split('_')\n              .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))\n              .join(' ');\n          }\n        }\n\n        // Adaptar la información según el tipo de aplicación\n        const getApplicationSpecificHtml = (appType: string, app: any) => {\n          // Base de los campos comunes para todos los tipos\n          const commonFields = `\n            <div class=\"font-semibold text-gray-700\">Cliente:</div>\n            <div class=\"text-gray-900\">${app.client_name || 'Sin nombre'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Empresa:</div>\n            <div class=\"text-gray-900\">${app.company_name || 'No especificada'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Tipo:</div>\n            <div class=\"text-gray-900\">${appType}</div>\n          `;\n\n          // Campos específicos según el tipo de aplicación\n          let specificFields = '';\n\n          // Planes seleccionados - enfatizar plazo, tasa, pago mensual\n          if (app.application_type === 'selected_plans') {\n            specificFields = `\n              <div class=\"font-semibold text-gray-700\">Monto:</div>\n              <div class=\"text-gray-900\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term || 'N/A'} ${app.term === 1 ? 'mes' : 'meses'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Pago mensual:</div>\n              <div class=\"text-gray-900\">${formattedMonthly}</div>\n            `;\n          } \n          // Simulación de producto - enfatizar tipo de producto y monto total\n          else if (app.application_type === 'product_simulations') {\n            specificFields = `\n              <div class=\"font-semibold text-gray-700\">Monto:</div>\n              <div class=\"text-gray-900 font-bold\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term && app.term > 0 ? app.term + (app.term === 1 ? ' mes' : ' meses') : 'N/A'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n            `;\n          } \n          // Solicitudes de efectivo - enfatizar monto solicitado\n          else if (app.application_type === 'cash_requests') {\n            specificFields = `\n              <div class=\"font-semibold text-gray-700\">Monto solicitado:</div>\n              <div class=\"text-gray-900 font-bold\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term && app.term > 0 ? app.term + (app.term === 1 ? ' mes' : ' meses') : 'N/A'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n            `;\n          }\n          // Préstamos relacionados con autos\n          else if (app.application_type === 'car_backed_loan_applications' || app.application_type === 'auto_loan_applications') {\n            specificFields = `\n              <div class=\"font-semibold text-gray-700\">Monto del préstamo:</div>\n              <div class=\"text-gray-900 font-bold\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term && app.term > 0 ? app.term + (app.term === 1 ? ' mes' : ' meses') : 'N/A'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Pago mensual:</div>\n              <div class=\"text-gray-900\">${formattedMonthly}</div>\n            `;\n          }\n          // Para cualquier otro tipo\n          else {\n            specificFields = `\n              <div class=\"font-semibold text-gray-700\">Monto:</div>\n              <div class=\"text-gray-900\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term && app.term > 0 ? app.term + (app.term === 1 ? ' mes' : ' meses') : 'N/A'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Pago mensual:</div>\n              <div class=\"text-gray-900\">${formattedMonthly}</div>\n            `;\n          }\n\n          // Contacto y fecha - comunes para todos\n          const contactFields = `\n            <div class=\"font-semibold text-gray-700\">Email:</div>\n            <div class=\"text-gray-900\">${app.client_email || 'No especificado'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Teléfono:</div>\n            <div class=\"text-gray-900\">${app.client_phone || 'No especificado'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Fecha:</div>\n            <div class=\"text-gray-900\">${formattedDate} ${formattedTime}</div>\n          `;\n\n          return `\n            <div class=\"grid grid-cols-2 gap-2 text-sm mt-2\">\n              ${commonFields}\n              ${specificFields}\n              ${contactFields}\n            </div>\n          `;\n        };\n        \n        // Obtener el HTML específico según el tipo de aplicación\n        const detailedMessage = getApplicationSpecificHtml(appType, newApp);\n        \n        const notificationTitle = '💼 Nueva solicitud recibida';\n        \n        // Create the notification for the panel\n        const newNotification = {\n          title: notificationTitle,\n          message: `Cliente: ${newApp.client_name || 'Sin nombre'} - ${newApp.company_name || 'Empresa no especificada'}`,\n          type: NotificationType.NEW_APPLICATION,\n          relatedItemType: 'application',\n          relatedItemId: appId\n        };\n        \n        // Add the notification to the panel\n        addNotification(newNotification);\n        \n        // Show popup with complete details\n        showPopup({\n          title: notificationTitle,\n          message: detailedMessage,\n          type: NotificationType.NEW_APPLICATION,\n          playSound: soundEnabled,\n          soundType: 'notification',\n          duration: 10000, // 10 seconds\n          customSound: '/sounds/clean-notification.mp3',\n          centerScreen: true,\n          relatedItemId: appId\n        });\n        \n        // Update last notification time to avoid duplicates\n        lastNotificationTimeRef.current = new Date();\n      } else {\n        console.log('No new applications found in the last 30 seconds');\n      }\n\n    } catch (error) {\n      console.error('Error checking for new notifications:', error);\n    } finally {\n      // Always mark as not running regardless of the result\n      checkingRef.current = false;\n    }\n  };\n\n  // Añadir una nueva notificación\n  const addNotification = (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => {\n    const newNotification: Notification = {\n      ...notification,\n      // Using a proper UUID for the notification ID\n      id: generateUUID(),\n      createdAt: new Date(),\n      read: false,\n      timestamp: new Date()\n    };\n    \n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Guardar en localStorage (en producción esto iría al servidor)\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar una notificación como leída\n  const markAsRead = (id: string) => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => \n        notification.id === id \n          ? { ...notification, read: true, isRead: true } \n          : notification\n      );\n      \n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar todas las notificaciones como leídas\n  const markAllAsRead = () => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => ({ ...notification, read: true, isRead: true }));\n      \n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Limpiar todas las notificaciones\n  const clearNotifications = () => {\n    setNotifications([]);\n    // Limpiar del localStorage\n    localStorage.setItem('notifications', JSON.stringify([]));\n  };\n\n  // Mostrar una notificación emergente\n  const showPopup = (config: NotificationPopupConfig) => {\n    // Verificar si ya hay un popup con el mismo título y mensaje o mismo ID relacionado (posible duplicado)\n    if (currentPopup && \n        ((currentPopup.title === config.title && currentPopup.message === config.message) ||\n         (config.relatedItemId && currentPopup.relatedItemId === config.relatedItemId))) {\n      console.log(`Ignoring duplicate popup: ${config.relatedItemId || 'unknown ID'}`);\n      return;\n    }\n\n    // Clear any existing popups to prevent stacking\n    clearPopups();\n    \n    // Log what we're showing\n    console.log(`Showing popup: ${config.title} ${config.relatedItemId ? `(ID: ${config.relatedItemId})` : ''}`);\n    \n    // Short timeout to ensure DOM updates before showing the new popup\n    setTimeout(() => {\n      setCurrentPopup(config);\n      \n      // Automatically close popup after the specified duration\n      setTimeout(() => {\n        setCurrentPopup(null);\n      }, config.duration || 5000);\n    }, 50);\n  };\n\n  // Clear any pending popups\n  const clearPopups = () => {\n    if (currentPopup) {\n      console.log('Clearing existing popup');\n      setCurrentPopup(null);\n    }\n  };\n\n  // Activar/desactivar sonidos de notificación\n  const toggleSound = () => {\n    const newValue = !soundEnabled;\n    setSoundEnabled(newValue);\n    // Guardar preferencia en localStorage\n    localStorage.setItem('notification_sound_enabled', newValue.toString());\n  };\n\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    showPopup,\n    soundEnabled,\n    toggleSound,\n    setSoundEnabled\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n      {currentPopup && (\n        <NotificationPopup\n          title={currentPopup.title}\n          message={currentPopup.message}\n          type={currentPopup.type as any}\n          duration={currentPopup.duration}\n          playSound={currentPopup.playSound}\n          soundType={currentPopup.soundType}\n          customSound={currentPopup.customSound}\n          onClose={() => setCurrentPopup(null)}\n          centerScreen={currentPopup.centerScreen}\n        />\n      )}\n    </NotificationContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}