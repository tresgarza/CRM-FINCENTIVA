{"ast":null,"code":"import{supabase}from'../lib/supabaseClient';import{TABLES}from'../utils/constants/tables';import{uploadDocument}from'./documentService';const USERS_TABLE='users';const mapUserToClient=userData=>{if(!userData){console.error('Error: userData is undefined in mapUserToClient');throw new Error('No se pudo procesar la información del cliente, los datos son inválidos');}const fullName=userData.name||[userData.first_name,userData.paternal_surname,userData.maternal_surname].filter(Boolean).join(' ');return{id:userData.id,created_at:userData.created_at,name:fullName,first_name:userData.first_name,paternal_surname:userData.paternal_surname,maternal_surname:userData.maternal_surname,email:userData.email,phone:userData.phone,birth_date:userData.birth_date,company_id:userData.company_id,rfc:userData.rfc,curp:userData.curp,advisor_id:userData.advisor_id,address:userData.address,city:userData.city,state:userData.state,postal_code:userData.postal_code,gender:userData.gender,marital_status:userData.marital_status,employment_type:userData.employment_type,employment_years:userData.employment_years,monthly_income:userData.monthly_income,additional_income:userData.additional_income,monthly_expenses:userData.monthly_expenses,other_loan_balances:userData.other_loan_balances,bank_name:userData.bank_name,bank_clabe:userData.bank_clabe,bank_account_number:userData.bank_account_number,bank_account_type:userData.bank_account_type,bank_account_origin:userData.bank_account_origin};};export const getClients=async filters=>{try{let query=supabase.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin',{count:'exact'});if(filters){if(filters.advisor_id){query=query.eq('advisor_id',filters.advisor_id);}if(filters.company_id){query=query.eq('company_id',filters.company_id);}if(filters.dateFrom){query=query.gte('created_at',filters.dateFrom);}if(filters.dateTo){query=query.lte('created_at',filters.dateTo);}if(filters.searchQuery){query=query.or(`first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);}if(filters.page!==undefined&&filters.pageSize){const from=filters.page*filters.pageSize;const to=from+filters.pageSize-1;query=query.range(from,to);}}query=query.order('created_at',{ascending:false});const{data,error,count}=await query;if(error){console.error('Error fetching users:',error);throw error;}const clients=data?data.map(mapUserToClient):[];return{clients,totalCount:count||0};}catch(error){console.error('Error in getClients:',error);throw error;}};export const getClientById=async id=>{try{const{data,error}=await supabase.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin').eq('id',id).single();if(error){console.error(`Error fetching user with ID ${id}:`,error);throw error;}if(!data){console.error(`No data found for client with ID ${id}`);throw new Error(`No se encontró cliente con ID: ${id}`);}return mapUserToClient(data);}catch(error){console.error(`Error in getClientById:`,error);throw error;}};function escapeSQLString(str){if(!str)return'';return str.replace(/'/g,\"''\");}export const getClientApplications=async clientId=>{try{const client=await getClientById(clientId).catch(err=>{throw err;});if(!client){console.warn('Client not found. Returning empty applications list.');return[];}const query=`\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name||'')}'\n      ORDER BY created_at DESC\n    `;const executeQuery=async query=>{try{const response=await fetch('http://localhost:3100/query',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query:query})});const result=await response.json();if(result.error){console.error('Error en la consulta SQL:',result.error);throw new Error(result.error);}return result.data;}catch(error){console.error('Error ejecutando la consulta:',error);throw error;}};const data=await executeQuery(query);return data;}catch(error){console.error(`Error fetching applications for client ${clientId}:`,error);throw error;}};export const uploadClientDocuments=async(clientId,userId,documents)=>{const uploadPromises=documents.map(doc=>{const upload={file:doc.file,client_id:clientId,userId:userId,documentName:doc.name,category:doc.category};return uploadDocument(upload);});try{return await Promise.all(uploadPromises);}catch(error){console.error('Error uploading client documents:',error);throw error;}};export const createClient=async(client,documents,userId)=>{try{const userData={email:client.email,first_name:client.first_name||'',paternal_surname:client.paternal_surname||'',maternal_surname:client.maternal_surname||'',phone:client.phone,birth_date:client.birth_date,company_id:client.company_id,rfc:client.rfc,curp:client.curp,advisor_id:client.advisor_id,address:client.address,city:client.city,state:client.state,postal_code:client.postal_code,gender:client.gender,marital_status:client.marital_status,employment_type:client.employment_type,employment_years:client.employment_years,monthly_income:client.monthly_income,additional_income:client.additional_income,monthly_expenses:client.monthly_expenses,other_loan_balances:client.other_loan_balances,bank_name:client.bank_name,bank_clabe:client.bank_clabe,bank_account_number:client.bank_account_number,bank_account_type:client.bank_account_type,bank_account_origin:client.bank_account_origin};const{data,error}=await supabase.from(USERS_TABLE).insert([userData]).select();if(error){console.error('Error creating user:',error);throw error;}if(!data||data.length===0){console.error('No data returned when creating client');throw new Error('No se pudo crear el cliente. No se recibieron datos del servidor.');}const newClient=mapUserToClient(data[0]);if(documents&&documents.length>0&&userId&&newClient.id){await uploadClientDocuments(newClient.id,userId,documents);}return newClient;}catch(error){console.error('Error in createClient:',error);throw error;}};export const updateClient=async(id,updates,documents,userId)=>{try{const userUpdates={email:updates.email,first_name:updates.first_name,paternal_surname:updates.paternal_surname,maternal_surname:updates.maternal_surname,phone:updates.phone,birth_date:updates.birth_date,company_id:updates.company_id,rfc:updates.rfc,curp:updates.curp,advisor_id:updates.advisor_id,address:updates.address,city:updates.city,state:updates.state,postal_code:updates.postal_code,gender:updates.gender,marital_status:updates.marital_status,employment_type:updates.employment_type,employment_years:updates.employment_years,monthly_income:updates.monthly_income,additional_income:updates.additional_income,monthly_expenses:updates.monthly_expenses,other_loan_balances:updates.other_loan_balances,bank_name:updates.bank_name,bank_clabe:updates.bank_clabe,bank_account_number:updates.bank_account_number,bank_account_type:updates.bank_account_type,bank_account_origin:updates.bank_account_origin};Object.keys(userUpdates).forEach(key=>{if(userUpdates[key]===undefined){delete userUpdates[key];}});const{data,error}=await supabase.from(USERS_TABLE).update(userUpdates).eq('id',id).select();if(error){console.error(`Error updating user with ID ${id}:`,error);throw error;}let updatedClient;if(!data||data.length===0){console.log(`No data returned when updating client with ID ${id}, fetching client data separately`);const{data:fetchedData,error:fetchError}=await supabase.from(USERS_TABLE).select('*').eq('id',id).single();if(fetchError){console.error(`Error fetching updated client with ID ${id}:`,fetchError);throw new Error('El cliente fue actualizado pero no se pudieron recuperar sus datos. Por favor, recargue la página.');}if(!fetchedData){console.error(`No data found for client with ID ${id} after update`);throw new Error('No se encontró el cliente después de la actualización. Por favor, verifique que el cliente exista.');}updatedClient=mapUserToClient(fetchedData);}else{updatedClient=mapUserToClient(data[0]);}if(documents&&documents.length>0&&userId){await uploadClientDocuments(id,userId,documents);}return updatedClient;}catch(error){console.error(`Error in updateClient:`,error);throw error;}};export const deleteClient=async id=>{try{const{error}=await supabase.from(USERS_TABLE).delete().eq('id',id);if(error){console.error(`Error deleting user with ID ${id}:`,error);throw error;}return true;}catch(error){console.error(`Error in deleteClient:`,error);throw error;}};export const checkClientExists=async(email,rfc)=>{try{let query=supabase.from(USERS_TABLE).select('id, email, rfc').eq('email',email);if(rfc){query=query.or(`rfc.eq.${rfc}`);}const{data,error}=await query;if(error){console.error('Error checking client existence:',error);throw error;}return data.length>0?data[0]:null;}catch(error){console.error('Error in checkClientExists:',error);throw error;}};export const getClientCount=async filters=>{try{let query=supabase.from(USERS_TABLE).select('id',{count:'exact',head:true});if(filters){if(filters.advisor_id){query=query.eq('advisor_id',filters.advisor_id);}if(filters.company_id){query=query.eq('company_id',filters.company_id);}if(filters.dateFrom){query=query.gte('created_at',filters.dateFrom);}if(filters.dateTo){query=query.lte('created_at',filters.dateTo);}if(filters.searchQuery){query=query.or(`first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);}}const{count,error}=await query;if(error){console.error('Error getting client count:',error);throw error;}return count||0;}catch(error){console.error('Error in getClientCount:',error);return 0;}};","map":{"version":3,"names":["supabase","TABLES","uploadDocument","USERS_TABLE","mapUserToClient","userData","console","error","Error","fullName","name","first_name","paternal_surname","maternal_surname","filter","Boolean","join","id","created_at","email","phone","birth_date","company_id","rfc","curp","advisor_id","address","city","state","postal_code","gender","marital_status","employment_type","employment_years","monthly_income","additional_income","monthly_expenses","other_loan_balances","bank_name","bank_clabe","bank_account_number","bank_account_type","bank_account_origin","getClients","filters","query","from","select","count","eq","dateFrom","gte","dateTo","lte","searchQuery","or","page","undefined","pageSize","to","range","order","ascending","data","clients","map","totalCount","getClientById","single","escapeSQLString","str","replace","getClientApplications","clientId","client","catch","err","warn","APPLICATIONS","executeQuery","response","fetch","method","headers","body","JSON","stringify","result","json","uploadClientDocuments","userId","documents","uploadPromises","doc","upload","file","client_id","documentName","category","Promise","all","createClient","insert","length","newClient","updateClient","updates","userUpdates","Object","keys","forEach","key","update","updatedClient","log","fetchedData","fetchError","deleteClient","delete","checkClientExists","getClientCount","head"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/clientService.ts"],"sourcesContent":["import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from '../utils/constants/tables';\nimport { uploadDocument, DocumentUpload } from './documentService';\n\nexport interface Client {\n  id: string;\n  created_at: string;\n  name?: string;\n  first_name?: string;\n  paternal_surname?: string;\n  maternal_surname?: string;\n  email: string;\n  phone: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  postal_code?: string;\n  birth_date?: string;\n  gender?: string;\n  marital_status?: string;\n  employment_type?: string;\n  employment_years?: number;\n  rfc?: string;\n  curp?: string;\n  monthly_income?: number;\n  additional_income?: number;\n  monthly_expenses?: number;\n  other_loan_balances?: number;\n  bank_name?: string;\n  bank_clabe?: string;\n  bank_account_number?: string;\n  bank_account_type?: string;\n  bank_account_origin?: string;\n  company_id?: string;\n  advisor_id?: string;\n}\n\nexport interface ClientDocument {\n  id?: string;\n  file: File;\n  category: string;\n  name: string;\n}\n\nexport interface ClientFilter {\n  searchQuery?: string;\n  advisor_id?: string;\n  company_id?: string;\n  dateFrom?: string;\n  dateTo?: string;\n  page?: number;\n  pageSize?: number;\n}\n\nconst USERS_TABLE = 'users';\n\nconst mapUserToClient = (userData: any): Client => {\n  if (!userData) {\n    console.error('Error: userData is undefined in mapUserToClient');\n    throw new Error('No se pudo procesar la información del cliente, los datos son inválidos');\n  }\n  \n  const fullName = userData.name || [\n    userData.first_name,\n    userData.paternal_surname,\n    userData.maternal_surname\n  ].filter(Boolean).join(' ');\n  \n  return {\n    id: userData.id,\n    created_at: userData.created_at,\n    name: fullName,\n    first_name: userData.first_name,\n    paternal_surname: userData.paternal_surname,\n    maternal_surname: userData.maternal_surname,\n    email: userData.email,\n    phone: userData.phone,\n    birth_date: userData.birth_date,\n    company_id: userData.company_id,\n    rfc: userData.rfc,\n    curp: userData.curp,\n    advisor_id: userData.advisor_id,\n    address: userData.address,\n    city: userData.city,\n    state: userData.state,\n    postal_code: userData.postal_code,\n    gender: userData.gender,\n    marital_status: userData.marital_status,\n    employment_type: userData.employment_type,\n    employment_years: userData.employment_years,\n    monthly_income: userData.monthly_income,\n    additional_income: userData.additional_income,\n    monthly_expenses: userData.monthly_expenses,\n    other_loan_balances: userData.other_loan_balances,\n    bank_name: userData.bank_name,\n    bank_clabe: userData.bank_clabe,\n    bank_account_number: userData.bank_account_number,\n    bank_account_type: userData.bank_account_type,\n    bank_account_origin: userData.bank_account_origin,\n  };\n};\n\nexport const getClients = async (filters?: ClientFilter) => {\n  try {\n    let query = supabase.from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin', { count: 'exact' });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n\n    query = query.order('created_at', { ascending: false });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      console.error('Error fetching users:', error);\n      throw error;\n    }\n\n    const clients = data ? data.map(mapUserToClient) : [];\n\n    return {\n      clients,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    console.error('Error in getClients:', error);\n    throw error;\n  }\n};\n\nexport const getClientById = async (id: string) => {\n  try {\n    const { data, error } = await supabase\n      .from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      console.error(`Error fetching user with ID ${id}:`, error);\n      throw error;\n    }\n\n    if (!data) {\n      console.error(`No data found for client with ID ${id}`);\n      throw new Error(`No se encontró cliente con ID: ${id}`);\n    }\n\n    return mapUserToClient(data);\n  } catch (error) {\n    console.error(`Error in getClientById:`, error);\n    throw error;\n  }\n};\n\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\nexport const getClientApplications = async (clientId: string) => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      throw err;\n    });\n    \n    if (!client) {\n      console.warn('Client not found. Returning empty applications list.');\n      return [];\n    }\n    \n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name || '')}'\n      ORDER BY created_at DESC\n    `;\n    \n    const executeQuery = async (query: string) => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query: query }),\n        });\n        \n        const result = await response.json();\n        \n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        \n        return result.data;\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    \n    const data = await executeQuery(query);\n    return data;\n  } catch (error) {\n    console.error(`Error fetching applications for client ${clientId}:`, error);\n    throw error;\n  }\n};\n\nexport const uploadClientDocuments = async (\n  clientId: string, \n  userId: string, \n  documents: ClientDocument[]\n) => {\n  const uploadPromises = documents.map(doc => {\n    const upload: DocumentUpload = {\n      file: doc.file,\n      client_id: clientId,\n      userId: userId,\n      documentName: doc.name,\n      category: doc.category\n    };\n    \n    return uploadDocument(upload);\n  });\n  \n  try {\n    return await Promise.all(uploadPromises);\n  } catch (error) {\n    console.error('Error uploading client documents:', error);\n    throw error;\n  }\n};\n\nexport const createClient = async (client: Omit<Client, 'id' | 'created_at'>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    const userData = {\n      email: client.email,\n      first_name: client.first_name || '',\n      paternal_surname: client.paternal_surname || '',\n      maternal_surname: client.maternal_surname || '',\n      phone: client.phone,\n      birth_date: client.birth_date,\n      company_id: client.company_id,\n      rfc: client.rfc,\n      curp: client.curp,\n      advisor_id: client.advisor_id,\n      address: client.address,\n      city: client.city,\n      state: client.state,\n      postal_code: client.postal_code,\n      gender: client.gender,\n      marital_status: client.marital_status,\n      employment_type: client.employment_type,\n      employment_years: client.employment_years,\n      monthly_income: client.monthly_income,\n      additional_income: client.additional_income,\n      monthly_expenses: client.monthly_expenses,\n      other_loan_balances: client.other_loan_balances,\n      bank_name: client.bank_name,\n      bank_clabe: client.bank_clabe,\n      bank_account_number: client.bank_account_number,\n      bank_account_type: client.bank_account_type,\n      bank_account_origin: client.bank_account_origin,\n    };\n\n    const { data, error } = await supabase\n      .from(USERS_TABLE)\n      .insert([userData])\n      .select();\n\n    if (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n\n    if (!data || data.length === 0) {\n      console.error('No data returned when creating client');\n      throw new Error('No se pudo crear el cliente. No se recibieron datos del servidor.');\n    }\n\n    const newClient = mapUserToClient(data[0]);\n    \n    if (documents && documents.length > 0 && userId && newClient.id) {\n      await uploadClientDocuments(newClient.id, userId, documents);\n    }\n\n    return newClient;\n  } catch (error) {\n    console.error('Error in createClient:', error);\n    throw error;\n  }\n};\n\nexport const updateClient = async (id: string, updates: Partial<Client>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    const userUpdates = {\n      email: updates.email,\n      first_name: updates.first_name,\n      paternal_surname: updates.paternal_surname,\n      maternal_surname: updates.maternal_surname,\n      phone: updates.phone,\n      birth_date: updates.birth_date,\n      company_id: updates.company_id,\n      rfc: updates.rfc,\n      curp: updates.curp,\n      advisor_id: updates.advisor_id,\n      address: updates.address,\n      city: updates.city,\n      state: updates.state,\n      postal_code: updates.postal_code,\n      gender: updates.gender,\n      marital_status: updates.marital_status,\n      employment_type: updates.employment_type,\n      employment_years: updates.employment_years,\n      monthly_income: updates.monthly_income,\n      additional_income: updates.additional_income,\n      monthly_expenses: updates.monthly_expenses,\n      other_loan_balances: updates.other_loan_balances,\n      bank_name: updates.bank_name,\n      bank_clabe: updates.bank_clabe,\n      bank_account_number: updates.bank_account_number,\n      bank_account_type: updates.bank_account_type,\n      bank_account_origin: updates.bank_account_origin,\n    };\n\n    Object.keys(userUpdates).forEach(key => {\n      if (userUpdates[key as keyof typeof userUpdates] === undefined) {\n        delete userUpdates[key as keyof typeof userUpdates];\n      }\n    });\n\n    const { data, error } = await supabase\n      .from(USERS_TABLE)\n      .update(userUpdates)\n      .eq('id', id)\n      .select();\n\n    if (error) {\n      console.error(`Error updating user with ID ${id}:`, error);\n      throw error;\n    }\n\n    let updatedClient: Client;\n\n    if (!data || data.length === 0) {\n      console.log(`No data returned when updating client with ID ${id}, fetching client data separately`);\n      \n      const { data: fetchedData, error: fetchError } = await supabase\n        .from(USERS_TABLE)\n        .select('*')\n        .eq('id', id)\n        .single();\n      \n      if (fetchError) {\n        console.error(`Error fetching updated client with ID ${id}:`, fetchError);\n        throw new Error('El cliente fue actualizado pero no se pudieron recuperar sus datos. Por favor, recargue la página.');\n      }\n      \n      if (!fetchedData) {\n        console.error(`No data found for client with ID ${id} after update`);\n        throw new Error('No se encontró el cliente después de la actualización. Por favor, verifique que el cliente exista.');\n      }\n      \n      updatedClient = mapUserToClient(fetchedData);\n    } else {\n      updatedClient = mapUserToClient(data[0]);\n    }\n    \n    if (documents && documents.length > 0 && userId) {\n      await uploadClientDocuments(id, userId, documents);\n    }\n\n    return updatedClient;\n  } catch (error) {\n    console.error(`Error in updateClient:`, error);\n    throw error;\n  }\n};\n\nexport const deleteClient = async (id: string) => {\n  try {\n    const { error } = await supabase\n      .from(USERS_TABLE)\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      console.error(`Error deleting user with ID ${id}:`, error);\n      throw error;\n    }\n\n    return true;\n  } catch (error) {\n    console.error(`Error in deleteClient:`, error);\n    throw error;\n  }\n};\n\nexport const checkClientExists = async (email: string, rfc?: string) => {\n  try {\n    let query = supabase\n      .from(USERS_TABLE)\n      .select('id, email, rfc')\n      .eq('email', email);\n\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      console.error('Error checking client existence:', error);\n      throw error;\n    }\n\n    return data.length > 0 ? data[0] : null;\n  } catch (error) {\n    console.error('Error in checkClientExists:', error);\n    throw error;\n  }\n};\n\nexport const getClientCount = async (filters?: ClientFilter) => {\n  try {\n    let query = supabase\n      .from(USERS_TABLE)\n      .select('id', { count: 'exact', head: true });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n    }\n\n    const { count, error } = await query;\n\n    if (error) {\n      console.error('Error getting client count:', error);\n      throw error;\n    }\n\n    return count || 0;\n  } catch (error) {\n    console.error('Error in getClientCount:', error);\n    return 0;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}