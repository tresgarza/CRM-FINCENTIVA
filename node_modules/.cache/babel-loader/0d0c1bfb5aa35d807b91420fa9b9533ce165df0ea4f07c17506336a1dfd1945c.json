{"ast":null,"code":"import{getServiceClient}from\"../lib/supabaseClient\";import{TABLES}from\"../utils/constants/tables\";import*as documentService from'./documentService';import{ErrorType,createAppError,logError,handleApiError,isRlsViolation,createRlsViolationError,createNoEffectError}from'../utils/errorHandling';import{processNumericField}from'../utils/numberFormatting';import{uploadClientDocuments as uploadDocs}from'../utils/documentUpload';// Re-exportamos las interfaces para mantener compatibilidad\nconst USERS_TABLE='users';const mapUserToClient=userData=>{if(!userData){console.error('Error: userData is undefined in mapUserToClient');throw new Error('No se pudo procesar la información del cliente, los datos son inválidos');}// Generar el nombre completo a partir de los componentes del nombre\nconst fullName=userData.name||[userData.first_name,userData.paternal_surname,userData.maternal_surname].filter(Boolean).join(' ');// Crear el objeto cliente con todos los campos de la base de datos\nconst client={id:userData.id,created_at:userData.created_at,last_login:userData.last_login,name:fullName,// Campo calculado/virtual - no existe en la base de datos\nfirst_name:userData.first_name,paternal_surname:userData.paternal_surname,maternal_surname:userData.maternal_surname,email:userData.email,phone:userData.phone,birth_date:userData.birth_date,company_id:userData.company_id,rfc:userData.rfc,curp:userData.curp,advisor_id:userData.advisor_id,address:userData.address,city:userData.city,state:userData.state,postal_code:userData.postal_code,gender:userData.gender,marital_status:userData.marital_status,employment_type:userData.employment_type,employment_years:userData.employment_years,monthly_income:userData.monthly_income,additional_income:userData.additional_income,monthly_expenses:userData.monthly_expenses,other_loan_balances:userData.other_loan_balances,bank_name:userData.bank_name,bank_clabe:userData.bank_clabe,bank_account_number:userData.bank_account_number,bank_account_type:userData.bank_account_type,bank_account_origin:userData.bank_account_origin,street_number_ext:userData.street_number_ext,street_number_int:userData.street_number_int,neighborhood:userData.neighborhood,home_phone:userData.home_phone,birth_state:userData.birth_state,nationality:userData.nationality,job_position:userData.job_position,employer_name:userData.employer_name,employer_phone:userData.employer_phone,employer_address:userData.employer_address,employer_activity:userData.employer_activity,mortgage_payment:userData.mortgage_payment,rent_payment:userData.rent_payment,dependent_persons:userData.dependent_persons,income_frequency:userData.income_frequency,payment_method:userData.payment_method,credit_purpose:userData.credit_purpose,spouse_paternal_surname:userData.spouse_paternal_surname,spouse_maternal_surname:userData.spouse_maternal_surname,reference1_name:userData.reference1_name,reference1_relationship:userData.reference1_relationship,reference1_address:userData.reference1_address,reference1_phone:userData.reference1_phone,reference2_name:userData.reference2_name,reference2_relationship:userData.reference2_relationship,reference2_address:userData.reference2_address,reference2_phone:userData.reference2_phone};return client;};export const getClients=async filters=>{try{// Usamos el cliente de servicio para evitar problemas de autenticación\nconst serviceClient=getServiceClient();let query=serviceClient.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin, street_number_ext, street_number_int, neighborhood, home_phone, birth_state, nationality, job_position, employer_name, employer_phone, employer_address, employer_activity, mortgage_payment, rent_payment, dependent_persons, income_frequency, payment_method, credit_purpose, spouse_paternal_surname, spouse_maternal_surname, reference1_name, reference1_relationship, reference1_address, reference1_phone, reference2_name, reference2_relationship, reference2_address, reference2_phone, last_login',{count:'exact'});if(filters){if(filters.advisor_id){query=query.eq('advisor_id',filters.advisor_id);}if(filters.company_id){query=query.eq('company_id',filters.company_id);}if(filters.dateFrom){query=query.gte('created_at',filters.dateFrom);}if(filters.dateTo){query=query.lte('created_at',filters.dateTo);}if(filters.searchQuery){query=query.or(`first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);}if(filters.page!==undefined&&filters.pageSize){const from=filters.page*filters.pageSize;const to=from+filters.pageSize-1;query=query.range(from,to);}}query=query.order('created_at',{ascending:false});const{data,error,count}=await query;if(error){logError(error,'getClients',{filters});throw handleApiError(error);}const clients=data?data.map(mapUserToClient):[];return{clients,totalCount:count||0};}catch(error){logError(error,'getClients',{filters});throw handleApiError(error);}};export const getClientById=async id=>{try{// Usamos el cliente de servicio para evitar problemas de autenticación\nconst serviceClient=getServiceClient();const{data,error}=await serviceClient.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin, street_number_ext, street_number_int, neighborhood, home_phone, birth_state, nationality, job_position, employer_name, employer_phone, employer_address, employer_activity, mortgage_payment, rent_payment, dependent_persons, income_frequency, payment_method, credit_purpose, spouse_paternal_surname, spouse_maternal_surname, reference1_name, reference1_relationship, reference1_address, reference1_phone, reference2_name, reference2_relationship, reference2_address, reference2_phone, last_login').eq('id',id).single();if(error){logError(error,'getClientById',{clientId:id});throw handleApiError(error);}if(!data){const notFoundError=createAppError(ErrorType.NOT_FOUND,`No se encontró cliente con ID: ${id}`);logError(notFoundError,'getClientById',{clientId:id});throw notFoundError;}return mapUserToClient(data);}catch(error){logError(error,'getClientById',{clientId:id});throw handleApiError(error);}};function escapeSQLString(str){if(!str)return'';return str.replace(/'/g,\"''\");}export const getClientApplications=async clientId=>{try{const client=await getClientById(clientId).catch(err=>{console.error(`Error obteniendo cliente con ID ${clientId}:`,err);throw handleApiError(err);});if(!client){const notFoundError=createAppError(ErrorType.NOT_FOUND,`El cliente no existe`);logError(notFoundError,'getClientApplications',{clientId});return[];}// Construir la consulta con el nombre del cliente\nconst query=`\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name||'')}'\n      ORDER BY created_at DESC\n    `;console.log(`Ejecutando consulta para obtener aplicaciones del cliente ${clientId}:`,query);// Utilizamos el servicio de consulta SQL directo que evita problemas de RLS\nconst executeQuery=async query=>{try{const response=await fetch('http://localhost:3100/query',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query:query})});if(!response.ok){throw new Error(`Error en la respuesta HTTP: ${response.status} ${response.statusText}`);}const result=await response.json();if(result.error){console.error('Error en la consulta SQL:',result.error);throw new Error(result.error);}return result.data||[];}catch(error){console.error('Error ejecutando la consulta:',error);throw error;}};const data=await executeQuery(query);console.log(`Aplicaciones encontradas para el cliente ${clientId}:`,data.length);return data;}catch(error){logError(error,'getClientApplications',{clientId});console.error(`Error completo al obtener aplicaciones para cliente ${clientId}:`,error);// Devolvemos un array vacío en caso de error para no interrumpir el flujo\nreturn[];}};export const uploadClientDocuments=async(clientId,documents,userId)=>{if(!clientId){console.error('Client ID is required for uploading documents');throw new Error('El ID del cliente es requerido para subir documentos');}// Verificar que se proporcionaron documentos válidos\nif(!documents||!Array.isArray(documents)||documents.length===0){console.error('No valid documents provided for upload');throw new Error('No se proporcionaron documentos válidos para subir');}if(!userId){console.error('User ID is required for uploading documents');throw new Error('Se requiere el ID del usuario para subir documentos');}try{// Obtener cliente con permisos de servicio para operaciones que requieren más privilegios\nconst serviceClient=getServiceClient();// Asegurarse de que el bucket de almacenamiento exista\nawait documentService.ensureStorageBucketExists(serviceClient);// Intentar subir cada documento\nconst uploadPromises=documents.map(async document=>{try{// Verificar que el documento tenga datos válidos\nif(!document.file||!document.name){console.error('Invalid document data',document);throw new Error('Datos de documento inválidos: se requiere archivo y nombre');}// Create a document upload request compatible with the document service\nconst uploadParams={file:document.file,category:document.category,documentName:document.name,description:document.description,userId:userId,client_id:clientId,authClient:serviceClient};// Subir el documento\nreturn await documentService.uploadDocument(uploadParams);}catch(docError){// Manejo de errores específicos de permisos RLS\nif(docError.message&&(docError.message.includes('permission denied')||docError.message.includes('not authorized')||docError.message.includes('row level security'))){console.error('Permission error when uploading document:',docError);throw new Error('No tienes permiso para subir documentos para este cliente. Verifica tus permisos.');}// Registrar el error pero permitir que otros uploads continúen\nconsole.error(`Error uploading document for client ${clientId}:`,docError);throw docError;}});const results=await Promise.all(uploadPromises);return results;}catch(error){logError(error,'uploadClientDocuments',{clientId});throw handleApiError(error);}};export const createClient=async(client,documents,userId)=>{try{// Create a copy to avoid modifying the original object\nconst userData={email:client.email,first_name:client.first_name||'',paternal_surname:client.paternal_surname||'',maternal_surname:client.maternal_surname||'',phone:client.phone,birth_date:client.birth_date,company_id:client.company_id,rfc:client.rfc,curp:client.curp,advisor_id:client.advisor_id,address:client.address,city:client.city,state:client.state,postal_code:client.postal_code,gender:client.gender,marital_status:client.marital_status,employment_type:client.employment_type,employment_years:client.employment_years,monthly_income:client.monthly_income,additional_income:client.additional_income,monthly_expenses:client.monthly_expenses,other_loan_balances:client.other_loan_balances,bank_name:client.bank_name,bank_clabe:client.bank_clabe,bank_account_number:client.bank_account_number,bank_account_type:client.bank_account_type,bank_account_origin:client.bank_account_origin,street_number_ext:client.street_number_ext,street_number_int:client.street_number_int,neighborhood:client.neighborhood,home_phone:client.home_phone,birth_state:client.birth_state,nationality:client.nationality,job_position:client.job_position,employer_name:client.employer_name,employer_phone:client.employer_phone,employer_address:client.employer_address,employer_activity:client.employer_activity,mortgage_payment:client.mortgage_payment,rent_payment:client.rent_payment,dependent_persons:client.dependent_persons,income_frequency:client.income_frequency,payment_method:client.payment_method,credit_purpose:client.credit_purpose,spouse_paternal_surname:client.spouse_paternal_surname,spouse_maternal_surname:client.spouse_maternal_surname,reference1_name:client.reference1_name,reference1_relationship:client.reference1_relationship,reference1_address:client.reference1_address,reference1_phone:client.reference1_phone,reference2_name:client.reference2_name,reference2_relationship:client.reference2_relationship,reference2_address:client.reference2_address,reference2_phone:client.reference2_phone};// Asegurarse de que no se incluyan campos calculados\n// Estos campos son calculados en la aplicación pero no existen en la base de datos\ndelete userData.name;delete userData.warningMessage;// Process numeric fields\nif(userData.employment_years!==undefined){const processed=processNumericField(userData.employment_years);userData.employment_years=processed===null?undefined:processed;}if(userData.monthly_income!==undefined){const processed=processNumericField(userData.monthly_income);userData.monthly_income=processed===null?undefined:processed;}if(userData.additional_income!==undefined){const processed=processNumericField(userData.additional_income);userData.additional_income=processed===null?undefined:processed;}if(userData.monthly_expenses!==undefined){const processed=processNumericField(userData.monthly_expenses);userData.monthly_expenses=processed===null?undefined:processed;}if(userData.other_loan_balances!==undefined){const processed=processNumericField(userData.other_loan_balances);userData.other_loan_balances=processed===null?undefined:processed;}// Ensure company_id is present as it's required by the database schema\nif(!userData.company_id){console.warn('No company_id provided when creating client - using default company');userData.company_id=\"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\";// Default company (Herramental)\n}// Log sanitized data for debugging\nconsole.log(`Creating client with sanitized data:`,JSON.stringify(userData));// Get the service client for this operation to evitar problemas de autenticación\nconst serviceClient=getServiceClient();const{data,error,count}=await serviceClient.from(USERS_TABLE).insert([userData]).select();if(error){// Verificar si es una violación de RLS\nif(isRlsViolation(error)){throw createRlsViolationError('crear','cliente','nuevo',error);}logError(error,'createClient');throw handleApiError(error);}// Verify that rows were affected\nif(!data||data.length===0||count===0){const noDataError=createAppError(ErrorType.SERVER,'No se pudo crear el cliente. No se recibieron datos del servidor.');logError(noDataError,'createClient');throw noDataError;}const newClient=mapUserToClient(data[0]);let documentResult=null;if(documents&&documents.length>0&&userId&&newClient.id){try{console.log(`Uploading ${documents.length} documents for new client ${newClient.id}`);// Usar la versión mejorada de uploadClientDocuments de utils\ndocumentResult=await uploadDocs(newClient.id,documents);// Check if any documents uploaded successfully\nif(documentResult&&documentResult.length>0){console.log(`${documentResult.length} documents uploaded successfully during client creation`);}else{console.warn(`No documents were successfully uploaded during client creation`);newClient.warningMessage='Se creó el cliente, pero no se pudieron subir los documentos. Puede intentar agregarlos nuevamente más tarde.';}}catch(docError){console.error('Error uploading documents during client creation:',docError);// Información más detallada del error\nconst errorMessage=docError instanceof Error?docError.message:'Error desconocido';console.error(`Error detail: ${errorMessage}`);// Continue with client creation but add warning\nnewClient.warningMessage=`Se creó el cliente, pero hubo un problema al subir los documentos: ${errorMessage}. Puede intentar agregarlos nuevamente más tarde.`;}}return newClient;}catch(error){logError(error,'createClient',{clientData:client});throw handleApiError(error);}};export const updateClient=async(id,updates,documents,userId)=>{try{console.log(`Starting client update for ID ${id}`,updates);// Create a copy to avoid modifying the original object\nconst userUpdates={...updates};// Eliminar campos calculados o virtuales que no existen en la base de datos\n// El campo 'name' es calculado en mapUserToClient pero no existe en la tabla\ndelete userUpdates.name;delete userUpdates.warningMessage;// Process specific numeric fields\nif('employment_years'in updates){const processed=processNumericField(updates.employment_years);userUpdates.employment_years=processed===null?undefined:processed;}if('monthly_income'in updates){const processed=processNumericField(updates.monthly_income);userUpdates.monthly_income=processed===null?undefined:processed;}if('additional_income'in updates){const processed=processNumericField(updates.additional_income);userUpdates.additional_income=processed===null?undefined:processed;}if('monthly_expenses'in updates){const processed=processNumericField(updates.monthly_expenses);userUpdates.monthly_expenses=processed===null?undefined:processed;}if('other_loan_balances'in updates){const processed=processNumericField(updates.other_loan_balances);userUpdates.other_loan_balances=processed===null?undefined:processed;}if('mortgage_payment'in updates){const processed=processNumericField(updates.mortgage_payment);userUpdates.mortgage_payment=processed===null?undefined:processed;}if('rent_payment'in updates){const processed=processNumericField(updates.rent_payment);userUpdates.rent_payment=processed===null?undefined:processed;}if('dependent_persons'in updates){const processed=processNumericField(updates.dependent_persons);userUpdates.dependent_persons=processed===null?undefined:processed;}// Remove undefined fields\nObject.keys(userUpdates).forEach(key=>{const typedKey=key;if(userUpdates[typedKey]===undefined){delete userUpdates[typedKey];}});console.log(`Updating client ${id} with sanitized data:`,JSON.stringify(userUpdates));// Get the service client for this operation to evitar problemas de permisos\nconst serviceClient=getServiceClient();// First, verify the client exists\nconst{data:existingClient,error:existingError}=await serviceClient.from(USERS_TABLE).select('id').eq('id',id).single();if(existingError||!existingClient){const notFoundError=createAppError(ErrorType.NOT_FOUND,`No se encontró el cliente con ID ${id}. Verifique que el cliente exista.`);logError(notFoundError,'updateClient',{clientId:id});throw notFoundError;}// Perform the update with the service client\nconst{data,error,count}=await serviceClient.from(USERS_TABLE).update(userUpdates).eq('id',id).select();if(error){// Verificar si es una violación de RLS\nif(isRlsViolation(error)){throw createRlsViolationError('actualizar','cliente',id,error);}logError(error,'updateClient',{clientId:id});throw handleApiError(error);}// Verify that the update affected rows\nif(!data||data.length===0||count===0){console.warn(`Update operation didn't affect any rows for client ${id}`);throw createNoEffectError('update','cliente',id);}let updatedClient;if(!data||data.length===0){console.log(`No data returned when updating client with ID ${id}, fetching client data separately`);// Fallback: fetch the client data separately\nconst{data:fetchedData,error:fetchError}=await serviceClient.from(USERS_TABLE).select('*').eq('id',id).single();if(fetchError){console.error('Error fetching updated client:',fetchError);throw fetchError;}updatedClient=mapUserToClient(fetchedData);}else{updatedClient=mapUserToClient(data[0]);}let documentResult=null;// Upload documents if provided\nif(documents&&documents.length>0&&userId){try{console.log(`Uploading ${documents.length} documents for client ${id}`);// Usar la versión mejorada de uploadClientDocuments de utils\ndocumentResult=await uploadDocs(id,documents);// Check if any documents failed to upload\nif(documentResult&&documentResult.length>0){console.log(`${documentResult.length} documents uploaded successfully during client update`);}else{console.warn(`No documents were successfully uploaded during client update`);updatedClient.warningMessage='Se actualizó el cliente, pero no se pudieron subir los documentos. Puede intentar agregarlos nuevamente más tarde.';}}catch(docError){console.error(`Error uploading documents for client ${id}:`,docError);// Información más detallada del error\nconst errorMessage=docError instanceof Error?docError.message:'Error desconocido';console.error(`Error detail: ${errorMessage}`);// Continue with client update but add warning\nupdatedClient.warningMessage=`Se actualizó el cliente, pero hubo un problema al subir los documentos: ${errorMessage}. Puede intentar agregarlos nuevamente más tarde.`;}}console.log(`Client update complete for ID ${id}`);return updatedClient;}catch(error){logError(error,'updateClient',{clientId:id,updates});throw handleApiError(error);}};export const deleteClient=async id=>{try{// Get the service client for this operation\nconst serviceClient=getServiceClient();const{error,count}=await serviceClient.from(USERS_TABLE).delete().eq('id',id);if(error){// Verificar si es una violación de RLS\nif(isRlsViolation(error)){throw createRlsViolationError('eliminar','cliente',id,error);}logError(error,'deleteClient',{clientId:id});throw handleApiError(error);}// Verify that rows were affected\nif(count===0){console.warn(`Delete operation didn't affect any rows for client ${id}`);throw createNoEffectError('delete','cliente',id);}return true;}catch(error){logError(error,'deleteClient',{clientId:id});throw handleApiError(error);}};export const checkClientExists=async(email,rfc)=>{try{const serviceClient=getServiceClient();let query=serviceClient.from(USERS_TABLE).select('id, email, rfc').eq('email',email);if(rfc){query=query.or(`rfc.eq.${rfc}`);}const{data,error}=await query;if(error){logError(error,'checkClientExists',{email,rfc});throw handleApiError(error);}return(data===null||data===void 0?void 0:data.length)>0;}catch(error){logError(error,'checkClientExists',{email,rfc});throw handleApiError(error);}};export const getClientCount=async filters=>{try{const serviceClient=getServiceClient();let query=serviceClient.from(USERS_TABLE).select('*',{count:'exact',head:true});if(filters){if(filters.advisor_id){query=query.eq('advisor_id',filters.advisor_id);}if(filters.company_id){query=query.eq('company_id',filters.company_id);}if(filters.dateFrom){query=query.gte('created_at',filters.dateFrom);}if(filters.dateTo){query=query.lte('created_at',filters.dateTo);}}const{count,error}=await query;if(error){logError(error,'getClientCount',{filters});throw handleApiError(error);}return count||0;}catch(error){logError(error,'getClientCount',{filters});throw handleApiError(error);}};","map":{"version":3,"names":["getServiceClient","TABLES","documentService","ErrorType","createAppError","logError","handleApiError","isRlsViolation","createRlsViolationError","createNoEffectError","processNumericField","uploadClientDocuments","uploadDocs","USERS_TABLE","mapUserToClient","userData","console","error","Error","fullName","name","first_name","paternal_surname","maternal_surname","filter","Boolean","join","client","id","created_at","last_login","email","phone","birth_date","company_id","rfc","curp","advisor_id","address","city","state","postal_code","gender","marital_status","employment_type","employment_years","monthly_income","additional_income","monthly_expenses","other_loan_balances","bank_name","bank_clabe","bank_account_number","bank_account_type","bank_account_origin","street_number_ext","street_number_int","neighborhood","home_phone","birth_state","nationality","job_position","employer_name","employer_phone","employer_address","employer_activity","mortgage_payment","rent_payment","dependent_persons","income_frequency","payment_method","credit_purpose","spouse_paternal_surname","spouse_maternal_surname","reference1_name","reference1_relationship","reference1_address","reference1_phone","reference2_name","reference2_relationship","reference2_address","reference2_phone","getClients","filters","serviceClient","query","from","select","count","eq","dateFrom","gte","dateTo","lte","searchQuery","or","page","undefined","pageSize","to","range","order","ascending","data","clients","map","totalCount","getClientById","single","clientId","notFoundError","NOT_FOUND","escapeSQLString","str","replace","getClientApplications","catch","err","APPLICATIONS","log","executeQuery","response","fetch","method","headers","body","JSON","stringify","ok","status","statusText","result","json","length","documents","userId","Array","isArray","ensureStorageBucketExists","uploadPromises","document","file","uploadParams","category","documentName","description","client_id","authClient","uploadDocument","docError","message","includes","results","Promise","all","createClient","warningMessage","processed","warn","insert","noDataError","SERVER","newClient","documentResult","errorMessage","clientData","updateClient","updates","userUpdates","Object","keys","forEach","key","typedKey","existingClient","existingError","update","updatedClient","fetchedData","fetchError","deleteClient","delete","checkClientExists","getClientCount","head"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/clientService.ts"],"sourcesContent":["import { supabase, getAuthenticatedClient, getServiceClient } from \"../lib/supabaseClient\";\nimport { TABLES } from \"../utils/constants/tables\";\nimport * as documentService from './documentService';\nimport { Client, ClientDocument } from \"../types/client\";\nimport { \n  ErrorType, \n  createAppError, \n  logError, \n  handleApiError, \n  isRlsViolation,\n  createRlsViolationError,\n  createNoEffectError\n} from '../utils/errorHandling';\nimport { parseNumericString, processNumericField } from '../utils/numberFormatting';\nimport { uploadClientDocuments as uploadDocs } from '../utils/documentUpload';\n\n// Re-exportamos las interfaces para mantener compatibilidad\nexport type { Client, ClientDocument };\n\nexport interface ClientFilter {\n  searchQuery?: string;\n  advisor_id?: string;\n  company_id?: string;\n  dateFrom?: string;\n  dateTo?: string;\n  page?: number;\n  pageSize?: number;\n}\n\nconst USERS_TABLE = 'users';\n\nconst mapUserToClient = (userData: any): Client => {\n  if (!userData) {\n    console.error('Error: userData is undefined in mapUserToClient');\n    throw new Error('No se pudo procesar la información del cliente, los datos son inválidos');\n  }\n  \n  // Generar el nombre completo a partir de los componentes del nombre\n  const fullName = userData.name || [\n    userData.first_name,\n    userData.paternal_surname,\n    userData.maternal_surname\n  ].filter(Boolean).join(' ');\n  \n  // Crear el objeto cliente con todos los campos de la base de datos\n  const client: Client = {\n    id: userData.id,\n    created_at: userData.created_at,\n    last_login: userData.last_login,\n    name: fullName, // Campo calculado/virtual - no existe en la base de datos\n    first_name: userData.first_name,\n    paternal_surname: userData.paternal_surname,\n    maternal_surname: userData.maternal_surname,\n    email: userData.email,\n    phone: userData.phone,\n    birth_date: userData.birth_date,\n    company_id: userData.company_id,\n    rfc: userData.rfc,\n    curp: userData.curp,\n    advisor_id: userData.advisor_id,\n    address: userData.address,\n    city: userData.city,\n    state: userData.state,\n    postal_code: userData.postal_code,\n    gender: userData.gender,\n    marital_status: userData.marital_status,\n    employment_type: userData.employment_type,\n    employment_years: userData.employment_years,\n    monthly_income: userData.monthly_income,\n    additional_income: userData.additional_income,\n    monthly_expenses: userData.monthly_expenses,\n    other_loan_balances: userData.other_loan_balances,\n    bank_name: userData.bank_name,\n    bank_clabe: userData.bank_clabe,\n    bank_account_number: userData.bank_account_number,\n    bank_account_type: userData.bank_account_type,\n    bank_account_origin: userData.bank_account_origin,\n    street_number_ext: userData.street_number_ext,\n    street_number_int: userData.street_number_int,\n    neighborhood: userData.neighborhood,\n    home_phone: userData.home_phone,\n    birth_state: userData.birth_state,\n    nationality: userData.nationality,\n    job_position: userData.job_position,\n    employer_name: userData.employer_name,\n    employer_phone: userData.employer_phone,\n    employer_address: userData.employer_address,\n    employer_activity: userData.employer_activity,\n    mortgage_payment: userData.mortgage_payment,\n    rent_payment: userData.rent_payment,\n    dependent_persons: userData.dependent_persons,\n    income_frequency: userData.income_frequency,\n    payment_method: userData.payment_method,\n    credit_purpose: userData.credit_purpose,\n    spouse_paternal_surname: userData.spouse_paternal_surname,\n    spouse_maternal_surname: userData.spouse_maternal_surname,\n    reference1_name: userData.reference1_name,\n    reference1_relationship: userData.reference1_relationship,\n    reference1_address: userData.reference1_address,\n    reference1_phone: userData.reference1_phone,\n    reference2_name: userData.reference2_name,\n    reference2_relationship: userData.reference2_relationship,\n    reference2_address: userData.reference2_address,\n    reference2_phone: userData.reference2_phone,\n  };\n  \n  return client;\n};\n\nexport const getClients = async (filters?: ClientFilter) => {\n  try {\n    // Usamos el cliente de servicio para evitar problemas de autenticación\n    const serviceClient = getServiceClient();\n    \n    let query = serviceClient.from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin, street_number_ext, street_number_int, neighborhood, home_phone, birth_state, nationality, job_position, employer_name, employer_phone, employer_address, employer_activity, mortgage_payment, rent_payment, dependent_persons, income_frequency, payment_method, credit_purpose, spouse_paternal_surname, spouse_maternal_surname, reference1_name, reference1_relationship, reference1_address, reference1_phone, reference2_name, reference2_relationship, reference2_address, reference2_phone, last_login', { count: 'exact' });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n\n    query = query.order('created_at', { ascending: false });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      logError(error, 'getClients', { filters });\n      throw handleApiError(error);\n    }\n\n    const clients = data ? data.map(mapUserToClient) : [];\n\n    return {\n      clients,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    logError(error, 'getClients', { filters });\n    throw handleApiError(error);\n  }\n};\n\nexport const getClientById = async (id: string) => {\n  try {\n    // Usamos el cliente de servicio para evitar problemas de autenticación\n    const serviceClient = getServiceClient();\n    \n    const { data, error } = await serviceClient\n      .from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin, street_number_ext, street_number_int, neighborhood, home_phone, birth_state, nationality, job_position, employer_name, employer_phone, employer_address, employer_activity, mortgage_payment, rent_payment, dependent_persons, income_frequency, payment_method, credit_purpose, spouse_paternal_surname, spouse_maternal_surname, reference1_name, reference1_relationship, reference1_address, reference1_phone, reference2_name, reference2_relationship, reference2_address, reference2_phone, last_login')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      logError(error, 'getClientById', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    if (!data) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `No se encontró cliente con ID: ${id}`\n      );\n      logError(notFoundError, 'getClientById', { clientId: id });\n      throw notFoundError;\n    }\n\n    return mapUserToClient(data);\n  } catch (error) {\n    logError(error, 'getClientById', { clientId: id });\n    throw handleApiError(error);\n  }\n};\n\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\nexport const getClientApplications = async (clientId: string) => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      console.error(`Error obteniendo cliente con ID ${clientId}:`, err);\n      throw handleApiError(err);\n    });\n    \n    if (!client) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `El cliente no existe`\n      );\n      logError(notFoundError, 'getClientApplications', { clientId });\n      return [];\n    }\n    \n    // Construir la consulta con el nombre del cliente\n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name || '')}'\n      ORDER BY created_at DESC\n    `;\n    \n    console.log(`Ejecutando consulta para obtener aplicaciones del cliente ${clientId}:`, query);\n    \n    // Utilizamos el servicio de consulta SQL directo que evita problemas de RLS\n    const executeQuery = async (query: string) => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query: query }),\n        });\n        \n        if (!response.ok) {\n          throw new Error(`Error en la respuesta HTTP: ${response.status} ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        \n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        \n        return result.data || [];\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    \n    const data = await executeQuery(query);\n    console.log(`Aplicaciones encontradas para el cliente ${clientId}:`, data.length);\n    return data;\n  } catch (error) {\n    logError(error, 'getClientApplications', { clientId });\n    console.error(`Error completo al obtener aplicaciones para cliente ${clientId}:`, error);\n    // Devolvemos un array vacío en caso de error para no interrumpir el flujo\n    return [];\n  }\n};\n\nexport const uploadClientDocuments = async (\n  clientId: string, \n  documents: ClientDocument[],\n  userId: string\n): Promise<documentService.Document[]> => {\n  if (!clientId) {\n    console.error('Client ID is required for uploading documents');\n    throw new Error('El ID del cliente es requerido para subir documentos');\n  }\n\n  // Verificar que se proporcionaron documentos válidos\n  if (!documents || !Array.isArray(documents) || documents.length === 0) {\n    console.error('No valid documents provided for upload');\n    throw new Error('No se proporcionaron documentos válidos para subir');\n  }\n\n  if (!userId) {\n    console.error('User ID is required for uploading documents');\n    throw new Error('Se requiere el ID del usuario para subir documentos');\n  }\n\n  try {\n    // Obtener cliente con permisos de servicio para operaciones que requieren más privilegios\n    const serviceClient = getServiceClient();\n    \n    // Asegurarse de que el bucket de almacenamiento exista\n    await documentService.ensureStorageBucketExists(serviceClient);\n\n    // Intentar subir cada documento\n    const uploadPromises = documents.map(async (document) => {\n      try {\n        // Verificar que el documento tenga datos válidos\n        if (!document.file || !document.name) {\n          console.error('Invalid document data', document);\n          throw new Error(\n            'Datos de documento inválidos: se requiere archivo y nombre'\n          );\n        }\n\n        // Create a document upload request compatible with the document service\n        const uploadParams: documentService.UploadDocumentParams = {\n          file: document.file,\n          category: document.category,\n          documentName: document.name,\n          description: document.description,\n          userId: userId,\n          client_id: clientId,\n          authClient: serviceClient\n        };\n\n        // Subir el documento\n        return await documentService.uploadDocument(uploadParams);\n      } catch (docError: any) {\n        // Manejo de errores específicos de permisos RLS\n        if (docError.message && (\n            docError.message.includes('permission denied') || \n            docError.message.includes('not authorized') ||\n            docError.message.includes('row level security')\n          )) {\n          console.error('Permission error when uploading document:', docError);\n          throw new Error('No tienes permiso para subir documentos para este cliente. Verifica tus permisos.');\n        }\n        \n        // Registrar el error pero permitir que otros uploads continúen\n        console.error(`Error uploading document for client ${clientId}:`, docError);\n        throw docError;\n      }\n    });\n\n    const results = await Promise.all(uploadPromises);\n    \n    return results;\n  } catch (error) {\n    logError(error, 'uploadClientDocuments', { clientId });\n    throw handleApiError(error);\n  }\n};\n\nexport const createClient = async (client: Omit<Client, 'id' | 'created_at'>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    // Create a copy to avoid modifying the original object\n    const userData = {\n      email: client.email,\n      first_name: client.first_name || '',\n      paternal_surname: client.paternal_surname || '',\n      maternal_surname: client.maternal_surname || '',\n      phone: client.phone,\n      birth_date: client.birth_date,\n      company_id: client.company_id,\n      rfc: client.rfc,\n      curp: client.curp,\n      advisor_id: client.advisor_id,\n      address: client.address,\n      city: client.city,\n      state: client.state,\n      postal_code: client.postal_code,\n      gender: client.gender,\n      marital_status: client.marital_status,\n      employment_type: client.employment_type,\n      employment_years: client.employment_years,\n      monthly_income: client.monthly_income,\n      additional_income: client.additional_income,\n      monthly_expenses: client.monthly_expenses,\n      other_loan_balances: client.other_loan_balances,\n      bank_name: client.bank_name,\n      bank_clabe: client.bank_clabe,\n      bank_account_number: client.bank_account_number,\n      bank_account_type: client.bank_account_type,\n      bank_account_origin: client.bank_account_origin,\n      street_number_ext: client.street_number_ext,\n      street_number_int: client.street_number_int,\n      neighborhood: client.neighborhood,\n      home_phone: client.home_phone,\n      birth_state: client.birth_state,\n      nationality: client.nationality,\n      job_position: client.job_position,\n      employer_name: client.employer_name,\n      employer_phone: client.employer_phone,\n      employer_address: client.employer_address,\n      employer_activity: client.employer_activity,\n      mortgage_payment: client.mortgage_payment,\n      rent_payment: client.rent_payment,\n      dependent_persons: client.dependent_persons,\n      income_frequency: client.income_frequency,\n      payment_method: client.payment_method,\n      credit_purpose: client.credit_purpose,\n      spouse_paternal_surname: client.spouse_paternal_surname,\n      spouse_maternal_surname: client.spouse_maternal_surname,\n      reference1_name: client.reference1_name,\n      reference1_relationship: client.reference1_relationship,\n      reference1_address: client.reference1_address,\n      reference1_phone: client.reference1_phone,\n      reference2_name: client.reference2_name,\n      reference2_relationship: client.reference2_relationship,\n      reference2_address: client.reference2_address,\n      reference2_phone: client.reference2_phone,\n    };\n\n    // Asegurarse de que no se incluyan campos calculados\n    // Estos campos son calculados en la aplicación pero no existen en la base de datos\n    delete (userData as any).name;\n    delete (userData as any).warningMessage;\n\n    // Process numeric fields\n    if (userData.employment_years !== undefined) {\n      const processed = processNumericField(userData.employment_years);\n      userData.employment_years = processed === null ? undefined : processed;\n    }\n    if (userData.monthly_income !== undefined) {\n      const processed = processNumericField(userData.monthly_income);\n      userData.monthly_income = processed === null ? undefined : processed;\n    }\n    if (userData.additional_income !== undefined) {\n      const processed = processNumericField(userData.additional_income);\n      userData.additional_income = processed === null ? undefined : processed;\n    }\n    if (userData.monthly_expenses !== undefined) {\n      const processed = processNumericField(userData.monthly_expenses);\n      userData.monthly_expenses = processed === null ? undefined : processed;\n    }\n    if (userData.other_loan_balances !== undefined) {\n      const processed = processNumericField(userData.other_loan_balances);\n      userData.other_loan_balances = processed === null ? undefined : processed;\n    }\n\n    // Ensure company_id is present as it's required by the database schema\n    if (!userData.company_id) {\n      console.warn('No company_id provided when creating client - using default company');\n      userData.company_id = \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\"; // Default company (Herramental)\n    }\n\n    // Log sanitized data for debugging\n    console.log(`Creating client with sanitized data:`, JSON.stringify(userData));\n\n    // Get the service client for this operation to evitar problemas de autenticación\n    const serviceClient = getServiceClient();\n\n    const { data, error, count } = await serviceClient\n      .from(USERS_TABLE)\n      .insert([userData])\n      .select();\n\n    if (error) {\n      // Verificar si es una violación de RLS\n      if (isRlsViolation(error)) {\n        throw createRlsViolationError('crear', 'cliente', 'nuevo', error);\n      }\n      \n      logError(error, 'createClient');\n      throw handleApiError(error);\n    }\n\n    // Verify that rows were affected\n    if (!data || data.length === 0 || count === 0) {\n      const noDataError = createAppError(\n        ErrorType.SERVER,\n        'No se pudo crear el cliente. No se recibieron datos del servidor.'\n      );\n      logError(noDataError, 'createClient');\n      throw noDataError;\n    }\n\n    const newClient = mapUserToClient(data[0]);\n    let documentResult = null;\n    \n    if (documents && documents.length > 0 && userId && newClient.id) {\n      try {\n        console.log(`Uploading ${documents.length} documents for new client ${newClient.id}`);\n        \n        // Usar la versión mejorada de uploadClientDocuments de utils\n        documentResult = await uploadDocs(newClient.id, documents);\n        \n        // Check if any documents uploaded successfully\n        if (documentResult && documentResult.length > 0) {\n          console.log(`${documentResult.length} documents uploaded successfully during client creation`);\n        } else {\n          console.warn(`No documents were successfully uploaded during client creation`);\n          newClient.warningMessage = 'Se creó el cliente, pero no se pudieron subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n        }\n      } catch (docError) {\n        console.error('Error uploading documents during client creation:', docError);\n        \n        // Información más detallada del error\n        const errorMessage = docError instanceof Error ? docError.message : 'Error desconocido';\n        console.error(`Error detail: ${errorMessage}`);\n        \n        // Continue with client creation but add warning\n        newClient.warningMessage = `Se creó el cliente, pero hubo un problema al subir los documentos: ${errorMessage}. Puede intentar agregarlos nuevamente más tarde.`;\n      }\n    }\n\n    return newClient;\n  } catch (error) {\n    logError(error, 'createClient', { clientData: client });\n    throw handleApiError(error);\n  }\n};\n\nexport const updateClient = async (id: string, updates: Partial<Client>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    console.log(`Starting client update for ID ${id}`, updates);\n    \n    // Create a copy to avoid modifying the original object\n    const userUpdates: any = { ...updates };\n    \n    // Eliminar campos calculados o virtuales que no existen en la base de datos\n    // El campo 'name' es calculado en mapUserToClient pero no existe en la tabla\n    delete userUpdates.name;\n    delete userUpdates.warningMessage;\n    \n    // Process specific numeric fields\n    if ('employment_years' in updates) {\n      const processed = processNumericField(updates.employment_years);\n      userUpdates.employment_years = processed === null ? undefined : processed;\n    }\n    if ('monthly_income' in updates) {\n      const processed = processNumericField(updates.monthly_income);\n      userUpdates.monthly_income = processed === null ? undefined : processed;\n    }\n    if ('additional_income' in updates) {\n      const processed = processNumericField(updates.additional_income);\n      userUpdates.additional_income = processed === null ? undefined : processed;\n    }\n    if ('monthly_expenses' in updates) {\n      const processed = processNumericField(updates.monthly_expenses);\n      userUpdates.monthly_expenses = processed === null ? undefined : processed;\n    }\n    if ('other_loan_balances' in updates) {\n      const processed = processNumericField(updates.other_loan_balances);\n      userUpdates.other_loan_balances = processed === null ? undefined : processed;\n    }\n    if ('mortgage_payment' in updates) {\n      const processed = processNumericField(updates.mortgage_payment);\n      userUpdates.mortgage_payment = processed === null ? undefined : processed;\n    }\n    if ('rent_payment' in updates) {\n      const processed = processNumericField(updates.rent_payment);\n      userUpdates.rent_payment = processed === null ? undefined : processed;\n    }\n    if ('dependent_persons' in updates) {\n      const processed = processNumericField(updates.dependent_persons);\n      userUpdates.dependent_persons = processed === null ? undefined : processed;\n    }\n\n    // Remove undefined fields\n    Object.keys(userUpdates).forEach(key => {\n      const typedKey = key as keyof typeof userUpdates;\n      if (userUpdates[typedKey] === undefined) {\n        delete userUpdates[typedKey];\n      }\n    });\n\n    console.log(`Updating client ${id} with sanitized data:`, JSON.stringify(userUpdates));\n\n    // Get the service client for this operation to evitar problemas de permisos\n    const serviceClient = getServiceClient();\n\n    // First, verify the client exists\n    const { data: existingClient, error: existingError } = await serviceClient\n      .from(USERS_TABLE)\n      .select('id')\n      .eq('id', id)\n      .single();\n\n    if (existingError || !existingClient) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `No se encontró el cliente con ID ${id}. Verifique que el cliente exista.`\n      );\n      logError(notFoundError, 'updateClient', { clientId: id });\n      throw notFoundError;\n    }\n\n    // Perform the update with the service client\n    const { data, error, count } = await serviceClient\n      .from(USERS_TABLE)\n      .update(userUpdates)\n      .eq('id', id)\n      .select();\n\n    if (error) {\n      // Verificar si es una violación de RLS\n      if (isRlsViolation(error)) {\n        throw createRlsViolationError('actualizar', 'cliente', id, error);\n      }\n      \n      logError(error, 'updateClient', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    // Verify that the update affected rows\n    if (!data || data.length === 0 || count === 0) {\n      console.warn(`Update operation didn't affect any rows for client ${id}`);\n      throw createNoEffectError('update', 'cliente', id);\n    }\n\n    let updatedClient: Client;\n\n    if (!data || data.length === 0) {\n      console.log(`No data returned when updating client with ID ${id}, fetching client data separately`);\n      \n      // Fallback: fetch the client data separately\n      const { data: fetchedData, error: fetchError } = await serviceClient\n        .from(USERS_TABLE)\n        .select('*')\n        .eq('id', id)\n        .single();\n      \n      if (fetchError) {\n        console.error('Error fetching updated client:', fetchError);\n        throw fetchError;\n      }\n      \n      updatedClient = mapUserToClient(fetchedData);\n    } else {\n      updatedClient = mapUserToClient(data[0]);\n    }\n    \n    let documentResult = null;\n    \n    // Upload documents if provided\n    if (documents && documents.length > 0 && userId) {\n      try {\n        console.log(`Uploading ${documents.length} documents for client ${id}`);\n        \n        // Usar la versión mejorada de uploadClientDocuments de utils\n        documentResult = await uploadDocs(id, documents);\n        \n        // Check if any documents failed to upload\n        if (documentResult && documentResult.length > 0) {\n          console.log(`${documentResult.length} documents uploaded successfully during client update`);\n        } else {\n          console.warn(`No documents were successfully uploaded during client update`);\n          updatedClient.warningMessage = 'Se actualizó el cliente, pero no se pudieron subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n        }\n      } catch (docError) {\n        console.error(`Error uploading documents for client ${id}:`, docError);\n        \n        // Información más detallada del error\n        const errorMessage = docError instanceof Error ? docError.message : 'Error desconocido';\n        console.error(`Error detail: ${errorMessage}`);\n        \n        // Continue with client update but add warning\n        updatedClient.warningMessage = `Se actualizó el cliente, pero hubo un problema al subir los documentos: ${errorMessage}. Puede intentar agregarlos nuevamente más tarde.`;\n      }\n    }\n\n    console.log(`Client update complete for ID ${id}`);\n    return updatedClient;\n  } catch (error) {\n    logError(error, 'updateClient', { clientId: id, updates });\n    throw handleApiError(error);\n  }\n};\n\nexport const deleteClient = async (id: string) => {\n  try {\n    // Get the service client for this operation\n    const serviceClient = getServiceClient();\n    \n    const { error, count } = await serviceClient\n      .from(USERS_TABLE)\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      // Verificar si es una violación de RLS\n      if (isRlsViolation(error)) {\n        throw createRlsViolationError('eliminar', 'cliente', id, error);\n      }\n      \n      logError(error, 'deleteClient', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    // Verify that rows were affected\n    if (count === 0) {\n      console.warn(`Delete operation didn't affect any rows for client ${id}`);\n      throw createNoEffectError('delete', 'cliente', id);\n    }\n\n    return true;\n  } catch (error) {\n    logError(error, 'deleteClient', { clientId: id });\n    throw handleApiError(error);\n  }\n};\n\nexport const checkClientExists = async (email: string, rfc?: string) => {\n  try {\n    const serviceClient = getServiceClient();\n    \n    let query = serviceClient\n      .from(USERS_TABLE)\n      .select('id, email, rfc')\n      .eq('email', email);\n\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      logError(error, 'checkClientExists', { email, rfc });\n      throw handleApiError(error);\n    }\n\n    return data?.length > 0;\n  } catch (error) {\n    logError(error, 'checkClientExists', { email, rfc });\n    throw handleApiError(error);\n  }\n};\n\nexport const getClientCount = async (filters?: ClientFilter) => {\n  try {\n    const serviceClient = getServiceClient();\n    \n    let query = serviceClient\n      .from(USERS_TABLE)\n      .select('*', { count: 'exact', head: true });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n    }\n\n    const { count, error } = await query;\n\n    if (error) {\n      logError(error, 'getClientCount', { filters });\n      throw handleApiError(error);\n    }\n\n    return count || 0;\n  } catch (error) {\n    logError(error, 'getClientCount', { filters });\n    throw handleApiError(error);\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}