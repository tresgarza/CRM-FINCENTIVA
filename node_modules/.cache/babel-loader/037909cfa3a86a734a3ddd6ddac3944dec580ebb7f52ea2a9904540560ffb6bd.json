{"ast":null,"code":"import { TABLES } from '../utils/constants/tables';\nimport { APPLICATION_STATUS } from '../utils/constants/statuses';\n// Verify if APPLICATION_HISTORY table is defined in TABLES\nlet APPLICATION_HISTORY_TABLE = TABLES.APPLICATION_HISTORY;\nif (!APPLICATION_HISTORY_TABLE) {\n  // If not defined, create a fallback\n  APPLICATION_HISTORY_TABLE = 'application_history';\n}\n\n// Define the type of application statuses\n\n// Define application interface\n\n// Función para ejecutar consultas SQL a través del servidor MCP\nconst executeQuery = async query => {\n  try {\n    const response = await fetch('http://localhost:3100/query', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      })\n    });\n    const result = await response.json();\n    if (result.error) {\n      console.error('Error en la consulta SQL:', result.error);\n      throw new Error(result.error);\n    }\n    return result.data;\n  } catch (error) {\n    console.error('Error ejecutando la consulta:', error);\n    throw error;\n  }\n};\n\n// Get all applications with filters\nexport const getApplications = async (filters, entityFilter) => {\n  let query = `SELECT * FROM ${TABLES.APPLICATIONS} WHERE 1=1`;\n\n  // Aplicar filtro por entidad (asesor o empresa)\n  if (entityFilter) {\n    if (entityFilter.advisor_id) {\n      query += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      query += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n  }\n\n  // Aplicar otros filtros\n  if (filters) {\n    // Filter by status\n    if (filters.status && filters.status !== 'all') {\n      query += ` AND status = '${filters.status}'`;\n    }\n\n    // Filter by application type\n    if (filters.application_type && filters.application_type !== 'all') {\n      query += ` AND application_type = '${filters.application_type}'`;\n    }\n\n    // Filter by advisor\n    if (filters.advisor_id) {\n      query += ` AND assigned_to = '${filters.advisor_id}'`;\n    }\n\n    // Filter by company\n    if (filters.company_id) {\n      query += ` AND company_id = '${filters.company_id}'`;\n    }\n\n    // Filter by date range\n    if (filters.dateFrom) {\n      query += ` AND created_at >= '${filters.dateFrom}'`;\n    }\n    if (filters.dateTo) {\n      query += ` AND created_at <= '${filters.dateTo}'`;\n    }\n\n    // Filter by amount range\n    if (filters.amountMin !== undefined) {\n      query += ` AND amount >= ${filters.amountMin}`;\n    }\n    if (filters.amountMax !== undefined) {\n      query += ` AND amount <= ${filters.amountMax}`;\n    }\n\n    // Search by name, email or phone (ajustado a los campos reales)\n    if (filters.searchQuery) {\n      query += ` AND (\n        client_name ILIKE '%${filters.searchQuery}%' OR \n        client_email ILIKE '%${filters.searchQuery}%'\n      )`;\n    }\n  }\n\n  // Ordenar por fecha de creación más reciente\n  query += ` ORDER BY created_at DESC`;\n  try {\n    const data = await executeQuery(query);\n\n    // Mapear los campos de la BD a nuestra interfaz\n    return data.map(app => ({\n      id: app.id,\n      client_id: app.source_id || \"\",\n      company_id: app.company_id || \"\",\n      assigned_to: app.assigned_to || \"\",\n      application_type: app.application_type || \"\",\n      requested_amount: parseFloat(app.amount) || 0,\n      status: mapStatusFromDB(app.status),\n      created_at: app.created_at,\n      updated_at: app.updated_at,\n      client_name: app.client_name,\n      client_email: app.client_email,\n      company_name: app.company_name,\n      advisor_name: \"\",\n      // Este campo no está en la BD\n      approved_by_advisor: app.approved_by_advisor || false,\n      approved_by_company: app.approved_by_company || false,\n      approval_date_advisor: app.approval_date_advisor,\n      approval_date_company: app.approval_date_company,\n      // Mapeo directo de campos adicionales de la BD\n      client_phone: app.client_phone,\n      client_address: app.client_address,\n      dni: app.dni,\n      amount: parseFloat(app.amount) || 0,\n      term: app.term ? parseInt(app.term) : undefined,\n      interest_rate: app.interest_rate ? parseFloat(app.interest_rate) : undefined,\n      monthly_payment: app.monthly_payment ? parseFloat(app.monthly_payment) : undefined\n    }));\n  } catch (error) {\n    console.error('Error fetching applications:', error);\n    throw error;\n  }\n};\n\n// Función auxiliar para mapear estados de la BD a nuestro enum\nconst mapStatusFromDB = dbStatus => {\n  // Primero verificamos si coincide con algún enum directamente\n  const directMapping = Object.values(APPLICATION_STATUS).find(status => status.toLowerCase() === dbStatus.toLowerCase());\n  if (directMapping) {\n    return directMapping;\n  }\n\n  // Si no hay coincidencia directa, usamos un mapeo manual\n  const statusMap = {\n    'Solicitud': APPLICATION_STATUS.SOLICITUD,\n    'Pendiente': APPLICATION_STATUS.PENDING,\n    'En Revisión': APPLICATION_STATUS.IN_REVIEW,\n    'Revisión': APPLICATION_STATUS.IN_REVIEW,\n    'Aprobado': APPLICATION_STATUS.APPROVED,\n    'Rechazado': APPLICATION_STATUS.REJECTED,\n    'Por Dispersar': APPLICATION_STATUS.POR_DISPERSAR,\n    'Completado': APPLICATION_STATUS.COMPLETED,\n    'Cancelado': APPLICATION_STATUS.CANCELLED,\n    'Expirado': APPLICATION_STATUS.EXPIRED\n  };\n  console.log(`Mapeando estado desde BD: \"${dbStatus}\" -> \"${statusMap[dbStatus] || APPLICATION_STATUS.PENDING}\"`);\n  return statusMap[dbStatus] || APPLICATION_STATUS.PENDING;\n};\n\n// Get a single application by ID\nexport const getApplicationById = async (id, entityFilter) => {\n  let query = `SELECT * FROM ${TABLES.APPLICATIONS} WHERE id = '${id}'`;\n\n  // Aplicar filtro por entidad si es necesario\n  if (entityFilter) {\n    if (entityFilter.advisor_id) {\n      query += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      query += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n  }\n  try {\n    const data = await executeQuery(query);\n    if (data && data.length > 0) {\n      return data[0];\n    }\n    throw new Error('Application not found');\n  } catch (error) {\n    console.error(`Error fetching application with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Get notification context outside of component scope\nlet notifyNewApplication = null;\n\n// Function to set the notification handler from components\nexport const setNotificationHandler = handler => {\n  notifyNewApplication = handler;\n};\n\n// Crear una nueva aplicación\nexport const createApplication = async applicationData => {\n  try {\n    const {\n      client_name,\n      client_email,\n      client_phone,\n      amount\n    } = applicationData;\n\n    // Verificar si el cliente ya existe\n    const clientExists = await checkClientExists(client_email);\n    let clientId = applicationData.client_id || '';\n\n    // Si el cliente no existe, crearlo primero\n    if (!clientExists) {\n      const newClient = {\n        name: client_name,\n        email: client_email,\n        phone: client_phone,\n        entity_id: applicationData.entity_id\n      };\n      try {\n        const client = await createClient(newClient);\n        clientId = client.id;\n      } catch (error) {\n        console.error('Error al crear cliente:', error);\n        // Continuar sin cliente asociado si hay error\n        clientId = '';\n      }\n    }\n\n    // Crear objeto de aplicación con cliente ID\n    const application = {\n      ...applicationData,\n      client_id: clientId,\n      created_at: new Date(),\n      updated_at: new Date()\n    };\n\n    // Insertar en la base de datos\n    const query = `\n      INSERT INTO applications \n      (${Object.keys(application).join(', ')}) \n      VALUES (${Object.keys(application).map((_, i) => `$${i + 1}`).join(', ')})\n      RETURNING *\n    `;\n    const values = Object.values(application);\n    const result = await executeQuery(query, values);\n    if (result.length > 0) {\n      const createdApplication = result[0];\n\n      // Notificar sobre la nueva aplicación si hay un handler configurado\n      if (notifyNewApplication) {\n        try {\n          notifyNewApplication(createdApplication);\n        } catch (error) {\n          console.error('Error al enviar notificación de nueva aplicación:', error);\n        }\n      }\n      return createdApplication;\n    }\n    throw new Error('No se pudo crear la aplicación');\n  } catch (error) {\n    console.error('Error en createApplication:', error);\n    throw new Error(`Error al crear la aplicación: ${error instanceof Error ? error.message : String(error)}`);\n  }\n};\n\n// Update an existing application\nexport const updateApplication = async (id, updates, entityFilter) => {\n  const setClause = Object.entries(updates).map(([key, value]) => `${key} = ${typeof value === 'string' ? `'${value}'` : value}`).join(', ');\n  let query = `\n    UPDATE ${TABLES.APPLICATIONS}\n    SET ${setClause}\n    WHERE id = '${id}'\n  `;\n\n  // Aplicar filtro por entidad si es necesario\n  if (entityFilter) {\n    if (entityFilter.advisor_id) {\n      query += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      query += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n  }\n  query += ' RETURNING *';\n  try {\n    const data = await executeQuery(query);\n    if (data && data.length > 0) {\n      return data[0];\n    }\n    throw new Error('Application not found or you do not have permission to update it');\n  } catch (error) {\n    console.error(`Error updating application with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Update application status and add to history\nexport const updateApplicationStatus = async (id, status, comment, user_id, entityFilter) => {\n  // 1. Obtener estado actual de la aplicación\n  let currentQuery = `\n    SELECT status FROM ${TABLES.APPLICATIONS}\n    WHERE id = '${id}'\n  `;\n\n  // Aplicar filtro por entidad si es necesario\n  if (entityFilter) {\n    if (entityFilter.advisor_id) {\n      currentQuery += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      currentQuery += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n  }\n  try {\n    // Obtener el estado actual\n    const currentState = await executeQuery(currentQuery);\n    if (!currentState || currentState.length === 0) {\n      throw new Error('Application not found or you do not have permission to update it');\n    }\n    const currentStatus = currentState[0].status;\n\n    // 2. Actualizar el estado de la aplicación\n    let updateQuery = `\n      UPDATE ${TABLES.APPLICATIONS}\n      SET status = '${status}',\n          status_previous = '${currentStatus}'\n    `;\n\n    // Si el nuevo estado es \"completed\", actualizar la fecha de dispersión\n    if (status === 'completed') {\n      updateQuery += `, dispersal_date = NOW()`;\n    }\n    updateQuery += ` WHERE id = '${id}'`;\n\n    // Aplicar filtro por entidad si es necesario\n    if (entityFilter) {\n      if (entityFilter.advisor_id) {\n        updateQuery += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n      }\n      if (entityFilter.company_id) {\n        updateQuery += ` AND company_id = '${entityFilter.company_id}'`;\n      }\n    }\n    updateQuery += ' RETURNING *';\n\n    // Ejecutar la actualización\n    const updatedApp = await executeQuery(updateQuery);\n    if (!updatedApp || updatedApp.length === 0) {\n      throw new Error('Application not found or you do not have permission to update it');\n    }\n\n    // 3. Añadir al historial\n    const historyComment = currentStatus !== status ? `${comment} (Cambio de estado: ${currentStatus} → ${status})` : comment;\n    const historyQuery = `\n      INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n      VALUES ('${id}', '${status}', '${historyComment}', '${user_id}')\n      RETURNING *\n    `;\n    await executeQuery(historyQuery);\n    console.log(`Estado de aplicación actualizado: ${currentStatus} → ${status}`);\n    return updatedApp[0];\n  } catch (error) {\n    console.error(`Error updating status of application ${id}:`, error);\n    throw error;\n  }\n};\n\n// Aprobar solicitud por asesor\nexport const approveByAdvisor = async (id, comment, advisor_id, entityFilter) => {\n  // Verificar que el usuario es realmente un asesor\n  if (!(entityFilter !== null && entityFilter !== void 0 && entityFilter.advisor_id)) {\n    throw new Error('Solo los asesores pueden realizar esta acción');\n  }\n\n  // Actualizar la solicitud\n  let updateQuery = `\n    UPDATE ${TABLES.APPLICATIONS}\n    SET approved_by_advisor = true, \n        approval_date_advisor = NOW()\n    WHERE id = '${id}' AND assigned_to = '${advisor_id}'\n    RETURNING *\n  `;\n  try {\n    // Ejecutar la actualización\n    const updatedApp = await executeQuery(updateQuery);\n    if (!updatedApp || updatedApp.length === 0) {\n      throw new Error('Solicitud no encontrada o no tienes permisos para aprobarla');\n    }\n\n    // Añadir al historial\n    const historyQuery = `\n      INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n      VALUES ('${id}', 'approved_by_advisor', '${comment}', '${advisor_id}')\n      RETURNING *\n    `;\n    await executeQuery(historyQuery);\n\n    // Verificar si ambas aprobaciones están completas, para actualizar el estado principal\n    const app = updatedApp[0];\n    if (app.approved_by_advisor && app.approved_by_company && app.status !== 'approved') {\n      console.log(\"Ambas aprobaciones completadas, actualizando estado principal a 'approved'\");\n\n      // Si ambos han aprobado, actualizar el estado a aprobado\n      return await updateApplicationStatus(id, 'approved', 'Aprobación completa: Asesor y Empresa han aprobado esta solicitud', advisor_id, entityFilter);\n    }\n    return app;\n  } catch (error) {\n    console.error(`Error aprobando solicitud ${id} por asesor:`, error);\n    throw error;\n  }\n};\n\n// Aprobar solicitud por empresa\nexport const approveByCompany = async (id, comment, company_admin_id, company_id, entityFilter) => {\n  // Verificar que el usuario es realmente un administrador de la empresa correcta\n  if (!(entityFilter !== null && entityFilter !== void 0 && entityFilter.company_id) || entityFilter.company_id !== company_id) {\n    throw new Error('Solo los administradores de la empresa pueden realizar esta acción');\n  }\n\n  // Actualizar la solicitud\n  let updateQuery = `\n    UPDATE ${TABLES.APPLICATIONS}\n    SET approved_by_company = true, \n        approval_date_company = NOW()\n    WHERE id = '${id}' AND company_id = '${company_id}'\n    RETURNING *\n  `;\n  try {\n    // Ejecutar la actualización\n    const updatedApp = await executeQuery(updateQuery);\n    if (!updatedApp || updatedApp.length === 0) {\n      throw new Error('Solicitud no encontrada o no tienes permisos para aprobarla');\n    }\n\n    // Añadir al historial\n    const historyQuery = `\n      INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n      VALUES ('${id}', 'approved_by_company', '${comment}', '${company_admin_id}')\n      RETURNING *\n    `;\n    await executeQuery(historyQuery);\n\n    // Verificar si ambas aprobaciones están completas, para actualizar el estado principal\n    const app = updatedApp[0];\n    if (app.approved_by_advisor && app.approved_by_company && app.status !== 'approved') {\n      console.log(\"Ambas aprobaciones completadas, actualizando estado principal a 'approved'\");\n\n      // Si ambos han aprobado, actualizar el estado a aprobado\n      return await updateApplicationStatus(id, 'approved', 'Aprobación completa: Asesor y Empresa han aprobado esta solicitud', company_admin_id, entityFilter);\n    }\n    return app;\n  } catch (error) {\n    console.error(`Error aprobando solicitud ${id} por empresa:`, error);\n    throw error;\n  }\n};\n\n// Obtener estado de aprobación de una solicitud\nexport const getApprovalStatus = async (id, entityFilter) => {\n  let query = `\n    SELECT \n      approved_by_advisor, \n      approved_by_company, \n      approval_date_advisor, \n      approval_date_company\n    FROM ${TABLES.APPLICATIONS}\n    WHERE id = '${id}'\n  `;\n\n  // Aplicar filtro por entidad si es necesario\n  if (entityFilter) {\n    if (entityFilter.advisor_id) {\n      query += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      query += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n  }\n  try {\n    const data = await executeQuery(query);\n    if (data && data.length > 0) {\n      return {\n        approvedByAdvisor: data[0].approved_by_advisor || false,\n        approvedByCompany: data[0].approved_by_company || false,\n        approvalDateAdvisor: data[0].approval_date_advisor,\n        approvalDateCompany: data[0].approval_date_company\n      };\n    }\n    throw new Error('Solicitud no encontrada');\n  } catch (error) {\n    console.error(`Error obteniendo estado de aprobación para solicitud ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete an application\nexport const deleteApplication = async (id, entityFilter) => {\n  let query = `DELETE FROM ${TABLES.APPLICATIONS} WHERE id = '${id}'`;\n\n  // Aplicar filtro por entidad si es necesario\n  if (entityFilter) {\n    if (entityFilter.advisor_id) {\n      query += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      query += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n  }\n  try {\n    await executeQuery(query);\n    return true;\n  } catch (error) {\n    console.error(`Error deleting application with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Get application history\nexport const getApplicationHistory = async (applicationId, entityFilter) => {\n  // Verificar primero si el usuario tiene permiso para ver esta aplicación\n  if (entityFilter) {\n    let appQuery = `\n      SELECT id FROM ${TABLES.APPLICATIONS} \n      WHERE id = '${applicationId}'\n    `;\n    if (entityFilter.advisor_id) {\n      appQuery += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      appQuery += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n    const app = await executeQuery(appQuery);\n    if (!app || app.length === 0) {\n      throw new Error('Application not found or you do not have permission to view it');\n    }\n  }\n  const query = `\n    SELECT h.*, u.id as user_id, u.name as user_name, u.email as user_email\n    FROM ${APPLICATION_HISTORY_TABLE} h\n    LEFT JOIN users u ON h.created_by = u.id\n    WHERE h.application_id = '${applicationId}'\n    ORDER BY h.created_at DESC\n  `;\n  try {\n    return await executeQuery(query);\n  } catch (error) {\n    console.error(`Error fetching history for application ${applicationId}:`, error);\n    throw error;\n  }\n};\n\n// Add a comment to an application\nexport const addComment = async (applicationId, userId, text, entityFilter) => {\n  // Verificar primero si el usuario tiene permiso para comentar esta aplicación\n  if (entityFilter) {\n    let appQuery = `\n      SELECT id FROM ${TABLES.APPLICATIONS} \n      WHERE id = '${applicationId}'\n    `;\n    if (entityFilter.advisor_id) {\n      appQuery += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      appQuery += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n    const app = await executeQuery(appQuery);\n    if (!app || app.length === 0) {\n      throw new Error('Application not found or you do not have permission to comment on it');\n    }\n  }\n  const query = `\n    INSERT INTO ${TABLES.COMMENTS} (application_id, user_id, text)\n    VALUES ('${applicationId}', '${userId}', '${text}')\n    RETURNING *\n  `;\n  try {\n    const data = await executeQuery(query);\n    return data[0];\n  } catch (error) {\n    console.error(`Error adding comment to application ${applicationId}:`, error);\n    throw error;\n  }\n};\n\n// Get comments for an application\nexport const getComments = async (applicationId, entityFilter) => {\n  // Verificar primero si el usuario tiene permiso para ver los comentarios de esta aplicación\n  if (entityFilter) {\n    let appQuery = `\n      SELECT id FROM ${TABLES.APPLICATIONS} \n      WHERE id = '${applicationId}'\n    `;\n    if (entityFilter.advisor_id) {\n      appQuery += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      appQuery += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n    const app = await executeQuery(appQuery);\n    if (!app || app.length === 0) {\n      throw new Error('Application not found or you do not have permission to view its comments');\n    }\n  }\n  const query = `\n    SELECT c.*, u.id as user_id, u.name as user_name, u.email as user_email\n    FROM ${TABLES.COMMENTS} c\n    LEFT JOIN users u ON c.user_id = u.id\n    WHERE c.application_id = '${applicationId}'\n    ORDER BY c.created_at DESC\n  `;\n  try {\n    return await executeQuery(query);\n  } catch (error) {\n    console.error(`Error fetching comments for application ${applicationId}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["TABLES","APPLICATION_STATUS","APPLICATION_HISTORY_TABLE","APPLICATION_HISTORY","executeQuery","query","response","fetch","method","headers","body","JSON","stringify","result","json","error","console","Error","data","getApplications","filters","entityFilter","APPLICATIONS","advisor_id","company_id","status","application_type","dateFrom","dateTo","amountMin","undefined","amountMax","searchQuery","map","app","id","client_id","source_id","assigned_to","requested_amount","parseFloat","amount","mapStatusFromDB","created_at","updated_at","client_name","client_email","company_name","advisor_name","approved_by_advisor","approved_by_company","approval_date_advisor","approval_date_company","client_phone","client_address","dni","term","parseInt","interest_rate","monthly_payment","dbStatus","directMapping","Object","values","find","toLowerCase","statusMap","SOLICITUD","PENDING","IN_REVIEW","APPROVED","REJECTED","POR_DISPERSAR","COMPLETED","CANCELLED","EXPIRED","log","getApplicationById","length","notifyNewApplication","setNotificationHandler","handler","createApplication","applicationData","clientExists","checkClientExists","clientId","newClient","name","email","phone","entity_id","client","createClient","application","Date","keys","join","_","i","createdApplication","message","String","updateApplication","updates","setClause","entries","key","value","updateApplicationStatus","comment","user_id","currentQuery","currentState","currentStatus","updateQuery","updatedApp","historyComment","historyQuery","approveByAdvisor","approveByCompany","company_admin_id","getApprovalStatus","approvedByAdvisor","approvedByCompany","approvalDateAdvisor","approvalDateCompany","deleteApplication","getApplicationHistory","applicationId","appQuery","addComment","userId","text","COMMENTS","getComments"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/applicationService.ts"],"sourcesContent":["import { TABLES } from '../utils/constants/tables';\nimport { APPLICATION_STATUS } from '../utils/constants/statuses';\nimport { useNotifications } from '../contexts/NotificationContext';\n\n// Verify if APPLICATION_HISTORY table is defined in TABLES\nlet APPLICATION_HISTORY_TABLE = TABLES.APPLICATION_HISTORY;\nif (!APPLICATION_HISTORY_TABLE) {\n  // If not defined, create a fallback\n  APPLICATION_HISTORY_TABLE = 'application_history';\n}\n\n// Define the type of application statuses\nexport type ApplicationStatus = 'pending' | 'in_review' | 'approved' | 'rejected' | 'cancelled' | 'expired' | 'completed' | 'solicitud' | 'new' | 'por_dispersar';\n\n// Define application interface\nexport interface Application {\n  id: string;\n  client_id: string;\n  company_id: string;\n  assigned_to: string;\n  application_type: string;\n  requested_amount: number;\n  status: ApplicationStatus;\n  status_previous?: string;\n  created_at: string;\n  updated_at: string;\n  client_name?: string;\n  client_email?: string;\n  client_phone?: string;\n  client_address?: string;\n  company_name?: string;\n  advisor_name?: string;\n  approved_by_advisor: boolean;\n  approved_by_company: boolean;\n  approval_date_advisor?: string;\n  approval_date_company?: string;\n  dispersal_date?: string;\n  dni?: string;\n  \n  // Campos adicionales que necesitan los formularios\n  amount?: number;\n  term?: number;\n  interest_rate?: number;\n  monthly_payment?: number;\n}\n\nexport interface ApplicationFilter {\n  status?: string;\n  searchQuery?: string;\n  advisor_id?: string;\n  company_id?: string;\n  dateFrom?: string;\n  dateTo?: string;\n  application_type?: string;\n  amountMin?: number;\n  amountMax?: number;\n}\n\n// Función para ejecutar consultas SQL a través del servidor MCP\nconst executeQuery = async (query: string) => {\n  try {\n    const response = await fetch('http://localhost:3100/query', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ query }),\n    });\n    \n    const result = await response.json();\n    \n    if (result.error) {\n      console.error('Error en la consulta SQL:', result.error);\n      throw new Error(result.error);\n    }\n    \n    return result.data;\n  } catch (error) {\n    console.error('Error ejecutando la consulta:', error);\n    throw error;\n  }\n};\n\n// Get all applications with filters\nexport const getApplications = async (filters?: ApplicationFilter, entityFilter?: Record<string, any> | null) => {\n  let query = `SELECT * FROM ${TABLES.APPLICATIONS} WHERE 1=1`;\n  \n  // Aplicar filtro por entidad (asesor o empresa)\n  if (entityFilter) {\n    if (entityFilter.advisor_id) {\n      query += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      query += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n  }\n\n  // Aplicar otros filtros\n  if (filters) {\n    // Filter by status\n    if (filters.status && filters.status !== 'all') {\n      query += ` AND status = '${filters.status}'`;\n    }\n\n    // Filter by application type\n    if (filters.application_type && filters.application_type !== 'all') {\n      query += ` AND application_type = '${filters.application_type}'`;\n    }\n\n    // Filter by advisor\n    if (filters.advisor_id) {\n      query += ` AND assigned_to = '${filters.advisor_id}'`;\n    }\n\n    // Filter by company\n    if (filters.company_id) {\n      query += ` AND company_id = '${filters.company_id}'`;\n    }\n\n    // Filter by date range\n    if (filters.dateFrom) {\n      query += ` AND created_at >= '${filters.dateFrom}'`;\n    }\n\n    if (filters.dateTo) {\n      query += ` AND created_at <= '${filters.dateTo}'`;\n    }\n\n    // Filter by amount range\n    if (filters.amountMin !== undefined) {\n      query += ` AND amount >= ${filters.amountMin}`;\n    }\n\n    if (filters.amountMax !== undefined) {\n      query += ` AND amount <= ${filters.amountMax}`;\n    }\n\n    // Search by name, email or phone (ajustado a los campos reales)\n    if (filters.searchQuery) {\n      query += ` AND (\n        client_name ILIKE '%${filters.searchQuery}%' OR \n        client_email ILIKE '%${filters.searchQuery}%'\n      )`;\n    }\n  }\n\n  // Ordenar por fecha de creación más reciente\n  query += ` ORDER BY created_at DESC`;\n\n  try {\n    const data = await executeQuery(query);\n    \n    // Mapear los campos de la BD a nuestra interfaz\n    return data.map((app: any) => ({\n      id: app.id,\n      client_id: app.source_id || \"\",\n      company_id: app.company_id || \"\",\n      assigned_to: app.assigned_to || \"\",\n      application_type: app.application_type || \"\",\n      requested_amount: parseFloat(app.amount) || 0,\n      status: mapStatusFromDB(app.status),\n      created_at: app.created_at,\n      updated_at: app.updated_at,\n      client_name: app.client_name,\n      client_email: app.client_email,\n      company_name: app.company_name,\n      advisor_name: \"\", // Este campo no está en la BD\n      approved_by_advisor: app.approved_by_advisor || false,\n      approved_by_company: app.approved_by_company || false,\n      approval_date_advisor: app.approval_date_advisor,\n      approval_date_company: app.approval_date_company,\n      \n      // Mapeo directo de campos adicionales de la BD\n      client_phone: app.client_phone,\n      client_address: app.client_address,\n      dni: app.dni,\n      amount: parseFloat(app.amount) || 0,\n      term: app.term ? parseInt(app.term) : undefined,\n      interest_rate: app.interest_rate ? parseFloat(app.interest_rate) : undefined,\n      monthly_payment: app.monthly_payment ? parseFloat(app.monthly_payment) : undefined,\n    })) as Application[];\n  } catch (error) {\n    console.error('Error fetching applications:', error);\n    throw error;\n  }\n};\n\n// Función auxiliar para mapear estados de la BD a nuestro enum\nconst mapStatusFromDB = (dbStatus: string): ApplicationStatus => {\n  // Primero verificamos si coincide con algún enum directamente\n  const directMapping = Object.values(APPLICATION_STATUS).find(status => \n    status.toLowerCase() === dbStatus.toLowerCase()\n  );\n  \n  if (directMapping) {\n    return directMapping as ApplicationStatus;\n  }\n  \n  // Si no hay coincidencia directa, usamos un mapeo manual\n  const statusMap: Record<string, ApplicationStatus> = {\n    'Solicitud': APPLICATION_STATUS.SOLICITUD,\n    'Pendiente': APPLICATION_STATUS.PENDING,\n    'En Revisión': APPLICATION_STATUS.IN_REVIEW,\n    'Revisión': APPLICATION_STATUS.IN_REVIEW,\n    'Aprobado': APPLICATION_STATUS.APPROVED,\n    'Rechazado': APPLICATION_STATUS.REJECTED,\n    'Por Dispersar': APPLICATION_STATUS.POR_DISPERSAR,\n    'Completado': APPLICATION_STATUS.COMPLETED,\n    'Cancelado': APPLICATION_STATUS.CANCELLED,\n    'Expirado': APPLICATION_STATUS.EXPIRED\n  };\n  \n  console.log(`Mapeando estado desde BD: \"${dbStatus}\" -> \"${statusMap[dbStatus] || APPLICATION_STATUS.PENDING}\"`);\n  return statusMap[dbStatus] || APPLICATION_STATUS.PENDING;\n};\n\n// Get a single application by ID\nexport const getApplicationById = async (id: string, entityFilter?: Record<string, any> | null) => {\n  let query = `SELECT * FROM ${TABLES.APPLICATIONS} WHERE id = '${id}'`;\n  \n  // Aplicar filtro por entidad si es necesario\n  if (entityFilter) {\n    if (entityFilter.advisor_id) {\n      query += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      query += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n  }\n  \n  try {\n    const data = await executeQuery(query);\n    if (data && data.length > 0) {\n      return data[0] as Application;\n    }\n    throw new Error('Application not found');\n  } catch (error) {\n    console.error(`Error fetching application with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Get notification context outside of component scope\nlet notifyNewApplication: ((application: any) => void) | null = null;\n\n// Function to set the notification handler from components\nexport const setNotificationHandler = (handler: (application: any) => void) => {\n  notifyNewApplication = handler;\n};\n\n// Crear una nueva aplicación\nexport const createApplication = async (applicationData: Omit<Application, 'id' | 'created_at' | 'updated_at'>): Promise<Application> => {\n  try {\n    const { client_name, client_email, client_phone, amount } = applicationData;\n\n    // Verificar si el cliente ya existe\n    const clientExists = await checkClientExists(client_email);\n    let clientId = applicationData.client_id || '';\n\n    // Si el cliente no existe, crearlo primero\n    if (!clientExists) {\n      const newClient = {\n        name: client_name,\n        email: client_email,\n        phone: client_phone,\n        entity_id: applicationData.entity_id\n      };\n\n      try {\n        const client = await createClient(newClient);\n        clientId = client.id;\n      } catch (error) {\n        console.error('Error al crear cliente:', error);\n        // Continuar sin cliente asociado si hay error\n        clientId = '';\n      }\n    }\n\n    // Crear objeto de aplicación con cliente ID\n    const application = {\n      ...applicationData,\n      client_id: clientId,\n      created_at: new Date(),\n      updated_at: new Date()\n    };\n\n    // Insertar en la base de datos\n    const query = `\n      INSERT INTO applications \n      (${Object.keys(application).join(', ')}) \n      VALUES (${Object.keys(application).map((_, i) => `$${i + 1}`).join(', ')})\n      RETURNING *\n    `;\n\n    const values = Object.values(application);\n    const result = await executeQuery(query, values);\n\n    if (result.length > 0) {\n      const createdApplication = result[0];\n      \n      // Notificar sobre la nueva aplicación si hay un handler configurado\n      if (notifyNewApplication) {\n        try {\n          notifyNewApplication(createdApplication);\n        } catch (error) {\n          console.error('Error al enviar notificación de nueva aplicación:', error);\n        }\n      }\n      \n      return createdApplication;\n    }\n\n    throw new Error('No se pudo crear la aplicación');\n  } catch (error) {\n    console.error('Error en createApplication:', error);\n    throw new Error(`Error al crear la aplicación: ${error instanceof Error ? error.message : String(error)}`);\n  }\n};\n\n// Update an existing application\nexport const updateApplication = async (id: string, updates: Partial<Application>, entityFilter?: Record<string, any> | null) => {\n  const setClause = Object.entries(updates)\n    .map(([key, value]) => `${key} = ${typeof value === 'string' ? `'${value}'` : value}`)\n    .join(', ');\n  \n  let query = `\n    UPDATE ${TABLES.APPLICATIONS}\n    SET ${setClause}\n    WHERE id = '${id}'\n  `;\n  \n  // Aplicar filtro por entidad si es necesario\n  if (entityFilter) {\n    if (entityFilter.advisor_id) {\n      query += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      query += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n  }\n  \n  query += ' RETURNING *';\n  \n  try {\n    const data = await executeQuery(query);\n    if (data && data.length > 0) {\n      return data[0] as Application;\n    }\n    throw new Error('Application not found or you do not have permission to update it');\n  } catch (error) {\n    console.error(`Error updating application with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Update application status and add to history\nexport const updateApplicationStatus = async (\n  id: string, \n  status: Application['status'], \n  comment: string, \n  user_id: string,\n  entityFilter?: Record<string, any> | null\n) => {\n  // 1. Obtener estado actual de la aplicación\n  let currentQuery = `\n    SELECT status FROM ${TABLES.APPLICATIONS}\n    WHERE id = '${id}'\n  `;\n  \n  // Aplicar filtro por entidad si es necesario\n  if (entityFilter) {\n    if (entityFilter.advisor_id) {\n      currentQuery += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      currentQuery += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n  }\n  \n  try {\n    // Obtener el estado actual\n    const currentState = await executeQuery(currentQuery);\n    if (!currentState || currentState.length === 0) {\n      throw new Error('Application not found or you do not have permission to update it');\n    }\n    \n    const currentStatus = currentState[0].status;\n    \n    // 2. Actualizar el estado de la aplicación\n    let updateQuery = `\n      UPDATE ${TABLES.APPLICATIONS}\n      SET status = '${status}',\n          status_previous = '${currentStatus}'\n    `;\n    \n    // Si el nuevo estado es \"completed\", actualizar la fecha de dispersión\n    if (status === 'completed') {\n      updateQuery += `, dispersal_date = NOW()`;\n    }\n    \n    updateQuery += ` WHERE id = '${id}'`;\n    \n    // Aplicar filtro por entidad si es necesario\n    if (entityFilter) {\n      if (entityFilter.advisor_id) {\n        updateQuery += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n      }\n      if (entityFilter.company_id) {\n        updateQuery += ` AND company_id = '${entityFilter.company_id}'`;\n      }\n    }\n    \n    updateQuery += ' RETURNING *';\n    \n    // Ejecutar la actualización\n    const updatedApp = await executeQuery(updateQuery);\n    if (!updatedApp || updatedApp.length === 0) {\n      throw new Error('Application not found or you do not have permission to update it');\n    }\n    \n    // 3. Añadir al historial\n    const historyComment = currentStatus !== status \n      ? `${comment} (Cambio de estado: ${currentStatus} → ${status})`\n      : comment;\n      \n    const historyQuery = `\n      INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n      VALUES ('${id}', '${status}', '${historyComment}', '${user_id}')\n      RETURNING *\n    `;\n    \n    await executeQuery(historyQuery);\n    \n    console.log(`Estado de aplicación actualizado: ${currentStatus} → ${status}`);\n    return updatedApp[0] as Application;\n  } catch (error) {\n    console.error(`Error updating status of application ${id}:`, error);\n    throw error;\n  }\n};\n\n// Aprobar solicitud por asesor\nexport const approveByAdvisor = async (\n  id: string,\n  comment: string,\n  advisor_id: string,\n  entityFilter?: Record<string, any> | null\n) => {\n  // Verificar que el usuario es realmente un asesor\n  if (!entityFilter?.advisor_id) {\n    throw new Error('Solo los asesores pueden realizar esta acción');\n  }\n  \n  // Actualizar la solicitud\n  let updateQuery = `\n    UPDATE ${TABLES.APPLICATIONS}\n    SET approved_by_advisor = true, \n        approval_date_advisor = NOW()\n    WHERE id = '${id}' AND assigned_to = '${advisor_id}'\n    RETURNING *\n  `;\n  \n  try {\n    // Ejecutar la actualización\n    const updatedApp = await executeQuery(updateQuery);\n    if (!updatedApp || updatedApp.length === 0) {\n      throw new Error('Solicitud no encontrada o no tienes permisos para aprobarla');\n    }\n    \n    // Añadir al historial\n    const historyQuery = `\n      INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n      VALUES ('${id}', 'approved_by_advisor', '${comment}', '${advisor_id}')\n      RETURNING *\n    `;\n    \n    await executeQuery(historyQuery);\n    \n    // Verificar si ambas aprobaciones están completas, para actualizar el estado principal\n    const app = updatedApp[0] as Application;\n    if (app.approved_by_advisor && app.approved_by_company && app.status !== 'approved') {\n      console.log(\"Ambas aprobaciones completadas, actualizando estado principal a 'approved'\");\n      \n      // Si ambos han aprobado, actualizar el estado a aprobado\n      return await updateApplicationStatus(\n        id, \n        'approved', \n        'Aprobación completa: Asesor y Empresa han aprobado esta solicitud', \n        advisor_id,\n        entityFilter\n      );\n    }\n    \n    return app;\n  } catch (error) {\n    console.error(`Error aprobando solicitud ${id} por asesor:`, error);\n    throw error;\n  }\n};\n\n// Aprobar solicitud por empresa\nexport const approveByCompany = async (\n  id: string,\n  comment: string,\n  company_admin_id: string,\n  company_id: string,\n  entityFilter?: Record<string, any> | null\n) => {\n  // Verificar que el usuario es realmente un administrador de la empresa correcta\n  if (!entityFilter?.company_id || entityFilter.company_id !== company_id) {\n    throw new Error('Solo los administradores de la empresa pueden realizar esta acción');\n  }\n  \n  // Actualizar la solicitud\n  let updateQuery = `\n    UPDATE ${TABLES.APPLICATIONS}\n    SET approved_by_company = true, \n        approval_date_company = NOW()\n    WHERE id = '${id}' AND company_id = '${company_id}'\n    RETURNING *\n  `;\n  \n  try {\n    // Ejecutar la actualización\n    const updatedApp = await executeQuery(updateQuery);\n    if (!updatedApp || updatedApp.length === 0) {\n      throw new Error('Solicitud no encontrada o no tienes permisos para aprobarla');\n    }\n    \n    // Añadir al historial\n    const historyQuery = `\n      INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n      VALUES ('${id}', 'approved_by_company', '${comment}', '${company_admin_id}')\n      RETURNING *\n    `;\n    \n    await executeQuery(historyQuery);\n    \n    // Verificar si ambas aprobaciones están completas, para actualizar el estado principal\n    const app = updatedApp[0] as Application;\n    if (app.approved_by_advisor && app.approved_by_company && app.status !== 'approved') {\n      console.log(\"Ambas aprobaciones completadas, actualizando estado principal a 'approved'\");\n      \n      // Si ambos han aprobado, actualizar el estado a aprobado\n      return await updateApplicationStatus(\n        id, \n        'approved', \n        'Aprobación completa: Asesor y Empresa han aprobado esta solicitud', \n        company_admin_id,\n        entityFilter\n      );\n    }\n    \n    return app;\n  } catch (error) {\n    console.error(`Error aprobando solicitud ${id} por empresa:`, error);\n    throw error;\n  }\n};\n\n// Obtener estado de aprobación de una solicitud\nexport const getApprovalStatus = async (\n  id: string,\n  entityFilter?: Record<string, any> | null\n) => {\n  let query = `\n    SELECT \n      approved_by_advisor, \n      approved_by_company, \n      approval_date_advisor, \n      approval_date_company\n    FROM ${TABLES.APPLICATIONS}\n    WHERE id = '${id}'\n  `;\n  \n  // Aplicar filtro por entidad si es necesario\n  if (entityFilter) {\n    if (entityFilter.advisor_id) {\n      query += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      query += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n  }\n  \n  try {\n    const data = await executeQuery(query);\n    if (data && data.length > 0) {\n      return {\n        approvedByAdvisor: data[0].approved_by_advisor || false,\n        approvedByCompany: data[0].approved_by_company || false,\n        approvalDateAdvisor: data[0].approval_date_advisor,\n        approvalDateCompany: data[0].approval_date_company\n      };\n    }\n    throw new Error('Solicitud no encontrada');\n  } catch (error) {\n    console.error(`Error obteniendo estado de aprobación para solicitud ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete an application\nexport const deleteApplication = async (id: string, entityFilter?: Record<string, any> | null) => {\n  let query = `DELETE FROM ${TABLES.APPLICATIONS} WHERE id = '${id}'`;\n  \n  // Aplicar filtro por entidad si es necesario\n  if (entityFilter) {\n    if (entityFilter.advisor_id) {\n      query += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      query += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n  }\n  \n  try {\n    await executeQuery(query);\n    return true;\n  } catch (error) {\n    console.error(`Error deleting application with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Get application history\nexport const getApplicationHistory = async (applicationId: string, entityFilter?: Record<string, any> | null) => {\n  // Verificar primero si el usuario tiene permiso para ver esta aplicación\n  if (entityFilter) {\n    let appQuery = `\n      SELECT id FROM ${TABLES.APPLICATIONS} \n      WHERE id = '${applicationId}'\n    `;\n    \n    if (entityFilter.advisor_id) {\n      appQuery += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      appQuery += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n    \n    const app = await executeQuery(appQuery);\n    if (!app || app.length === 0) {\n      throw new Error('Application not found or you do not have permission to view it');\n    }\n  }\n  \n  const query = `\n    SELECT h.*, u.id as user_id, u.name as user_name, u.email as user_email\n    FROM ${APPLICATION_HISTORY_TABLE} h\n    LEFT JOIN users u ON h.created_by = u.id\n    WHERE h.application_id = '${applicationId}'\n    ORDER BY h.created_at DESC\n  `;\n  \n  try {\n    return await executeQuery(query);\n  } catch (error) {\n    console.error(`Error fetching history for application ${applicationId}:`, error);\n    throw error;\n  }\n};\n\n// Add a comment to an application\nexport const addComment = async (applicationId: string, userId: string, text: string, entityFilter?: Record<string, any> | null) => {\n  // Verificar primero si el usuario tiene permiso para comentar esta aplicación\n  if (entityFilter) {\n    let appQuery = `\n      SELECT id FROM ${TABLES.APPLICATIONS} \n      WHERE id = '${applicationId}'\n    `;\n    \n    if (entityFilter.advisor_id) {\n      appQuery += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      appQuery += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n    \n    const app = await executeQuery(appQuery);\n    if (!app || app.length === 0) {\n      throw new Error('Application not found or you do not have permission to comment on it');\n    }\n  }\n  \n  const query = `\n    INSERT INTO ${TABLES.COMMENTS} (application_id, user_id, text)\n    VALUES ('${applicationId}', '${userId}', '${text}')\n    RETURNING *\n  `;\n  \n  try {\n    const data = await executeQuery(query);\n    return data[0];\n  } catch (error) {\n    console.error(`Error adding comment to application ${applicationId}:`, error);\n    throw error;\n  }\n};\n\n// Get comments for an application\nexport const getComments = async (applicationId: string, entityFilter?: Record<string, any> | null) => {\n  // Verificar primero si el usuario tiene permiso para ver los comentarios de esta aplicación\n  if (entityFilter) {\n    let appQuery = `\n      SELECT id FROM ${TABLES.APPLICATIONS} \n      WHERE id = '${applicationId}'\n    `;\n    \n    if (entityFilter.advisor_id) {\n      appQuery += ` AND assigned_to = '${entityFilter.advisor_id}'`;\n    }\n    if (entityFilter.company_id) {\n      appQuery += ` AND company_id = '${entityFilter.company_id}'`;\n    }\n    \n    const app = await executeQuery(appQuery);\n    if (!app || app.length === 0) {\n      throw new Error('Application not found or you do not have permission to view its comments');\n    }\n  }\n  \n  const query = `\n    SELECT c.*, u.id as user_id, u.name as user_name, u.email as user_email\n    FROM ${TABLES.COMMENTS} c\n    LEFT JOIN users u ON c.user_id = u.id\n    WHERE c.application_id = '${applicationId}'\n    ORDER BY c.created_at DESC\n  `;\n  \n  try {\n    return await executeQuery(query);\n  } catch (error) {\n    console.error(`Error fetching comments for application ${applicationId}:`, error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}