{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { USER_ROLES } from '../utils/constants/roles';\n\n// Tipos\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Verificación de sesión al iniciar\n  useEffect(() => {\n    const checkStoredUser = () => {\n      try {\n        const storedUser = localStorage.getItem('crm_user');\n        if (storedUser) {\n          const parsedUser = JSON.parse(storedUser);\n          console.log(\"Loaded user from storage:\", parsedUser);\n\n          // Validar que el usuario tiene los campos requeridos\n          if (parsedUser && parsedUser.id && parsedUser.email && parsedUser.role) {\n            setUser(parsedUser);\n          } else {\n            console.warn(\"Stored user data is invalid, clearing session\");\n            localStorage.removeItem('crm_user');\n          }\n        }\n      } catch (error) {\n        console.error('Error checking stored user:', error);\n        // Si hay error al parsear, limpiar la sesión\n        localStorage.removeItem('crm_user');\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkStoredUser();\n  }, []);\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n\n      // Simulación de autenticación\n      if (email === 'admin@fincentiva.com' && password === 'admin123') {\n        const mockUser = {\n          id: '1',\n          email: 'admin@fincentiva.com',\n          name: 'Administrador',\n          role: 'SUPERADMIN'\n        };\n\n        // Guardar en localStorage para mantener la sesión\n        localStorage.setItem('crm_user', JSON.stringify(mockUser));\n        setUser(mockUser);\n        return {\n          data: {\n            user: mockUser\n          },\n          error: null\n        };\n      }\n      return {\n        data: null,\n        error: 'Credenciales inválidas'\n      };\n    } catch (error) {\n      console.error('Error signing in:', error);\n      return {\n        error,\n        data: null\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signInWithCode = async (accessCode, userType) => {\n    try {\n      setLoading(true);\n      console.log(`Attempting to sign in with code: ${accessCode}, type: ${userType}`);\n      if (!accessCode || accessCode.trim() === '') {\n        console.error('Access code is empty');\n        return {\n          data: null,\n          error: 'Por favor, ingrese un código de acceso'\n        };\n      }\n\n      // Consultar la base de datos para verificar el access_code\n      let queryUrl = 'http://localhost:3100/query';\n      let queryBody = {};\n      if (userType === USER_ROLES.ADVISOR) {\n        queryBody = {\n          query: `SELECT * FROM advisors WHERE access_code = '${accessCode}' LIMIT 1`\n        };\n      } else if (userType === USER_ROLES.COMPANY_ADMIN) {\n        queryBody = {\n          query: `SELECT * FROM company_admins WHERE access_code = '${accessCode}' LIMIT 1`\n        };\n      } else {\n        console.error(`Invalid user type: ${userType}`);\n        return {\n          data: null,\n          error: 'Tipo de usuario no válido'\n        };\n      }\n      console.log(\"Sending auth query:\", queryBody);\n      try {\n        const startTime = Date.now();\n        const response = await fetch(queryUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(queryBody)\n        });\n        const endTime = Date.now();\n        console.log(`Auth query took ${endTime - startTime}ms`);\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(`API Error (${response.status}): ${errorText}`);\n\n          // Check for MCP connection issues\n          if (response.status === 404 || response.status === 502 || response.status === 503 || !response.status || response.status === 0) {\n            console.error('Unable to connect to MCP server');\n            return {\n              data: null,\n              error: 'Error de conexión con el servidor MCP. Verifique que el servidor esté ejecutándose.'\n            };\n          }\n          return {\n            data: null,\n            error: `Error de conexión con el servidor (${response.status})`\n          };\n        }\n        const result = await response.json();\n        console.log(\"Auth result:\", result);\n        if (result.error) {\n          console.error('Database error:', result.error);\n          return {\n            data: null,\n            error: `Error de base de datos: ${result.error}`\n          };\n        }\n        if (!result.data) {\n          console.error('No data returned from query');\n          return {\n            data: null,\n            error: 'No se recibieron datos de la consulta'\n          };\n        }\n        if (result.data && result.data.length > 0) {\n          const userData = result.data[0];\n          console.log(\"User data retrieved:\", userData);\n          let entityId;\n          if (userType === USER_ROLES.COMPANY_ADMIN) {\n            if (!userData.company_id) {\n              console.error('Company admin has no company_id');\n              return {\n                data: null,\n                error: 'Este administrador no tiene una empresa asignada'\n              };\n            }\n            entityId = userData.company_id;\n          } else {\n            // ADVISOR\n            entityId = userData.id;\n          }\n          const userInfo = {\n            id: userData.id,\n            email: userData.email || 'no-email@example.com',\n            name: userData.name || 'Usuario sin nombre',\n            role: userType,\n            entityId: entityId\n          };\n          console.log(\"Constructed user object:\", userInfo);\n\n          // Validar que el objeto tenga toda la información necesaria\n          if (!userInfo.id || !userInfo.role || !userInfo.entityId) {\n            console.error('Incomplete user information:', userInfo);\n            return {\n              data: null,\n              error: 'Información de usuario incompleta'\n            };\n          }\n\n          // Guardar en localStorage para mantener la sesión\n          localStorage.setItem('crm_user', JSON.stringify(userInfo));\n          setUser(userInfo);\n          return {\n            data: {\n              user: userInfo\n            },\n            error: null\n          };\n        }\n        console.error('No matching user found for access code:', accessCode);\n        return {\n          data: null,\n          error: 'Código de acceso inválido'\n        };\n      } catch (fetchError) {\n        console.error('Network error during authentication:', fetchError);\n\n        // Check for specific connection errors\n        if (fetchError.message && (fetchError.message.includes('Failed to fetch') || fetchError.message.includes('NetworkError') || fetchError.message.includes('ECONNREFUSED'))) {\n          return {\n            data: null,\n            error: 'Error de conexión: Verifique que el servidor MCP esté funcionando en puerto 3100'\n          };\n        }\n        return {\n          data: null,\n          error: `Error de conexión: ${fetchError.message}`\n        };\n      }\n    } catch (error) {\n      console.error('Error signing in with code:', error);\n      return {\n        error: error.message || 'Error desconocido al iniciar sesión',\n        data: null\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signOut = async () => {\n    try {\n      // Eliminar datos de sesión\n      localStorage.removeItem('crm_user');\n      setUser(null);\n      setSession(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n  const value = {\n    user,\n    session,\n    loading,\n    signIn,\n    signInWithCode,\n    signOut,\n    setUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"sIDOCMze9iVqwxkgWIhOu8vskSI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","USER_ROLES","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","session","setSession","loading","setLoading","checkStoredUser","storedUser","localStorage","getItem","parsedUser","JSON","parse","console","log","id","email","role","warn","removeItem","error","signIn","password","mockUser","name","setItem","stringify","data","signInWithCode","accessCode","userType","trim","queryUrl","queryBody","ADVISOR","query","COMPANY_ADMIN","startTime","Date","now","response","fetch","method","headers","body","endTime","ok","errorText","text","status","result","json","length","userData","entityId","company_id","userInfo","fetchError","message","includes","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Session } from '@supabase/supabase-js';\nimport { USER_ROLES } from '../utils/constants/roles';\n\n// Tipos\ninterface User {\n  id: string;\n  email: string;\n  name?: string;\n  role: string;\n  entityId?: string; // ID del asesor o empresa asociada\n}\n\ninterface AuthContextType {\n  user: User | null;\n  session: Session | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<{\n    error: any | null;\n    data: any | null;\n  }>;\n  signInWithCode: (accessCode: string, userType: string) => Promise<{\n    error: any | null;\n    data: any | null;\n  }>;\n  signOut: () => Promise<void>;\n  setUser: React.Dispatch<React.SetStateAction<User | null>>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  // Verificación de sesión al iniciar\n  useEffect(() => {\n    const checkStoredUser = () => {\n      try {\n        const storedUser = localStorage.getItem('crm_user');\n        if (storedUser) {\n          const parsedUser = JSON.parse(storedUser);\n          console.log(\"Loaded user from storage:\", parsedUser);\n          \n          // Validar que el usuario tiene los campos requeridos\n          if (parsedUser && parsedUser.id && parsedUser.email && parsedUser.role) {\n            setUser(parsedUser);\n          } else {\n            console.warn(\"Stored user data is invalid, clearing session\");\n            localStorage.removeItem('crm_user');\n          }\n        }\n      } catch (error) {\n        console.error('Error checking stored user:', error);\n        // Si hay error al parsear, limpiar la sesión\n        localStorage.removeItem('crm_user');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkStoredUser();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      \n      // Simulación de autenticación\n      if (email === 'admin@fincentiva.com' && password === 'admin123') {\n        const mockUser: User = {\n          id: '1',\n          email: 'admin@fincentiva.com',\n          name: 'Administrador',\n          role: 'SUPERADMIN',\n        };\n        \n        // Guardar en localStorage para mantener la sesión\n        localStorage.setItem('crm_user', JSON.stringify(mockUser));\n        setUser(mockUser);\n        \n        return { data: { user: mockUser }, error: null };\n      }\n      \n      return { data: null, error: 'Credenciales inválidas' };\n    } catch (error) {\n      console.error('Error signing in:', error);\n      return { error, data: null };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signInWithCode = async (accessCode: string, userType: string) => {\n    try {\n      setLoading(true);\n      console.log(`Attempting to sign in with code: ${accessCode}, type: ${userType}`);\n      \n      if (!accessCode || accessCode.trim() === '') {\n        console.error('Access code is empty');\n        return { data: null, error: 'Por favor, ingrese un código de acceso' };\n      }\n      \n      // Consultar la base de datos para verificar el access_code\n      let queryUrl = 'http://localhost:3100/query';\n      let queryBody = {};\n      \n      if (userType === USER_ROLES.ADVISOR) {\n        queryBody = {\n          query: `SELECT * FROM advisors WHERE access_code = '${accessCode}' LIMIT 1`\n        };\n      } else if (userType === USER_ROLES.COMPANY_ADMIN) {\n        queryBody = {\n          query: `SELECT * FROM company_admins WHERE access_code = '${accessCode}' LIMIT 1`\n        };\n      } else {\n        console.error(`Invalid user type: ${userType}`);\n        return { data: null, error: 'Tipo de usuario no válido' };\n      }\n      \n      console.log(\"Sending auth query:\", queryBody);\n      \n      try {\n        const startTime = Date.now();\n        const response = await fetch(queryUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(queryBody),\n        });\n        const endTime = Date.now();\n        console.log(`Auth query took ${endTime - startTime}ms`);\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(`API Error (${response.status}): ${errorText}`);\n          \n          // Check for MCP connection issues\n          if (response.status === 404 || response.status === 502 || response.status === 503 || \n              !response.status || response.status === 0) {\n            console.error('Unable to connect to MCP server');\n            return { data: null, error: 'Error de conexión con el servidor MCP. Verifique que el servidor esté ejecutándose.' };\n          }\n          \n          return { data: null, error: `Error de conexión con el servidor (${response.status})` };\n        }\n        \n        const result = await response.json();\n        console.log(\"Auth result:\", result);\n        \n        if (result.error) {\n          console.error('Database error:', result.error);\n          return { data: null, error: `Error de base de datos: ${result.error}` };\n        }\n        \n        if (!result.data) {\n          console.error('No data returned from query');\n          return { data: null, error: 'No se recibieron datos de la consulta' };\n        }\n        \n        if (result.data && result.data.length > 0) {\n          const userData = result.data[0];\n          console.log(\"User data retrieved:\", userData);\n          \n          let entityId: string | undefined;\n          \n          if (userType === USER_ROLES.COMPANY_ADMIN) {\n            if (!userData.company_id) {\n              console.error('Company admin has no company_id');\n              return { data: null, error: 'Este administrador no tiene una empresa asignada' };\n            }\n            entityId = userData.company_id;\n          } else { // ADVISOR\n            entityId = userData.id;\n          }\n          \n          const userInfo: User = {\n            id: userData.id,\n            email: userData.email || 'no-email@example.com',\n            name: userData.name || 'Usuario sin nombre',\n            role: userType,\n            entityId: entityId,\n          };\n          \n          console.log(\"Constructed user object:\", userInfo);\n          \n          // Validar que el objeto tenga toda la información necesaria\n          if (!userInfo.id || !userInfo.role || !userInfo.entityId) {\n            console.error('Incomplete user information:', userInfo);\n            return { data: null, error: 'Información de usuario incompleta' };\n          }\n          \n          // Guardar en localStorage para mantener la sesión\n          localStorage.setItem('crm_user', JSON.stringify(userInfo));\n          setUser(userInfo);\n          \n          return { data: { user: userInfo }, error: null };\n        }\n        \n        console.error('No matching user found for access code:', accessCode);\n        return { data: null, error: 'Código de acceso inválido' };\n      } catch (fetchError: any) {\n        console.error('Network error during authentication:', fetchError);\n        \n        // Check for specific connection errors\n        if (fetchError.message && (\n            fetchError.message.includes('Failed to fetch') || \n            fetchError.message.includes('NetworkError') ||\n            fetchError.message.includes('ECONNREFUSED'))) {\n          return { \n            data: null, \n            error: 'Error de conexión: Verifique que el servidor MCP esté funcionando en puerto 3100' \n          };\n        }\n        \n        return { data: null, error: `Error de conexión: ${fetchError.message}` };\n      }\n    } catch (error: any) {\n      console.error('Error signing in with code:', error);\n      return { error: error.message || 'Error desconocido al iniciar sesión', data: null };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      // Eliminar datos de sesión\n      localStorage.removeItem('crm_user');\n      setUser(null);\n      setSession(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  const value = {\n    user,\n    session,\n    loading,\n    signIn,\n    signInWithCode,\n    signOut,\n    setUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}