{"ast":null,"code":"import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from '../utils/constants/tables';\nimport { uploadDocument } from './documentService';\nconst USERS_TABLE = 'users';\nconst mapUserToClient = userData => {\n  const fullName = [userData.first_name, userData.paternal_surname, userData.maternal_surname].filter(Boolean).join(' ');\n  return {\n    id: userData.id,\n    created_at: userData.created_at,\n    name: fullName,\n    first_name: userData.first_name,\n    paternal_surname: userData.paternal_surname,\n    maternal_surname: userData.maternal_surname,\n    email: userData.email,\n    phone: userData.phone,\n    birth_date: userData.birth_date,\n    rfc: userData.rfc,\n    curp: userData.curp,\n    company_id: userData.company_id,\n    address: undefined,\n    city: undefined,\n    state: undefined,\n    postal_code: undefined,\n    gender: undefined,\n    marital_status: undefined,\n    employment_type: undefined,\n    employment_years: undefined,\n    monthly_income: undefined,\n    additional_income: undefined,\n    monthly_expenses: undefined,\n    other_loan_balances: undefined,\n    bank_name: undefined,\n    bank_clabe: undefined,\n    bank_account_number: undefined,\n    bank_account_type: undefined,\n    bank_account_origin: undefined,\n    advisor_id: undefined\n  };\n};\nexport const getClients = async filters => {\n  try {\n    let query = supabase.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date', {\n      count: 'exact'\n    });\n    if (filters) {\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n      if (filters.searchQuery) {\n        query = query.or(`first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%`);\n      }\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n    query = query.order('created_at', {\n      ascending: false\n    });\n    const {\n      data,\n      error,\n      count\n    } = await query;\n    if (error) {\n      console.error('Error fetching users:', error);\n      throw error;\n    }\n    const clients = data ? data.map(mapUserToClient) : [];\n    return {\n      clients,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    console.error('Error in getClients:', error);\n    throw error;\n  }\n};\nexport const getClientById = async id => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date').eq('id', id).single();\n    if (error) {\n      console.error(`Error fetching user with ID ${id}:`, error);\n      throw error;\n    }\n    return mapUserToClient(data);\n  } catch (error) {\n    console.error(`Error in getClientById:`, error);\n    throw error;\n  }\n};\nfunction escapeSQLString(str) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\nexport const getClientApplications = async clientId => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      throw err;\n    });\n    if (!client) {\n      console.warn('Client not found. Returning empty applications list.');\n      return [];\n    }\n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name || '')}'\n      ORDER BY created_at DESC\n    `;\n    const executeQuery = async query => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query: query\n          })\n        });\n        const result = await response.json();\n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        return result.data;\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    const data = await executeQuery(query);\n    return data;\n  } catch (error) {\n    console.error(`Error fetching applications for client ${clientId}:`, error);\n    throw error;\n  }\n};\nexport const uploadClientDocuments = async (clientId, userId, documents) => {\n  const uploadPromises = documents.map(doc => {\n    const upload = {\n      file: doc.file,\n      client_id: clientId,\n      userId: userId,\n      documentName: doc.name,\n      category: doc.category\n    };\n    return uploadDocument(upload);\n  });\n  try {\n    return await Promise.all(uploadPromises);\n  } catch (error) {\n    console.error('Error uploading client documents:', error);\n    throw error;\n  }\n};\nexport const createClient = async (client, documents, userId) => {\n  try {\n    const userData = {\n      email: client.email,\n      first_name: client.first_name || '',\n      paternal_surname: client.paternal_surname || '',\n      maternal_surname: client.maternal_surname || '',\n      phone: client.phone,\n      birth_date: client.birth_date,\n      company_id: client.company_id\n    };\n    const {\n      data,\n      error\n    } = await supabase.from(USERS_TABLE).insert([userData]).select();\n    if (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n    const newClient = mapUserToClient(data[0]);\n    if (documents && documents.length > 0 && userId && newClient.id) {\n      await uploadClientDocuments(newClient.id, userId, documents);\n    }\n    return newClient;\n  } catch (error) {\n    console.error('Error in createClient:', error);\n    throw error;\n  }\n};\nexport const updateClient = async (id, updates, documents, userId) => {\n  try {\n    const userUpdates = {\n      email: updates.email,\n      first_name: updates.first_name,\n      paternal_surname: updates.paternal_surname,\n      maternal_surname: updates.maternal_surname,\n      phone: updates.phone,\n      birth_date: updates.birth_date,\n      company_id: updates.company_id,\n      rfc: updates.rfc,\n      curp: updates.curp\n    };\n    Object.keys(userUpdates).forEach(key => {\n      if (userUpdates[key] === undefined) {\n        delete userUpdates[key];\n      }\n    });\n    const {\n      data,\n      error\n    } = await supabase.from(USERS_TABLE).update(userUpdates).eq('id', id).select();\n    if (error) {\n      console.error(`Error updating user with ID ${id}:`, error);\n      throw error;\n    }\n    const updatedClient = mapUserToClient(data[0]);\n    if (documents && documents.length > 0 && userId) {\n      await uploadClientDocuments(id, userId, documents);\n    }\n    return updatedClient;\n  } catch (error) {\n    console.error(`Error in updateClient:`, error);\n    throw error;\n  }\n};\nexport const deleteClient = async id => {\n  try {\n    const {\n      error\n    } = await supabase.from(USERS_TABLE).delete().eq('id', id);\n    if (error) {\n      console.error(`Error deleting user with ID ${id}:`, error);\n      throw error;\n    }\n    return true;\n  } catch (error) {\n    console.error(`Error in deleteClient:`, error);\n    throw error;\n  }\n};\nexport const checkClientExists = async (email, rfc) => {\n  try {\n    let query = supabase.from(USERS_TABLE).select('id, email, rfc').eq('email', email);\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) {\n      console.error('Error checking client existence:', error);\n      throw error;\n    }\n    return data.length > 0 ? data[0] : null;\n  } catch (error) {\n    console.error('Error in checkClientExists:', error);\n    throw error;\n  }\n};\nexport const getClientCount = async filters => {\n  try {\n    let query = supabase.from(USERS_TABLE).select('id', {\n      count: 'exact',\n      head: true\n    });\n    if (filters) {\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n      if (filters.searchQuery) {\n        query = query.or(`first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);\n      }\n    }\n    const {\n      count,\n      error\n    } = await query;\n    if (error) {\n      console.error('Error getting client count:', error);\n      throw error;\n    }\n    return count || 0;\n  } catch (error) {\n    console.error('Error in getClientCount:', error);\n    return 0;\n  }\n};","map":{"version":3,"names":["supabase","TABLES","uploadDocument","USERS_TABLE","mapUserToClient","userData","fullName","first_name","paternal_surname","maternal_surname","filter","Boolean","join","id","created_at","name","email","phone","birth_date","rfc","curp","company_id","address","undefined","city","state","postal_code","gender","marital_status","employment_type","employment_years","monthly_income","additional_income","monthly_expenses","other_loan_balances","bank_name","bank_clabe","bank_account_number","bank_account_type","bank_account_origin","advisor_id","getClients","filters","query","from","select","count","eq","dateFrom","gte","dateTo","lte","searchQuery","or","page","pageSize","to","range","order","ascending","data","error","console","clients","map","totalCount","getClientById","single","escapeSQLString","str","replace","getClientApplications","clientId","client","catch","err","warn","APPLICATIONS","executeQuery","response","fetch","method","headers","body","JSON","stringify","result","json","Error","uploadClientDocuments","userId","documents","uploadPromises","doc","upload","file","client_id","documentName","category","Promise","all","createClient","insert","newClient","length","updateClient","updates","userUpdates","Object","keys","forEach","key","update","updatedClient","deleteClient","delete","checkClientExists","getClientCount","head"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/clientService.ts"],"sourcesContent":["import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from '../utils/constants/tables';\nimport { uploadDocument, DocumentUpload } from './documentService';\n\nexport interface Client {\n  id: string;\n  created_at: string;\n  name?: string;\n  first_name?: string;\n  paternal_surname?: string;\n  maternal_surname?: string;\n  email: string;\n  phone: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  postal_code?: string;\n  birth_date?: string;\n  gender?: string;\n  marital_status?: string;\n  employment_type?: string;\n  employment_years?: number;\n  rfc?: string;\n  curp?: string;\n  monthly_income?: number;\n  additional_income?: number;\n  monthly_expenses?: number;\n  other_loan_balances?: number;\n  bank_name?: string;\n  bank_clabe?: string;\n  bank_account_number?: string;\n  bank_account_type?: string;\n  bank_account_origin?: string;\n  company_id?: string;\n  advisor_id?: string;\n}\n\nexport interface ClientDocument {\n  id?: string;\n  file: File;\n  category: string;\n  name: string;\n}\n\nexport interface ClientFilter {\n  searchQuery?: string;\n  advisor_id?: string;\n  company_id?: string;\n  dateFrom?: string;\n  dateTo?: string;\n  page?: number;\n  pageSize?: number;\n}\n\nconst USERS_TABLE = 'users';\n\nconst mapUserToClient = (userData: any): Client => {\n  const fullName = [\n    userData.first_name,\n    userData.paternal_surname,\n    userData.maternal_surname\n  ].filter(Boolean).join(' ');\n  \n  return {\n    id: userData.id,\n    created_at: userData.created_at,\n    name: fullName,\n    first_name: userData.first_name,\n    paternal_surname: userData.paternal_surname,\n    maternal_surname: userData.maternal_surname,\n    email: userData.email,\n    phone: userData.phone,\n    birth_date: userData.birth_date,\n    rfc: userData.rfc,\n    curp: userData.curp,\n    company_id: userData.company_id,\n    address: undefined,\n    city: undefined,\n    state: undefined,\n    postal_code: undefined,\n    gender: undefined,\n    marital_status: undefined,\n    employment_type: undefined,\n    employment_years: undefined,\n    monthly_income: undefined,\n    additional_income: undefined,\n    monthly_expenses: undefined,\n    other_loan_balances: undefined,\n    bank_name: undefined,\n    bank_clabe: undefined,\n    bank_account_number: undefined,\n    bank_account_type: undefined,\n    bank_account_origin: undefined,\n    advisor_id: undefined,\n  };\n};\n\nexport const getClients = async (filters?: ClientFilter) => {\n  try {\n    let query = supabase.from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date', { count: 'exact' });\n\n    if (filters) {\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%`\n        );\n      }\n\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n\n    query = query.order('created_at', { ascending: false });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      console.error('Error fetching users:', error);\n      throw error;\n    }\n\n    const clients = data ? data.map(mapUserToClient) : [];\n\n    return {\n      clients,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    console.error('Error in getClients:', error);\n    throw error;\n  }\n};\n\nexport const getClientById = async (id: string) => {\n  try {\n    const { data, error } = await supabase\n      .from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      console.error(`Error fetching user with ID ${id}:`, error);\n      throw error;\n    }\n\n    return mapUserToClient(data);\n  } catch (error) {\n    console.error(`Error in getClientById:`, error);\n    throw error;\n  }\n};\n\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\nexport const getClientApplications = async (clientId: string) => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      throw err;\n    });\n    \n    if (!client) {\n      console.warn('Client not found. Returning empty applications list.');\n      return [];\n    }\n    \n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name || '')}'\n      ORDER BY created_at DESC\n    `;\n    \n    const executeQuery = async (query: string) => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query: query }),\n        });\n        \n        const result = await response.json();\n        \n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        \n        return result.data;\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    \n    const data = await executeQuery(query);\n    return data;\n  } catch (error) {\n    console.error(`Error fetching applications for client ${clientId}:`, error);\n    throw error;\n  }\n};\n\nexport const uploadClientDocuments = async (\n  clientId: string, \n  userId: string, \n  documents: ClientDocument[]\n) => {\n  const uploadPromises = documents.map(doc => {\n    const upload: DocumentUpload = {\n      file: doc.file,\n      client_id: clientId,\n      userId: userId,\n      documentName: doc.name,\n      category: doc.category\n    };\n    \n    return uploadDocument(upload);\n  });\n  \n  try {\n    return await Promise.all(uploadPromises);\n  } catch (error) {\n    console.error('Error uploading client documents:', error);\n    throw error;\n  }\n};\n\nexport const createClient = async (client: Omit<Client, 'id' | 'created_at'>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    const userData = {\n      email: client.email,\n      first_name: client.first_name || '',\n      paternal_surname: client.paternal_surname || '',\n      maternal_surname: client.maternal_surname || '',\n      phone: client.phone,\n      birth_date: client.birth_date,\n      company_id: client.company_id,\n    };\n\n    const { data, error } = await supabase\n      .from(USERS_TABLE)\n      .insert([userData])\n      .select();\n\n    if (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n\n    const newClient = mapUserToClient(data[0]);\n    \n    if (documents && documents.length > 0 && userId && newClient.id) {\n      await uploadClientDocuments(newClient.id, userId, documents);\n    }\n\n    return newClient;\n  } catch (error) {\n    console.error('Error in createClient:', error);\n    throw error;\n  }\n};\n\nexport const updateClient = async (id: string, updates: Partial<Client>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    const userUpdates = {\n      email: updates.email,\n      first_name: updates.first_name,\n      paternal_surname: updates.paternal_surname,\n      maternal_surname: updates.maternal_surname,\n      phone: updates.phone,\n      birth_date: updates.birth_date,\n      company_id: updates.company_id,\n      rfc: updates.rfc,\n      curp: updates.curp,\n    };\n\n    Object.keys(userUpdates).forEach(key => {\n      if (userUpdates[key as keyof typeof userUpdates] === undefined) {\n        delete userUpdates[key as keyof typeof userUpdates];\n      }\n    });\n\n    const { data, error } = await supabase\n      .from(USERS_TABLE)\n      .update(userUpdates)\n      .eq('id', id)\n      .select();\n\n    if (error) {\n      console.error(`Error updating user with ID ${id}:`, error);\n      throw error;\n    }\n\n    const updatedClient = mapUserToClient(data[0]);\n    \n    if (documents && documents.length > 0 && userId) {\n      await uploadClientDocuments(id, userId, documents);\n    }\n\n    return updatedClient;\n  } catch (error) {\n    console.error(`Error in updateClient:`, error);\n    throw error;\n  }\n};\n\nexport const deleteClient = async (id: string) => {\n  try {\n    const { error } = await supabase\n      .from(USERS_TABLE)\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      console.error(`Error deleting user with ID ${id}:`, error);\n      throw error;\n    }\n\n    return true;\n  } catch (error) {\n    console.error(`Error in deleteClient:`, error);\n    throw error;\n  }\n};\n\nexport const checkClientExists = async (email: string, rfc?: string) => {\n  try {\n    let query = supabase\n      .from(USERS_TABLE)\n      .select('id, email, rfc')\n      .eq('email', email);\n\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      console.error('Error checking client existence:', error);\n      throw error;\n    }\n\n    return data.length > 0 ? data[0] : null;\n  } catch (error) {\n    console.error('Error in checkClientExists:', error);\n    throw error;\n  }\n};\n\nexport const getClientCount = async (filters?: ClientFilter) => {\n  try {\n    let query = supabase\n      .from(USERS_TABLE)\n      .select('id', { count: 'exact', head: true });\n\n    if (filters) {\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n    }\n\n    const { count, error } = await query;\n\n    if (error) {\n      console.error('Error getting client count:', error);\n      throw error;\n    }\n\n    return count || 0;\n  } catch (error) {\n    console.error('Error in getClientCount:', error);\n    return 0;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}