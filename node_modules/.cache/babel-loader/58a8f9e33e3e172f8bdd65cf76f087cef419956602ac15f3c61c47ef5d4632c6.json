{"ast":null,"code":"import{supabase,getServiceClient}from'../lib/supabaseClient';import{TABLES}from'../utils/constants/tables';import{checkTableExists}from'../utils/dbStructureCheck';import{ErrorType,createAppError,logError}from'../utils/errorHandling';// Renombramos la interfaz para que coincida con el uso en uploadDocument\nconst DOCUMENTS_TABLE=TABLES.DOCUMENTS;const STORAGE_BUCKET='documents';// Ensure storage bucket exists\nexport const ensureStorageBucketExists=async client=>{const supabaseClient=client||supabase;try{// Attempt to list files in the bucket instead of checking if bucket exists\n// This is more reliable as it tests both existence and permissions\nconst{error}=await supabaseClient.storage.from(STORAGE_BUCKET).list();if(error){// If there's an error, it could be because the bucket doesn't exist\n// or because of permissions issues\nconst errorMessage=error.message||'Error desconocido';if(errorMessage.includes('not found')||errorMessage.includes('does not exist')||errorMessage.includes('404')){console.log(`Storage bucket '${STORAGE_BUCKET}' does not exist`);throw new Error(`El bucket de almacenamiento '${STORAGE_BUCKET}' no existe. Contacte al administrador.`);}else{console.error(`Error accessing storage bucket '${STORAGE_BUCKET}':`,error);throw new Error(`Error al acceder al bucket de almacenamiento: ${errorMessage}`);}}console.log(`Storage bucket '${STORAGE_BUCKET}' exists and is accessible`);return true;}catch(error){console.error('Error in ensureStorageBucketExists:',error);throw error;}};// Get all documents for an application\nexport const getApplicationDocuments=async applicationId=>{const{data,error}=await supabase.from(DOCUMENTS_TABLE).select('*').eq('application_id',applicationId).order('created_at',{ascending:false});if(error){console.error(`Error fetching documents for application ${applicationId}:`,error);throw error;}return data;};// Get all documents for a client\nexport const getClientDocuments=async clientId=>{const{data,error}=await supabase.from(DOCUMENTS_TABLE).select('*').eq('client_id',clientId).order('created_at',{ascending:false});if(error){console.error(`Error fetching documents for client ${clientId}:`,error);throw error;}return data;};// Get a single document by ID\nexport const getDocumentById=async id=>{const{data,error}=await supabase.from(DOCUMENTS_TABLE).select('*').eq('id',id).single();if(error){console.error(`Error fetching document with ID ${id}:`,error);throw error;}return data;};// Upload a document\nexport const uploadDocument=async _ref=>{let{application_id,client_id,file,category,userId}=_ref;const supabaseClient=getServiceClient();try{var _uploadError,_uploadError2;// Verificar si la tabla existe antes de intentar operaciones\nconst tableExists=await checkTableExists(DOCUMENTS_TABLE);if(!tableExists){logError(`La tabla ${DOCUMENTS_TABLE} no existe. Por favor, ejecute el script de creación de tablas.`,'documentService.uploadDocument',{table:DOCUMENTS_TABLE});throw createAppError(ErrorType.DATABASE,`Error de configuración: La tabla de documentos no está correctamente configurada.`,{table:DOCUMENTS_TABLE});}// Verificar si el bucket de storage existe\nconst{data:buckets}=await supabaseClient.storage.listBuckets();const bucketExists=buckets===null||buckets===void 0?void 0:buckets.some(bucket=>bucket.name===STORAGE_BUCKET);if(!bucketExists){logError(`El bucket ${STORAGE_BUCKET} no existe.`,'documentService.uploadDocument',{bucket:STORAGE_BUCKET});throw createAppError(ErrorType.UPLOAD,`Error de configuración: El almacenamiento de documentos no está correctamente configurado.`,{bucket:STORAGE_BUCKET});}// Generar información del archivo\nconst fileName=file.name;const fileType=file.type;const fileSize=file.size;// Crear registro del documento\nconst{data,error}=await supabaseClient.from(DOCUMENTS_TABLE).insert({file_name:fileName,file_type:fileType,file_size:fileSize,category,application_id,client_id,uploaded_by_user_id:userId,is_verified:false}).select('*').single();if(error){// Verificar si es un error de RLS\nif(error.message&&error.message.includes('policy')){logError(`Violación de política RLS al crear documento: ${error.message}`,'documentService.uploadDocument',{error});throw createAppError(ErrorType.AUTHORIZATION,'No tienes permisos para crear documentos para este cliente o aplicación',{error:error.message});}logError(`Error al crear documento: ${error.message}`,'documentService.uploadDocument',{error});throw createAppError(ErrorType.DATABASE,'Error al crear documento en la base de datos',{error:error.message});}if(!data){logError('No se retornaron datos al crear documento','documentService.uploadDocument');throw createAppError(ErrorType.DATABASE,'Error al crear documento en la base de datos');}const documentId=data.id;// Construir nombre único para el archivo\nconst fileExtension=fileName.split('.').pop();const uniqueFileName=`${documentId}.${fileExtension}`;const filePath=`${client_id||application_id}/${uniqueFileName}`;// Intentar subir el archivo con reintentos\nlet uploadError=null;const maxRetries=3;for(let attempt=0;attempt<maxRetries;attempt++){try{// Subir el archivo al storage\nconst{error:uploadError}=await supabaseClient.storage.from(STORAGE_BUCKET).upload(filePath,file,{upsert:true,cacheControl:'3600'});if(uploadError){throw uploadError;}// Obtener URL pública del archivo\nconst{data:publicUrlData}=supabaseClient.storage.from(STORAGE_BUCKET).getPublicUrl(filePath);// Actualizar el documento con la ruta del archivo\nconst{error:updateError}=await supabaseClient.from(DOCUMENTS_TABLE).update({file_path:filePath}).eq('id',documentId);if(updateError){logError(`Error al actualizar ruta del documento: ${updateError.message}`,'documentService.uploadDocument',{error:updateError});}// Construir y devolver el documento\nconst documentResult={id:documentId,application_id:application_id||undefined,client_id:client_id||undefined,file_name:fileName,file_path:filePath,file_type:fileType,file_size:fileSize,category,uploaded_by_user_id:userId,is_verified:false,created_at:data.created_at};return documentResult;}catch(error){uploadError=error;// Esperar con backoff exponencial antes de reintentar\nif(attempt<maxRetries-1){const waitTime=Math.pow(2,attempt)*1000;console.log(`Reintentando subir documento en ${waitTime}ms...`);await new Promise(resolve=>setTimeout(resolve,waitTime));}}}// Si llegamos aquí, todos los intentos fallaron\nlogError(`Error al subir documento después de ${maxRetries} intentos: ${((_uploadError=uploadError)===null||_uploadError===void 0?void 0:_uploadError.message)||'Error desconocido'}`,'documentService.uploadDocument',{error:uploadError,attempts:maxRetries});// Intentar eliminar el documento creado\ntry{await supabaseClient.from(DOCUMENTS_TABLE).delete().eq('id',documentId);}catch(deleteError){console.warn(`No se pudo eliminar el documento huérfano: ${deleteError}`);}throw createAppError(ErrorType.UPLOAD,'Error al subir el archivo al sistema',{error:(_uploadError2=uploadError)===null||_uploadError2===void 0?void 0:_uploadError2.message});}catch(error){// Si el error ya es un AppError, rethrow\nif(error&&error.isAppError){throw error;}logError(`Error inesperado en uploadDocument: ${(error===null||error===void 0?void 0:error.message)||'Error desconocido'}`,'documentService.uploadDocument',{error});throw createAppError(ErrorType.UNKNOWN,'Error inesperado al subir documento',{error:error===null||error===void 0?void 0:error.message});}};// Delete a document\nexport const deleteDocument=async documentId=>{try{// Ensure bucket exists before attempting to delete\nawait ensureStorageBucketExists();// Get document to get file path\nconst{data:document,error:fetchError}=await supabase.from(DOCUMENTS_TABLE).select('file_path').eq('id',documentId).single();if(fetchError){console.error(`Error fetching document ${documentId} for deletion:`,fetchError);throw fetchError;}// Delete file from storage\nconst{error:storageError}=await supabase.storage.from(STORAGE_BUCKET).remove([document.file_path]);if(storageError){console.error(`Error deleting file for document ${documentId}:`,storageError);// Use type-safe error handling\nconst errorMessage=storageError instanceof Error?storageError.message:typeof storageError==='object'&&storageError!==null&&'message'in storageError?String(storageError.message):'Error desconocido';throw new Error(`Error al eliminar el archivo del documento: ${errorMessage}`);}// Delete document record\nconst{error:deleteError}=await supabase.from(DOCUMENTS_TABLE).delete().eq('id',documentId);if(deleteError){console.error(`Error deleting document record ${documentId}:`,deleteError);throw deleteError;}return true;}catch(error){console.error(`Error in deleteDocument for ${documentId}:`,error);throw error;}};// Get document download URL\nexport const getDocumentUrl=async filePath=>{try{// Ensure bucket exists before attempting to get URL\nawait ensureStorageBucketExists();const{data,error}=await supabase.storage.from(STORAGE_BUCKET).createSignedUrl(filePath,60*60);// 1 hour expiry\nif(error){console.error(`Error getting URL for document ${filePath}:`,error);throw error;}return data.signedUrl;}catch(error){console.error(`Error in getDocumentUrl for ${filePath}:`,error);throw error;}};// Verify a document\nexport const verifyDocument=async function(documentId,userId){let isVerified=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;const{data,error}=await supabase.from(DOCUMENTS_TABLE).update({is_verified:isVerified,verified_by:userId,verified_at:new Date().toISOString()}).eq('id',documentId).select();if(error){console.error(`Error verifying document ${documentId}:`,error);throw error;}return data[0];};// Get required documents (based on application type)\nexport const getRequiredDocuments=async applicationType=>{const{data,error}=await supabase.from('required_documents').select('*').eq('application_type',applicationType);if(error){console.error(`Error fetching required documents for ${applicationType}:`,error);throw error;}return data;};","map":{"version":3,"names":["supabase","getServiceClient","TABLES","checkTableExists","ErrorType","createAppError","logError","DOCUMENTS_TABLE","DOCUMENTS","STORAGE_BUCKET","ensureStorageBucketExists","client","supabaseClient","error","storage","from","list","errorMessage","message","includes","console","log","Error","getApplicationDocuments","applicationId","data","select","eq","order","ascending","getClientDocuments","clientId","getDocumentById","id","single","uploadDocument","_ref","application_id","client_id","file","category","userId","_uploadError","_uploadError2","tableExists","table","DATABASE","buckets","listBuckets","bucketExists","some","bucket","name","UPLOAD","fileName","fileType","type","fileSize","size","insert","file_name","file_type","file_size","uploaded_by_user_id","is_verified","AUTHORIZATION","documentId","fileExtension","split","pop","uniqueFileName","filePath","uploadError","maxRetries","attempt","upload","upsert","cacheControl","publicUrlData","getPublicUrl","updateError","update","file_path","documentResult","undefined","created_at","waitTime","Math","pow","Promise","resolve","setTimeout","attempts","delete","deleteError","warn","isAppError","UNKNOWN","deleteDocument","document","fetchError","storageError","remove","String","getDocumentUrl","createSignedUrl","signedUrl","verifyDocument","isVerified","arguments","length","verified_by","verified_at","Date","toISOString","getRequiredDocuments","applicationType"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/documentService.ts"],"sourcesContent":["import { supabase, getServiceClient } from '../lib/supabaseClient';\nimport { TABLES } from '../utils/constants/tables';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { checkTableExists } from '../utils/dbStructureCheck';\nimport { \n  ErrorType, \n  createAppError, \n  logError \n} from '../utils/errorHandling';\n\nexport interface Document {\n  id: string;\n  created_at: string;\n  file_name: string;\n  file_path: string;\n  file_type: string;\n  file_size: number;\n  category?: string;\n  application_id?: string;\n  client_id?: string;\n  uploaded_by_user_id?: string;\n  is_verified?: boolean;\n  verified_by?: string;\n  verified_at?: string;\n}\n\nexport interface DocumentUpload {\n  file: File;\n  application_id?: string;\n  client_id?: string;\n  userId: string;\n  documentName: string;\n  description?: string;\n  category?: string;\n  authClient?: SupabaseClient;\n}\n\n// Renombramos la interfaz para que coincida con el uso en uploadDocument\nexport type UploadDocumentParams = DocumentUpload;\n\nconst DOCUMENTS_TABLE = TABLES.DOCUMENTS;\nconst STORAGE_BUCKET = 'documents';\n\n// Ensure storage bucket exists\nexport const ensureStorageBucketExists = async (client?: SupabaseClient) => {\n  const supabaseClient = client || supabase;\n  \n  try {\n    // Attempt to list files in the bucket instead of checking if bucket exists\n    // This is more reliable as it tests both existence and permissions\n    const { error } = await supabaseClient.storage\n      .from(STORAGE_BUCKET)\n      .list();\n    \n    if (error) {\n      // If there's an error, it could be because the bucket doesn't exist\n      // or because of permissions issues\n      const errorMessage = error.message || 'Error desconocido';\n      if (errorMessage.includes('not found') || \n          errorMessage.includes('does not exist') || \n          errorMessage.includes('404')) {\n        console.log(`Storage bucket '${STORAGE_BUCKET}' does not exist`);\n        throw new Error(`El bucket de almacenamiento '${STORAGE_BUCKET}' no existe. Contacte al administrador.`);\n      } else {\n        console.error(`Error accessing storage bucket '${STORAGE_BUCKET}':`, error);\n        throw new Error(`Error al acceder al bucket de almacenamiento: ${errorMessage}`);\n      }\n    }\n    \n    console.log(`Storage bucket '${STORAGE_BUCKET}' exists and is accessible`);\n    return true;\n  } catch (error) {\n    console.error('Error in ensureStorageBucketExists:', error);\n    throw error;\n  }\n};\n\n// Get all documents for an application\nexport const getApplicationDocuments = async (applicationId: string) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select('*')\n    .eq('application_id', applicationId)\n    .order('created_at', { ascending: false });\n\n  if (error) {\n    console.error(`Error fetching documents for application ${applicationId}:`, error);\n    throw error;\n  }\n\n  return data;\n};\n\n// Get all documents for a client\nexport const getClientDocuments = async (clientId: string) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select('*')\n    .eq('client_id', clientId)\n    .order('created_at', { ascending: false });\n\n  if (error) {\n    console.error(`Error fetching documents for client ${clientId}:`, error);\n    throw error;\n  }\n\n  return data;\n};\n\n// Get a single document by ID\nexport const getDocumentById = async (id: string) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select('*')\n    .eq('id', id)\n    .single();\n\n  if (error) {\n    console.error(`Error fetching document with ID ${id}:`, error);\n    throw error;\n  }\n\n  return data as Document;\n};\n\n// Upload a document\nexport const uploadDocument = async ({\n  application_id,\n  client_id,\n  file,\n  category,\n  userId\n}: DocumentUpload): Promise<Document> => {\n  const supabaseClient = getServiceClient();\n  \n  try {\n    // Verificar si la tabla existe antes de intentar operaciones\n    const tableExists = await checkTableExists(DOCUMENTS_TABLE);\n    if (!tableExists) {\n      logError(\n        `La tabla ${DOCUMENTS_TABLE} no existe. Por favor, ejecute el script de creación de tablas.`,\n        'documentService.uploadDocument',\n        { table: DOCUMENTS_TABLE }\n      );\n      throw createAppError(\n        ErrorType.DATABASE,\n        `Error de configuración: La tabla de documentos no está correctamente configurada.`,\n        { table: DOCUMENTS_TABLE }\n      );\n    }\n    \n    // Verificar si el bucket de storage existe\n    const { data: buckets } = await supabaseClient.storage.listBuckets();\n    const bucketExists = buckets?.some((bucket: any) => bucket.name === STORAGE_BUCKET);\n    \n    if (!bucketExists) {\n      logError(\n        `El bucket ${STORAGE_BUCKET} no existe.`,\n        'documentService.uploadDocument',\n        { bucket: STORAGE_BUCKET }\n      );\n      throw createAppError(\n        ErrorType.UPLOAD,\n        `Error de configuración: El almacenamiento de documentos no está correctamente configurado.`,\n        { bucket: STORAGE_BUCKET }\n      );\n    }\n    \n    // Generar información del archivo\n    const fileName = file.name;\n    const fileType = file.type;\n    const fileSize = file.size;\n    \n    // Crear registro del documento\n    const { data, error } = await supabaseClient\n      .from(DOCUMENTS_TABLE)\n      .insert({\n        file_name: fileName,\n        file_type: fileType,\n        file_size: fileSize,\n        category,\n        application_id,\n        client_id,\n        uploaded_by_user_id: userId,\n        is_verified: false\n      })\n      .select('*')\n      .single();\n      \n    if (error) {\n      // Verificar si es un error de RLS\n      if (error.message && error.message.includes('policy')) {\n        logError(\n          `Violación de política RLS al crear documento: ${error.message}`,\n          'documentService.uploadDocument',\n          { error }\n        );\n        throw createAppError(\n          ErrorType.AUTHORIZATION,\n          'No tienes permisos para crear documentos para este cliente o aplicación',\n          { error: error.message }\n        );\n      }\n      \n      logError(\n        `Error al crear documento: ${error.message}`,\n        'documentService.uploadDocument',\n        { error }\n      );\n      throw createAppError(\n        ErrorType.DATABASE,\n        'Error al crear documento en la base de datos',\n        { error: error.message }\n      );\n    }\n    \n    if (!data) {\n      logError(\n        'No se retornaron datos al crear documento',\n        'documentService.uploadDocument'\n      );\n      throw createAppError(\n        ErrorType.DATABASE,\n        'Error al crear documento en la base de datos'\n      );\n    }\n    \n    const documentId = data.id;\n    \n    // Construir nombre único para el archivo\n    const fileExtension = fileName.split('.').pop();\n    const uniqueFileName = `${documentId}.${fileExtension}`;\n    const filePath = `${client_id || application_id}/${uniqueFileName}`;\n    \n    // Intentar subir el archivo con reintentos\n    let uploadError: any = null;\n    const maxRetries = 3;\n    \n    for (let attempt = 0; attempt < maxRetries; attempt++) {\n      try {\n        // Subir el archivo al storage\n        const { error: uploadError } = await supabaseClient.storage\n          .from(STORAGE_BUCKET)\n          .upload(filePath, file, {\n            upsert: true,\n            cacheControl: '3600'\n          });\n          \n        if (uploadError) {\n          throw uploadError;\n        }\n        \n        // Obtener URL pública del archivo\n        const { data: publicUrlData } = supabaseClient.storage\n          .from(STORAGE_BUCKET)\n          .getPublicUrl(filePath);\n          \n        // Actualizar el documento con la ruta del archivo\n        const { error: updateError } = await supabaseClient\n          .from(DOCUMENTS_TABLE)\n          .update({\n            file_path: filePath\n          })\n          .eq('id', documentId);\n          \n        if (updateError) {\n          logError(\n            `Error al actualizar ruta del documento: ${updateError.message}`,\n            'documentService.uploadDocument',\n            { error: updateError }\n          );\n        }\n        \n        // Construir y devolver el documento\n        const documentResult: Document = {\n          id: documentId,\n          application_id: application_id || undefined,\n          client_id: client_id || undefined,\n          file_name: fileName,\n          file_path: filePath,\n          file_type: fileType,\n          file_size: fileSize,\n          category,\n          uploaded_by_user_id: userId,\n          is_verified: false,\n          created_at: data.created_at\n        };\n        \n        return documentResult;\n      } catch (error) {\n        uploadError = error;\n        \n        // Esperar con backoff exponencial antes de reintentar\n        if (attempt < maxRetries - 1) {\n          const waitTime = Math.pow(2, attempt) * 1000;\n          console.log(`Reintentando subir documento en ${waitTime}ms...`);\n          await new Promise(resolve => setTimeout(resolve, waitTime));\n        }\n      }\n    }\n    \n    // Si llegamos aquí, todos los intentos fallaron\n    logError(\n      `Error al subir documento después de ${maxRetries} intentos: ${uploadError?.message || 'Error desconocido'}`,\n      'documentService.uploadDocument',\n      { error: uploadError, attempts: maxRetries }\n    );\n    \n    // Intentar eliminar el documento creado\n    try {\n      await supabaseClient\n        .from(DOCUMENTS_TABLE)\n        .delete()\n        .eq('id', documentId);\n    } catch (deleteError) {\n      console.warn(`No se pudo eliminar el documento huérfano: ${deleteError}`);\n    }\n    \n    throw createAppError(\n      ErrorType.UPLOAD,\n      'Error al subir el archivo al sistema',\n      { error: uploadError?.message }\n    );\n  } catch (error) {\n    // Si el error ya es un AppError, rethrow\n    if (error && (error as any).isAppError) {\n      throw error;\n    }\n    \n    logError(\n      `Error inesperado en uploadDocument: ${(error as any)?.message || 'Error desconocido'}`,\n      'documentService.uploadDocument',\n      { error }\n    );\n    \n    throw createAppError(\n      ErrorType.UNKNOWN,\n      'Error inesperado al subir documento',\n      { error: (error as any)?.message }\n    );\n  }\n};\n\n// Delete a document\nexport const deleteDocument = async (documentId: string) => {\n  try {\n    // Ensure bucket exists before attempting to delete\n    await ensureStorageBucketExists();\n    \n    // Get document to get file path\n    const { data: document, error: fetchError } = await supabase\n      .from(DOCUMENTS_TABLE)\n      .select('file_path')\n      .eq('id', documentId)\n      .single();\n\n    if (fetchError) {\n      console.error(`Error fetching document ${documentId} for deletion:`, fetchError);\n      throw fetchError;\n    }\n\n    // Delete file from storage\n    const { error: storageError } = await supabase.storage\n      .from(STORAGE_BUCKET)\n      .remove([document.file_path]);\n\n    if (storageError) {\n      console.error(`Error deleting file for document ${documentId}:`, storageError);\n      // Use type-safe error handling\n      const errorMessage = storageError instanceof Error \n        ? storageError.message \n        : (typeof storageError === 'object' && storageError !== null && 'message' in storageError)\n          ? String((storageError as {message: string}).message)\n          : 'Error desconocido';\n      \n      throw new Error(`Error al eliminar el archivo del documento: ${errorMessage}`);\n    }\n\n    // Delete document record\n    const { error: deleteError } = await supabase\n      .from(DOCUMENTS_TABLE)\n      .delete()\n      .eq('id', documentId);\n\n    if (deleteError) {\n      console.error(`Error deleting document record ${documentId}:`, deleteError);\n      throw deleteError;\n    }\n\n    return true;\n  } catch (error) {\n    console.error(`Error in deleteDocument for ${documentId}:`, error);\n    throw error;\n  }\n};\n\n// Get document download URL\nexport const getDocumentUrl = async (filePath: string) => {\n  try {\n    // Ensure bucket exists before attempting to get URL\n    await ensureStorageBucketExists();\n    \n    const { data, error } = await supabase.storage\n      .from(STORAGE_BUCKET)\n      .createSignedUrl(filePath, 60 * 60); // 1 hour expiry\n\n    if (error) {\n      console.error(`Error getting URL for document ${filePath}:`, error);\n      throw error;\n    }\n\n    return data.signedUrl;\n  } catch (error) {\n    console.error(`Error in getDocumentUrl for ${filePath}:`, error);\n    throw error;\n  }\n};\n\n// Verify a document\nexport const verifyDocument = async (documentId: string, userId: string, isVerified: boolean = true) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .update({\n      is_verified: isVerified,\n      verified_by: userId,\n      verified_at: new Date().toISOString()\n    })\n    .eq('id', documentId)\n    .select();\n\n  if (error) {\n    console.error(`Error verifying document ${documentId}:`, error);\n    throw error;\n  }\n\n  return data[0] as Document;\n};\n\n// Get required documents (based on application type)\nexport const getRequiredDocuments = async (applicationType: string) => {\n  const { data, error } = await supabase\n    .from('required_documents')\n    .select('*')\n    .eq('application_type', applicationType);\n\n  if (error) {\n    console.error(`Error fetching required documents for ${applicationType}:`, error);\n    throw error;\n  }\n\n  return data;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}