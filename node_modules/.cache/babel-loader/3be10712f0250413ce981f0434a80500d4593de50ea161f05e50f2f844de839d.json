{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/pages/NewClient.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport MainLayout from '../components/layout/MainLayout';\nimport ClientForm from '../components/clients/ClientForm';\nimport { createClient } from '../services/clientService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Default company ID (Herramental)\nconst DEFAULT_COMPANY_ID = \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\";\nconst NewClient = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    user\n  } = useAuth();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [draftClient, setDraftClient] = useState(null);\n  const handleSubmit = async (data, documents) => {\n    try {\n      setIsSubmitting(true);\n      setError(null);\n      setSuccessMessage(null);\n      console.log('Creating new client with data:', data);\n\n      // Si el usuario es asesor o admin de empresa, asignar los IDs correspondientes\n      const clientData = {\n        ...data\n      };\n\n      // Handle advisor_id assignment\n      if (user && user.role === 'ADVISOR') {\n        clientData.advisor_id = user.id;\n      }\n\n      // Handle the company_id requirement - only set default if not selected in form\n      if (!clientData.company_id) {\n        console.log('No company selected in form, applying default/user company logic');\n        if (user) {\n          if (user.role === 'COMPANY_ADMIN') {\n            clientData.company_id = user.entityId;\n            console.log('Using company_id from COMPANY_ADMIN user:', clientData.company_id);\n          } else {\n            // For other roles without company selection, use default\n            clientData.company_id = DEFAULT_COMPANY_ID;\n            console.log('Using default company_id for user with role:', user.role);\n          }\n        } else {\n          // No user information available, use default company_id\n          clientData.company_id = DEFAULT_COMPANY_ID;\n          console.log('No user context, using default company_id');\n        }\n      } else {\n        console.log('Using company_id selected in form:', clientData.company_id);\n      }\n\n      // Crear el cliente\n      const newClient = await createClient(clientData, documents, user === null || user === void 0 ? void 0 : user.id);\n      console.log('Client created successfully:', newClient);\n\n      // Clear local storage\n      localStorage.removeItem('clientFormData');\n      localStorage.removeItem('clientFormStep');\n\n      // Redireccionar a la lista de clientes\n      navigate('/clients');\n    } catch (error) {\n      console.error('Error al crear cliente:', error);\n      setError(error.message || 'Error al crear el cliente. Por favor, intente de nuevo.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Handle partial save functionality\n  const handleSavePartial = async (data, step) => {\n    try {\n      console.log(`Saving partial data for new client at step ${step}`);\n\n      // Update the local data with this partial section\n      const updatedData = {\n        ...draftClient,\n        ...data\n      };\n      setDraftClient(updatedData);\n\n      // For first-time saves, we need to actually create the client in the database\n      // This is particularly important for step 1 (personal data)\n      if (!(draftClient !== null && draftClient !== void 0 && draftClient.id)) {\n        console.log('No existing client ID found, creating new client record in Supabase');\n\n        // Prepare client data with user associations\n        const clientData = {\n          ...updatedData\n        };\n\n        // Handle advisor_id assignment\n        if (user && user.role === 'ADVISOR') {\n          clientData.advisor_id = user.id;\n        }\n\n        // Handle the company_id requirement - only set default if not selected in form\n        if (!clientData.company_id) {\n          console.log('No company selected in form, applying default/user company logic');\n          if (user) {\n            if (user.role === 'COMPANY_ADMIN') {\n              clientData.company_id = user.entityId;\n              console.log('Using company_id from COMPANY_ADMIN user:', clientData.company_id);\n            } else {\n              // For other roles without company selection, use default\n              clientData.company_id = DEFAULT_COMPANY_ID;\n              console.log('Using default company_id for user with role:', user.role);\n            }\n          } else {\n            // No user information available, use default company_id\n            clientData.company_id = DEFAULT_COMPANY_ID;\n            console.log('No user context, using default company_id');\n          }\n        } else {\n          console.log('Using company_id selected in form:', clientData.company_id);\n        }\n        try {\n          // Create minimal client record with available data\n          const newClient = await createClient(clientData, [], user === null || user === void 0 ? void 0 : user.id);\n          console.log('New client record created with ID:', newClient.id);\n\n          // Update draftClient with the newly created client including ID\n          setDraftClient({\n            ...updatedData,\n            id: newClient.id,\n            created_at: newClient.created_at\n          });\n        } catch (err) {\n          console.error('Error creating initial client record:', err);\n          throw new Error(`No se pudo crear el registro del cliente: ${err.message}`);\n        }\n      } else {\n        // For subsequent saves, we would normally update the existing record\n        // But since we're in NewClient, we just keep the data locally\n        // The final save will happen with the full form submission\n        console.log(`Client already exists with ID ${draftClient.id}, storing updates locally`);\n      }\n\n      // Create a backup in case the user refreshes\n      try {\n        localStorage.setItem('clientFormData', JSON.stringify(updatedData));\n        localStorage.setItem('clientFormStep', String(step));\n      } catch (err) {\n        console.error('Error saving form state:', err);\n      }\n\n      // Show success message\n      setSuccessMessage(`Se guardaron los datos de la sección ${step} correctamente`);\n      console.log(`Successfully saved data for section ${step}`);\n\n      // Clear message after delay\n      setTimeout(() => {\n        setSuccessMessage(null);\n      }, 3000);\n      return updatedData;\n    } catch (error) {\n      console.error(`Error saving partial data for step ${step}:`, error);\n      setError(error.message || `Error al guardar la sección ${step}. Por favor, intente de nuevo.`);\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate('/clients'),\n          className: \"btn btn-sm btn-outline mr-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"h-5 w-5 mr-1\",\n            viewBox: \"0 0 20 20\",\n            fill: \"currentColor\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              fillRule: \"evenodd\",\n              d: \"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\",\n              clipRule: \"evenodd\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this), \"Volver\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-2xl font-bold\",\n          children: \"Nuevo Cliente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-error\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"h-6 w-6\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            stroke: \"currentColor\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              strokeWidth: 2,\n              d: \"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setError(null),\n            className: \"ml-auto\",\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-success\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"h-6 w-6\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            stroke: \"currentColor\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              strokeWidth: 2,\n              d: \"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: successMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setSuccessMessage(null),\n            className: \"ml-auto\",\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ClientForm, {\n        initialData: draftClient || undefined,\n        onSubmit: handleSubmit,\n        onSavePartial: handleSavePartial,\n        isSubmitting: isSubmitting\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(NewClient, \"RMQoGrCgaCyJ9CyEAwydw8GZv3w=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = NewClient;\nexport default NewClient;\nvar _c;\n$RefreshReg$(_c, \"NewClient\");","map":{"version":3,"names":["React","useState","useNavigate","useAuth","MainLayout","ClientForm","createClient","jsxDEV","_jsxDEV","DEFAULT_COMPANY_ID","NewClient","_s","navigate","user","isSubmitting","setIsSubmitting","error","setError","successMessage","setSuccessMessage","draftClient","setDraftClient","handleSubmit","data","documents","console","log","clientData","role","advisor_id","id","company_id","entityId","newClient","localStorage","removeItem","message","handleSavePartial","step","updatedData","created_at","err","Error","setItem","JSON","stringify","String","setTimeout","children","className","onClick","xmlns","viewBox","fill","fillRule","d","clipRule","fileName","_jsxFileName","lineNumber","columnNumber","stroke","strokeLinecap","strokeLinejoin","strokeWidth","initialData","undefined","onSubmit","onSavePartial","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/pages/NewClient.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport MainLayout from '../components/layout/MainLayout';\nimport ClientForm from '../components/clients/ClientForm';\nimport { Client, ClientDocument, createClient } from '../services/clientService';\nimport Alert from '../components/ui/Alert';\n\n// Default company ID (Herramental)\nconst DEFAULT_COMPANY_ID = \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\";\n\nconst NewClient: React.FC = () => {\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const [draftClient, setDraftClient] = useState<Partial<Client> | null>(null);\n\n  const handleSubmit = async (data: Partial<Client>, documents: ClientDocument[]) => {\n    try {\n      setIsSubmitting(true);\n      setError(null);\n      setSuccessMessage(null);\n      \n      console.log('Creating new client with data:', data);\n      \n      // Si el usuario es asesor o admin de empresa, asignar los IDs correspondientes\n      const clientData: Partial<Client> = { ...data };\n      \n      // Handle advisor_id assignment\n      if (user && user.role === 'ADVISOR') {\n        clientData.advisor_id = user.id;\n      }\n      \n      // Handle the company_id requirement - only set default if not selected in form\n      if (!clientData.company_id) {\n        console.log('No company selected in form, applying default/user company logic');\n        \n        if (user) {\n          if (user.role === 'COMPANY_ADMIN') {\n            clientData.company_id = user.entityId;\n            console.log('Using company_id from COMPANY_ADMIN user:', clientData.company_id);\n          } else {\n            // For other roles without company selection, use default\n            clientData.company_id = DEFAULT_COMPANY_ID;\n            console.log('Using default company_id for user with role:', user.role);\n          }\n        } else {\n          // No user information available, use default company_id\n          clientData.company_id = DEFAULT_COMPANY_ID;\n          console.log('No user context, using default company_id');\n        }\n      } else {\n        console.log('Using company_id selected in form:', clientData.company_id);\n      }\n      \n      // Crear el cliente\n      const newClient = await createClient(clientData as Omit<Client, 'id' | 'created_at'>, documents, user?.id);\n      console.log('Client created successfully:', newClient);\n      \n      // Clear local storage\n      localStorage.removeItem('clientFormData');\n      localStorage.removeItem('clientFormStep');\n      \n      // Redireccionar a la lista de clientes\n      navigate('/clients');\n    } catch (error: any) {\n      console.error('Error al crear cliente:', error);\n      setError(error.message || 'Error al crear el cliente. Por favor, intente de nuevo.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Handle partial save functionality\n  const handleSavePartial = async (data: Partial<Client>, step: number) => {\n    try {\n      console.log(`Saving partial data for new client at step ${step}`);\n      \n      // Update the local data with this partial section\n      const updatedData = { ...draftClient, ...data };\n      setDraftClient(updatedData);\n      \n      // For first-time saves, we need to actually create the client in the database\n      // This is particularly important for step 1 (personal data)\n      if (!draftClient?.id) {\n        console.log('No existing client ID found, creating new client record in Supabase');\n        \n        // Prepare client data with user associations\n        const clientData: Partial<Client> = { ...updatedData };\n        \n        // Handle advisor_id assignment\n        if (user && user.role === 'ADVISOR') {\n          clientData.advisor_id = user.id;\n        }\n        \n        // Handle the company_id requirement - only set default if not selected in form\n        if (!clientData.company_id) {\n          console.log('No company selected in form, applying default/user company logic');\n          \n          if (user) {\n            if (user.role === 'COMPANY_ADMIN') {\n              clientData.company_id = user.entityId;\n              console.log('Using company_id from COMPANY_ADMIN user:', clientData.company_id);\n            } else {\n              // For other roles without company selection, use default\n              clientData.company_id = DEFAULT_COMPANY_ID;\n              console.log('Using default company_id for user with role:', user.role);\n            }\n          } else {\n            // No user information available, use default company_id\n            clientData.company_id = DEFAULT_COMPANY_ID;\n            console.log('No user context, using default company_id');\n          }\n        } else {\n          console.log('Using company_id selected in form:', clientData.company_id);\n        }\n        \n        try {\n          // Create minimal client record with available data\n          const newClient = await createClient(clientData as Omit<Client, 'id' | 'created_at'>, [], user?.id);\n          console.log('New client record created with ID:', newClient.id);\n          \n          // Update draftClient with the newly created client including ID\n          setDraftClient({...updatedData, id: newClient.id, created_at: newClient.created_at});\n        } catch (err: any) {\n          console.error('Error creating initial client record:', err);\n          throw new Error(`No se pudo crear el registro del cliente: ${err.message}`);\n        }\n      } \n      else {\n        // For subsequent saves, we would normally update the existing record\n        // But since we're in NewClient, we just keep the data locally\n        // The final save will happen with the full form submission\n        console.log(`Client already exists with ID ${draftClient.id}, storing updates locally`);\n      }\n      \n      // Create a backup in case the user refreshes\n      try {\n        localStorage.setItem('clientFormData', JSON.stringify(updatedData));\n        localStorage.setItem('clientFormStep', String(step));\n      } catch (err) {\n        console.error('Error saving form state:', err);\n      }\n      \n      // Show success message\n      setSuccessMessage(`Se guardaron los datos de la sección ${step} correctamente`);\n      console.log(`Successfully saved data for section ${step}`);\n      \n      // Clear message after delay\n      setTimeout(() => {\n        setSuccessMessage(null);\n      }, 3000);\n      \n      return updatedData;\n    } catch (error: any) {\n      console.error(`Error saving partial data for step ${step}:`, error);\n      setError(error.message || `Error al guardar la sección ${step}. Por favor, intente de nuevo.`);\n      throw error;\n    }\n  };\n\n  return (\n    <MainLayout>\n      <div className=\"p-6\">\n        <div className=\"flex items-center mb-6\">\n          <button \n            onClick={() => navigate('/clients')} \n            className=\"btn btn-sm btn-outline mr-4\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clipRule=\"evenodd\" />\n            </svg>\n            Volver\n          </button>\n          <h1 className=\"text-2xl font-bold\">Nuevo Cliente</h1>\n        </div>\n        \n        {/* Display error message */}\n        {error && (\n          <div className=\"mb-4\">\n            <div className=\"alert alert-error\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <span>{error}</span>\n              <button onClick={() => setError(null)} className=\"ml-auto\">×</button>\n            </div>\n          </div>\n        )}\n        \n        {/* Display success message */}\n        {successMessage && (\n          <div className=\"mb-4\">\n            <div className=\"alert alert-success\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <span>{successMessage}</span>\n              <button onClick={() => setSuccessMessage(null)} className=\"ml-auto\">×</button>\n            </div>\n          </div>\n        )}\n        \n        <ClientForm \n          initialData={draftClient || undefined}\n          onSubmit={handleSubmit}\n          onSavePartial={handleSavePartial}\n          isSubmitting={isSubmitting}\n        />\n      </div>\n    </MainLayout>\n  );\n};\n\nexport default NewClient; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}