{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\n\n// Tipos\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Simular verificación de sesión al iniciar\n  useEffect(() => {\n    const checkStoredUser = () => {\n      try {\n        const storedUser = localStorage.getItem('crm_user');\n        if (storedUser) {\n          setUser(JSON.parse(storedUser));\n        }\n      } catch (error) {\n        console.error('Error checking stored user:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkStoredUser();\n  }, []);\n  const signIn = async (email, password) => {\n    setIsLoading(true);\n    try {\n      // For demo purposes, simulating login for admin@example.com\n      if (email === \"admin@example.com\" && password === \"password\") {\n        const userData = {\n          id: \"1\",\n          email: \"admin@example.com\",\n          name: \"Admin User\",\n          role: \"admin\",\n          entityId: \"company_1\"\n        };\n        localStorage.setItem(\"user\", JSON.stringify(userData));\n        setUser(userData);\n        setIsLoading(false);\n        return {\n          success: true\n        };\n      } else {\n        setIsLoading(false);\n        return {\n          success: false,\n          message: \"Credenciales inválidas. Por favor, intente de nuevo.\"\n        };\n      }\n    } catch (error) {\n      console.error(\"Error signing in:\", error);\n      setIsLoading(false);\n      return {\n        success: false,\n        message: \"Error al iniciar sesión. Por favor, intente de nuevo más tarde.\"\n      };\n    }\n  };\n  const signInWithCode = async (code, userType) => {\n    setIsLoading(true);\n    try {\n      console.log(`Attempting login with code: ${code} as ${userType}`);\n\n      // Determine which table to query based on user type\n      const tableName = userType === \"advisor\" ? \"advisors\" : \"companies\";\n\n      // Query the database\n      const {\n        data: userData,\n        error\n      } = await supabase.from(tableName).select(\"*\").eq(\"access_code\", code).single();\n      if (error || !userData) {\n        console.error(\"Login error:\", error);\n        setIsLoading(false);\n        return {\n          success: false,\n          message: \"Código de acceso inválido. Por favor, intente de nuevo.\"\n        };\n      }\n\n      // Format the user data based on the user type\n      const formattedUser = {\n        id: userData.id.toString(),\n        email: userData.email || \"\",\n        name: userData.name || (userType === \"advisor\" ? userData.advisor_name : userData.company_name),\n        role: userType,\n        entityId: userType === \"advisor\" ? userData.id.toString() : userData.company_id.toString()\n      };\n\n      // Store user in local storage and state\n      localStorage.setItem(\"user\", JSON.stringify(formattedUser));\n      setUser(formattedUser);\n      setIsLoading(false);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(\"Error signing in with code:\", error);\n      setIsLoading(false);\n      return {\n        success: false,\n        message: \"Error al iniciar sesión. Por favor, intente de nuevo más tarde.\"\n      };\n    }\n  };\n  const signOut = () => {\n    try {\n      localStorage.removeItem(\"user\");\n      setUser(null);\n      return true;\n    } catch (error) {\n      console.error(\"Error signing out:\", error);\n      return false;\n    }\n  };\n  const value = {\n    user,\n    session,\n    loading,\n    signIn,\n    signInWithCode,\n    signOut,\n    setUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"stzARXeuWJxMzh4IW5mDm3EL48U=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","session","setSession","loading","setLoading","isLoading","setIsLoading","checkStoredUser","storedUser","localStorage","getItem","JSON","parse","error","console","signIn","email","password","userData","id","name","role","entityId","setItem","stringify","success","message","signInWithCode","code","userType","log","tableName","data","from","select","eq","single","formattedUser","toString","advisor_name","company_name","company_id","signOut","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Session } from '@supabase/supabase-js';\nimport { USER_ROLES } from '../utils/constants/roles';\nimport { supabase } from '../lib/supabase';\n\n// Tipos\ninterface User {\n  id: string;\n  email: string;\n  name?: string;\n  role: string;\n  entityId?: string; // ID del asesor o empresa asociada\n}\n\ninterface AuthContextType {\n  user: User | null;\n  session: Session | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<{\n    success: boolean;\n    message?: string;\n  }>;\n  signInWithCode: (accessCode: string, userType: string) => Promise<{\n    success: boolean;\n    message?: string;\n  }>;\n  signOut: () => Promise<boolean>;\n  setUser: React.Dispatch<React.SetStateAction<User | null>>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Simular verificación de sesión al iniciar\n  useEffect(() => {\n    const checkStoredUser = () => {\n      try {\n        const storedUser = localStorage.getItem('crm_user');\n        if (storedUser) {\n          setUser(JSON.parse(storedUser));\n        }\n      } catch (error) {\n        console.error('Error checking stored user:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkStoredUser();\n  }, []);\n\n  const signIn = async (\n    email: string,\n    password: string\n  ): Promise<{ success: boolean; message?: string }> => {\n    setIsLoading(true);\n    \n    try {\n      // For demo purposes, simulating login for admin@example.com\n      if (email === \"admin@example.com\" && password === \"password\") {\n        const userData = {\n          id: \"1\",\n          email: \"admin@example.com\",\n          name: \"Admin User\",\n          role: \"admin\",\n          entityId: \"company_1\",\n        };\n        localStorage.setItem(\"user\", JSON.stringify(userData));\n        setUser(userData);\n        setIsLoading(false);\n        return { success: true };\n      } else {\n        setIsLoading(false);\n        return {\n          success: false,\n          message: \"Credenciales inválidas. Por favor, intente de nuevo.\",\n        };\n      }\n    } catch (error) {\n      console.error(\"Error signing in:\", error);\n      setIsLoading(false);\n      return {\n        success: false,\n        message: \"Error al iniciar sesión. Por favor, intente de nuevo más tarde.\",\n      };\n    }\n  };\n\n  const signInWithCode = async (\n    code: string,\n    userType: string\n  ): Promise<{ success: boolean; message?: string }> => {\n    setIsLoading(true);\n    \n    try {\n      console.log(`Attempting login with code: ${code} as ${userType}`);\n      \n      // Determine which table to query based on user type\n      const tableName = userType === \"advisor\" ? \"advisors\" : \"companies\";\n      \n      // Query the database\n      const { data: userData, error } = await supabase\n        .from(tableName)\n        .select(\"*\")\n        .eq(\"access_code\", code)\n        .single();\n      \n      if (error || !userData) {\n        console.error(\"Login error:\", error);\n        setIsLoading(false);\n        return {\n          success: false,\n          message: \"Código de acceso inválido. Por favor, intente de nuevo.\",\n        };\n      }\n      \n      // Format the user data based on the user type\n      const formattedUser = {\n        id: userData.id.toString(),\n        email: userData.email || \"\",\n        name: userData.name || (userType === \"advisor\" ? userData.advisor_name : userData.company_name),\n        role: userType,\n        entityId: userType === \"advisor\" ? userData.id.toString() : userData.company_id.toString(),\n      };\n      \n      // Store user in local storage and state\n      localStorage.setItem(\"user\", JSON.stringify(formattedUser));\n      setUser(formattedUser);\n      setIsLoading(false);\n      \n      return { success: true };\n    } catch (error) {\n      console.error(\"Error signing in with code:\", error);\n      setIsLoading(false);\n      return {\n        success: false,\n        message: \"Error al iniciar sesión. Por favor, intente de nuevo más tarde.\",\n      };\n    }\n  };\n\n  const signOut = () => {\n    try {\n      localStorage.removeItem(\"user\");\n      setUser(null);\n      return true;\n    } catch (error) {\n      console.error(\"Error signing out:\", error);\n      return false;\n    }\n  };\n\n  const value = {\n    user,\n    session,\n    loading,\n    signIn,\n    signInWithCode,\n    signOut,\n    setUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}