{"ast":null,"code":"import { TABLES } from './constants/tables';\nimport { executeQuery } from './databaseUtils';\n/**\n * Verifica si una tabla existe en la base de datos\n * @param tableName Nombre de la tabla a verificar\n * @returns Boolean indicando si la tabla existe\n */\nexport const checkTableExists = async tableName => {\n  try {\n    // Usar el servidor MCP para verificar si la tabla existe\n    const query = `SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = '${tableName}')`;\n    const result = await executeQuery(query);\n\n    // El resultado será un array con un objeto que tiene una propiedad \"exists\"\n    return result && result.length > 0 && result[0].exists === true;\n  } catch (error) {\n    console.warn(`Error verificando si la tabla ${tableName} existe:`, error);\n    // Para evitar errores en la consola, asumimos que la tabla existe\n    return true;\n  }\n};\n\n/**\n * Verifica todas las tablas importantes del sistema\n * @returns Array con el estado de cada tabla\n */\nexport const checkAllTables = async () => {\n  const tableList = Object.values(TABLES);\n  const results = [];\n  for (const tableName of tableList) {\n    const exists = await checkTableExists(tableName);\n    results.push({\n      name: tableName,\n      exists\n    });\n  }\n  return results;\n};\n\n/**\n * Imprime en consola el estado de las tablas\n */\nexport const logTableStatus = async () => {\n  console.info('Verificando estructura de la base de datos...');\n  const tableStatus = await checkAllTables();\n  console.group('Estado de tablas:');\n  tableStatus.forEach(table => {\n    if (table.exists) {\n      console.info(`✅ Tabla ${table.name}: OK`);\n    } else {\n      console.warn(`❌ Tabla ${table.name}: No existe`);\n    }\n  });\n  console.groupEnd();\n  const missingTables = tableStatus.filter(t => !t.exists);\n  if (missingTables.length > 0) {\n    console.warn(`Se encontraron ${missingTables.length} tablas faltantes. La aplicación podría no funcionar correctamente.`);\n  } else {\n    console.info('Todas las tablas necesarias existen en la base de datos.');\n  }\n};\n\n/**\n * Inicializa la verificación de estructura de BD al inicio de la aplicación\n */\nexport const initDbStructureCheck = () => {\n  // Ejecutar verificación al inicio\n  logTableStatus().catch(error => {\n    console.error('Error verificando estructura de base de datos:', error);\n  });\n};","map":{"version":3,"names":["TABLES","executeQuery","checkTableExists","tableName","query","result","length","exists","error","console","warn","checkAllTables","tableList","Object","values","results","push","name","logTableStatus","info","tableStatus","group","forEach","table","groupEnd","missingTables","filter","t","initDbStructureCheck","catch"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/utils/dbStructureCheck.ts"],"sourcesContent":["import { TABLES } from './constants/tables';\nimport { executeQuery } from './databaseUtils';\n\ninterface TableStatus {\n  name: string;\n  exists: boolean;\n}\n\n/**\n * Verifica si una tabla existe en la base de datos\n * @param tableName Nombre de la tabla a verificar\n * @returns Boolean indicando si la tabla existe\n */\nexport const checkTableExists = async (tableName: string): Promise<boolean> => {\n  try {\n    // Usar el servidor MCP para verificar si la tabla existe\n    const query = `SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = '${tableName}')`;\n    \n    const result = await executeQuery(query);\n    \n    // El resultado será un array con un objeto que tiene una propiedad \"exists\"\n    return result && result.length > 0 && result[0].exists === true;\n  } catch (error) {\n    console.warn(`Error verificando si la tabla ${tableName} existe:`, error);\n    // Para evitar errores en la consola, asumimos que la tabla existe\n    return true;\n  }\n};\n\n/**\n * Verifica todas las tablas importantes del sistema\n * @returns Array con el estado de cada tabla\n */\nexport const checkAllTables = async (): Promise<TableStatus[]> => {\n  const tableList = Object.values(TABLES);\n  const results: TableStatus[] = [];\n  \n  for (const tableName of tableList) {\n    const exists = await checkTableExists(tableName);\n    results.push({\n      name: tableName,\n      exists\n    });\n  }\n  \n  return results;\n};\n\n/**\n * Imprime en consola el estado de las tablas\n */\nexport const logTableStatus = async (): Promise<void> => {\n  console.info('Verificando estructura de la base de datos...');\n  const tableStatus = await checkAllTables();\n  \n  console.group('Estado de tablas:');\n  tableStatus.forEach(table => {\n    if (table.exists) {\n      console.info(`✅ Tabla ${table.name}: OK`);\n    } else {\n      console.warn(`❌ Tabla ${table.name}: No existe`);\n    }\n  });\n  console.groupEnd();\n  \n  const missingTables = tableStatus.filter(t => !t.exists);\n  if (missingTables.length > 0) {\n    console.warn(`Se encontraron ${missingTables.length} tablas faltantes. La aplicación podría no funcionar correctamente.`);\n  } else {\n    console.info('Todas las tablas necesarias existen en la base de datos.');\n  }\n};\n\n/**\n * Inicializa la verificación de estructura de BD al inicio de la aplicación\n */\nexport const initDbStructureCheck = (): void => {\n  // Ejecutar verificación al inicio\n  logTableStatus().catch(error => {\n    console.error('Error verificando estructura de base de datos:', error);\n  });\n}; "],"mappings":"AAAA,SAASA,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,YAAY,QAAQ,iBAAiB;AAO9C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,SAAiB,IAAuB;EAC7E,IAAI;IACF;IACA,MAAMC,KAAK,GAAG,8EAA8ED,SAAS,IAAI;IAEzG,MAAME,MAAM,GAAG,MAAMJ,YAAY,CAACG,KAAK,CAAC;;IAExC;IACA,OAAOC,MAAM,IAAIA,MAAM,CAACC,MAAM,GAAG,CAAC,IAAID,MAAM,CAAC,CAAC,CAAC,CAACE,MAAM,KAAK,IAAI;EACjE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,IAAI,CAAC,iCAAiCP,SAAS,UAAU,EAAEK,KAAK,CAAC;IACzE;IACA,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMG,cAAc,GAAG,MAAAA,CAAA,KAAoC;EAChE,MAAMC,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACd,MAAM,CAAC;EACvC,MAAMe,OAAsB,GAAG,EAAE;EAEjC,KAAK,MAAMZ,SAAS,IAAIS,SAAS,EAAE;IACjC,MAAML,MAAM,GAAG,MAAML,gBAAgB,CAACC,SAAS,CAAC;IAChDY,OAAO,CAACC,IAAI,CAAC;MACXC,IAAI,EAAEd,SAAS;MACfI;IACF,CAAC,CAAC;EACJ;EAEA,OAAOQ,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMG,cAAc,GAAG,MAAAA,CAAA,KAA2B;EACvDT,OAAO,CAACU,IAAI,CAAC,+CAA+C,CAAC;EAC7D,MAAMC,WAAW,GAAG,MAAMT,cAAc,CAAC,CAAC;EAE1CF,OAAO,CAACY,KAAK,CAAC,mBAAmB,CAAC;EAClCD,WAAW,CAACE,OAAO,CAACC,KAAK,IAAI;IAC3B,IAAIA,KAAK,CAAChB,MAAM,EAAE;MAChBE,OAAO,CAACU,IAAI,CAAC,WAAWI,KAAK,CAACN,IAAI,MAAM,CAAC;IAC3C,CAAC,MAAM;MACLR,OAAO,CAACC,IAAI,CAAC,WAAWa,KAAK,CAACN,IAAI,aAAa,CAAC;IAClD;EACF,CAAC,CAAC;EACFR,OAAO,CAACe,QAAQ,CAAC,CAAC;EAElB,MAAMC,aAAa,GAAGL,WAAW,CAACM,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACpB,MAAM,CAAC;EACxD,IAAIkB,aAAa,CAACnB,MAAM,GAAG,CAAC,EAAE;IAC5BG,OAAO,CAACC,IAAI,CAAC,kBAAkBe,aAAa,CAACnB,MAAM,qEAAqE,CAAC;EAC3H,CAAC,MAAM;IACLG,OAAO,CAACU,IAAI,CAAC,0DAA0D,CAAC;EAC1E;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMS,oBAAoB,GAAGA,CAAA,KAAY;EAC9C;EACAV,cAAc,CAAC,CAAC,CAACW,KAAK,CAACrB,KAAK,IAAI;IAC9BC,OAAO,CAACD,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;EACxE,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}