{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/contexts/NotificationContext.tsx\",\n  _s = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { useAuth } from './AuthContext';\nimport NotificationPopup from '../components/ui/NotificationPopup';\n\n// Generate a proper UUID for notification IDs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateUUID() {\n  // Use a more standard implementation for UUID v4\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\n// For test notifications, use a valid UUID format - don't use app-timestamp\nfunction getTestApplicationId() {\n  // Use a small set of real UUIDs as sample application IDs\n  // These UUIDs should exist in the database\n  const sampleIds = ['c48d4d19-beef-4fa8-b113-63b2bf942a50',\n  // Verified this ID exists in the database\n  '76a-1762-4df4-840e-a503fea9d7aa',\n  // Intentionally invalid ID format to test error handling\n  'c48d4d19-beef-4fa8-b113-00000000000' // Non-existent but valid format\n  ];\n\n  // Pick a random ID from the sample list\n  return sampleIds[Math.floor(Math.random() * sampleIds.length)];\n}\n\n// Enum for notification types\nexport let NotificationType = /*#__PURE__*/function (NotificationType) {\n  NotificationType[\"INFO\"] = \"info\";\n  NotificationType[\"SUCCESS\"] = \"success\";\n  NotificationType[\"WARNING\"] = \"warning\";\n  NotificationType[\"ERROR\"] = \"error\";\n  NotificationType[\"NEW_APPLICATION\"] = \"new_application\";\n  NotificationType[\"APPROVAL_REQUIRED\"] = \"approval_required\";\n  NotificationType[\"NEW_MESSAGE\"] = \"new_message\";\n  NotificationType[\"APPLICATION_STATUS_UPDATED\"] = \"application_status_updated\";\n  NotificationType[\"APPLICATION_COMMENT\"] = \"application_comment\";\n  return NotificationType;\n}({});\n\n// Interfaces\n\nexport const NotificationContext = /*#__PURE__*/createContext(undefined);\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s3();\n  var _s2 = $RefreshSig$();\n  const {\n    user\n  } = useAuth();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n\n  // Estado para la notificación emergente actual\n  const [currentPopup, setCurrentPopup] = useState(null);\n\n  // Referencia al ID del polling interval\n  const pollingIntervalRef = useRef(null);\n\n  // Efecto para manejar la carga inicial de notificaciones y configurar el polling\n  useEffect(() => {\n    if (user) {\n      // Cargar notificaciones al inicio\n      loadNotifications();\n\n      // Configurar polling para verificar nuevas notificaciones cada 30 segundos\n      pollingIntervalRef.current = setInterval(() => {\n        checkForNewNotifications();\n      }, 30000);\n\n      // Limpiar el intervalo cuando el componente se desmonte\n      return () => {\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n        }\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  // Cálculo de notificaciones no leídas\n  useEffect(() => {\n    const count = notifications.filter(notification => !notification.read).length;\n    setUnreadCount(count);\n  }, [notifications]);\n\n  // Cargar notificaciones del almacenamiento local o del servidor\n  const loadNotifications = async () => {\n    try {\n      // En un escenario real, aquí se cargarían las notificaciones del servidor\n      // Por ahora, usaremos el localStorage como ejemplo\n      const storedNotifications = localStorage.getItem('notifications');\n      if (storedNotifications) {\n        const parsed = JSON.parse(storedNotifications);\n        setNotifications(parsed.map(n => ({\n          ...n,\n          createdAt: new Date(n.createdAt)\n        })));\n      }\n    } catch (error) {\n      console.error('Error cargando notificaciones:', error);\n    }\n  };\n\n  // Verificar nuevas notificaciones en el servidor\n  const checkForNewNotifications = async () => {\n    _s2();\n    // En una implementación real, esto sería una llamada a la API\n    // Por ahora solo simulamos la lógica\n    console.log('Verificando nuevas notificaciones...');\n\n    // Limitar la frecuencia de las notificaciones aleatorias\n    // Solo hay 30% de probabilidad de generar una notificación\n    // y solo si pasaron al menos 10 segundos desde la última\n    const now = new Date();\n    const lastNotificationTime = useRef(null);\n    if (lastNotificationTime.current) {\n      const secondsSinceLastNotification = (now.getTime() - lastNotificationTime.current.getTime()) / 1000;\n      if (secondsSinceLastNotification < 10) {\n        console.log(`Demasiado pronto para nueva notificación (${Math.round(secondsSinceLastNotification)}s)`);\n        return;\n      }\n    }\n    if (Math.random() > 0.7) {\n      lastNotificationTime.current = now;\n      const testNotification = {\n        title: 'Nueva solicitud asignada',\n        message: 'Se ha asignado una nueva solicitud de crédito a tu bandeja',\n        type: NotificationType.NEW_APPLICATION,\n        relatedItemType: 'application',\n        // Using a properly formatted UUID for testing - NOT using app-timestamp format\n        relatedItemId: getTestApplicationId()\n      };\n      addNotification(testNotification);\n\n      // También mostrar como popup con sonido\n      showPopup({\n        ...testNotification,\n        playSound: soundEnabled,\n        soundType: 'three-beeps' // Usar el nuevo tipo de sonido para nuevas solicitudes\n      });\n    }\n  };\n\n  // Añadir una nueva notificación\n  _s2(checkForNewNotifications, \"J5+BeEM7zmMQzJ6GAn3io/Pwyl8=\");\n  const addNotification = notification => {\n    const newNotification = {\n      ...notification,\n      // Using a proper UUID for the notification ID\n      id: generateUUID(),\n      createdAt: new Date(),\n      read: false,\n      timestamp: new Date()\n    };\n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Guardar en localStorage (en producción esto iría al servidor)\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Función específica para notificaciones de nuevas aplicaciones\n  const notifyNewApplication = application => {\n    // Crear una notificación con el tipo adecuado\n    const notification = {\n      title: 'Nueva Solicitud de Crédito',\n      message: `Se ha recibido una nueva solicitud de ${application.client_name || 'un cliente'}`,\n      type: NotificationType.NEW_APPLICATION,\n      relatedItemType: 'application',\n      relatedItemId: application.id\n    };\n\n    // Añadir a la lista de notificaciones\n    addNotification(notification);\n\n    // Mostrar popup con sonido de tres beeps\n    showPopup({\n      ...notification,\n      playSound: soundEnabled,\n      soundType: 'three-beeps',\n      duration: 8000 // Duración mayor para tener tiempo de ver la notificación\n    });\n  };\n\n  // Marcar una notificación como leída\n  const markAsRead = id => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => notification.id === id ? {\n        ...notification,\n        read: true,\n        isRead: true\n      } : notification);\n\n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar todas las notificaciones como leídas\n  const markAllAsRead = () => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => ({\n        ...notification,\n        read: true,\n        isRead: true\n      }));\n\n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Limpiar todas las notificaciones\n  const clearNotifications = () => {\n    setNotifications([]);\n    // Limpiar del localStorage\n    localStorage.setItem('notifications', JSON.stringify([]));\n  };\n\n  // Mostrar una notificación emergente\n  const showPopup = config => {\n    setCurrentPopup(config);\n\n    // Automáticamente cerrar el popup después de la duración especificada\n    setTimeout(() => {\n      setCurrentPopup(null);\n    }, config.duration || 5000);\n  };\n\n  // Activar/desactivar sonidos de notificación\n  const toggleSound = () => {\n    const newValue = !soundEnabled;\n    setSoundEnabled(newValue);\n    // Guardar preferencia en localStorage\n    localStorage.setItem('notification_sound_enabled', newValue.toString());\n  };\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    showPopup,\n    soundEnabled,\n    toggleSound,\n    setSoundEnabled,\n    notifyNewApplication\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: [children, currentPopup && /*#__PURE__*/_jsxDEV(NotificationPopup, {\n      title: currentPopup.title,\n      message: currentPopup.message,\n      type: currentPopup.type,\n      duration: currentPopup.duration,\n      playSound: currentPopup.playSound,\n      soundType: currentPopup.soundType,\n      onClose: () => setCurrentPopup(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 300,\n    columnNumber: 5\n  }, this);\n};\n_s3(NotificationProvider, \"ILcmoPJ+JXRs2S7WwdGOSPYDMzk=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","useAuth","NotificationPopup","jsxDEV","_jsxDEV","generateUUID","replace","c","r","Math","random","v","toString","getTestApplicationId","sampleIds","floor","length","NotificationType","NotificationContext","undefined","useNotifications","_s","context","Error","NotificationProvider","children","_s3","_s2","$RefreshSig$","user","notifications","setNotifications","unreadCount","setUnreadCount","soundEnabled","setSoundEnabled","currentPopup","setCurrentPopup","pollingIntervalRef","loadNotifications","current","setInterval","checkForNewNotifications","clearInterval","count","filter","notification","read","storedNotifications","localStorage","getItem","parsed","JSON","parse","map","n","createdAt","Date","error","console","log","now","lastNotificationTime","secondsSinceLastNotification","getTime","round","testNotification","title","message","type","NEW_APPLICATION","relatedItemType","relatedItemId","addNotification","showPopup","playSound","soundType","newNotification","id","timestamp","prev","updated","setItem","stringify","notifyNewApplication","application","client_name","duration","markAsRead","isRead","markAllAsRead","clearNotifications","config","setTimeout","toggleSound","newValue","value","Provider","onClose","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { useAuth } from './AuthContext';\nimport NotificationPopup from '../components/ui/NotificationPopup';\n\n// Generate a proper UUID for notification IDs\nfunction generateUUID() {\n  // Use a more standard implementation for UUID v4\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : ((r & 0x3) | 0x8);\n    return v.toString(16);\n  });\n}\n\n// For test notifications, use a valid UUID format - don't use app-timestamp\nfunction getTestApplicationId() {\n  // Use a small set of real UUIDs as sample application IDs\n  // These UUIDs should exist in the database\n  const sampleIds = [\n    'c48d4d19-beef-4fa8-b113-63b2bf942a50', // Verified this ID exists in the database\n    '76a-1762-4df4-840e-a503fea9d7aa', // Intentionally invalid ID format to test error handling\n    'c48d4d19-beef-4fa8-b113-00000000000', // Non-existent but valid format\n  ];\n  \n  // Pick a random ID from the sample list\n  return sampleIds[Math.floor(Math.random() * sampleIds.length)];\n}\n\n// Enum for notification types\nexport enum NotificationType {\n  INFO = 'info',\n  SUCCESS = 'success',\n  WARNING = 'warning',\n  ERROR = 'error',\n  NEW_APPLICATION = 'new_application',\n  APPROVAL_REQUIRED = 'approval_required',\n  NEW_MESSAGE = 'new_message',\n  APPLICATION_STATUS_UPDATED = 'application_status_updated',\n  APPLICATION_COMMENT = 'application_comment',\n}\n\n// Interfaces\ninterface Notification {\n  id: string;\n  title: string;\n  message: string;\n  createdAt: Date;\n  read: boolean;\n  type: NotificationType | 'info' | 'success' | 'warning' | 'error';\n  relatedItemId?: string;\n  relatedItemType?: string;\n  data?: any;\n  timestamp?: Date;\n  isRead?: boolean;\n}\n\ninterface NotificationPopupConfig {\n  title: string;\n  message: string;\n  type?: NotificationType | 'info' | 'success' | 'warning' | 'error';\n  duration?: number;\n  playSound?: boolean;\n  soundType?: 'notification' | 'alert' | 'approval' | 'three-beeps';\n}\n\ninterface NotificationContextType {\n  notifications: Notification[];\n  unreadCount: number;\n  addNotification: (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => void;\n  markAsRead: (id: string) => void;\n  markAllAsRead: () => void;\n  clearNotifications: () => void;\n  showPopup: (config: NotificationPopupConfig) => void;\n  soundEnabled: boolean;\n  toggleSound: () => void;\n  setSoundEnabled: (enabled: boolean) => void;\n  notifyNewApplication: (application: any) => void;\n}\n\nexport const NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user } = useAuth();\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [unreadCount, setUnreadCount] = useState<number>(0);\n  const [soundEnabled, setSoundEnabled] = useState<boolean>(true);\n  \n  // Estado para la notificación emergente actual\n  const [currentPopup, setCurrentPopup] = useState<NotificationPopupConfig | null>(null);\n  \n  // Referencia al ID del polling interval\n  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Efecto para manejar la carga inicial de notificaciones y configurar el polling\n  useEffect(() => {\n    if (user) {\n      // Cargar notificaciones al inicio\n      loadNotifications();\n      \n      // Configurar polling para verificar nuevas notificaciones cada 30 segundos\n      pollingIntervalRef.current = setInterval(() => {\n        checkForNewNotifications();\n      }, 30000);\n      \n      // Limpiar el intervalo cuando el componente se desmonte\n      return () => {\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n        }\n      };\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  // Cálculo de notificaciones no leídas\n  useEffect(() => {\n    const count = notifications.filter(notification => !notification.read).length;\n    setUnreadCount(count);\n  }, [notifications]);\n\n  // Cargar notificaciones del almacenamiento local o del servidor\n  const loadNotifications = async () => {\n    try {\n      // En un escenario real, aquí se cargarían las notificaciones del servidor\n      // Por ahora, usaremos el localStorage como ejemplo\n      const storedNotifications = localStorage.getItem('notifications');\n      if (storedNotifications) {\n        const parsed = JSON.parse(storedNotifications);\n        setNotifications(parsed.map((n: any) => ({\n          ...n,\n          createdAt: new Date(n.createdAt)\n        })));\n      }\n    } catch (error) {\n      console.error('Error cargando notificaciones:', error);\n    }\n  };\n\n  // Verificar nuevas notificaciones en el servidor\n  const checkForNewNotifications = async () => {\n    // En una implementación real, esto sería una llamada a la API\n    // Por ahora solo simulamos la lógica\n    console.log('Verificando nuevas notificaciones...');\n    \n    // Limitar la frecuencia de las notificaciones aleatorias\n    // Solo hay 30% de probabilidad de generar una notificación\n    // y solo si pasaron al menos 10 segundos desde la última\n    const now = new Date();\n    const lastNotificationTime = useRef<Date | null>(null);\n    \n    if (lastNotificationTime.current) {\n      const secondsSinceLastNotification = \n        (now.getTime() - lastNotificationTime.current.getTime()) / 1000;\n      \n      if (secondsSinceLastNotification < 10) {\n        console.log(`Demasiado pronto para nueva notificación (${Math.round(secondsSinceLastNotification)}s)`);\n        return;\n      }\n    }\n    \n    if (Math.random() > 0.7) {\n      lastNotificationTime.current = now;\n      \n      const testNotification = {\n        title: 'Nueva solicitud asignada',\n        message: 'Se ha asignado una nueva solicitud de crédito a tu bandeja',\n        type: NotificationType.NEW_APPLICATION,\n        relatedItemType: 'application',\n        // Using a properly formatted UUID for testing - NOT using app-timestamp format\n        relatedItemId: getTestApplicationId()\n      };\n      \n      addNotification(testNotification);\n      \n      // También mostrar como popup con sonido\n      showPopup({\n        ...testNotification,\n        playSound: soundEnabled,\n        soundType: 'three-beeps' // Usar el nuevo tipo de sonido para nuevas solicitudes\n      });\n    }\n  };\n\n  // Añadir una nueva notificación\n  const addNotification = (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => {\n    const newNotification: Notification = {\n      ...notification,\n      // Using a proper UUID for the notification ID\n      id: generateUUID(),\n      createdAt: new Date(),\n      read: false,\n      timestamp: new Date()\n    };\n    \n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Guardar en localStorage (en producción esto iría al servidor)\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Función específica para notificaciones de nuevas aplicaciones\n  const notifyNewApplication = (application: any) => {\n    // Crear una notificación con el tipo adecuado\n    const notification = {\n      title: 'Nueva Solicitud de Crédito',\n      message: `Se ha recibido una nueva solicitud de ${application.client_name || 'un cliente'}`,\n      type: NotificationType.NEW_APPLICATION,\n      relatedItemType: 'application',\n      relatedItemId: application.id\n    };\n    \n    // Añadir a la lista de notificaciones\n    addNotification(notification);\n    \n    // Mostrar popup con sonido de tres beeps\n    showPopup({\n      ...notification,\n      playSound: soundEnabled,\n      soundType: 'three-beeps',\n      duration: 8000 // Duración mayor para tener tiempo de ver la notificación\n    });\n  };\n\n  // Marcar una notificación como leída\n  const markAsRead = (id: string) => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => \n        notification.id === id \n          ? { ...notification, read: true, isRead: true } \n          : notification\n      );\n      \n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar todas las notificaciones como leídas\n  const markAllAsRead = () => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => ({ ...notification, read: true, isRead: true }));\n      \n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Limpiar todas las notificaciones\n  const clearNotifications = () => {\n    setNotifications([]);\n    // Limpiar del localStorage\n    localStorage.setItem('notifications', JSON.stringify([]));\n  };\n\n  // Mostrar una notificación emergente\n  const showPopup = (config: NotificationPopupConfig) => {\n    setCurrentPopup(config);\n    \n    // Automáticamente cerrar el popup después de la duración especificada\n    setTimeout(() => {\n      setCurrentPopup(null);\n    }, config.duration || 5000);\n  };\n\n  // Activar/desactivar sonidos de notificación\n  const toggleSound = () => {\n    const newValue = !soundEnabled;\n    setSoundEnabled(newValue);\n    // Guardar preferencia en localStorage\n    localStorage.setItem('notification_sound_enabled', newValue.toString());\n  };\n\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    showPopup,\n    soundEnabled,\n    toggleSound,\n    setSoundEnabled,\n    notifyNewApplication\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n      {currentPopup && (\n        <NotificationPopup\n          title={currentPopup.title}\n          message={currentPopup.message}\n          type={currentPopup.type as any}\n          duration={currentPopup.duration}\n          playSound={currentPopup.playSound}\n          soundType={currentPopup.soundType}\n          onClose={() => setCurrentPopup(null)}\n        />\n      )}\n    </NotificationContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}