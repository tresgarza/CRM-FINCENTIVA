{"ast":null,"code":"/**\n * Service for MCP (Mini Client Protocol) \n * Used for executing direct SQL queries to our custom PostgreSQL server\n */\n\n// The base URL where our MCP server is running\nconst MCP_URL = 'http://localhost:3100';\n/**\n * Execute a SQL query against the MCP server\n * @param query SQL query to execute\n * @returns QueryResponse with data array or error message\n */\nexport const executeQuery = async query => {\n  try {\n    const response = await fetch(`${MCP_URL}/query`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      })\n    });\n    const result = await response.json();\n    if (!response.ok) {\n      console.error('MCP query error:', result);\n      throw new Error(result.error || 'Error executing query');\n    }\n    return {\n      data: result\n    };\n  } catch (error) {\n    console.error('MCP service error:', error);\n    return {\n      error: error.message || 'Error connecting to MCP server'\n    };\n  }\n};\n\n/**\n * Simple ping to check if MCP server is available\n * @returns true if server is available, false otherwise\n */\nexport const pingMcpServer = async () => {\n  try {\n    const response = await fetch(`${MCP_URL}/ping`);\n    return response.ok;\n  } catch (error) {\n    console.error('MCP server ping failed:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["MCP_URL","executeQuery","query","response","fetch","method","headers","body","JSON","stringify","result","json","ok","console","error","Error","data","message","pingMcpServer"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/mcpService.ts"],"sourcesContent":["/**\n * Service for MCP (Mini Client Protocol) \n * Used for executing direct SQL queries to our custom PostgreSQL server\n */\n\n// The base URL where our MCP server is running\nconst MCP_URL = 'http://localhost:3100';\n\ninterface QueryResponse {\n  data?: any[];\n  error?: string;\n}\n\n/**\n * Execute a SQL query against the MCP server\n * @param query SQL query to execute\n * @returns QueryResponse with data array or error message\n */\nexport const executeQuery = async (query: string): Promise<QueryResponse> => {\n  try {\n    const response = await fetch(`${MCP_URL}/query`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ query }),\n    });\n\n    const result = await response.json();\n\n    if (!response.ok) {\n      console.error('MCP query error:', result);\n      throw new Error(result.error || 'Error executing query');\n    }\n\n    return { data: result };\n  } catch (error: any) {\n    console.error('MCP service error:', error);\n    return { error: error.message || 'Error connecting to MCP server' };\n  }\n};\n\n/**\n * Simple ping to check if MCP server is available\n * @returns true if server is available, false otherwise\n */\nexport const pingMcpServer = async (): Promise<boolean> => {\n  try {\n    const response = await fetch(`${MCP_URL}/ping`);\n    return response.ok;\n  } catch (error) {\n    console.error('MCP server ping failed:', error);\n    return false;\n  }\n}; "],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,OAAO,GAAG,uBAAuB;AAOvC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,KAAa,IAA6B;EAC3E,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,QAAQ,EAAE;MAC/CK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAM,CAAC;IAChC,CAAC,CAAC;IAEF,MAAMQ,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAEpC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;MAChBC,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEJ,MAAM,CAAC;MACzC,MAAM,IAAIK,KAAK,CAACL,MAAM,CAACI,KAAK,IAAI,uBAAuB,CAAC;IAC1D;IAEA,OAAO;MAAEE,IAAI,EAAEN;IAAO,CAAC;EACzB,CAAC,CAAC,OAAOI,KAAU,EAAE;IACnBD,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,OAAO;MAAEA,KAAK,EAAEA,KAAK,CAACG,OAAO,IAAI;IAAiC,CAAC;EACrE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAA8B;EACzD,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,OAAO,CAAC;IAC/C,OAAOG,QAAQ,CAACS,EAAE;EACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}