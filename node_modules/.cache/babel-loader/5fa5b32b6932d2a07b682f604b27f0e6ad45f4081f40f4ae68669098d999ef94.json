{"ast":null,"code":"/**\n * Utility functions for error handling throughout the application\n */\n\nimport { toast } from 'react-hot-toast';\n\n/**\n * Error types for common application errors\n */\nexport let ErrorType = /*#__PURE__*/function (ErrorType) {\n  ErrorType[\"VALIDATION\"] = \"VALIDATION\";\n  ErrorType[\"AUTHENTICATION\"] = \"AUTHENTICATION\";\n  ErrorType[\"AUTHORIZATION\"] = \"AUTHORIZATION\";\n  ErrorType[\"SERVER\"] = \"SERVER\";\n  ErrorType[\"NETWORK\"] = \"NETWORK\";\n  ErrorType[\"UPLOAD\"] = \"UPLOAD\";\n  ErrorType[\"NOT_FOUND\"] = \"NOT_FOUND\";\n  ErrorType[\"DATABASE\"] = \"DATABASE\";\n  ErrorType[\"UNKNOWN\"] = \"UNKNOWN\";\n  return ErrorType;\n}({});\n\n/**\n * Standard interface for API errors\n */\n\n/**\n * Standard error shape for the application\n */\n\n/**\n * Creates a standardized error object from any error type\n * @param error The original error\n * @param context Additional context information about where the error occurred\n * @returns A standardized API error object\n */\nexport const formatApiError = (error, context) => {\n  // Default error message\n  let formattedError = {\n    message: 'Error desconocido',\n    context\n  };\n\n  // Handle Error object\n  if (error instanceof Error) {\n    formattedError.message = error.message;\n  }\n  // Handle Supabase-style errors\n  else if (typeof error === 'object' && error !== null) {\n    if (error.message) {\n      formattedError.message = error.message;\n    }\n    if (error.code) {\n      formattedError.code = error.code;\n\n      // Add more descriptive messages for specific error codes\n      if (error.code === '23505') {\n        formattedError.message = 'Ya existe un registro con estos datos.';\n      } else if (error.code === '42P01') {\n        formattedError.message = 'La tabla no existe en la base de datos.';\n      }\n    }\n    if (error.details) {\n      formattedError.details = error.details;\n    }\n  }\n  return formattedError;\n};\n\n/**\n * Creates a user-friendly error message from an API error\n * @param error The API error object\n * @returns A user-friendly error message\n */\nexport const getUserFriendlyErrorMessage = error => {\n  var _error$context;\n  // Use the original message if already user-friendly\n  if (error.handled) {\n    return error.message;\n  }\n\n  // Generic user-friendly messages based on context\n  if (error.context === 'document-upload') {\n    return `Error al subir documentos: ${error.message}`;\n  }\n  if (error.context === 'client-update') {\n    return `Error al actualizar cliente: ${error.message}`;\n  }\n  if (error.context === 'client-create') {\n    return `Error al crear cliente: ${error.message}`;\n  }\n  if ((_error$context = error.context) !== null && _error$context !== void 0 && _error$context.includes('fetch')) {\n    return `Error al cargar datos: ${error.message}`;\n  }\n\n  // Default message\n  return `Error: ${error.message}`;\n};\n\n/**\n * Creates an application error with standard shape\n */\nexport const createAppError = (type, message, details, originalError) => ({\n  type,\n  message,\n  details,\n  originalError\n});\n\n/**\n * Shows error toast with appropriate messaging\n */\nexport const showErrorToast = (error, title) => {\n  const message = typeof error === 'string' ? error : error.message || 'An unexpected error occurred';\n  toast.error(message, {\n    duration: 5000\n  });\n};\n\n/**\n * Determines if an error is a specific type\n */\nexport const isErrorType = (error, type) => {\n  return error.type === type;\n};\n\n/**\n * Determines if an error is a network error\n */\nexport const isNetworkError = error => {\n  return error instanceof Error && (error.message.includes('network') || error.message.includes('offline') || error.message.includes('failed to fetch') || error.message.includes('NetworkError'));\n};\n\n/**\n * Determines if an error is a server error\n */\nexport const isServerError = error => {\n  return error instanceof Error && (error.message.includes('500') || error.message.includes('server error'));\n};\n\n/**\n * Determines if an error is a transient error that may succeed on retry\n */\nexport const isTransientError = error => {\n  if (error instanceof Error) {\n    return isNetworkError(error) || isServerError(error) || error.message.includes('timeout') || error.message.includes('rate limit');\n  }\n  return false;\n};\n\n/**\n * Handles API errors and returns a standardized AppError\n */\nexport const handleApiError = error => {\n  if (error instanceof Error) {\n    if (error.message.includes('401') || error.message.includes('authentication')) {\n      return createAppError(ErrorType.AUTHENTICATION, 'Authentication failed. Please log in again.', {}, error);\n    }\n    if (error.message.includes('403') || error.message.includes('permission')) {\n      return createAppError(ErrorType.AUTHORIZATION, 'You do not have permission to perform this action.', {}, error);\n    }\n    if (error.message.includes('404') || error.message.includes('not found')) {\n      return createAppError(ErrorType.NOT_FOUND, 'The requested resource was not found.', {}, error);\n    }\n    if (isNetworkError(error)) {\n      return createAppError(ErrorType.NETWORK, 'A network error occurred. Please check your connection and try again.', {}, error);\n    }\n    if (isServerError(error)) {\n      return createAppError(ErrorType.SERVER, 'A server error occurred. Please try again later.', {}, error);\n    }\n  }\n  return createAppError(ErrorType.UNKNOWN, 'An unexpected error occurred.', {}, error);\n};\n\n/**\n * Safely parses API response to extract error details\n */\nexport const parseApiErrorResponse = response => {\n  return response.json().then(data => {\n    if (data && data.error) {\n      return createAppError(data.type || ErrorType.UNKNOWN, data.error || 'An error occurred', data.details || {}, null);\n    }\n    return createAppError(ErrorType.UNKNOWN, 'An unexpected error occurred', {}, null);\n  }).catch(() => {\n    return createAppError(ErrorType.UNKNOWN, `${response.status}: ${response.statusText || 'An error occurred'}`, {}, null);\n  });\n};\n\n/**\n * Log error information with standard formatting\n */\nexport const logError = (error, context, additionalInfo) => {\n  // In production, send to logging service\n  // For development, just log to console\n  console.error(`Error in ${context}:`, error);\n  if (additionalInfo) {\n    console.error('Additional info:', additionalInfo);\n  }\n\n  // If AppError, log its details\n  if (error && typeof error === 'object' && 'type' in error) {\n    const appError = error;\n    console.error('Error type:', appError.type);\n    console.error('Error message:', appError.message);\n    if (appError.details) {\n      console.error('Error details:', appError.details);\n    }\n    if (appError.originalError) {\n      console.error('Original error:', appError.originalError);\n    }\n  }\n};\n\n/**\n * Parses an unknown error into a standardized AppError format\n */\nexport const parseError = error => {\n  // Handle PostgrestError\n  if (error && typeof error === 'object' && 'code' in error && 'message' in error) {\n    const pgError = error;\n    return createAppError(pgError.code ? ErrorType.DATABASE : ErrorType.UNKNOWN, pgError.message, {\n      details: pgError.details,\n      hint: pgError.hint\n    }, error);\n  }\n\n  // Handle Error objects\n  if (error instanceof Error) {\n    // Convert to AppError format\n    return createAppError(ErrorType.UNKNOWN, error.message, {}, error);\n  }\n\n  // Handle string errors\n  if (typeof error === 'string') {\n    return createAppError(ErrorType.UNKNOWN, error);\n  }\n\n  // Generic fallback for unknown error types\n  return createAppError(ErrorType.UNKNOWN, 'An unknown error occurred', {\n    rawError: error\n  });\n};\n\n/**\n * Safely handles promises and returns a standardized response\n * @param promise The promise to execute\n * @param errorContext Context string for error logging\n * @returns A tuple of [data, error]\n */\nexport const safeAsync = async (promise, errorContext) => {\n  try {\n    const data = await promise;\n    return [data, null];\n  } catch (error) {\n    const appError = parseError(error);\n    logError(appError, errorContext);\n    return [null, appError];\n  }\n};\n\n/**\n * Checks if an error is related to Row Level Security violations\n * @param error The error to check\n * @returns Boolean indicating if this is an RLS violation\n */\nexport const isRlsViolation = error => {\n  if (!error || !error.message) return false;\n  return error.message.includes('violates row-level security policy') || error.message.includes('permission denied') || error.message.includes('Unauthorized') || error.message.includes('403');\n};\n\n/**\n * Creates a standard RLS violation error\n * @param operation The operation that was attempted (e.g., 'update', 'delete')\n * @param resourceType The type of resource (e.g., 'client', 'application')\n * @param resourceId The ID of the resource\n * @param originalError The original error object\n * @returns A standardized App Error for RLS violations\n */\nexport const createRlsViolationError = (operation, resourceType, resourceId, originalError) => {\n  const rlsError = createAppError(ErrorType.AUTHORIZATION, `No tienes permisos para ${operation} este ${resourceType}. Esto puede deberse a pol√≠ticas de seguridad RLS en Supabase.`, {\n    originalError: (originalError === null || originalError === void 0 ? void 0 : originalError.message) || 'Unknown error'\n  });\n  logError(rlsError, `${operation}${resourceType}.RLS_VIOLATION`, {\n    [`${resourceType}Id`]: resourceId\n  });\n  return rlsError;\n};\n\n/**\n * Creates a standard no-effect error for database operations that didn't affect any rows\n * @param operation The operation that was attempted (e.g., 'update', 'delete')\n * @param resourceType The type of resource (e.g., 'client', 'application')\n * @param resourceId The ID of the resource\n * @returns A standardized App Error for no-effect operations\n */\nexport const createNoEffectError = (operation, resourceType, resourceId) => {\n  const operationName = operation === 'update' ? 'actualizaci√≥n' : operation === 'delete' ? 'eliminaci√≥n' : operation;\n  const noEffectError = createAppError(ErrorType.DATABASE, `La ${operationName} no tuvo efecto en la base de datos. Esto puede deberse a permisos insuficientes.`, {\n    [`${resourceType}Id`]: resourceId\n  });\n  logError(noEffectError, `${operation}${resourceType}.NO_EFFECT`, {\n    [`${resourceType}Id`]: resourceId\n  });\n  return noEffectError;\n};","map":{"version":3,"names":["toast","ErrorType","formatApiError","error","context","formattedError","message","Error","code","details","getUserFriendlyErrorMessage","_error$context","handled","includes","createAppError","type","originalError","showErrorToast","title","duration","isErrorType","isNetworkError","isServerError","isTransientError","handleApiError","AUTHENTICATION","AUTHORIZATION","NOT_FOUND","NETWORK","SERVER","UNKNOWN","parseApiErrorResponse","response","json","then","data","catch","status","statusText","logError","additionalInfo","console","appError","parseError","pgError","DATABASE","hint","rawError","safeAsync","promise","errorContext","isRlsViolation","createRlsViolationError","operation","resourceType","resourceId","rlsError","createNoEffectError","operationName","noEffectError"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/utils/errorHandling.ts"],"sourcesContent":["/**\n * Utility functions for error handling throughout the application\n */\n\nimport { PostgrestError } from '@supabase/supabase-js';\nimport { toast } from 'react-hot-toast';\n\n/**\n * Error types for common application errors\n */\nexport enum ErrorType {\n  VALIDATION = 'VALIDATION',\n  AUTHENTICATION = 'AUTHENTICATION',\n  AUTHORIZATION = 'AUTHORIZATION',\n  SERVER = 'SERVER',\n  NETWORK = 'NETWORK',\n  UPLOAD = 'UPLOAD',\n  NOT_FOUND = 'NOT_FOUND',\n  DATABASE = 'DATABASE',\n  UNKNOWN = 'UNKNOWN'\n}\n\n/**\n * Standard interface for API errors\n */\nexport interface ApiError {\n  message: string;\n  code?: string;\n  details?: string;\n  context?: string;\n  handled?: boolean;\n}\n\n/**\n * Standard error shape for the application\n */\nexport interface AppError {\n  type: ErrorType;\n  message: string;\n  details?: Record<string, unknown>;\n  originalError?: unknown;\n}\n\n/**\n * Creates a standardized error object from any error type\n * @param error The original error\n * @param context Additional context information about where the error occurred\n * @returns A standardized API error object\n */\nexport const formatApiError = (error: any, context: string): ApiError => {\n  // Default error message\n  let formattedError: ApiError = {\n    message: 'Error desconocido',\n    context\n  };\n\n  // Handle Error object\n  if (error instanceof Error) {\n    formattedError.message = error.message;\n  } \n  // Handle Supabase-style errors\n  else if (typeof error === 'object' && error !== null) {\n    if (error.message) {\n      formattedError.message = error.message;\n    }\n    \n    if (error.code) {\n      formattedError.code = error.code;\n      \n      // Add more descriptive messages for specific error codes\n      if (error.code === '23505') {\n        formattedError.message = 'Ya existe un registro con estos datos.';\n      } else if (error.code === '42P01') {\n        formattedError.message = 'La tabla no existe en la base de datos.';\n      }\n    }\n    \n    if (error.details) {\n      formattedError.details = error.details;\n    }\n  }\n  \n  return formattedError;\n};\n\n/**\n * Creates a user-friendly error message from an API error\n * @param error The API error object\n * @returns A user-friendly error message\n */\nexport const getUserFriendlyErrorMessage = (error: ApiError): string => {\n  // Use the original message if already user-friendly\n  if (error.handled) {\n    return error.message;\n  }\n  \n  // Generic user-friendly messages based on context\n  if (error.context === 'document-upload') {\n    return `Error al subir documentos: ${error.message}`;\n  }\n  \n  if (error.context === 'client-update') {\n    return `Error al actualizar cliente: ${error.message}`;\n  }\n  \n  if (error.context === 'client-create') {\n    return `Error al crear cliente: ${error.message}`;\n  }\n  \n  if (error.context?.includes('fetch')) {\n    return `Error al cargar datos: ${error.message}`;\n  }\n  \n  // Default message\n  return `Error: ${error.message}`;\n};\n\n/**\n * Creates an application error with standard shape\n */\nexport const createAppError = (\n  type: ErrorType,\n  message: string,\n  details?: Record<string, unknown>,\n  originalError?: unknown\n): AppError => ({\n  type,\n  message,\n  details,\n  originalError\n});\n\n/**\n * Shows error toast with appropriate messaging\n */\nexport const showErrorToast = (\n  error: AppError | string,\n  title?: string\n) => {\n  const message = typeof error === 'string' \n    ? error \n    : error.message || 'An unexpected error occurred';\n  \n  toast.error(message, {\n    duration: 5000\n  });\n};\n\n/**\n * Determines if an error is a specific type\n */\nexport const isErrorType = (error: AppError, type: ErrorType): boolean => {\n  return error.type === type;\n};\n\n/**\n * Determines if an error is a network error\n */\nexport const isNetworkError = (error: unknown): boolean => {\n  return (\n    error instanceof Error && \n    (error.message.includes('network') || \n     error.message.includes('offline') ||\n     error.message.includes('failed to fetch') ||\n     error.message.includes('NetworkError'))\n  );\n};\n\n/**\n * Determines if an error is a server error\n */\nexport const isServerError = (error: unknown): boolean => {\n  return (\n    error instanceof Error && \n    (error.message.includes('500') || \n     error.message.includes('server error'))\n  );\n};\n\n/**\n * Determines if an error is a transient error that may succeed on retry\n */\nexport const isTransientError = (error: unknown): boolean => {\n  if (error instanceof Error) {\n    return (\n      isNetworkError(error) ||\n      isServerError(error) ||\n      error.message.includes('timeout') ||\n      error.message.includes('rate limit')\n    );\n  }\n  return false;\n};\n\n/**\n * Handles API errors and returns a standardized AppError\n */\nexport const handleApiError = (error: unknown): AppError => {\n  if (error instanceof Error) {\n    if (error.message.includes('401') || error.message.includes('authentication')) {\n      return createAppError(\n        ErrorType.AUTHENTICATION,\n        'Authentication failed. Please log in again.',\n        {},\n        error\n      );\n    }\n    \n    if (error.message.includes('403') || error.message.includes('permission')) {\n      return createAppError(\n        ErrorType.AUTHORIZATION,\n        'You do not have permission to perform this action.',\n        {},\n        error\n      );\n    }\n    \n    if (error.message.includes('404') || error.message.includes('not found')) {\n      return createAppError(\n        ErrorType.NOT_FOUND,\n        'The requested resource was not found.',\n        {},\n        error\n      );\n    }\n    \n    if (isNetworkError(error)) {\n      return createAppError(\n        ErrorType.NETWORK,\n        'A network error occurred. Please check your connection and try again.',\n        {},\n        error\n      );\n    }\n    \n    if (isServerError(error)) {\n      return createAppError(\n        ErrorType.SERVER,\n        'A server error occurred. Please try again later.',\n        {},\n        error\n      );\n    }\n  }\n  \n  return createAppError(\n    ErrorType.UNKNOWN,\n    'An unexpected error occurred.',\n    {},\n    error\n  );\n};\n\n/**\n * Safely parses API response to extract error details\n */\nexport const parseApiErrorResponse = (response: Response): Promise<AppError> => {\n  return response.json()\n    .then(data => {\n      if (data && data.error) {\n        return createAppError(\n          data.type || ErrorType.UNKNOWN,\n          data.error || 'An error occurred',\n          data.details || {},\n          null\n        );\n      }\n      \n      return createAppError(\n        ErrorType.UNKNOWN,\n        'An unexpected error occurred',\n        {},\n        null\n      );\n    })\n    .catch(() => {\n      return createAppError(\n        ErrorType.UNKNOWN,\n        `${response.status}: ${response.statusText || 'An error occurred'}`,\n        {},\n        null\n      );\n    });\n};\n\n/**\n * Log error information with standard formatting\n */\nexport const logError = (\n  error: unknown,\n  context: string,\n  additionalInfo?: Record<string, any>\n): void => {\n  // In production, send to logging service\n  // For development, just log to console\n  console.error(`Error in ${context}:`, error);\n  \n  if (additionalInfo) {\n    console.error('Additional info:', additionalInfo);\n  }\n  \n  // If AppError, log its details\n  if (error && typeof error === 'object' && 'type' in error) {\n    const appError = error as AppError;\n    console.error('Error type:', appError.type);\n    console.error('Error message:', appError.message);\n    if (appError.details) {\n      console.error('Error details:', appError.details);\n    }\n    if (appError.originalError) {\n      console.error('Original error:', appError.originalError);\n    }\n  }\n};\n\n/**\n * Parses an unknown error into a standardized AppError format\n */\nexport const parseError = (error: unknown): AppError => {\n  // Handle PostgrestError\n  if (error && typeof error === 'object' && 'code' in error && 'message' in error) {\n    const pgError = error as PostgrestError;\n    return createAppError(\n      pgError.code ? ErrorType.DATABASE : ErrorType.UNKNOWN,\n      pgError.message,\n      { details: pgError.details, hint: pgError.hint },\n      error\n    );\n  }\n  \n  // Handle Error objects\n  if (error instanceof Error) {\n    // Convert to AppError format\n    return createAppError(\n      ErrorType.UNKNOWN,\n      error.message,\n      {},\n      error\n    );\n  }\n  \n  // Handle string errors\n  if (typeof error === 'string') {\n    return createAppError(\n      ErrorType.UNKNOWN,\n      error\n    );\n  }\n  \n  // Generic fallback for unknown error types\n  return createAppError(\n    ErrorType.UNKNOWN,\n    'An unknown error occurred',\n    { rawError: error }\n  );\n};\n\n/**\n * Safely handles promises and returns a standardized response\n * @param promise The promise to execute\n * @param errorContext Context string for error logging\n * @returns A tuple of [data, error]\n */\nexport const safeAsync = async <T>(\n  promise: Promise<T>,\n  errorContext: string\n): Promise<[T | null, AppError | null]> => {\n  try {\n    const data = await promise;\n    return [data, null];\n  } catch (error) {\n    const appError = parseError(error);\n    logError(appError, errorContext);\n    return [null, appError];\n  }\n};\n\n/**\n * Checks if an error is related to Row Level Security violations\n * @param error The error to check\n * @returns Boolean indicating if this is an RLS violation\n */\nexport const isRlsViolation = (error: any): boolean => {\n  if (!error || !error.message) return false;\n  \n  return error.message.includes('violates row-level security policy') ||\n    error.message.includes('permission denied') ||\n    error.message.includes('Unauthorized') ||\n    error.message.includes('403');\n};\n\n/**\n * Creates a standard RLS violation error\n * @param operation The operation that was attempted (e.g., 'update', 'delete')\n * @param resourceType The type of resource (e.g., 'client', 'application')\n * @param resourceId The ID of the resource\n * @param originalError The original error object\n * @returns A standardized App Error for RLS violations\n */\nexport const createRlsViolationError = (\n  operation: string,\n  resourceType: string,\n  resourceId: string,\n  originalError: any\n) => {\n  const rlsError = createAppError(\n    ErrorType.AUTHORIZATION,\n    `No tienes permisos para ${operation} este ${resourceType}. Esto puede deberse a pol√≠ticas de seguridad RLS en Supabase.`,\n    { originalError: originalError?.message || 'Unknown error' }\n  );\n  \n  logError(rlsError, `${operation}${resourceType}.RLS_VIOLATION`, { [`${resourceType}Id`]: resourceId });\n  \n  return rlsError;\n};\n\n/**\n * Creates a standard no-effect error for database operations that didn't affect any rows\n * @param operation The operation that was attempted (e.g., 'update', 'delete')\n * @param resourceType The type of resource (e.g., 'client', 'application')\n * @param resourceId The ID of the resource\n * @returns A standardized App Error for no-effect operations\n */\nexport const createNoEffectError = (\n  operation: string,\n  resourceType: string,\n  resourceId: string\n) => {\n  const operationName = operation === 'update' ? 'actualizaci√≥n' : \n                         operation === 'delete' ? 'eliminaci√≥n' : operation;\n  \n  const noEffectError = createAppError(\n    ErrorType.DATABASE,\n    `La ${operationName} no tuvo efecto en la base de datos. Esto puede deberse a permisos insuficientes.`,\n    { [`${resourceType}Id`]: resourceId }\n  );\n  \n  logError(noEffectError, `${operation}${resourceType}.NO_EFFECT`, { [`${resourceType}Id`]: resourceId });\n  \n  return noEffectError;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}