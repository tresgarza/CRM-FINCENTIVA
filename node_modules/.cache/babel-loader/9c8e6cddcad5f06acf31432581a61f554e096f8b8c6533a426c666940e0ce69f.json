{"ast":null,"code":"import{supabase}from'../lib/supabaseClient';import{TABLES}from'../utils/constants/tables';const DOCUMENTS_TABLE=TABLES.DOCUMENTS;const STORAGE_BUCKET='documents';// Get all documents for an application\nexport const getApplicationDocuments=async applicationId=>{const{data,error}=await supabase.from(DOCUMENTS_TABLE).select('*').eq('application_id',applicationId).order('created_at',{ascending:false});if(error){console.error(`Error fetching documents for application ${applicationId}:`,error);throw error;}return data;};// Get all documents for a client\nexport const getClientDocuments=async clientId=>{const{data,error}=await supabase.from(DOCUMENTS_TABLE).select('*').eq('client_id',clientId).order('created_at',{ascending:false});if(error){console.error(`Error fetching documents for client ${clientId}:`,error);throw error;}return data;};// Get a single document by ID\nexport const getDocumentById=async id=>{const{data,error}=await supabase.from(DOCUMENTS_TABLE).select('*').eq('id',id).single();if(error){console.error(`Error fetching document with ID ${id}:`,error);throw error;}return data;};// Upload a document\nexport const uploadDocument=async upload=>{const{file,application_id,client_id,userId,documentName,description,category}=upload;if(!application_id&&!client_id){throw new Error(\"Either application_id or client_id must be provided\");}// Generate a unique file path\nconst timestamp=new Date().getTime();const fileExtension=file.name.split('.').pop();const prefix=application_id?`applications/${application_id}`:`clients/${client_id}`;const filePath=`${prefix}/${timestamp}-${file.name}`;// Upload file to storage\nconst{data:storageData,error:storageError}=await supabase.storage.from(STORAGE_BUCKET).upload(filePath,file,{cacheControl:'3600',upsert:false});if(storageError){console.error('Error uploading file:',storageError);throw storageError;}// Create document record in database\nconst documentRecord={file_name:documentName,file_path:filePath,file_type:file.type,file_size:file.size,uploaded_by_user_id:userId,category};if(application_id){Object.assign(documentRecord,{application_id});}if(client_id){Object.assign(documentRecord,{client_id});}if(description){Object.assign(documentRecord,{description});}const{data:documentData,error:documentError}=await supabase.from(DOCUMENTS_TABLE).insert([documentRecord]).select();if(documentError){console.error('Error creating document record:',documentError);// Delete the uploaded file if document record creation failed\nawait supabase.storage.from(STORAGE_BUCKET).remove([filePath]);throw documentError;}return documentData[0];};// Delete a document\nexport const deleteDocument=async documentId=>{// Get document to get file path\nconst{data:document,error:fetchError}=await supabase.from(DOCUMENTS_TABLE).select('file_path').eq('id',documentId).single();if(fetchError){console.error(`Error fetching document ${documentId} for deletion:`,fetchError);throw fetchError;}// Delete file from storage\nconst{error:storageError}=await supabase.storage.from(STORAGE_BUCKET).remove([document.file_path]);if(storageError){console.error(`Error deleting file for document ${documentId}:`,storageError);throw storageError;}// Delete document record\nconst{error:deleteError}=await supabase.from(DOCUMENTS_TABLE).delete().eq('id',documentId);if(deleteError){console.error(`Error deleting document record ${documentId}:`,deleteError);throw deleteError;}return true;};// Get document download URL\nexport const getDocumentUrl=async filePath=>{const{data,error}=await supabase.storage.from(STORAGE_BUCKET).createSignedUrl(filePath,60*60);// 1 hour expiry\nif(error){console.error(`Error getting URL for document ${filePath}:`,error);throw error;}return data.signedUrl;};// Verify a document\nexport const verifyDocument=async function(documentId,userId){let isVerified=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;const{data,error}=await supabase.from(DOCUMENTS_TABLE).update({is_verified:isVerified,verified_by:userId,verified_at:new Date().toISOString()}).eq('id',documentId).select();if(error){console.error(`Error verifying document ${documentId}:`,error);throw error;}return data[0];};// Get required documents (based on application type)\nexport const getRequiredDocuments=async applicationType=>{const{data,error}=await supabase.from('required_documents').select('*').eq('application_type',applicationType);if(error){console.error(`Error fetching required documents for ${applicationType}:`,error);throw error;}return data;};","map":{"version":3,"names":["supabase","TABLES","DOCUMENTS_TABLE","DOCUMENTS","STORAGE_BUCKET","getApplicationDocuments","applicationId","data","error","from","select","eq","order","ascending","console","getClientDocuments","clientId","getDocumentById","id","single","uploadDocument","upload","file","application_id","client_id","userId","documentName","description","category","Error","timestamp","Date","getTime","fileExtension","name","split","pop","prefix","filePath","storageData","storageError","storage","cacheControl","upsert","documentRecord","file_name","file_path","file_type","type","file_size","size","uploaded_by_user_id","Object","assign","documentData","documentError","insert","remove","deleteDocument","documentId","document","fetchError","deleteError","delete","getDocumentUrl","createSignedUrl","signedUrl","verifyDocument","isVerified","arguments","length","undefined","update","is_verified","verified_by","verified_at","toISOString","getRequiredDocuments","applicationType"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/documentService.ts"],"sourcesContent":["import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from '../utils/constants/tables';\n\nexport interface Document {\n  id: string;\n  created_at: string;\n  file_name: string;\n  file_path: string;\n  file_type: string;\n  file_size: number;\n  category?: string;\n  application_id?: string;\n  client_id?: string;\n  uploaded_by_user_id?: string;\n  is_verified?: boolean;\n  verified_by?: string;\n  verified_at?: string;\n}\n\nexport interface DocumentUpload {\n  file: File;\n  application_id?: string;\n  client_id?: string;\n  userId: string;\n  documentName: string;\n  description?: string;\n  category?: string;\n}\n\nconst DOCUMENTS_TABLE = TABLES.DOCUMENTS;\nconst STORAGE_BUCKET = 'documents';\n\n// Get all documents for an application\nexport const getApplicationDocuments = async (applicationId: string) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select('*')\n    .eq('application_id', applicationId)\n    .order('created_at', { ascending: false });\n\n  if (error) {\n    console.error(`Error fetching documents for application ${applicationId}:`, error);\n    throw error;\n  }\n\n  return data;\n};\n\n// Get all documents for a client\nexport const getClientDocuments = async (clientId: string) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select('*')\n    .eq('client_id', clientId)\n    .order('created_at', { ascending: false });\n\n  if (error) {\n    console.error(`Error fetching documents for client ${clientId}:`, error);\n    throw error;\n  }\n\n  return data;\n};\n\n// Get a single document by ID\nexport const getDocumentById = async (id: string) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select('*')\n    .eq('id', id)\n    .single();\n\n  if (error) {\n    console.error(`Error fetching document with ID ${id}:`, error);\n    throw error;\n  }\n\n  return data as Document;\n};\n\n// Upload a document\nexport const uploadDocument = async (upload: DocumentUpload) => {\n  const { file, application_id, client_id, userId, documentName, description, category } = upload;\n  \n  if (!application_id && !client_id) {\n    throw new Error(\"Either application_id or client_id must be provided\");\n  }\n  \n  // Generate a unique file path\n  const timestamp = new Date().getTime();\n  const fileExtension = file.name.split('.').pop();\n  const prefix = application_id ? `applications/${application_id}` : `clients/${client_id}`;\n  const filePath = `${prefix}/${timestamp}-${file.name}`;\n\n  // Upload file to storage\n  const { data: storageData, error: storageError } = await supabase.storage\n    .from(STORAGE_BUCKET)\n    .upload(filePath, file, {\n      cacheControl: '3600',\n      upsert: false\n    });\n\n  if (storageError) {\n    console.error('Error uploading file:', storageError);\n    throw storageError;\n  }\n\n  // Create document record in database\n  const documentRecord = {\n    file_name: documentName,\n    file_path: filePath,\n    file_type: file.type,\n    file_size: file.size,\n    uploaded_by_user_id: userId,\n    category\n  };\n  \n  if (application_id) {\n    Object.assign(documentRecord, { application_id });\n  }\n  \n  if (client_id) {\n    Object.assign(documentRecord, { client_id });\n  }\n  \n  if (description) {\n    Object.assign(documentRecord, { description });\n  }\n\n  const { data: documentData, error: documentError } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .insert([documentRecord])\n    .select();\n\n  if (documentError) {\n    console.error('Error creating document record:', documentError);\n    \n    // Delete the uploaded file if document record creation failed\n    await supabase.storage\n      .from(STORAGE_BUCKET)\n      .remove([filePath]);\n      \n    throw documentError;\n  }\n\n  return documentData[0] as Document;\n};\n\n// Delete a document\nexport const deleteDocument = async (documentId: string) => {\n  // Get document to get file path\n  const { data: document, error: fetchError } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select('file_path')\n    .eq('id', documentId)\n    .single();\n\n  if (fetchError) {\n    console.error(`Error fetching document ${documentId} for deletion:`, fetchError);\n    throw fetchError;\n  }\n\n  // Delete file from storage\n  const { error: storageError } = await supabase.storage\n    .from(STORAGE_BUCKET)\n    .remove([document.file_path]);\n\n  if (storageError) {\n    console.error(`Error deleting file for document ${documentId}:`, storageError);\n    throw storageError;\n  }\n\n  // Delete document record\n  const { error: deleteError } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .delete()\n    .eq('id', documentId);\n\n  if (deleteError) {\n    console.error(`Error deleting document record ${documentId}:`, deleteError);\n    throw deleteError;\n  }\n\n  return true;\n};\n\n// Get document download URL\nexport const getDocumentUrl = async (filePath: string) => {\n  const { data, error } = await supabase.storage\n    .from(STORAGE_BUCKET)\n    .createSignedUrl(filePath, 60 * 60); // 1 hour expiry\n\n  if (error) {\n    console.error(`Error getting URL for document ${filePath}:`, error);\n    throw error;\n  }\n\n  return data.signedUrl;\n};\n\n// Verify a document\nexport const verifyDocument = async (documentId: string, userId: string, isVerified: boolean = true) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .update({\n      is_verified: isVerified,\n      verified_by: userId,\n      verified_at: new Date().toISOString()\n    })\n    .eq('id', documentId)\n    .select();\n\n  if (error) {\n    console.error(`Error verifying document ${documentId}:`, error);\n    throw error;\n  }\n\n  return data[0] as Document;\n};\n\n// Get required documents (based on application type)\nexport const getRequiredDocuments = async (applicationType: string) => {\n  const { data, error } = await supabase\n    .from('required_documents')\n    .select('*')\n    .eq('application_type', applicationType);\n\n  if (error) {\n    console.error(`Error fetching required documents for ${applicationType}:`, error);\n    throw error;\n  }\n\n  return data;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}