{"ast":null,"code":"/**\n * Utilities for consistent number formatting and parsing throughout the application\n *//**\n * Formats a number as currency with proper locale\n * @param value The number to format\n * @param locale The locale to use (defaults to en-US)\n * @param currency The currency code (defaults to USD)\n * @returns Formatted currency string\n */export const formatCurrency=function(value){let locale=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en-US';let currency=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'USD';if(value===null||value===undefined)return'';return new Intl.NumberFormat(locale,{style:'currency',currency,minimumFractionDigits:2,maximumFractionDigits:2}).format(value);};/**\n * Formats a number as percentage\n * @param value The number to format (0.1 = 10%)\n * @param locale The locale to use (defaults to en-US)\n * @param digits Number of decimal places (defaults to 2)\n * @returns Formatted percentage string\n */export const formatPercentage=function(value){let locale=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en-US';let digits=arguments.length>2&&arguments[2]!==undefined?arguments[2]:2;if(value===null||value===undefined)return'';return new Intl.NumberFormat(locale,{style:'percent',minimumFractionDigits:digits,maximumFractionDigits:digits}).format(value);};/**\n * Formats a number with proper thousands separators\n * @param value The number to format\n * @param locale The locale to use (defaults to en-US)\n * @param digits Number of decimal places (defaults to 0)\n * @returns Formatted number string\n */export const formatNumber=function(value){let locale=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en-US';let digits=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;if(value===null||value===undefined)return'';return new Intl.NumberFormat(locale,{minimumFractionDigits:digits,maximumFractionDigits:digits}).format(value);};/**\n * Parses a string to a number, handling various formats\n * @param value The string value to parse\n * @returns The parsed number or undefined if invalid\n */export const parseNumericString=value=>{if(!value)return undefined;// Remove all non-numeric characters except decimal point and minus sign\nconst normalizedValue=value.replace(/[^0-9.-]/g,'').replace(/(\\..*)\\./g,'$1');// Allow only one decimal point\nconst parsedValue=parseFloat(normalizedValue);return isNaN(parsedValue)?undefined:parsedValue;};/**\n * Converts a numeric string to a properly formatted display value\n * @param value The numeric string to format\n * @param type The type of formatting to apply\n * @param options Additional formatting options\n * @returns Formatted display value\n */export const formatDisplayValue=(value,type,options)=>{if(value===null||value===undefined||value==='')return'';const numericValue=typeof value==='string'?parseNumericString(value):value;if(numericValue===undefined)return'';const locale=(options===null||options===void 0?void 0:options.locale)||'en-US';switch(type){case'currency':return formatCurrency(numericValue,locale,options===null||options===void 0?void 0:options.currency);case'percentage':return formatPercentage(numericValue,locale,options===null||options===void 0?void 0:options.digits);case'number':return formatNumber(numericValue,locale,options===null||options===void 0?void 0:options.digits);default:return String(value);}};","map":{"version":3,"names":["formatCurrency","value","locale","arguments","length","undefined","currency","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","formatPercentage","digits","formatNumber","parseNumericString","normalizedValue","replace","parsedValue","parseFloat","isNaN","formatDisplayValue","type","options","numericValue","String"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/utils/numberFormatting.ts"],"sourcesContent":["/**\n * Utilities for consistent number formatting and parsing throughout the application\n */\n\n/**\n * Formats a number as currency with proper locale\n * @param value The number to format\n * @param locale The locale to use (defaults to en-US)\n * @param currency The currency code (defaults to USD)\n * @returns Formatted currency string\n */\nexport const formatCurrency = (\n  value: number | null | undefined,\n  locale = 'en-US',\n  currency = 'USD'\n): string => {\n  if (value === null || value === undefined) return '';\n  \n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(value);\n};\n\n/**\n * Formats a number as percentage\n * @param value The number to format (0.1 = 10%)\n * @param locale The locale to use (defaults to en-US)\n * @param digits Number of decimal places (defaults to 2)\n * @returns Formatted percentage string\n */\nexport const formatPercentage = (\n  value: number | null | undefined,\n  locale = 'en-US',\n  digits = 2\n): string => {\n  if (value === null || value === undefined) return '';\n  \n  return new Intl.NumberFormat(locale, {\n    style: 'percent',\n    minimumFractionDigits: digits,\n    maximumFractionDigits: digits\n  }).format(value);\n};\n\n/**\n * Formats a number with proper thousands separators\n * @param value The number to format\n * @param locale The locale to use (defaults to en-US)\n * @param digits Number of decimal places (defaults to 0)\n * @returns Formatted number string\n */\nexport const formatNumber = (\n  value: number | null | undefined,\n  locale = 'en-US',\n  digits = 0\n): string => {\n  if (value === null || value === undefined) return '';\n  \n  return new Intl.NumberFormat(locale, {\n    minimumFractionDigits: digits,\n    maximumFractionDigits: digits\n  }).format(value);\n};\n\n/**\n * Parses a string to a number, handling various formats\n * @param value The string value to parse\n * @returns The parsed number or undefined if invalid\n */\nexport const parseNumericString = (value: string | null | undefined): number | undefined => {\n  if (!value) return undefined;\n  \n  // Remove all non-numeric characters except decimal point and minus sign\n  const normalizedValue = value\n    .replace(/[^0-9.-]/g, '')\n    .replace(/(\\..*)\\./g, '$1'); // Allow only one decimal point\n  \n  const parsedValue = parseFloat(normalizedValue);\n  \n  return isNaN(parsedValue) ? undefined : parsedValue;\n};\n\n/**\n * Converts a numeric string to a properly formatted display value\n * @param value The numeric string to format\n * @param type The type of formatting to apply\n * @param options Additional formatting options\n * @returns Formatted display value\n */\nexport const formatDisplayValue = (\n  value: string | number | null | undefined,\n  type: 'currency' | 'percentage' | 'number',\n  options?: {\n    locale?: string;\n    currency?: string;\n    digits?: number;\n  }\n): string => {\n  if (value === null || value === undefined || value === '') return '';\n  \n  const numericValue = typeof value === 'string' \n    ? parseNumericString(value) \n    : value;\n  \n  if (numericValue === undefined) return '';\n  \n  const locale = options?.locale || 'en-US';\n  \n  switch (type) {\n    case 'currency':\n      return formatCurrency(numericValue, locale, options?.currency);\n    case 'percentage':\n      return formatPercentage(numericValue, locale, options?.digits);\n    case 'number':\n      return formatNumber(numericValue, locale, options?.digits);\n    default:\n      return String(value);\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}