{"ast":null,"code":"import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from '../utils/constants/tables';\nconst CLIENTS_TABLE = TABLES.CLIENTS || 'clients';\nconst DOCUMENTS_TABLE = TABLES.DOCUMENTS || 'documents';\nconst STORAGE_BUCKET_NAME = 'crm-documents';\nconst tableExists = async () => {\n  try {\n    const {\n      count,\n      error\n    } = await supabase.from(CLIENTS_TABLE).select('*', {\n      count: 'exact',\n      head: true\n    });\n    return !error;\n  } catch (error) {\n    console.warn('Error verificando si la tabla clients existe:', error);\n    return false;\n  }\n};\nexport const getClients = async filters => {\n  try {\n    const exists = await tableExists();\n    if (!exists) {\n      console.warn('La tabla clients no existe. Retornando lista vacía.');\n      return {\n        clients: [],\n        totalCount: 0\n      };\n    }\n    let query = supabase.from(CLIENTS_TABLE).select('*', {\n      count: 'exact'\n    });\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n      if (filters.searchQuery) {\n        query = query.or(`name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);\n      }\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n    query = query.order('created_at', {\n      ascending: false\n    });\n    const {\n      data,\n      error,\n      count\n    } = await query;\n    if (error) {\n      var _error$message;\n      if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Using fallback empty list.');\n        return {\n          clients: [],\n          totalCount: 0\n        };\n      }\n      console.error('Error fetching clients:', error);\n      throw error;\n    }\n    return {\n      clients: data,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    var _error$message2, _error$message3;\n    if (error instanceof Error && ((_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes('does not exist') || (_error$message3 = error.message) !== null && _error$message3 !== void 0 && _error$message3.includes('42P01'))) {\n      console.warn('La tabla clients no existe. Retornando lista vacía.');\n      return {\n        clients: [],\n        totalCount: 0\n      };\n    }\n    console.error('Error en getClients:', error);\n    throw error;\n  }\n};\nexport const getClientById = async id => {\n  try {\n    const exists = await tableExists();\n    if (!exists) {\n      console.warn('La tabla clients no existe. Retornando cliente vacío.');\n      return null;\n    }\n    const {\n      data,\n      error\n    } = await supabase.from(CLIENTS_TABLE).select('*').eq('id', id).single();\n    if (error) {\n      var _error$message4;\n      if ((_error$message4 = error.message) !== null && _error$message4 !== void 0 && _error$message4.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Returning empty client.');\n        return null;\n      }\n      console.error(`Error fetching client with ID ${id}:`, error);\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    var _error$message5, _error$message6;\n    if (error instanceof Error && ((_error$message5 = error.message) !== null && _error$message5 !== void 0 && _error$message5.includes('does not exist') || (_error$message6 = error.message) !== null && _error$message6 !== void 0 && _error$message6.includes('42P01'))) {\n      console.warn('La tabla clients no existe. Retornando cliente vacío.');\n      return null;\n    }\n    console.error(`Error in getClientById:`, error);\n    throw error;\n  }\n};\nfunction escapeSQLString(str) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\nexport const getClientApplications = async clientId => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      if (err.message === 'Clients table does not exist') {\n        return null;\n      }\n      throw err;\n    });\n    if (!client) {\n      console.warn('Client not found or clients table does not exist. Returning empty applications list.');\n      return [];\n    }\n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name)}'\n      ORDER BY created_at DESC\n    `;\n    const executeQuery = async query => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query\n          })\n        });\n        const result = await response.json();\n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        return result.data;\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    const data = await executeQuery(query);\n    return data;\n  } catch (error) {\n    console.error(`Error fetching applications for client ${clientId}:`, error);\n    throw error;\n  }\n};\nexport const createClient = async client => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from(CLIENTS_TABLE).insert([client]).select().single();\n    if (error) {\n      var _message;\n      if ((_message = error.message) !== null && _message !== void 0 && _message.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Cannot create client.');\n        return null;\n      }\n      if (error.code === '23505') {\n        console.error('Error creating client: Duplicate value (email, rfc, or curp).', error);\n        throw new Error(`Error de duplicado: ${error.details}`);\n      }\n      console.error('Error creating client:', error);\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    var _error$message7, _error$message8;\n    if (error instanceof Error && ((_error$message7 = error.message) !== null && _error$message7 !== void 0 && _error$message7.includes('does not exist') || (_error$message8 = error.message) !== null && _error$message8 !== void 0 && _error$message8.includes('42P01'))) {\n      console.warn('La tabla clients no existe. No se puede crear el cliente.');\n      return null;\n    }\n    if (error instanceof Error && error.message.startsWith('Error de duplicado')) {\n      throw error;\n    }\n    console.error('Error in createClient:', error);\n    throw new Error('Failed to create client');\n  }\n};\nexport const updateClient = async (id, updates) => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from(CLIENTS_TABLE).update(updates).eq('id', id).select().single();\n    if (error) {\n      var _message2;\n      if ((_message2 = error.message) !== null && _message2 !== void 0 && _message2.includes('does not exist') || error.code === '42P01') {\n        console.warn(`Clients table does not exist. Cannot update client ${id}.`);\n        return null;\n      }\n      if (error.code === '23505') {\n        console.error(`Error updating client ${id}: Duplicate value.`, error);\n        throw new Error(`Error de duplicado: ${error.details}`);\n      }\n      console.error(`Error updating client with ID ${id}:`, error);\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    var _error$message9, _error$message10;\n    if (error instanceof Error && ((_error$message9 = error.message) !== null && _error$message9 !== void 0 && _error$message9.includes('does not exist') || (_error$message10 = error.message) !== null && _error$message10 !== void 0 && _error$message10.includes('42P01'))) {\n      console.warn(`La tabla clients no existe. No se puede actualizar el cliente ${id}.`);\n      return null;\n    }\n    if (error instanceof Error && error.message.startsWith('Error de duplicado')) {\n      throw error;\n    }\n    console.error(`Error in updateClient:`, error);\n    throw new Error('Failed to update client');\n  }\n};\nexport const deleteClient = async id => {\n  try {\n    const {\n      error\n    } = await supabase.from(CLIENTS_TABLE).delete().eq('id', id);\n    if (error) {\n      var _error$message11;\n      if ((_error$message11 = error.message) !== null && _error$message11 !== void 0 && _error$message11.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Cannot delete client.');\n        throw new Error('Clients table does not exist');\n      }\n      console.error(`Error deleting client with ID ${id}:`, error);\n      throw error;\n    }\n    return true;\n  } catch (error) {\n    console.error(`Error in deleteClient:`, error);\n    throw error;\n  }\n};\nexport const checkClientExists = async (email, rfc, curp) => {\n  try {\n    let query = supabase.from(CLIENTS_TABLE).select('id, email, rfc').eq('email', email);\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) {\n      var _error$message12;\n      if ((_error$message12 = error.message) !== null && _error$message12 !== void 0 && _error$message12.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Returning null.');\n        return false;\n      }\n      console.error('Error checking client existence:', error);\n      throw error;\n    }\n    return data.length > 0;\n  } catch (error) {\n    console.error('Error in checkClientExists:', error);\n    throw error;\n  }\n};\nexport const getClientCount = async filters => {\n  try {\n    let query = supabase.from(CLIENTS_TABLE).select('id', {\n      count: 'exact',\n      head: true\n    });\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n      if (filters.searchQuery) {\n        query = query.or(`name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);\n      }\n    }\n    const {\n      count,\n      error\n    } = await query;\n    if (error) {\n      var _error$message13;\n      if ((_error$message13 = error.message) !== null && _error$message13 !== void 0 && _error$message13.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Returning count 0.');\n        return 0;\n      }\n      console.error('Error getting client count:', error);\n      throw error;\n    }\n    return count || 0;\n  } catch (error) {\n    console.error('Error in getClientCount:', error);\n    return 0;\n  }\n};\nexport const getClientDocuments = async clientId => {\n  if (!clientId) {\n    console.warn('getClientDocuments: clientId is required');\n    return [];\n  }\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from(DOCUMENTS_TABLE).select('*').eq('client_id', clientId).order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      var _message3;\n      if ((_message3 = error.message) !== null && _message3 !== void 0 && _message3.includes('does not exist') || error.code === '42P01') {\n        console.warn('La tabla documents no existe. Retornando lista vacía.');\n        return [];\n      }\n      console.error(`Error fetching documents for client ${clientId}:`, error);\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    var _error$message14, _error$message15;\n    if (error instanceof Error && ((_error$message14 = error.message) !== null && _error$message14 !== void 0 && _error$message14.includes('does not exist') || (_error$message15 = error.message) !== null && _error$message15 !== void 0 && _error$message15.includes('42P01'))) {\n      console.warn('La tabla documents no existe. Retornando lista vacía.');\n      return [];\n    }\n    console.error('Error in getClientDocuments:', error);\n    throw new Error('Failed to get client documents');\n  }\n};\nexport const uploadClientDocument = async (clientId, file, category, uploadedByUserId) => {\n  if (!clientId || !file) {\n    console.error('uploadClientDocument: clientId and file are required');\n    return null;\n  }\n  const filePath = `clients/${clientId}/${Date.now()}_${file.name}`;\n  try {\n    const {\n      data: uploadData,\n      error: uploadError\n    } = await supabase.storage.from(STORAGE_BUCKET_NAME).upload(filePath, file);\n    if (uploadError) {\n      console.error('Error uploading file to Supabase Storage:', uploadError);\n      throw uploadError;\n    }\n    if (!uploadData) {\n      throw new Error('No upload data returned from Supabase Storage');\n    }\n    console.log('File uploaded successfully:', uploadData.path);\n    const documentRecord = {\n      file_name: file.name,\n      file_path: uploadData.path,\n      file_type: file.type,\n      file_size: file.size,\n      category: category,\n      client_id: clientId,\n      application_id: null,\n      uploaded_by_user_id: uploadedByUserId\n    };\n    const {\n      data: dbData,\n      error: dbError\n    } = await supabase.from(DOCUMENTS_TABLE).insert([documentRecord]).select().single();\n    if (dbError) {\n      console.error('Error creating document record in database:', dbError);\n      console.warn(`Attempting to delete orphaned file from storage: ${filePath}`);\n      await supabase.storage.from(STORAGE_BUCKET_NAME).remove([filePath]);\n      throw dbError;\n    }\n    return dbData;\n  } catch (error) {\n    console.error('Error in uploadClientDocument:', error);\n    throw new Error('Failed to upload client document');\n  }\n};\nexport const deleteClientDocument = async documentId => {\n  if (!documentId) {\n    console.error('deleteClientDocument: documentId is required');\n    return false;\n  }\n  try {\n    const {\n      data: docData,\n      error: fetchError\n    } = await supabase.from(DOCUMENTS_TABLE).select('file_path').eq('id', documentId).single();\n    if (fetchError || !docData) {\n      console.error(`Error fetching document ${documentId} for deletion:`, fetchError);\n      return false;\n    }\n    const filePath = docData.file_path;\n    const {\n      error: storageError\n    } = await supabase.storage.from(STORAGE_BUCKET_NAME).remove([filePath]);\n    if (storageError) {\n      console.warn(`Error deleting file ${filePath} from storage (might already be deleted):`, storageError);\n    } else {\n      console.log(`File ${filePath} deleted successfully from storage.`);\n    }\n    const {\n      error: dbError\n    } = await supabase.from(DOCUMENTS_TABLE).delete().eq('id', documentId);\n    if (dbError) {\n      console.error(`Error deleting document record ${documentId} from database:`, dbError);\n      throw dbError;\n    }\n    return true;\n  } catch (error) {\n    console.error('Error in deleteClientDocument:', error);\n    throw new Error('Failed to delete client document');\n  }\n};\nexport const getClientDataCompletionPercentage = client => {\n  if (!client) return 0;\n  const keyFields = ['name', 'email', 'phone', 'address', 'city', 'state', 'postal_code', 'birth_date', 'gender', 'marital_status', 'employment_type', 'employment_years', 'rfc', 'curp', 'monthly_income', 'monthly_expenses', 'bank_name', 'bank_clabe'];\n  let completedFields = 0;\n  const totalKeyFields = keyFields.length;\n  keyFields.forEach(field => {\n    if (client[field] !== null && client[field] !== undefined && client[field] !== '') {\n      completedFields++;\n    }\n  });\n  if (totalKeyFields === 0) return 100;\n  const percentage = Math.round(completedFields / totalKeyFields * 100);\n  return percentage;\n};","map":{"version":3,"names":["supabase","TABLES","CLIENTS_TABLE","CLIENTS","DOCUMENTS_TABLE","DOCUMENTS","STORAGE_BUCKET_NAME","tableExists","count","error","from","select","head","console","warn","getClients","filters","exists","clients","totalCount","query","advisor_id","eq","company_id","dateFrom","gte","dateTo","lte","searchQuery","or","page","undefined","pageSize","to","range","order","ascending","data","_error$message","message","includes","code","_error$message2","_error$message3","Error","getClientById","id","single","_error$message4","_error$message5","_error$message6","escapeSQLString","str","replace","getClientApplications","clientId","client","catch","err","APPLICATIONS","name","executeQuery","response","fetch","method","headers","body","JSON","stringify","result","json","createClient","insert","_message","details","_error$message7","_error$message8","startsWith","updateClient","updates","update","_message2","_error$message9","_error$message10","deleteClient","delete","_error$message11","checkClientExists","email","rfc","curp","_error$message12","length","getClientCount","_error$message13","getClientDocuments","_message3","_error$message14","_error$message15","uploadClientDocument","file","category","uploadedByUserId","filePath","Date","now","uploadData","uploadError","storage","upload","log","path","documentRecord","file_name","file_path","file_type","type","file_size","size","client_id","application_id","uploaded_by_user_id","dbData","dbError","remove","deleteClientDocument","documentId","docData","fetchError","storageError","getClientDataCompletionPercentage","keyFields","completedFields","totalKeyFields","forEach","field","percentage","Math","round"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/clientService.ts"],"sourcesContent":["import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from '../utils/constants/tables';\nimport { PostgrestError } from '@supabase/supabase-js';\n\nexport interface Client {\n  id: string;\n  created_at: string;\n  name: string;\n  email?: string | null;\n  phone?: string | null;\n  address?: string | null;\n  city?: string | null;\n  state?: string | null;\n  postal_code?: string | null;\n  birth_date?: string | null;\n  gender?: string | null;\n  marital_status?: string | null;\n  employment_type?: string | null;\n  employment_years?: number | null;\n  rfc?: string | null;\n  curp?: string | null;\n  monthly_income?: number | null;\n  additional_income?: number | null;\n  monthly_expenses?: number | null;\n  other_loan_balances?: number | null;\n  bank_name?: string | null;\n  bank_clabe?: string | null;\n  bank_account_number?: string | null;\n  bank_account_type?: string | null;\n  bank_account_origin?: string | null;\n  company_id?: string | null;\n  advisor_id?: string | null;\n}\n\nexport interface ClientDocument {\n  id: string;\n  created_at: string;\n  file_name: string;\n  file_path: string;\n  file_type?: string | null;\n  file_size?: number | null;\n  category?: string | null;\n  application_id?: string | null;\n  client_id: string;\n  uploaded_by_user_id?: string | null;\n}\n\nexport interface ClientFilter {\n  searchQuery?: string;\n  advisor_id?: string;\n  company_id?: string;\n  dateFrom?: string;\n  dateTo?: string;\n  page?: number;\n  pageSize?: number;\n}\n\nconst CLIENTS_TABLE = TABLES.CLIENTS || 'clients';\nconst DOCUMENTS_TABLE = TABLES.DOCUMENTS || 'documents';\nconst STORAGE_BUCKET_NAME = 'crm-documents';\n\nconst tableExists = async () => {\n  try {\n    const { count, error } = await supabase\n      .from(CLIENTS_TABLE)\n      .select('*', { count: 'exact', head: true });\n    \n    return !error;\n  } catch (error) {\n    console.warn('Error verificando si la tabla clients existe:', error);\n    return false;\n  }\n};\n\nexport const getClients = async (filters?: ClientFilter): Promise<{ clients: Client[], totalCount: number }> => {\n  try {\n    const exists = await tableExists();\n    if (!exists) {\n      console.warn('La tabla clients no existe. Retornando lista vacía.');\n      return { clients: [], totalCount: 0 };\n    }\n\n    let query = supabase.from(CLIENTS_TABLE).select('*', { count: 'exact' });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n\n    query = query.order('created_at', { ascending: false });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Using fallback empty list.');\n        return {\n          clients: [],\n          totalCount: 0\n        };\n      }\n      \n      console.error('Error fetching clients:', error);\n      throw error;\n    }\n\n    return {\n      clients: data as Client[],\n      totalCount: count || 0\n    };\n  } catch (error) {\n    if (error instanceof Error && (\n        error.message?.includes('does not exist') || \n        error.message?.includes('42P01'))) {\n      console.warn('La tabla clients no existe. Retornando lista vacía.');\n      return { clients: [], totalCount: 0 };\n    }\n    \n    console.error('Error en getClients:', error);\n    throw error;\n  }\n};\n\nexport const getClientById = async (id: string): Promise<Client | null> => {\n  try {\n    const exists = await tableExists();\n    if (!exists) {\n      console.warn('La tabla clients no existe. Retornando cliente vacío.');\n      return null;\n    }\n\n    const { data, error } = await supabase\n      .from(CLIENTS_TABLE)\n      .select('*')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Returning empty client.');\n        return null;\n      }\n      \n      console.error(`Error fetching client with ID ${id}:`, error);\n      throw error;\n    }\n\n    return data as Client;\n  } catch (error) {\n    if (error instanceof Error && (\n        error.message?.includes('does not exist') || \n        error.message?.includes('42P01'))) {\n      console.warn('La tabla clients no existe. Retornando cliente vacío.');\n      return null;\n    }\n    \n    console.error(`Error in getClientById:`, error);\n    throw error;\n  }\n};\n\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\nexport const getClientApplications = async (clientId: string): Promise<any[]> => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      if (err.message === 'Clients table does not exist') {\n        return null;\n      }\n      throw err;\n    });\n    \n    if (!client) {\n      console.warn('Client not found or clients table does not exist. Returning empty applications list.');\n      return [];\n    }\n    \n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name)}'\n      ORDER BY created_at DESC\n    `;\n    \n    const executeQuery = async (query: string) => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query }),\n        });\n        \n        const result = await response.json();\n        \n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        \n        return result.data;\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    \n    const data = await executeQuery(query);\n    return data;\n  } catch (error) {\n    console.error(`Error fetching applications for client ${clientId}:`, error);\n    throw error;\n  }\n};\n\nexport const createClient = async (client: Omit<Client, 'id' | 'created_at'>): Promise<Client | null> => {\n  try {\n    const { data, error } = await supabase\n      .from(CLIENTS_TABLE)\n      .insert([client])\n      .select()\n      .single();\n\n    if (error) {\n      if ((error as PostgrestError).message?.includes('does not exist') || (error as PostgrestError).code === '42P01') {\n        console.warn('Clients table does not exist. Cannot create client.');\n        return null;\n      }\n      if ((error as PostgrestError).code === '23505') {\n         console.error('Error creating client: Duplicate value (email, rfc, or curp).', error);\n         throw new Error(`Error de duplicado: ${ (error as PostgrestError).details }`);\n      }\n      console.error('Error creating client:', error);\n      throw error;\n    }\n\n    return data as Client;\n  } catch (error) {\n    if (error instanceof Error && (\n        error.message?.includes('does not exist') ||\n        error.message?.includes('42P01'))) {\n      console.warn('La tabla clients no existe. No se puede crear el cliente.');\n      return null;\n    }\n    if (error instanceof Error && error.message.startsWith('Error de duplicado')) {\n        throw error;\n    }\n    console.error('Error in createClient:', error);\n    throw new Error('Failed to create client');\n  }\n};\n\nexport const updateClient = async (id: string, updates: Partial<Client>): Promise<Client | null> => {\n  try {\n    const { data, error } = await supabase\n      .from(CLIENTS_TABLE)\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) {\n      if ((error as PostgrestError).message?.includes('does not exist') || (error as PostgrestError).code === '42P01') {\n        console.warn(`Clients table does not exist. Cannot update client ${id}.`);\n        return null;\n      }\n      if ((error as PostgrestError).code === '23505') {\n         console.error(`Error updating client ${id}: Duplicate value.`, error);\n         throw new Error(`Error de duplicado: ${ (error as PostgrestError).details }`);\n      }\n      console.error(`Error updating client with ID ${id}:`, error);\n      throw error;\n    }\n\n    return data as Client;\n  } catch (error) {\n    if (error instanceof Error && (\n        error.message?.includes('does not exist') ||\n        error.message?.includes('42P01'))) {\n      console.warn(`La tabla clients no existe. No se puede actualizar el cliente ${id}.`);\n      return null;\n    }\n    if (error instanceof Error && error.message.startsWith('Error de duplicado')) {\n        throw error;\n    }\n    console.error(`Error in updateClient:`, error);\n    throw new Error('Failed to update client');\n  }\n};\n\nexport const deleteClient = async (id: string): Promise<boolean> => {\n  try {\n    const { error } = await supabase\n      .from(CLIENTS_TABLE)\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Cannot delete client.');\n        throw new Error('Clients table does not exist');\n      }\n      \n      console.error(`Error deleting client with ID ${id}:`, error);\n      throw error;\n    }\n\n    return true;\n  } catch (error) {\n    console.error(`Error in deleteClient:`, error);\n    throw error;\n  }\n};\n\nexport const checkClientExists = async (email?: string | null, rfc?: string | null, curp?: string | null): Promise<boolean> => {\n  try {\n    let query = supabase\n      .from(CLIENTS_TABLE)\n      .select('id, email, rfc')\n      .eq('email', email);\n\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Returning null.');\n        return false;\n      }\n      \n      console.error('Error checking client existence:', error);\n      throw error;\n    }\n\n    return data.length > 0;\n  } catch (error) {\n    console.error('Error in checkClientExists:', error);\n    throw error;\n  }\n};\n\nexport const getClientCount = async (filters?: ClientFilter): Promise<number> => {\n  try {\n    let query = supabase\n      .from(CLIENTS_TABLE)\n      .select('id', { count: 'exact', head: true });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n    }\n\n    const { count, error } = await query;\n\n    if (error) {\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Returning count 0.');\n        return 0;\n      }\n      \n      console.error('Error getting client count:', error);\n      throw error;\n    }\n\n    return count || 0;\n  } catch (error) {\n    console.error('Error in getClientCount:', error);\n    return 0;\n  }\n};\n\nexport const getClientDocuments = async (clientId: string): Promise<ClientDocument[]> => {\n  if (!clientId) {\n    console.warn('getClientDocuments: clientId is required');\n    return [];\n  }\n  try {\n    const { data, error } = await supabase\n      .from(DOCUMENTS_TABLE)\n      .select('*')\n      .eq('client_id', clientId)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      if ((error as PostgrestError).message?.includes('does not exist') || (error as PostgrestError).code === '42P01') {\n        console.warn('La tabla documents no existe. Retornando lista vacía.');\n        return [];\n      }\n      console.error(`Error fetching documents for client ${clientId}:`, error);\n      throw error;\n    }\n\n    return data as ClientDocument[];\n  } catch (error) {\n    if (error instanceof Error && (\n        error.message?.includes('does not exist') ||\n        error.message?.includes('42P01'))) {\n      console.warn('La tabla documents no existe. Retornando lista vacía.');\n      return [];\n    }\n    console.error('Error in getClientDocuments:', error);\n    throw new Error('Failed to get client documents');\n  }\n};\n\nexport const uploadClientDocument = async (\n  clientId: string,\n  file: File,\n  category?: string,\n  uploadedByUserId?: string\n): Promise<ClientDocument | null> => {\n  if (!clientId || !file) {\n    console.error('uploadClientDocument: clientId and file are required');\n    return null;\n  }\n\n  const filePath = `clients/${clientId}/${Date.now()}_${file.name}`;\n\n  try {\n    const { data: uploadData, error: uploadError } = await supabase.storage\n      .from(STORAGE_BUCKET_NAME)\n      .upload(filePath, file);\n\n    if (uploadError) {\n      console.error('Error uploading file to Supabase Storage:', uploadError);\n      throw uploadError;\n    }\n\n    if (!uploadData) {\n        throw new Error('No upload data returned from Supabase Storage');\n    }\n\n    console.log('File uploaded successfully:', uploadData.path);\n\n    const documentRecord: Omit<ClientDocument, 'id' | 'created_at'> = {\n      file_name: file.name,\n      file_path: uploadData.path,\n      file_type: file.type,\n      file_size: file.size,\n      category: category,\n      client_id: clientId,\n      application_id: null,\n      uploaded_by_user_id: uploadedByUserId,\n    };\n\n    const { data: dbData, error: dbError } = await supabase\n      .from(DOCUMENTS_TABLE)\n      .insert([documentRecord])\n      .select()\n      .single();\n\n    if (dbError) {\n      console.error('Error creating document record in database:', dbError);\n      console.warn(`Attempting to delete orphaned file from storage: ${filePath}`);\n      await supabase.storage.from(STORAGE_BUCKET_NAME).remove([filePath]);\n      throw dbError;\n    }\n\n    return dbData as ClientDocument;\n\n  } catch (error) {\n    console.error('Error in uploadClientDocument:', error);\n    throw new Error('Failed to upload client document');\n  }\n};\n\nexport const deleteClientDocument = async (documentId: string): Promise<boolean> => {\n  if (!documentId) {\n    console.error('deleteClientDocument: documentId is required');\n    return false;\n  }\n\n  try {\n    const { data: docData, error: fetchError } = await supabase\n      .from(DOCUMENTS_TABLE)\n      .select('file_path')\n      .eq('id', documentId)\n      .single();\n\n    if (fetchError || !docData) {\n      console.error(`Error fetching document ${documentId} for deletion:`, fetchError);\n      return false;\n    }\n\n    const filePath = docData.file_path;\n\n    const { error: storageError } = await supabase.storage\n      .from(STORAGE_BUCKET_NAME)\n      .remove([filePath]);\n\n    if (storageError) {\n      console.warn(`Error deleting file ${filePath} from storage (might already be deleted):`, storageError);\n    } else {\n        console.log(`File ${filePath} deleted successfully from storage.`);\n    }\n\n    const { error: dbError } = await supabase\n      .from(DOCUMENTS_TABLE)\n      .delete()\n      .eq('id', documentId);\n\n    if (dbError) {\n      console.error(`Error deleting document record ${documentId} from database:`, dbError);\n      throw dbError;\n    }\n\n    return true;\n\n  } catch (error) {\n    console.error('Error in deleteClientDocument:', error);\n    throw new Error('Failed to delete client document');\n  }\n};\n\nexport const getClientDataCompletionPercentage = (client: Client | null): number => {\n  if (!client) return 0;\n\n  const keyFields: (keyof Client)[] = [\n    'name', 'email', 'phone', 'address', 'city', 'state',\n    'postal_code', 'birth_date', 'gender', 'marital_status',\n    'employment_type', 'employment_years', 'rfc', 'curp',\n    'monthly_income',\n    'monthly_expenses',\n    'bank_name', 'bank_clabe',\n  ];\n\n  let completedFields = 0;\n  const totalKeyFields = keyFields.length;\n\n  keyFields.forEach(field => {\n    if (client[field] !== null && client[field] !== undefined && client[field] !== '') {\n      completedFields++;\n    }\n  });\n\n  if (totalKeyFields === 0) return 100;\n\n  const percentage = Math.round((completedFields / totalKeyFields) * 100);\n  return percentage;\n}; "],"mappings":"AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,MAAM,QAAQ,2BAA2B;AAwDlD,MAAMC,aAAa,GAAGD,MAAM,CAACE,OAAO,IAAI,SAAS;AACjD,MAAMC,eAAe,GAAGH,MAAM,CAACI,SAAS,IAAI,WAAW;AACvD,MAAMC,mBAAmB,GAAG,eAAe;AAE3C,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9B,IAAI;IACF,MAAM;MAAEC,KAAK;MAAEC;IAAM,CAAC,GAAG,MAAMT,QAAQ,CACpCU,IAAI,CAACR,aAAa,CAAC,CACnBS,MAAM,CAAC,GAAG,EAAE;MAAEH,KAAK,EAAE,OAAO;MAAEI,IAAI,EAAE;IAAK,CAAC,CAAC;IAE9C,OAAO,CAACH,KAAK;EACf,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdI,OAAO,CAACC,IAAI,CAAC,+CAA+C,EAAEL,KAAK,CAAC;IACpE,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,MAAMM,UAAU,GAAG,MAAOC,OAAsB,IAAyD;EAC9G,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMV,WAAW,CAAC,CAAC;IAClC,IAAI,CAACU,MAAM,EAAE;MACXJ,OAAO,CAACC,IAAI,CAAC,qDAAqD,CAAC;MACnE,OAAO;QAAEI,OAAO,EAAE,EAAE;QAAEC,UAAU,EAAE;MAAE,CAAC;IACvC;IAEA,IAAIC,KAAK,GAAGpB,QAAQ,CAACU,IAAI,CAACR,aAAa,CAAC,CAACS,MAAM,CAAC,GAAG,EAAE;MAAEH,KAAK,EAAE;IAAQ,CAAC,CAAC;IAExE,IAAIQ,OAAO,EAAE;MACX,IAAIA,OAAO,CAACK,UAAU,EAAE;QACtBD,KAAK,GAAGA,KAAK,CAACE,EAAE,CAAC,YAAY,EAAEN,OAAO,CAACK,UAAU,CAAC;MACpD;MAEA,IAAIL,OAAO,CAACO,UAAU,EAAE;QACtBH,KAAK,GAAGA,KAAK,CAACE,EAAE,CAAC,YAAY,EAAEN,OAAO,CAACO,UAAU,CAAC;MACpD;MAEA,IAAIP,OAAO,CAACQ,QAAQ,EAAE;QACpBJ,KAAK,GAAGA,KAAK,CAACK,GAAG,CAAC,YAAY,EAAET,OAAO,CAACQ,QAAQ,CAAC;MACnD;MAEA,IAAIR,OAAO,CAACU,MAAM,EAAE;QAClBN,KAAK,GAAGA,KAAK,CAACO,GAAG,CAAC,YAAY,EAAEX,OAAO,CAACU,MAAM,CAAC;MACjD;MAEA,IAAIV,OAAO,CAACY,WAAW,EAAE;QACvBR,KAAK,GAAGA,KAAK,CAACS,EAAE,CACd,eAAeb,OAAO,CAACY,WAAW,kBAAkBZ,OAAO,CAACY,WAAW,kBAAkBZ,OAAO,CAACY,WAAW,gBAAgBZ,OAAO,CAACY,WAAW,iBAAiBZ,OAAO,CAACY,WAAW,GACrL,CAAC;MACH;MAEA,IAAIZ,OAAO,CAACc,IAAI,KAAKC,SAAS,IAAIf,OAAO,CAACgB,QAAQ,EAAE;QAClD,MAAMtB,IAAI,GAAGM,OAAO,CAACc,IAAI,GAAGd,OAAO,CAACgB,QAAQ;QAC5C,MAAMC,EAAE,GAAGvB,IAAI,GAAGM,OAAO,CAACgB,QAAQ,GAAG,CAAC;QACtCZ,KAAK,GAAGA,KAAK,CAACc,KAAK,CAACxB,IAAI,EAAEuB,EAAE,CAAC;MAC/B;IACF;IAEAb,KAAK,GAAGA,KAAK,CAACe,KAAK,CAAC,YAAY,EAAE;MAAEC,SAAS,EAAE;IAAM,CAAC,CAAC;IAEvD,MAAM;MAAEC,IAAI;MAAE5B,KAAK;MAAED;IAAM,CAAC,GAAG,MAAMY,KAAK;IAE1C,IAAIX,KAAK,EAAE;MAAA,IAAA6B,cAAA;MACT,IAAI,CAAAA,cAAA,GAAA7B,KAAK,CAAC8B,OAAO,cAAAD,cAAA,eAAbA,cAAA,CAAeE,QAAQ,CAAC,gBAAgB,CAAC,IAAI/B,KAAK,CAACgC,IAAI,KAAK,OAAO,EAAE;QACvE5B,OAAO,CAACC,IAAI,CAAC,0DAA0D,CAAC;QACxE,OAAO;UACLI,OAAO,EAAE,EAAE;UACXC,UAAU,EAAE;QACd,CAAC;MACH;MAEAN,OAAO,CAACJ,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;IAEA,OAAO;MACLS,OAAO,EAAEmB,IAAgB;MACzBlB,UAAU,EAAEX,KAAK,IAAI;IACvB,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAiC,eAAA,EAAAC,eAAA;IACd,IAAIlC,KAAK,YAAYmC,KAAK,KACtB,CAAAF,eAAA,GAAAjC,KAAK,CAAC8B,OAAO,cAAAG,eAAA,eAAbA,eAAA,CAAeF,QAAQ,CAAC,gBAAgB,CAAC,KAAAG,eAAA,GACzClC,KAAK,CAAC8B,OAAO,cAAAI,eAAA,eAAbA,eAAA,CAAeH,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE;MACrC3B,OAAO,CAACC,IAAI,CAAC,qDAAqD,CAAC;MACnE,OAAO;QAAEI,OAAO,EAAE,EAAE;QAAEC,UAAU,EAAE;MAAE,CAAC;IACvC;IAEAN,OAAO,CAACJ,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMoC,aAAa,GAAG,MAAOC,EAAU,IAA6B;EACzE,IAAI;IACF,MAAM7B,MAAM,GAAG,MAAMV,WAAW,CAAC,CAAC;IAClC,IAAI,CAACU,MAAM,EAAE;MACXJ,OAAO,CAACC,IAAI,CAAC,uDAAuD,CAAC;MACrE,OAAO,IAAI;IACb;IAEA,MAAM;MAAEuB,IAAI;MAAE5B;IAAM,CAAC,GAAG,MAAMT,QAAQ,CACnCU,IAAI,CAACR,aAAa,CAAC,CACnBS,MAAM,CAAC,GAAG,CAAC,CACXW,EAAE,CAAC,IAAI,EAAEwB,EAAE,CAAC,CACZC,MAAM,CAAC,CAAC;IAEX,IAAItC,KAAK,EAAE;MAAA,IAAAuC,eAAA;MACT,IAAI,CAAAA,eAAA,GAAAvC,KAAK,CAAC8B,OAAO,cAAAS,eAAA,eAAbA,eAAA,CAAeR,QAAQ,CAAC,gBAAgB,CAAC,IAAI/B,KAAK,CAACgC,IAAI,KAAK,OAAO,EAAE;QACvE5B,OAAO,CAACC,IAAI,CAAC,uDAAuD,CAAC;QACrE,OAAO,IAAI;MACb;MAEAD,OAAO,CAACJ,KAAK,CAAC,iCAAiCqC,EAAE,GAAG,EAAErC,KAAK,CAAC;MAC5D,MAAMA,KAAK;IACb;IAEA,OAAO4B,IAAI;EACb,CAAC,CAAC,OAAO5B,KAAK,EAAE;IAAA,IAAAwC,eAAA,EAAAC,eAAA;IACd,IAAIzC,KAAK,YAAYmC,KAAK,KACtB,CAAAK,eAAA,GAAAxC,KAAK,CAAC8B,OAAO,cAAAU,eAAA,eAAbA,eAAA,CAAeT,QAAQ,CAAC,gBAAgB,CAAC,KAAAU,eAAA,GACzCzC,KAAK,CAAC8B,OAAO,cAAAW,eAAA,eAAbA,eAAA,CAAeV,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE;MACrC3B,OAAO,CAACC,IAAI,CAAC,uDAAuD,CAAC;MACrE,OAAO,IAAI;IACb;IAEAD,OAAO,CAACJ,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,SAAS0C,eAAeA,CAACC,GAAW,EAAE;EACpC,IAAI,CAACA,GAAG,EAAE,OAAO,EAAE;EACnB,OAAOA,GAAG,CAACC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;AAChC;AAEA,OAAO,MAAMC,qBAAqB,GAAG,MAAOC,QAAgB,IAAqB;EAC/E,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMX,aAAa,CAACU,QAAQ,CAAC,CAACE,KAAK,CAACC,GAAG,IAAI;MACxD,IAAIA,GAAG,CAACnB,OAAO,KAAK,8BAA8B,EAAE;QAClD,OAAO,IAAI;MACb;MACA,MAAMmB,GAAG;IACX,CAAC,CAAC;IAEF,IAAI,CAACF,MAAM,EAAE;MACX3C,OAAO,CAACC,IAAI,CAAC,sFAAsF,CAAC;MACpG,OAAO,EAAE;IACX;IAEA,MAAMM,KAAK,GAAG;AAClB,sBAAsBnB,MAAM,CAAC0D,YAAY;AACzC,6BAA6BR,eAAe,CAACK,MAAM,CAACI,IAAI,CAAC;AACzD;AACA,KAAK;IAED,MAAMC,YAAY,GAAG,MAAOzC,KAAa,IAAK;MAC5C,IAAI;QACF,MAAM0C,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;UAC1DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEhD;UAAM,CAAC;QAChC,CAAC,CAAC;QAEF,MAAMiD,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAEpC,IAAID,MAAM,CAAC5D,KAAK,EAAE;UAChBI,OAAO,CAACJ,KAAK,CAAC,2BAA2B,EAAE4D,MAAM,CAAC5D,KAAK,CAAC;UACxD,MAAM,IAAImC,KAAK,CAACyB,MAAM,CAAC5D,KAAK,CAAC;QAC/B;QAEA,OAAO4D,MAAM,CAAChC,IAAI;MACpB,CAAC,CAAC,OAAO5B,KAAK,EAAE;QACdI,OAAO,CAACJ,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD,MAAMA,KAAK;MACb;IACF,CAAC;IAED,MAAM4B,IAAI,GAAG,MAAMwB,YAAY,CAACzC,KAAK,CAAC;IACtC,OAAOiB,IAAI;EACb,CAAC,CAAC,OAAO5B,KAAK,EAAE;IACdI,OAAO,CAACJ,KAAK,CAAC,0CAA0C8C,QAAQ,GAAG,EAAE9C,KAAK,CAAC;IAC3E,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAM8D,YAAY,GAAG,MAAOf,MAAyC,IAA6B;EACvG,IAAI;IACF,MAAM;MAAEnB,IAAI;MAAE5B;IAAM,CAAC,GAAG,MAAMT,QAAQ,CACnCU,IAAI,CAACR,aAAa,CAAC,CACnBsE,MAAM,CAAC,CAAChB,MAAM,CAAC,CAAC,CAChB7C,MAAM,CAAC,CAAC,CACRoC,MAAM,CAAC,CAAC;IAEX,IAAItC,KAAK,EAAE;MAAA,IAAAgE,QAAA;MACT,IAAI,CAAAA,QAAA,GAAChE,KAAK,CAAoB8B,OAAO,cAAAkC,QAAA,eAAjCA,QAAA,CAAmCjC,QAAQ,CAAC,gBAAgB,CAAC,IAAK/B,KAAK,CAAoBgC,IAAI,KAAK,OAAO,EAAE;QAC/G5B,OAAO,CAACC,IAAI,CAAC,qDAAqD,CAAC;QACnE,OAAO,IAAI;MACb;MACA,IAAKL,KAAK,CAAoBgC,IAAI,KAAK,OAAO,EAAE;QAC7C5B,OAAO,CAACJ,KAAK,CAAC,+DAA+D,EAAEA,KAAK,CAAC;QACrF,MAAM,IAAImC,KAAK,CAAC,uBAAyBnC,KAAK,CAAoBiE,OAAO,EAAG,CAAC;MAChF;MACA7D,OAAO,CAACJ,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;IAEA,OAAO4B,IAAI;EACb,CAAC,CAAC,OAAO5B,KAAK,EAAE;IAAA,IAAAkE,eAAA,EAAAC,eAAA;IACd,IAAInE,KAAK,YAAYmC,KAAK,KACtB,CAAA+B,eAAA,GAAAlE,KAAK,CAAC8B,OAAO,cAAAoC,eAAA,eAAbA,eAAA,CAAenC,QAAQ,CAAC,gBAAgB,CAAC,KAAAoC,eAAA,GACzCnE,KAAK,CAAC8B,OAAO,cAAAqC,eAAA,eAAbA,eAAA,CAAepC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE;MACrC3B,OAAO,CAACC,IAAI,CAAC,2DAA2D,CAAC;MACzE,OAAO,IAAI;IACb;IACA,IAAIL,KAAK,YAAYmC,KAAK,IAAInC,KAAK,CAAC8B,OAAO,CAACsC,UAAU,CAAC,oBAAoB,CAAC,EAAE;MAC1E,MAAMpE,KAAK;IACf;IACAI,OAAO,CAACJ,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAM,IAAImC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;AACF,CAAC;AAED,OAAO,MAAMkC,YAAY,GAAG,MAAAA,CAAOhC,EAAU,EAAEiC,OAAwB,KAA6B;EAClG,IAAI;IACF,MAAM;MAAE1C,IAAI;MAAE5B;IAAM,CAAC,GAAG,MAAMT,QAAQ,CACnCU,IAAI,CAACR,aAAa,CAAC,CACnB8E,MAAM,CAACD,OAAO,CAAC,CACfzD,EAAE,CAAC,IAAI,EAAEwB,EAAE,CAAC,CACZnC,MAAM,CAAC,CAAC,CACRoC,MAAM,CAAC,CAAC;IAEX,IAAItC,KAAK,EAAE;MAAA,IAAAwE,SAAA;MACT,IAAI,CAAAA,SAAA,GAACxE,KAAK,CAAoB8B,OAAO,cAAA0C,SAAA,eAAjCA,SAAA,CAAmCzC,QAAQ,CAAC,gBAAgB,CAAC,IAAK/B,KAAK,CAAoBgC,IAAI,KAAK,OAAO,EAAE;QAC/G5B,OAAO,CAACC,IAAI,CAAC,sDAAsDgC,EAAE,GAAG,CAAC;QACzE,OAAO,IAAI;MACb;MACA,IAAKrC,KAAK,CAAoBgC,IAAI,KAAK,OAAO,EAAE;QAC7C5B,OAAO,CAACJ,KAAK,CAAC,yBAAyBqC,EAAE,oBAAoB,EAAErC,KAAK,CAAC;QACrE,MAAM,IAAImC,KAAK,CAAC,uBAAyBnC,KAAK,CAAoBiE,OAAO,EAAG,CAAC;MAChF;MACA7D,OAAO,CAACJ,KAAK,CAAC,iCAAiCqC,EAAE,GAAG,EAAErC,KAAK,CAAC;MAC5D,MAAMA,KAAK;IACb;IAEA,OAAO4B,IAAI;EACb,CAAC,CAAC,OAAO5B,KAAK,EAAE;IAAA,IAAAyE,eAAA,EAAAC,gBAAA;IACd,IAAI1E,KAAK,YAAYmC,KAAK,KACtB,CAAAsC,eAAA,GAAAzE,KAAK,CAAC8B,OAAO,cAAA2C,eAAA,eAAbA,eAAA,CAAe1C,QAAQ,CAAC,gBAAgB,CAAC,KAAA2C,gBAAA,GACzC1E,KAAK,CAAC8B,OAAO,cAAA4C,gBAAA,eAAbA,gBAAA,CAAe3C,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE;MACrC3B,OAAO,CAACC,IAAI,CAAC,iEAAiEgC,EAAE,GAAG,CAAC;MACpF,OAAO,IAAI;IACb;IACA,IAAIrC,KAAK,YAAYmC,KAAK,IAAInC,KAAK,CAAC8B,OAAO,CAACsC,UAAU,CAAC,oBAAoB,CAAC,EAAE;MAC1E,MAAMpE,KAAK;IACf;IACAI,OAAO,CAACJ,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAM,IAAImC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;AACF,CAAC;AAED,OAAO,MAAMwC,YAAY,GAAG,MAAOtC,EAAU,IAAuB;EAClE,IAAI;IACF,MAAM;MAAErC;IAAM,CAAC,GAAG,MAAMT,QAAQ,CAC7BU,IAAI,CAACR,aAAa,CAAC,CACnBmF,MAAM,CAAC,CAAC,CACR/D,EAAE,CAAC,IAAI,EAAEwB,EAAE,CAAC;IAEf,IAAIrC,KAAK,EAAE;MAAA,IAAA6E,gBAAA;MACT,IAAI,CAAAA,gBAAA,GAAA7E,KAAK,CAAC8B,OAAO,cAAA+C,gBAAA,eAAbA,gBAAA,CAAe9C,QAAQ,CAAC,gBAAgB,CAAC,IAAI/B,KAAK,CAACgC,IAAI,KAAK,OAAO,EAAE;QACvE5B,OAAO,CAACC,IAAI,CAAC,qDAAqD,CAAC;QACnE,MAAM,IAAI8B,KAAK,CAAC,8BAA8B,CAAC;MACjD;MAEA/B,OAAO,CAACJ,KAAK,CAAC,iCAAiCqC,EAAE,GAAG,EAAErC,KAAK,CAAC;MAC5D,MAAMA,KAAK;IACb;IAEA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdI,OAAO,CAACJ,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAM8E,iBAAiB,GAAG,MAAAA,CAAOC,KAAqB,EAAEC,GAAmB,EAAEC,IAAoB,KAAuB;EAC7H,IAAI;IACF,IAAItE,KAAK,GAAGpB,QAAQ,CACjBU,IAAI,CAACR,aAAa,CAAC,CACnBS,MAAM,CAAC,gBAAgB,CAAC,CACxBW,EAAE,CAAC,OAAO,EAAEkE,KAAK,CAAC;IAErB,IAAIC,GAAG,EAAE;MACPrE,KAAK,GAAGA,KAAK,CAACS,EAAE,CAAC,UAAU4D,GAAG,EAAE,CAAC;IACnC;IAEA,MAAM;MAAEpD,IAAI;MAAE5B;IAAM,CAAC,GAAG,MAAMW,KAAK;IAEnC,IAAIX,KAAK,EAAE;MAAA,IAAAkF,gBAAA;MACT,IAAI,CAAAA,gBAAA,GAAAlF,KAAK,CAAC8B,OAAO,cAAAoD,gBAAA,eAAbA,gBAAA,CAAenD,QAAQ,CAAC,gBAAgB,CAAC,IAAI/B,KAAK,CAACgC,IAAI,KAAK,OAAO,EAAE;QACvE5B,OAAO,CAACC,IAAI,CAAC,+CAA+C,CAAC;QAC7D,OAAO,KAAK;MACd;MAEAD,OAAO,CAACJ,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAMA,KAAK;IACb;IAEA,OAAO4B,IAAI,CAACuD,MAAM,GAAG,CAAC;EACxB,CAAC,CAAC,OAAOnF,KAAK,EAAE;IACdI,OAAO,CAACJ,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMoF,cAAc,GAAG,MAAO7E,OAAsB,IAAsB;EAC/E,IAAI;IACF,IAAII,KAAK,GAAGpB,QAAQ,CACjBU,IAAI,CAACR,aAAa,CAAC,CACnBS,MAAM,CAAC,IAAI,EAAE;MAAEH,KAAK,EAAE,OAAO;MAAEI,IAAI,EAAE;IAAK,CAAC,CAAC;IAE/C,IAAII,OAAO,EAAE;MACX,IAAIA,OAAO,CAACK,UAAU,EAAE;QACtBD,KAAK,GAAGA,KAAK,CAACE,EAAE,CAAC,YAAY,EAAEN,OAAO,CAACK,UAAU,CAAC;MACpD;MAEA,IAAIL,OAAO,CAACO,UAAU,EAAE;QACtBH,KAAK,GAAGA,KAAK,CAACE,EAAE,CAAC,YAAY,EAAEN,OAAO,CAACO,UAAU,CAAC;MACpD;MAEA,IAAIP,OAAO,CAACQ,QAAQ,EAAE;QACpBJ,KAAK,GAAGA,KAAK,CAACK,GAAG,CAAC,YAAY,EAAET,OAAO,CAACQ,QAAQ,CAAC;MACnD;MAEA,IAAIR,OAAO,CAACU,MAAM,EAAE;QAClBN,KAAK,GAAGA,KAAK,CAACO,GAAG,CAAC,YAAY,EAAEX,OAAO,CAACU,MAAM,CAAC;MACjD;MAEA,IAAIV,OAAO,CAACY,WAAW,EAAE;QACvBR,KAAK,GAAGA,KAAK,CAACS,EAAE,CACd,eAAeb,OAAO,CAACY,WAAW,kBAAkBZ,OAAO,CAACY,WAAW,kBAAkBZ,OAAO,CAACY,WAAW,gBAAgBZ,OAAO,CAACY,WAAW,iBAAiBZ,OAAO,CAACY,WAAW,GACrL,CAAC;MACH;IACF;IAEA,MAAM;MAAEpB,KAAK;MAAEC;IAAM,CAAC,GAAG,MAAMW,KAAK;IAEpC,IAAIX,KAAK,EAAE;MAAA,IAAAqF,gBAAA;MACT,IAAI,CAAAA,gBAAA,GAAArF,KAAK,CAAC8B,OAAO,cAAAuD,gBAAA,eAAbA,gBAAA,CAAetD,QAAQ,CAAC,gBAAgB,CAAC,IAAI/B,KAAK,CAACgC,IAAI,KAAK,OAAO,EAAE;QACvE5B,OAAO,CAACC,IAAI,CAAC,kDAAkD,CAAC;QAChE,OAAO,CAAC;MACV;MAEAD,OAAO,CAACJ,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;IAEA,OAAOD,KAAK,IAAI,CAAC;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdI,OAAO,CAACJ,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,CAAC;EACV;AACF,CAAC;AAED,OAAO,MAAMsF,kBAAkB,GAAG,MAAOxC,QAAgB,IAAgC;EACvF,IAAI,CAACA,QAAQ,EAAE;IACb1C,OAAO,CAACC,IAAI,CAAC,0CAA0C,CAAC;IACxD,OAAO,EAAE;EACX;EACA,IAAI;IACF,MAAM;MAAEuB,IAAI;MAAE5B;IAAM,CAAC,GAAG,MAAMT,QAAQ,CACnCU,IAAI,CAACN,eAAe,CAAC,CACrBO,MAAM,CAAC,GAAG,CAAC,CACXW,EAAE,CAAC,WAAW,EAAEiC,QAAQ,CAAC,CACzBpB,KAAK,CAAC,YAAY,EAAE;MAAEC,SAAS,EAAE;IAAM,CAAC,CAAC;IAE5C,IAAI3B,KAAK,EAAE;MAAA,IAAAuF,SAAA;MACT,IAAI,CAAAA,SAAA,GAACvF,KAAK,CAAoB8B,OAAO,cAAAyD,SAAA,eAAjCA,SAAA,CAAmCxD,QAAQ,CAAC,gBAAgB,CAAC,IAAK/B,KAAK,CAAoBgC,IAAI,KAAK,OAAO,EAAE;QAC/G5B,OAAO,CAACC,IAAI,CAAC,uDAAuD,CAAC;QACrE,OAAO,EAAE;MACX;MACAD,OAAO,CAACJ,KAAK,CAAC,uCAAuC8C,QAAQ,GAAG,EAAE9C,KAAK,CAAC;MACxE,MAAMA,KAAK;IACb;IAEA,OAAO4B,IAAI;EACb,CAAC,CAAC,OAAO5B,KAAK,EAAE;IAAA,IAAAwF,gBAAA,EAAAC,gBAAA;IACd,IAAIzF,KAAK,YAAYmC,KAAK,KACtB,CAAAqD,gBAAA,GAAAxF,KAAK,CAAC8B,OAAO,cAAA0D,gBAAA,eAAbA,gBAAA,CAAezD,QAAQ,CAAC,gBAAgB,CAAC,KAAA0D,gBAAA,GACzCzF,KAAK,CAAC8B,OAAO,cAAA2D,gBAAA,eAAbA,gBAAA,CAAe1D,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE;MACrC3B,OAAO,CAACC,IAAI,CAAC,uDAAuD,CAAC;MACrE,OAAO,EAAE;IACX;IACAD,OAAO,CAACJ,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAM,IAAImC,KAAK,CAAC,gCAAgC,CAAC;EACnD;AACF,CAAC;AAED,OAAO,MAAMuD,oBAAoB,GAAG,MAAAA,CAClC5C,QAAgB,EAChB6C,IAAU,EACVC,QAAiB,EACjBC,gBAAyB,KACU;EACnC,IAAI,CAAC/C,QAAQ,IAAI,CAAC6C,IAAI,EAAE;IACtBvF,OAAO,CAACJ,KAAK,CAAC,sDAAsD,CAAC;IACrE,OAAO,IAAI;EACb;EAEA,MAAM8F,QAAQ,GAAG,WAAWhD,QAAQ,IAAIiD,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIL,IAAI,CAACxC,IAAI,EAAE;EAEjE,IAAI;IACF,MAAM;MAAEvB,IAAI,EAAEqE,UAAU;MAAEjG,KAAK,EAAEkG;IAAY,CAAC,GAAG,MAAM3G,QAAQ,CAAC4G,OAAO,CACpElG,IAAI,CAACJ,mBAAmB,CAAC,CACzBuG,MAAM,CAACN,QAAQ,EAAEH,IAAI,CAAC;IAEzB,IAAIO,WAAW,EAAE;MACf9F,OAAO,CAACJ,KAAK,CAAC,2CAA2C,EAAEkG,WAAW,CAAC;MACvE,MAAMA,WAAW;IACnB;IAEA,IAAI,CAACD,UAAU,EAAE;MACb,MAAM,IAAI9D,KAAK,CAAC,+CAA+C,CAAC;IACpE;IAEA/B,OAAO,CAACiG,GAAG,CAAC,6BAA6B,EAAEJ,UAAU,CAACK,IAAI,CAAC;IAE3D,MAAMC,cAAyD,GAAG;MAChEC,SAAS,EAAEb,IAAI,CAACxC,IAAI;MACpBsD,SAAS,EAAER,UAAU,CAACK,IAAI;MAC1BI,SAAS,EAAEf,IAAI,CAACgB,IAAI;MACpBC,SAAS,EAAEjB,IAAI,CAACkB,IAAI;MACpBjB,QAAQ,EAAEA,QAAQ;MAClBkB,SAAS,EAAEhE,QAAQ;MACnBiE,cAAc,EAAE,IAAI;MACpBC,mBAAmB,EAAEnB;IACvB,CAAC;IAED,MAAM;MAAEjE,IAAI,EAAEqF,MAAM;MAAEjH,KAAK,EAAEkH;IAAQ,CAAC,GAAG,MAAM3H,QAAQ,CACpDU,IAAI,CAACN,eAAe,CAAC,CACrBoE,MAAM,CAAC,CAACwC,cAAc,CAAC,CAAC,CACxBrG,MAAM,CAAC,CAAC,CACRoC,MAAM,CAAC,CAAC;IAEX,IAAI4E,OAAO,EAAE;MACX9G,OAAO,CAACJ,KAAK,CAAC,6CAA6C,EAAEkH,OAAO,CAAC;MACrE9G,OAAO,CAACC,IAAI,CAAC,oDAAoDyF,QAAQ,EAAE,CAAC;MAC5E,MAAMvG,QAAQ,CAAC4G,OAAO,CAAClG,IAAI,CAACJ,mBAAmB,CAAC,CAACsH,MAAM,CAAC,CAACrB,QAAQ,CAAC,CAAC;MACnE,MAAMoB,OAAO;IACf;IAEA,OAAOD,MAAM;EAEf,CAAC,CAAC,OAAOjH,KAAK,EAAE;IACdI,OAAO,CAACJ,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAM,IAAImC,KAAK,CAAC,kCAAkC,CAAC;EACrD;AACF,CAAC;AAED,OAAO,MAAMiF,oBAAoB,GAAG,MAAOC,UAAkB,IAAuB;EAClF,IAAI,CAACA,UAAU,EAAE;IACfjH,OAAO,CAACJ,KAAK,CAAC,8CAA8C,CAAC;IAC7D,OAAO,KAAK;EACd;EAEA,IAAI;IACF,MAAM;MAAE4B,IAAI,EAAE0F,OAAO;MAAEtH,KAAK,EAAEuH;IAAW,CAAC,GAAG,MAAMhI,QAAQ,CACxDU,IAAI,CAACN,eAAe,CAAC,CACrBO,MAAM,CAAC,WAAW,CAAC,CACnBW,EAAE,CAAC,IAAI,EAAEwG,UAAU,CAAC,CACpB/E,MAAM,CAAC,CAAC;IAEX,IAAIiF,UAAU,IAAI,CAACD,OAAO,EAAE;MAC1BlH,OAAO,CAACJ,KAAK,CAAC,2BAA2BqH,UAAU,gBAAgB,EAAEE,UAAU,CAAC;MAChF,OAAO,KAAK;IACd;IAEA,MAAMzB,QAAQ,GAAGwB,OAAO,CAACb,SAAS;IAElC,MAAM;MAAEzG,KAAK,EAAEwH;IAAa,CAAC,GAAG,MAAMjI,QAAQ,CAAC4G,OAAO,CACnDlG,IAAI,CAACJ,mBAAmB,CAAC,CACzBsH,MAAM,CAAC,CAACrB,QAAQ,CAAC,CAAC;IAErB,IAAI0B,YAAY,EAAE;MAChBpH,OAAO,CAACC,IAAI,CAAC,uBAAuByF,QAAQ,2CAA2C,EAAE0B,YAAY,CAAC;IACxG,CAAC,MAAM;MACHpH,OAAO,CAACiG,GAAG,CAAC,QAAQP,QAAQ,qCAAqC,CAAC;IACtE;IAEA,MAAM;MAAE9F,KAAK,EAAEkH;IAAQ,CAAC,GAAG,MAAM3H,QAAQ,CACtCU,IAAI,CAACN,eAAe,CAAC,CACrBiF,MAAM,CAAC,CAAC,CACR/D,EAAE,CAAC,IAAI,EAAEwG,UAAU,CAAC;IAEvB,IAAIH,OAAO,EAAE;MACX9G,OAAO,CAACJ,KAAK,CAAC,kCAAkCqH,UAAU,iBAAiB,EAAEH,OAAO,CAAC;MACrF,MAAMA,OAAO;IACf;IAEA,OAAO,IAAI;EAEb,CAAC,CAAC,OAAOlH,KAAK,EAAE;IACdI,OAAO,CAACJ,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAM,IAAImC,KAAK,CAAC,kCAAkC,CAAC;EACrD;AACF,CAAC;AAED,OAAO,MAAMsF,iCAAiC,GAAI1E,MAAqB,IAAa;EAClF,IAAI,CAACA,MAAM,EAAE,OAAO,CAAC;EAErB,MAAM2E,SAA2B,GAAG,CAClC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EACpD,aAAa,EAAE,YAAY,EAAE,QAAQ,EAAE,gBAAgB,EACvD,iBAAiB,EAAE,kBAAkB,EAAE,KAAK,EAAE,MAAM,EACpD,gBAAgB,EAChB,kBAAkB,EAClB,WAAW,EAAE,YAAY,CAC1B;EAED,IAAIC,eAAe,GAAG,CAAC;EACvB,MAAMC,cAAc,GAAGF,SAAS,CAACvC,MAAM;EAEvCuC,SAAS,CAACG,OAAO,CAACC,KAAK,IAAI;IACzB,IAAI/E,MAAM,CAAC+E,KAAK,CAAC,KAAK,IAAI,IAAI/E,MAAM,CAAC+E,KAAK,CAAC,KAAKxG,SAAS,IAAIyB,MAAM,CAAC+E,KAAK,CAAC,KAAK,EAAE,EAAE;MACjFH,eAAe,EAAE;IACnB;EACF,CAAC,CAAC;EAEF,IAAIC,cAAc,KAAK,CAAC,EAAE,OAAO,GAAG;EAEpC,MAAMG,UAAU,GAAGC,IAAI,CAACC,KAAK,CAAEN,eAAe,GAAGC,cAAc,GAAI,GAAG,CAAC;EACvE,OAAOG,UAAU;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}