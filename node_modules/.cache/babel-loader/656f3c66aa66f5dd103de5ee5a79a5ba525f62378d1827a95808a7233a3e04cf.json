{"ast":null,"code":"import { supabase } from '../utils/supabase';\nimport { TABLES } from '../utils/constants/tables';\nconst DOCUMENTS_TABLE = TABLES.DOCUMENTS;\nconst STORAGE_BUCKET = 'application-documents';\n\n// Get all documents for an application\nexport const getApplicationDocuments = async applicationId => {\n  const {\n    data,\n    error\n  } = await supabase.from(DOCUMENTS_TABLE).select(`\n      *,\n      uploaded_by_user:uploaded_by (id, name, email),\n      verified_by_user:verified_by (id, name, email)\n    `).eq('application_id', applicationId).order('created_at', {\n    ascending: false\n  });\n  if (error) {\n    console.error(`Error fetching documents for application ${applicationId}:`, error);\n    throw error;\n  }\n  return data;\n};\n\n// Get a single document by ID\nexport const getDocumentById = async id => {\n  const {\n    data,\n    error\n  } = await supabase.from(DOCUMENTS_TABLE).select(`\n      *,\n      uploaded_by_user:uploaded_by (id, name, email),\n      verified_by_user:verified_by (id, name, email)\n    `).eq('id', id).single();\n  if (error) {\n    console.error(`Error fetching document with ID ${id}:`, error);\n    throw error;\n  }\n  return data;\n};\n\n// Upload a document\nexport const uploadDocument = async (file, applicationId, userId, documentName, description) => {\n  // Generate a unique file path\n  const timestamp = new Date().getTime();\n  const fileExtension = file.name.split('.').pop();\n  const filePath = `${applicationId}/${timestamp}-${file.name}`;\n\n  // Upload file to storage\n  const {\n    data: storageData,\n    error: storageError\n  } = await supabase.storage.from(STORAGE_BUCKET).upload(filePath, file, {\n    cacheControl: '3600',\n    upsert: false\n  });\n  if (storageError) {\n    console.error('Error uploading file:', storageError);\n    throw storageError;\n  }\n\n  // Create document record in database\n  const {\n    data: documentData,\n    error: documentError\n  } = await supabase.from(DOCUMENTS_TABLE).insert([{\n    name: documentName,\n    description,\n    file_path: filePath,\n    file_type: file.type,\n    file_size: file.size,\n    application_id: applicationId,\n    uploaded_by: userId\n  }]).select();\n  if (documentError) {\n    console.error('Error creating document record:', documentError);\n\n    // Delete the uploaded file if document record creation failed\n    await supabase.storage.from(STORAGE_BUCKET).remove([filePath]);\n    throw documentError;\n  }\n  return documentData[0];\n};\n\n// Delete a document\nexport const deleteDocument = async documentId => {\n  // Get document to get file path\n  const {\n    data: document,\n    error: fetchError\n  } = await supabase.from(DOCUMENTS_TABLE).select('file_path').eq('id', documentId).single();\n  if (fetchError) {\n    console.error(`Error fetching document ${documentId} for deletion:`, fetchError);\n    throw fetchError;\n  }\n\n  // Delete file from storage\n  const {\n    error: storageError\n  } = await supabase.storage.from(STORAGE_BUCKET).remove([document.file_path]);\n  if (storageError) {\n    console.error(`Error deleting file for document ${documentId}:`, storageError);\n    throw storageError;\n  }\n\n  // Delete document record\n  const {\n    error: deleteError\n  } = await supabase.from(DOCUMENTS_TABLE).delete().eq('id', documentId);\n  if (deleteError) {\n    console.error(`Error deleting document record ${documentId}:`, deleteError);\n    throw deleteError;\n  }\n  return true;\n};\n\n// Get document download URL\nexport const getDocumentUrl = async filePath => {\n  const {\n    data,\n    error\n  } = await supabase.storage.from(STORAGE_BUCKET).createSignedUrl(filePath, 60 * 60); // 1 hour expiry\n\n  if (error) {\n    console.error(`Error getting URL for document ${filePath}:`, error);\n    throw error;\n  }\n  return data.signedUrl;\n};\n\n// Verify a document\nexport const verifyDocument = async (documentId, userId, isVerified = true) => {\n  const {\n    data,\n    error\n  } = await supabase.from(DOCUMENTS_TABLE).update({\n    is_verified: isVerified,\n    verified_by: userId,\n    verified_at: new Date().toISOString()\n  }).eq('id', documentId).select();\n  if (error) {\n    console.error(`Error verifying document ${documentId}:`, error);\n    throw error;\n  }\n  return data[0];\n};\n\n// Get required documents (based on application type)\nexport const getRequiredDocuments = async applicationType => {\n  const {\n    data,\n    error\n  } = await supabase.from('required_documents').select('*').eq('application_type', applicationType);\n  if (error) {\n    console.error(`Error fetching required documents for ${applicationType}:`, error);\n    throw error;\n  }\n  return data;\n};","map":{"version":3,"names":["supabase","TABLES","DOCUMENTS_TABLE","DOCUMENTS","STORAGE_BUCKET","getApplicationDocuments","applicationId","data","error","from","select","eq","order","ascending","console","getDocumentById","id","single","uploadDocument","file","userId","documentName","description","timestamp","Date","getTime","fileExtension","name","split","pop","filePath","storageData","storageError","storage","upload","cacheControl","upsert","documentData","documentError","insert","file_path","file_type","type","file_size","size","application_id","uploaded_by","remove","deleteDocument","documentId","document","fetchError","deleteError","delete","getDocumentUrl","createSignedUrl","signedUrl","verifyDocument","isVerified","update","is_verified","verified_by","verified_at","toISOString","getRequiredDocuments","applicationType"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/documentService.ts"],"sourcesContent":["import { supabase } from '../utils/supabase';\nimport { TABLES } from '../utils/constants/tables';\n\nexport interface Document {\n  id: string;\n  created_at: string;\n  name: string;\n  description?: string;\n  file_path: string;\n  file_type: string;\n  file_size: number;\n  application_id: string;\n  uploaded_by: string;\n  is_verified?: boolean;\n  verified_by?: string;\n  verified_at?: string;\n}\n\nconst DOCUMENTS_TABLE = TABLES.DOCUMENTS;\nconst STORAGE_BUCKET = 'application-documents';\n\n// Get all documents for an application\nexport const getApplicationDocuments = async (applicationId: string) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select(`\n      *,\n      uploaded_by_user:uploaded_by (id, name, email),\n      verified_by_user:verified_by (id, name, email)\n    `)\n    .eq('application_id', applicationId)\n    .order('created_at', { ascending: false });\n\n  if (error) {\n    console.error(`Error fetching documents for application ${applicationId}:`, error);\n    throw error;\n  }\n\n  return data;\n};\n\n// Get a single document by ID\nexport const getDocumentById = async (id: string) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select(`\n      *,\n      uploaded_by_user:uploaded_by (id, name, email),\n      verified_by_user:verified_by (id, name, email)\n    `)\n    .eq('id', id)\n    .single();\n\n  if (error) {\n    console.error(`Error fetching document with ID ${id}:`, error);\n    throw error;\n  }\n\n  return data as Document;\n};\n\n// Upload a document\nexport const uploadDocument = async (\n  file: File,\n  applicationId: string,\n  userId: string,\n  documentName: string,\n  description?: string\n) => {\n  // Generate a unique file path\n  const timestamp = new Date().getTime();\n  const fileExtension = file.name.split('.').pop();\n  const filePath = `${applicationId}/${timestamp}-${file.name}`;\n\n  // Upload file to storage\n  const { data: storageData, error: storageError } = await supabase.storage\n    .from(STORAGE_BUCKET)\n    .upload(filePath, file, {\n      cacheControl: '3600',\n      upsert: false\n    });\n\n  if (storageError) {\n    console.error('Error uploading file:', storageError);\n    throw storageError;\n  }\n\n  // Create document record in database\n  const { data: documentData, error: documentError } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .insert([\n      {\n        name: documentName,\n        description,\n        file_path: filePath,\n        file_type: file.type,\n        file_size: file.size,\n        application_id: applicationId,\n        uploaded_by: userId\n      }\n    ])\n    .select();\n\n  if (documentError) {\n    console.error('Error creating document record:', documentError);\n    \n    // Delete the uploaded file if document record creation failed\n    await supabase.storage\n      .from(STORAGE_BUCKET)\n      .remove([filePath]);\n      \n    throw documentError;\n  }\n\n  return documentData[0] as Document;\n};\n\n// Delete a document\nexport const deleteDocument = async (documentId: string) => {\n  // Get document to get file path\n  const { data: document, error: fetchError } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select('file_path')\n    .eq('id', documentId)\n    .single();\n\n  if (fetchError) {\n    console.error(`Error fetching document ${documentId} for deletion:`, fetchError);\n    throw fetchError;\n  }\n\n  // Delete file from storage\n  const { error: storageError } = await supabase.storage\n    .from(STORAGE_BUCKET)\n    .remove([document.file_path]);\n\n  if (storageError) {\n    console.error(`Error deleting file for document ${documentId}:`, storageError);\n    throw storageError;\n  }\n\n  // Delete document record\n  const { error: deleteError } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .delete()\n    .eq('id', documentId);\n\n  if (deleteError) {\n    console.error(`Error deleting document record ${documentId}:`, deleteError);\n    throw deleteError;\n  }\n\n  return true;\n};\n\n// Get document download URL\nexport const getDocumentUrl = async (filePath: string) => {\n  const { data, error } = await supabase.storage\n    .from(STORAGE_BUCKET)\n    .createSignedUrl(filePath, 60 * 60); // 1 hour expiry\n\n  if (error) {\n    console.error(`Error getting URL for document ${filePath}:`, error);\n    throw error;\n  }\n\n  return data.signedUrl;\n};\n\n// Verify a document\nexport const verifyDocument = async (documentId: string, userId: string, isVerified: boolean = true) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .update({\n      is_verified: isVerified,\n      verified_by: userId,\n      verified_at: new Date().toISOString()\n    })\n    .eq('id', documentId)\n    .select();\n\n  if (error) {\n    console.error(`Error verifying document ${documentId}:`, error);\n    throw error;\n  }\n\n  return data[0] as Document;\n};\n\n// Get required documents (based on application type)\nexport const getRequiredDocuments = async (applicationType: string) => {\n  const { data, error } = await supabase\n    .from('required_documents')\n    .select('*')\n    .eq('application_type', applicationType);\n\n  if (error) {\n    console.error(`Error fetching required documents for ${applicationType}:`, error);\n    throw error;\n  }\n\n  return data;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}