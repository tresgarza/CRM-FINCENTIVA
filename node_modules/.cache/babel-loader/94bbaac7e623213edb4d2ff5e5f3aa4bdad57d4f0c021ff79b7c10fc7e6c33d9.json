{"ast":null,"code":"import{supabase}from'../lib/supabaseClient';import{TABLES}from'../utils/constants/tables';// Nombre de la tabla definido como constante para evitar errores de escritura\nconst CLIENTS_TABLE=TABLES.CLIENTS||'clients';// Verificar si la tabla existe antes de realizar operaciones\nconst tableExists=async()=>{try{// Intentamos hacer una consulta sencilla para verificar si la tabla existe\nconst{count,error}=await supabase.from(CLIENTS_TABLE).select('*',{count:'exact',head:true});return!error;}catch(error){console.warn('Error verificando si la tabla clients existe:',error);return false;}};// Get all clients with filters\nexport const getClients=async filters=>{try{// Verificar si la tabla existe\nconst exists=await tableExists();if(!exists){console.warn('La tabla clients no existe. Retornando lista vacía.');return{clients:[],totalCount:0};}let query=supabase.from(CLIENTS_TABLE).select('*',{count:'exact'});// Apply filters\nif(filters){// Filter by advisor\nif(filters.advisor_id){query=query.eq('advisor_id',filters.advisor_id);}// Filter by company\nif(filters.company_id){query=query.eq('company_id',filters.company_id);}// Filter by date range\nif(filters.dateFrom){query=query.gte('created_at',filters.dateFrom);}if(filters.dateTo){query=query.lte('created_at',filters.dateTo);}// Search by name, email, phone, RFC or CURP\nif(filters.searchQuery){query=query.or(`name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);}// Apply pagination if provided\nif(filters.page!==undefined&&filters.pageSize){const from=filters.page*filters.pageSize;const to=from+filters.pageSize-1;query=query.range(from,to);}}// Order by most recent first\nquery=query.order('created_at',{ascending:false});const{data,error,count}=await query;if(error){var _error$message;// Check if the error is because the table doesn't exist\nif((_error$message=error.message)!==null&&_error$message!==void 0&&_error$message.includes('does not exist')||error.code==='42P01'){console.warn('Clients table does not exist. Using fallback empty list.');return{clients:[],totalCount:0};}console.error('Error fetching clients:',error);throw error;}return{clients:data,totalCount:count||0};}catch(error){var _error$message2,_error$message3;// Verificar si el error es porque la tabla no existe\nif(error instanceof Error&&((_error$message2=error.message)!==null&&_error$message2!==void 0&&_error$message2.includes('does not exist')||(_error$message3=error.message)!==null&&_error$message3!==void 0&&_error$message3.includes('42P01'))){console.warn('La tabla clients no existe. Retornando lista vacía.');return{clients:[],totalCount:0};}console.error('Error en getClients:',error);throw error;}};// Get a single client by ID\nexport const getClientById=async id=>{try{// Verificar si la tabla existe\nconst exists=await tableExists();if(!exists){console.warn('La tabla clients no existe. Retornando cliente vacío.');return null;}const{data,error}=await supabase.from(CLIENTS_TABLE).select('*').eq('id',id).single();if(error){var _error$message4;// Check if the error is because the table doesn't exist\nif((_error$message4=error.message)!==null&&_error$message4!==void 0&&_error$message4.includes('does not exist')||error.code==='42P01'){console.warn('Clients table does not exist. Returning empty client.');return null;}console.error(`Error fetching client with ID ${id}:`,error);throw error;}return data;}catch(error){var _error$message5,_error$message6;// Verificar si el error es porque la tabla no existe\nif(error instanceof Error&&((_error$message5=error.message)!==null&&_error$message5!==void 0&&_error$message5.includes('does not exist')||(_error$message6=error.message)!==null&&_error$message6!==void 0&&_error$message6.includes('42P01'))){console.warn('La tabla clients no existe. Retornando cliente vacío.');return null;}console.error(`Error in getClientById:`,error);throw error;}};// Función para escapar cadenas de texto para SQL\nfunction escapeSQLString(str){if(!str)return'';return str.replace(/'/g,\"''\");}// Get client applications\nexport const getClientApplications=async clientId=>{// Consultar aplicaciones usando MCP en lugar de Supabase\ntry{// Primero obtenemos el cliente para saber su nombre\nconst client=await getClientById(clientId).catch(err=>{// If clients table doesn't exist, use a workaround\nif(err.message==='Clients table does not exist'){return null;}throw err;});if(!client){console.warn('Client not found or clients table does not exist. Returning empty applications list.');return[];}// Luego usamos el nombre del cliente para buscar aplicaciones\nconst query=`\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name)}'\n      ORDER BY created_at DESC\n    `;// Usamos executeQuery que es el método para el MCP\nconst executeQuery=async query=>{try{const response=await fetch('http://localhost:3100/query',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query})});const result=await response.json();if(result.error){console.error('Error en la consulta SQL:',result.error);throw new Error(result.error);}return result.data;}catch(error){console.error('Error ejecutando la consulta:',error);throw error;}};const data=await executeQuery(query);return data;}catch(error){console.error(`Error fetching applications for client ${clientId}:`,error);throw error;}};// Create a new client\nexport const createClient=async client=>{try{const{data,error}=await supabase.from(CLIENTS_TABLE).insert([client]).select();if(error){var _error$message7;// Check if the error is because the table doesn't exist\nif((_error$message7=error.message)!==null&&_error$message7!==void 0&&_error$message7.includes('does not exist')||error.code==='42P01'){console.warn('Clients table does not exist. Cannot create client.');throw new Error('Clients table does not exist');}console.error('Error creating client:',error);throw error;}return data[0];}catch(error){console.error('Error in createClient:',error);throw error;}};// Update an existing client\nexport const updateClient=async(id,updates)=>{try{const{data,error}=await supabase.from(CLIENTS_TABLE).update(updates).eq('id',id).select();if(error){var _error$message8;// Check if the error is because the table doesn't exist\nif((_error$message8=error.message)!==null&&_error$message8!==void 0&&_error$message8.includes('does not exist')||error.code==='42P01'){console.warn('Clients table does not exist. Cannot update client.');throw new Error('Clients table does not exist');}console.error(`Error updating client with ID ${id}:`,error);throw error;}return data[0];}catch(error){console.error(`Error in updateClient:`,error);throw error;}};// Delete a client\nexport const deleteClient=async id=>{try{const{error}=await supabase.from(CLIENTS_TABLE).delete().eq('id',id);if(error){var _error$message9;// Check if the error is because the table doesn't exist\nif((_error$message9=error.message)!==null&&_error$message9!==void 0&&_error$message9.includes('does not exist')||error.code==='42P01'){console.warn('Clients table does not exist. Cannot delete client.');throw new Error('Clients table does not exist');}console.error(`Error deleting client with ID ${id}:`,error);throw error;}return true;}catch(error){console.error(`Error in deleteClient:`,error);throw error;}};// Check if a client exists with the given email or RFC\nexport const checkClientExists=async(email,rfc)=>{try{let query=supabase.from(CLIENTS_TABLE).select('id, email, rfc').eq('email',email);if(rfc){query=query.or(`rfc.eq.${rfc}`);}const{data,error}=await query;if(error){var _error$message10;// Check if the error is because the table doesn't exist\nif((_error$message10=error.message)!==null&&_error$message10!==void 0&&_error$message10.includes('does not exist')||error.code==='42P01'){console.warn('Clients table does not exist. Returning null.');return null;}console.error('Error checking client existence:',error);throw error;}return data.length>0?data[0]:null;}catch(error){console.error('Error in checkClientExists:',error);throw error;}};// Get client count by filters\nexport const getClientCount=async filters=>{try{let query=supabase.from(CLIENTS_TABLE).select('id',{count:'exact',head:true});// Apply filters\nif(filters){// Filter by advisor\nif(filters.advisor_id){query=query.eq('advisor_id',filters.advisor_id);}// Filter by company\nif(filters.company_id){query=query.eq('company_id',filters.company_id);}// Filter by date range\nif(filters.dateFrom){query=query.gte('created_at',filters.dateFrom);}if(filters.dateTo){query=query.lte('created_at',filters.dateTo);}// Search by name, email or phone\nif(filters.searchQuery){query=query.or(`name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);}}const{count,error}=await query;if(error){var _error$message11;// Check if the error is because the table doesn't exist\nif((_error$message11=error.message)!==null&&_error$message11!==void 0&&_error$message11.includes('does not exist')||error.code==='42P01'){console.warn('Clients table does not exist. Returning count 0.');return 0;}console.error('Error getting client count:',error);throw error;}return count||0;}catch(error){console.error('Error in getClientCount:',error);return 0;}};","map":{"version":3,"names":["supabase","TABLES","CLIENTS_TABLE","CLIENTS","tableExists","count","error","from","select","head","console","warn","getClients","filters","exists","clients","totalCount","query","advisor_id","eq","company_id","dateFrom","gte","dateTo","lte","searchQuery","or","page","undefined","pageSize","to","range","order","ascending","data","_error$message","message","includes","code","_error$message2","_error$message3","Error","getClientById","id","single","_error$message4","_error$message5","_error$message6","escapeSQLString","str","replace","getClientApplications","clientId","client","catch","err","APPLICATIONS","name","executeQuery","response","fetch","method","headers","body","JSON","stringify","result","json","createClient","insert","_error$message7","updateClient","updates","update","_error$message8","deleteClient","delete","_error$message9","checkClientExists","email","rfc","_error$message10","length","getClientCount","_error$message11"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/clientService.ts"],"sourcesContent":["import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from '../utils/constants/tables';\n\nexport interface Client {\n  id: string;\n  created_at: string;\n  name: string;\n  email: string;\n  phone: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  postal_code?: string;\n  birth_date?: string;\n  rfc?: string;\n  curp?: string;\n  company_id?: string;\n  advisor_id?: string;\n}\n\nexport interface ClientFilter {\n  searchQuery?: string;\n  advisor_id?: string;\n  company_id?: string;\n  dateFrom?: string;\n  dateTo?: string;\n  page?: number;\n  pageSize?: number;\n}\n\n// Nombre de la tabla definido como constante para evitar errores de escritura\nconst CLIENTS_TABLE = TABLES.CLIENTS || 'clients';\n\n// Verificar si la tabla existe antes de realizar operaciones\nconst tableExists = async () => {\n  try {\n    // Intentamos hacer una consulta sencilla para verificar si la tabla existe\n    const { count, error } = await supabase\n      .from(CLIENTS_TABLE)\n      .select('*', { count: 'exact', head: true });\n    \n    return !error;\n  } catch (error) {\n    console.warn('Error verificando si la tabla clients existe:', error);\n    return false;\n  }\n};\n\n// Get all clients with filters\nexport const getClients = async (filters?: ClientFilter) => {\n  try {\n    // Verificar si la tabla existe\n    const exists = await tableExists();\n    if (!exists) {\n      console.warn('La tabla clients no existe. Retornando lista vacía.');\n      return { clients: [], totalCount: 0 };\n    }\n\n    let query = supabase.from(CLIENTS_TABLE).select('*', { count: 'exact' });\n\n    // Apply filters\n    if (filters) {\n      // Filter by advisor\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      // Filter by company\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      // Filter by date range\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      // Search by name, email, phone, RFC or CURP\n      if (filters.searchQuery) {\n        query = query.or(\n          `name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n\n      // Apply pagination if provided\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n\n    // Order by most recent first\n    query = query.order('created_at', { ascending: false });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      // Check if the error is because the table doesn't exist\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Using fallback empty list.');\n        return {\n          clients: [],\n          totalCount: 0\n        };\n      }\n      \n      console.error('Error fetching clients:', error);\n      throw error;\n    }\n\n    return {\n      clients: data as Client[],\n      totalCount: count || 0\n    };\n  } catch (error) {\n    // Verificar si el error es porque la tabla no existe\n    if (error instanceof Error && (\n        error.message?.includes('does not exist') || \n        error.message?.includes('42P01'))) {\n      console.warn('La tabla clients no existe. Retornando lista vacía.');\n      return { clients: [], totalCount: 0 };\n    }\n    \n    console.error('Error en getClients:', error);\n    throw error;\n  }\n};\n\n// Get a single client by ID\nexport const getClientById = async (id: string) => {\n  try {\n    // Verificar si la tabla existe\n    const exists = await tableExists();\n    if (!exists) {\n      console.warn('La tabla clients no existe. Retornando cliente vacío.');\n      return null;\n    }\n\n    const { data, error } = await supabase\n      .from(CLIENTS_TABLE)\n      .select('*')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      // Check if the error is because the table doesn't exist\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Returning empty client.');\n        return null;\n      }\n      \n      console.error(`Error fetching client with ID ${id}:`, error);\n      throw error;\n    }\n\n    return data as Client;\n  } catch (error) {\n    // Verificar si el error es porque la tabla no existe\n    if (error instanceof Error && (\n        error.message?.includes('does not exist') || \n        error.message?.includes('42P01'))) {\n      console.warn('La tabla clients no existe. Retornando cliente vacío.');\n      return null;\n    }\n    \n    console.error(`Error in getClientById:`, error);\n    throw error;\n  }\n};\n\n// Función para escapar cadenas de texto para SQL\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\n// Get client applications\nexport const getClientApplications = async (clientId: string) => {\n  // Consultar aplicaciones usando MCP en lugar de Supabase\n  try {\n    // Primero obtenemos el cliente para saber su nombre\n    const client = await getClientById(clientId).catch(err => {\n      // If clients table doesn't exist, use a workaround\n      if (err.message === 'Clients table does not exist') {\n        return null;\n      }\n      throw err;\n    });\n    \n    if (!client) {\n      console.warn('Client not found or clients table does not exist. Returning empty applications list.');\n      return [];\n    }\n    \n    // Luego usamos el nombre del cliente para buscar aplicaciones\n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name)}'\n      ORDER BY created_at DESC\n    `;\n    \n    // Usamos executeQuery que es el método para el MCP\n    const executeQuery = async (query: string) => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query }),\n        });\n        \n        const result = await response.json();\n        \n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        \n        return result.data;\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    \n    const data = await executeQuery(query);\n    return data;\n  } catch (error) {\n    console.error(`Error fetching applications for client ${clientId}:`, error);\n    throw error;\n  }\n};\n\n// Create a new client\nexport const createClient = async (client: Omit<Client, 'id' | 'created_at'>) => {\n  try {\n    const { data, error } = await supabase\n      .from(CLIENTS_TABLE)\n      .insert([client])\n      .select();\n\n    if (error) {\n      // Check if the error is because the table doesn't exist\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Cannot create client.');\n        throw new Error('Clients table does not exist');\n      }\n      \n      console.error('Error creating client:', error);\n      throw error;\n    }\n\n    return data[0] as Client;\n  } catch (error) {\n    console.error('Error in createClient:', error);\n    throw error;\n  }\n};\n\n// Update an existing client\nexport const updateClient = async (id: string, updates: Partial<Client>) => {\n  try {\n    const { data, error } = await supabase\n      .from(CLIENTS_TABLE)\n      .update(updates)\n      .eq('id', id)\n      .select();\n\n    if (error) {\n      // Check if the error is because the table doesn't exist\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Cannot update client.');\n        throw new Error('Clients table does not exist');\n      }\n      \n      console.error(`Error updating client with ID ${id}:`, error);\n      throw error;\n    }\n\n    return data[0] as Client;\n  } catch (error) {\n    console.error(`Error in updateClient:`, error);\n    throw error;\n  }\n};\n\n// Delete a client\nexport const deleteClient = async (id: string) => {\n  try {\n    const { error } = await supabase\n      .from(CLIENTS_TABLE)\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      // Check if the error is because the table doesn't exist\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Cannot delete client.');\n        throw new Error('Clients table does not exist');\n      }\n      \n      console.error(`Error deleting client with ID ${id}:`, error);\n      throw error;\n    }\n\n    return true;\n  } catch (error) {\n    console.error(`Error in deleteClient:`, error);\n    throw error;\n  }\n};\n\n// Check if a client exists with the given email or RFC\nexport const checkClientExists = async (email: string, rfc?: string) => {\n  try {\n    let query = supabase\n      .from(CLIENTS_TABLE)\n      .select('id, email, rfc')\n      .eq('email', email);\n\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      // Check if the error is because the table doesn't exist\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Returning null.');\n        return null;\n      }\n      \n      console.error('Error checking client existence:', error);\n      throw error;\n    }\n\n    return data.length > 0 ? data[0] : null;\n  } catch (error) {\n    console.error('Error in checkClientExists:', error);\n    throw error;\n  }\n};\n\n// Get client count by filters\nexport const getClientCount = async (filters?: ClientFilter) => {\n  try {\n    let query = supabase\n      .from(CLIENTS_TABLE)\n      .select('id', { count: 'exact', head: true });\n\n    // Apply filters\n    if (filters) {\n      // Filter by advisor\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      // Filter by company\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      // Filter by date range\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      // Search by name, email or phone\n      if (filters.searchQuery) {\n        query = query.or(\n          `name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n    }\n\n    const { count, error } = await query;\n\n    if (error) {\n      // Check if the error is because the table doesn't exist\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Returning count 0.');\n        return 0;\n      }\n      \n      console.error('Error getting client count:', error);\n      throw error;\n    }\n\n    return count || 0;\n  } catch (error) {\n    console.error('Error in getClientCount:', error);\n    return 0;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}