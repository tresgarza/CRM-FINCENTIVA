{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/components/ui/charts/AdvisorPerformanceChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Registrar componentes necesarios de Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst AdvisorPerformanceChart = ({\n  data,\n  title = 'Rendimiento de Asesores',\n  height = 350,\n  className = '',\n  maxBars = 10\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: []\n  });\n  // Almacenar las etiquetas para acceder a ellas en las opciones del gráfico\n  const [chartLabels, setChartLabels] = useState([]);\n  useEffect(() => {\n    if (!data || data.length === 0) return;\n\n    // Ordenar los datos por total de aplicaciones (descendente)\n    const sortedData = [...data].sort((a, b) => b.total_applications - a.total_applications);\n\n    // Tomar solo los primeros maxBars elementos\n    const limitedData = sortedData.slice(0, maxBars);\n    const labels = limitedData.map(item => item.advisor_name);\n    const totalApps = limitedData.map(item => item.total_applications);\n    const approvedApps = limitedData.map(item => item.approved_applications || 0);\n\n    // Guardar las etiquetas para usarlas en las opciones\n    setChartLabels(labels);\n    setChartData({\n      labels,\n      datasets: [{\n        label: 'Total Solicitudes',\n        data: totalApps,\n        backgroundColor: 'rgba(53, 162, 235, 0.7)',\n        borderColor: 'rgba(53, 162, 235, 1)',\n        borderWidth: 1\n      }, {\n        label: 'Aprobadas',\n        data: approvedApps,\n        backgroundColor: 'rgba(75, 192, 192, 0.7)',\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 1\n      }]\n    });\n  }, [data, maxBars]);\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: !!title,\n        text: title,\n        font: {\n          size: 16\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: context => {\n            const label = context.dataset.label || '';\n            const value = context.parsed.y;\n            return `${label}: ${value}`;\n          }\n        }\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        ticks: {\n          precision: 0\n        }\n      },\n      x: {\n        ticks: {\n          callback: function (value, index) {\n            // Acortar nombres largos\n            const label = chartLabels[index];\n            return (label === null || label === void 0 ? void 0 : label.length) > 12 ? label.substr(0, 10) + '...' : label;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chart-container ${className}`,\n    style: {\n      height: `${height}px`\n    },\n    children: data && data.length > 0 ? /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center h-full bg-base-200 rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-500\",\n        children: \"Sin datos disponibles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(AdvisorPerformanceChart, \"bBEsFqKoERpg4I+20Kgal0ndWpA=\");\n_c = AdvisorPerformanceChart;\nexport default AdvisorPerformanceChart;\nvar _c;\n$RefreshReg$(_c, \"AdvisorPerformanceChart\");","map":{"version":3,"names":["React","useEffect","useState","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","AdvisorPerformanceChart","data","title","height","className","maxBars","_s","chartData","setChartData","labels","datasets","chartLabels","setChartLabels","length","sortedData","sort","a","b","total_applications","limitedData","slice","map","item","advisor_name","totalApps","approvedApps","approved_applications","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","plugins","legend","position","display","text","font","size","tooltip","callbacks","context","dataset","value","parsed","y","scales","beginAtZero","ticks","precision","x","callback","index","substr","style","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/components/ui/charts/AdvisorPerformanceChart.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\n// Registrar componentes necesarios de Chart.js\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface AdvisorData {\n  advisor_name: string;\n  total_applications: number;\n  approved_applications?: number;\n}\n\ninterface AdvisorPerformanceChartProps {\n  data: AdvisorData[];\n  title?: string;\n  height?: number;\n  className?: string;\n  maxBars?: number;\n}\n\nconst AdvisorPerformanceChart: React.FC<AdvisorPerformanceChartProps> = ({\n  data,\n  title = 'Rendimiento de Asesores',\n  height = 350,\n  className = '',\n  maxBars = 10,\n}) => {\n  const [chartData, setChartData] = useState<any>({\n    labels: [],\n    datasets: [],\n  });\n  // Almacenar las etiquetas para acceder a ellas en las opciones del gráfico\n  const [chartLabels, setChartLabels] = useState<string[]>([]);\n\n  useEffect(() => {\n    if (!data || data.length === 0) return;\n\n    // Ordenar los datos por total de aplicaciones (descendente)\n    const sortedData = [...data].sort((a, b) => b.total_applications - a.total_applications);\n    \n    // Tomar solo los primeros maxBars elementos\n    const limitedData = sortedData.slice(0, maxBars);\n    \n    const labels = limitedData.map(item => item.advisor_name);\n    const totalApps = limitedData.map(item => item.total_applications);\n    const approvedApps = limitedData.map(item => item.approved_applications || 0);\n\n    // Guardar las etiquetas para usarlas en las opciones\n    setChartLabels(labels);\n\n    setChartData({\n      labels,\n      datasets: [\n        {\n          label: 'Total Solicitudes',\n          data: totalApps,\n          backgroundColor: 'rgba(53, 162, 235, 0.7)',\n          borderColor: 'rgba(53, 162, 235, 1)',\n          borderWidth: 1,\n        },\n        {\n          label: 'Aprobadas',\n          data: approvedApps,\n          backgroundColor: 'rgba(75, 192, 192, 0.7)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1,\n        },\n      ],\n    });\n  }, [data, maxBars]);\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: !!title,\n        text: title,\n        font: {\n          size: 16,\n        },\n      },\n      tooltip: {\n        callbacks: {\n          label: (context: any) => {\n            const label = context.dataset.label || '';\n            const value = context.parsed.y;\n            return `${label}: ${value}`;\n          },\n        },\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        ticks: {\n          precision: 0,\n        },\n      },\n      x: {\n        ticks: {\n          callback: function(value: any, index: number) {\n            // Acortar nombres largos\n            const label = chartLabels[index];\n            return label?.length > 12 ? label.substr(0, 10) + '...' : label;\n          },\n        },\n      },\n    },\n  };\n\n  return (\n    <div className={`chart-container ${className}`} style={{ height: `${height}px` }}>\n      {data && data.length > 0 ? (\n        <Bar data={chartData} options={options} />\n      ) : (\n        <div className=\"flex items-center justify-center h-full bg-base-200 rounded-lg\">\n          <p className=\"text-sm text-gray-500\">Sin datos disponibles</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AdvisorPerformanceChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}