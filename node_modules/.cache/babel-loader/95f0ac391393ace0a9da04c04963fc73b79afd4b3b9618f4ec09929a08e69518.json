{"ast":null,"code":"import { ApplicationStatus, ApplicationType, LoanCalculator } from '../utils/types/applications';\n\n// Tabla en Supabase\nconst APPLICATIONS_TABLE = 'applications';\nconst DOCUMENTS_TABLE = 'documents';\nconst STATUS_HISTORY_TABLE = 'status_history';\n\n// Mock data para desarrollo local\nconst mockApplications = [{\n  id: '1',\n  client_id: 'client-1',\n  client_name: 'Juan Pérez',\n  email: 'juan@example.com',\n  phone: '+56 9 1234 5678',\n  type: ApplicationType.PERSONAL_LOAN,\n  amount: 1500000,\n  term_months: 24,\n  interest_rate: 12.5,\n  status: ApplicationStatus.PENDING,\n  created_at: '2023-07-18T10:30:00',\n  monthly_payment: 70806,\n  total_interest: 199344\n}, {\n  id: '2',\n  client_id: 'client-2',\n  client_name: 'María González',\n  email: 'maria@example.com',\n  phone: '+56 9 8765 4321',\n  type: ApplicationType.AUTO_LOAN,\n  amount: 5000000,\n  term_months: 48,\n  interest_rate: 9.9,\n  status: ApplicationStatus.REVIEW,\n  created_at: '2023-07-17T14:20:00',\n  monthly_payment: 126207,\n  total_interest: 1057936\n}, {\n  id: '3',\n  client_id: 'client-3',\n  client_name: 'Carlos Rodríguez',\n  email: 'carlos@example.com',\n  phone: '+56 9 5555 5555',\n  type: ApplicationType.CAR_BACKED_LOAN,\n  amount: 3500000,\n  term_months: 36,\n  interest_rate: 10.5,\n  status: ApplicationStatus.APPROVED,\n  created_at: '2023-07-16T09:15:00',\n  monthly_payment: 113584,\n  total_interest: 590024\n}, {\n  id: '4',\n  client_id: 'client-4',\n  client_name: 'Ana Martínez',\n  email: 'ana@example.com',\n  phone: '+56 9 7777 7777',\n  type: ApplicationType.CASH_ADVANCE,\n  amount: 750000,\n  term_months: 12,\n  interest_rate: 15,\n  status: ApplicationStatus.REJECTED,\n  created_at: '2023-07-15T16:45:00',\n  monthly_payment: 67950,\n  total_interest: 65400\n}, {\n  id: '5',\n  client_id: 'client-5',\n  client_name: 'Roberto Silva',\n  email: 'roberto@example.com',\n  phone: '+56 9 8888 8888',\n  type: ApplicationType.PERSONAL_LOAN,\n  amount: 1200000,\n  term_months: 18,\n  interest_rate: 11.5,\n  status: ApplicationStatus.PENDING,\n  created_at: '2023-07-14T11:30:00',\n  monthly_payment: 72672,\n  total_interest: 108096\n}];\n\n// Servicio para gestionar solicitudes\nexport const ApplicationService = {\n  /**\n   * Obtiene una lista de solicitudes con filtros opcionales\n   */\n  async getApplications(filters) {\n    try {\n      // En un entorno de producción, aquí se realizaría la consulta a Supabase\n      // let query = supabase.from(APPLICATIONS_TABLE).select('*');\n\n      // Aplicar filtros...\n      // if (filters?.status && filters.status !== 'all') {\n      //   query = query.eq('status', filters.status);\n      // }\n\n      // const { data, error } = await query;\n      // if (error) throw error;\n      // return data || [];\n\n      // Para desarrollo, usamos datos simulados\n      let filteredApplications = [...mockApplications];\n\n      // Aplicar filtros si existen\n      if (filters) {\n        if (filters.status && filters.status !== 'all') {\n          filteredApplications = filteredApplications.filter(app => app.status === filters.status);\n        }\n        if (filters.type && filters.type !== 'all') {\n          filteredApplications = filteredApplications.filter(app => app.type === filters.type);\n        }\n        if (filters.search) {\n          const searchLower = filters.search.toLowerCase();\n          filteredApplications = filteredApplications.filter(app => {\n            var _app$client_name, _app$email, _app$phone;\n            return ((_app$client_name = app.client_name) === null || _app$client_name === void 0 ? void 0 : _app$client_name.toLowerCase().includes(searchLower)) || ((_app$email = app.email) === null || _app$email === void 0 ? void 0 : _app$email.toLowerCase().includes(searchLower)) || ((_app$phone = app.phone) === null || _app$phone === void 0 ? void 0 : _app$phone.toLowerCase().includes(searchLower));\n          });\n        }\n        if (filters.dateFrom) {\n          const dateFrom = new Date(filters.dateFrom);\n          filteredApplications = filteredApplications.filter(app => new Date(app.created_at) >= dateFrom);\n        }\n        if (filters.dateTo) {\n          const dateTo = new Date(filters.dateTo);\n          filteredApplications = filteredApplications.filter(app => new Date(app.created_at) <= dateTo);\n        }\n        if (filters.amountMin !== undefined) {\n          filteredApplications = filteredApplications.filter(app => app.amount >= (filters.amountMin || 0));\n        }\n        if (filters.amountMax !== undefined) {\n          filteredApplications = filteredApplications.filter(app => app.amount <= filters.amountMax);\n        }\n      }\n      return filteredApplications;\n    } catch (error) {\n      console.error('Error fetching applications:', error);\n      throw error;\n    }\n  },\n  /**\n   * Obtiene una solicitud por su ID\n   */\n  async getApplicationById(id) {\n    try {\n      // En producción\n      // const { data, error } = await supabase\n      //   .from(APPLICATIONS_TABLE)\n      //   .select('*')\n      //   .eq('id', id)\n      //   .single();\n\n      // if (error) throw error;\n      // return data;\n\n      // Para desarrollo\n      const application = mockApplications.find(app => app.id === id);\n      return application || null;\n    } catch (error) {\n      console.error(`Error fetching application with id ${id}:`, error);\n      throw error;\n    }\n  },\n  /**\n   * Crea una nueva solicitud\n   */\n  async createApplication(application) {\n    try {\n      // Calcular campos\n      const monthlyPayment = LoanCalculator.calculateMonthlyPayment(application.amount, application.interest_rate, application.term_months);\n      const totalInterest = LoanCalculator.calculateTotalInterest(application.amount, application.interest_rate, application.term_months);\n\n      // En producción\n      // const { data, error } = await supabase\n      //   .from(APPLICATIONS_TABLE)\n      //   .insert([{\n      //     ...application,\n      //     created_at: new Date().toISOString(),\n      //     monthly_payment: monthlyPayment,\n      //     total_interest: totalInterest,\n      //     total_payment: application.amount + totalInterest\n      //   }])\n      //   .select()\n      //   .single();\n\n      // if (error) throw error;\n      // return data;\n\n      // Para desarrollo\n      const newApplication = {\n        ...application,\n        id: `${mockApplications.length + 1}`,\n        created_at: new Date().toISOString(),\n        monthly_payment: Math.round(monthlyPayment),\n        total_interest: Math.round(totalInterest),\n        total_payment: Math.round(application.amount + totalInterest)\n      };\n      mockApplications.push(newApplication);\n      return newApplication;\n    } catch (error) {\n      console.error('Error creating application:', error);\n      throw error;\n    }\n  },\n  /**\n   * Actualiza una solicitud existente\n   */\n  async updateApplication(id, updates) {\n    try {\n      // En producción\n      // const { data, error } = await supabase\n      //   .from(APPLICATIONS_TABLE)\n      //   .update({\n      //     ...updates,\n      //     updated_at: new Date().toISOString()\n      //   })\n      //   .eq('id', id)\n      //   .select()\n      //   .single();\n\n      // if (error) throw error;\n      // return data;\n\n      // Para desarrollo\n      const index = mockApplications.findIndex(app => app.id === id);\n      if (index === -1) return null;\n      const updatedApp = {\n        ...mockApplications[index],\n        ...updates,\n        updated_at: new Date().toISOString()\n      };\n\n      // Recalcular si cambian monto, tasa o plazo\n      if (updates.amount !== undefined || updates.interest_rate !== undefined || updates.term_months !== undefined) {\n        const amount = updates.amount || mockApplications[index].amount;\n        const interestRate = updates.interest_rate || mockApplications[index].interest_rate;\n        const termMonths = updates.term_months || mockApplications[index].term_months;\n        updatedApp.monthly_payment = Math.round(LoanCalculator.calculateMonthlyPayment(amount, interestRate, termMonths));\n        updatedApp.total_interest = Math.round(LoanCalculator.calculateTotalInterest(amount, interestRate, termMonths));\n        updatedApp.total_payment = Math.round(amount + updatedApp.total_interest);\n      }\n      mockApplications[index] = updatedApp;\n      return updatedApp;\n    } catch (error) {\n      console.error(`Error updating application with id ${id}:`, error);\n      throw error;\n    }\n  },\n  /**\n   * Cambia el estado de una solicitud y registra el cambio en el historial\n   */\n  async changeApplicationStatus(id, status, comment, userId) {\n    try {\n      // En producción sería una transacción para actualizar estado y agregar al historial\n      // const { data: application, error: appError } = await supabase\n      //   .from(APPLICATIONS_TABLE)\n      //   .update({ \n      //     status, \n      //     updated_at: new Date().toISOString() \n      //   })\n      //   .eq('id', id)\n      //   .select()\n      //   .single();\n\n      // if (appError) throw appError;\n\n      // const { error: historyError } = await supabase\n      //   .from(STATUS_HISTORY_TABLE)\n      //   .insert([{\n      //     application_id: id,\n      //     status,\n      //     comment,\n      //     created_by: userId,\n      //     created_at: new Date().toISOString()\n      //   }]);\n\n      // if (historyError) throw historyError;\n      // return application;\n\n      // Para desarrollo\n      const application = await this.updateApplication(id, {\n        status,\n        updated_at: new Date().toISOString()\n      });\n\n      // Simulación de actualización del historial\n      console.log('Status history updated:', {\n        application_id: id,\n        status,\n        comment,\n        created_by: userId,\n        created_at: new Date().toISOString()\n      });\n      return application;\n    } catch (error) {\n      console.error(`Error changing status for application ${id}:`, error);\n      throw error;\n    }\n  },\n  /**\n   * Elimina una solicitud\n   */\n  async deleteApplication(id) {\n    try {\n      // En producción\n      // const { error } = await supabase\n      //   .from(APPLICATIONS_TABLE)\n      //   .delete()\n      //   .eq('id', id);\n\n      // if (error) throw error;\n\n      // Para desarrollo\n      const index = mockApplications.findIndex(app => app.id === id);\n      if (index !== -1) {\n        mockApplications.splice(index, 1);\n      }\n    } catch (error) {\n      console.error(`Error deleting application with id ${id}:`, error);\n      throw error;\n    }\n  },\n  /**\n   * Obtiene el historial de estados de una solicitud\n   */\n  async getStatusHistory(applicationId) {\n    try {\n      // En producción\n      // const { data, error } = await supabase\n      //   .from(STATUS_HISTORY_TABLE)\n      //   .select('*')\n      //   .eq('application_id', applicationId)\n      //   .order('created_at', { ascending: false });\n\n      // if (error) throw error;\n      // return data || [];\n\n      // Para desarrollo, devolvemos datos simulados\n      const mockHistory = [{\n        id: '1',\n        application_id: applicationId,\n        status: ApplicationStatus.PENDING,\n        comment: 'Solicitud creada',\n        created_at: '2023-07-18T10:30:00',\n        created_by: 'user-1',\n        user_name: 'Admin'\n      }];\n\n      // Si el ID coincide con alguno de nuestros mock, agregamos más historia\n      if (applicationId === '2' || applicationId === '3' || applicationId === '4') {\n        mockHistory.push({\n          id: '2',\n          application_id: applicationId,\n          status: ApplicationStatus.REVIEW,\n          comment: 'Solicitud en revisión',\n          created_at: '2023-07-19T11:20:00',\n          created_by: 'user-1',\n          user_name: 'Admin'\n        });\n      }\n      if (applicationId === '3' || applicationId === '4') {\n        mockHistory.push({\n          id: '3',\n          application_id: applicationId,\n          status: applicationId === '3' ? ApplicationStatus.APPROVED : ApplicationStatus.REJECTED,\n          comment: applicationId === '3' ? 'Solicitud aprobada' : 'Cliente no cumple requisitos',\n          created_at: '2023-07-20T14:45:00',\n          created_by: 'user-2',\n          user_name: 'Analista'\n        });\n      }\n      return mockHistory;\n    } catch (error) {\n      console.error(`Error fetching status history for application ${applicationId}:`, error);\n      throw error;\n    }\n  },\n  /**\n   * Obtiene los documentos asociados a una solicitud\n   */\n  async getDocuments(applicationId) {\n    try {\n      // En producción\n      // const { data, error } = await supabase\n      //   .from(DOCUMENTS_TABLE)\n      //   .select('*')\n      //   .eq('application_id', applicationId)\n      //   .order('uploaded_at', { ascending: false });\n\n      // if (error) throw error;\n      // return data || [];\n\n      // Para desarrollo, datos simulados\n      return [];\n    } catch (error) {\n      console.error(`Error fetching documents for application ${applicationId}:`, error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["ApplicationStatus","ApplicationType","LoanCalculator","APPLICATIONS_TABLE","DOCUMENTS_TABLE","STATUS_HISTORY_TABLE","mockApplications","id","client_id","client_name","email","phone","type","PERSONAL_LOAN","amount","term_months","interest_rate","status","PENDING","created_at","monthly_payment","total_interest","AUTO_LOAN","REVIEW","CAR_BACKED_LOAN","APPROVED","CASH_ADVANCE","REJECTED","ApplicationService","getApplications","filters","filteredApplications","filter","app","search","searchLower","toLowerCase","_app$client_name","_app$email","_app$phone","includes","dateFrom","Date","dateTo","amountMin","undefined","amountMax","error","console","getApplicationById","application","find","createApplication","monthlyPayment","calculateMonthlyPayment","totalInterest","calculateTotalInterest","newApplication","length","toISOString","Math","round","total_payment","push","updateApplication","updates","index","findIndex","updatedApp","updated_at","interestRate","termMonths","changeApplicationStatus","comment","userId","log","application_id","created_by","deleteApplication","splice","getStatusHistory","applicationId","mockHistory","user_name","getDocuments"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/applicationService.ts"],"sourcesContent":["import { supabase } from '../utils/supabase';\nimport { \n  Application, \n  ApplicationFilters, \n  ApplicationStatus, \n  ApplicationType,\n  Document,\n  StatusHistory,\n  LoanCalculator\n} from '../utils/types/applications';\n\n// Tabla en Supabase\nconst APPLICATIONS_TABLE = 'applications';\nconst DOCUMENTS_TABLE = 'documents';\nconst STATUS_HISTORY_TABLE = 'status_history';\n\n// Mock data para desarrollo local\nconst mockApplications: Application[] = [\n  {\n    id: '1',\n    client_id: 'client-1',\n    client_name: 'Juan Pérez',\n    email: 'juan@example.com',\n    phone: '+56 9 1234 5678',\n    type: ApplicationType.PERSONAL_LOAN,\n    amount: 1500000,\n    term_months: 24,\n    interest_rate: 12.5,\n    status: ApplicationStatus.PENDING,\n    created_at: '2023-07-18T10:30:00',\n    monthly_payment: 70806,\n    total_interest: 199344\n  },\n  {\n    id: '2',\n    client_id: 'client-2',\n    client_name: 'María González',\n    email: 'maria@example.com',\n    phone: '+56 9 8765 4321',\n    type: ApplicationType.AUTO_LOAN,\n    amount: 5000000,\n    term_months: 48,\n    interest_rate: 9.9,\n    status: ApplicationStatus.REVIEW,\n    created_at: '2023-07-17T14:20:00',\n    monthly_payment: 126207,\n    total_interest: 1057936\n  },\n  {\n    id: '3',\n    client_id: 'client-3',\n    client_name: 'Carlos Rodríguez',\n    email: 'carlos@example.com',\n    phone: '+56 9 5555 5555',\n    type: ApplicationType.CAR_BACKED_LOAN,\n    amount: 3500000,\n    term_months: 36,\n    interest_rate: 10.5,\n    status: ApplicationStatus.APPROVED,\n    created_at: '2023-07-16T09:15:00',\n    monthly_payment: 113584,\n    total_interest: 590024\n  },\n  {\n    id: '4',\n    client_id: 'client-4',\n    client_name: 'Ana Martínez',\n    email: 'ana@example.com',\n    phone: '+56 9 7777 7777',\n    type: ApplicationType.CASH_ADVANCE,\n    amount: 750000,\n    term_months: 12,\n    interest_rate: 15,\n    status: ApplicationStatus.REJECTED,\n    created_at: '2023-07-15T16:45:00',\n    monthly_payment: 67950,\n    total_interest: 65400\n  },\n  {\n    id: '5',\n    client_id: 'client-5',\n    client_name: 'Roberto Silva',\n    email: 'roberto@example.com',\n    phone: '+56 9 8888 8888',\n    type: ApplicationType.PERSONAL_LOAN,\n    amount: 1200000,\n    term_months: 18,\n    interest_rate: 11.5,\n    status: ApplicationStatus.PENDING,\n    created_at: '2023-07-14T11:30:00',\n    monthly_payment: 72672,\n    total_interest: 108096\n  },\n];\n\n// Servicio para gestionar solicitudes\nexport const ApplicationService = {\n  /**\n   * Obtiene una lista de solicitudes con filtros opcionales\n   */\n  async getApplications(filters?: ApplicationFilters): Promise<Application[]> {\n    try {\n      // En un entorno de producción, aquí se realizaría la consulta a Supabase\n      // let query = supabase.from(APPLICATIONS_TABLE).select('*');\n      \n      // Aplicar filtros...\n      // if (filters?.status && filters.status !== 'all') {\n      //   query = query.eq('status', filters.status);\n      // }\n      \n      // const { data, error } = await query;\n      // if (error) throw error;\n      // return data || [];\n      \n      // Para desarrollo, usamos datos simulados\n      let filteredApplications = [...mockApplications];\n      \n      // Aplicar filtros si existen\n      if (filters) {\n        if (filters.status && filters.status !== 'all') {\n          filteredApplications = filteredApplications.filter(app => app.status === filters.status);\n        }\n        \n        if (filters.type && filters.type !== 'all') {\n          filteredApplications = filteredApplications.filter(app => app.type === filters.type);\n        }\n        \n        if (filters.search) {\n          const searchLower = filters.search.toLowerCase();\n          filteredApplications = filteredApplications.filter(app => \n            app.client_name?.toLowerCase().includes(searchLower) ||\n            app.email?.toLowerCase().includes(searchLower) ||\n            app.phone?.toLowerCase().includes(searchLower)\n          );\n        }\n        \n        if (filters.dateFrom) {\n          const dateFrom = new Date(filters.dateFrom);\n          filteredApplications = filteredApplications.filter(app => \n            new Date(app.created_at) >= dateFrom\n          );\n        }\n        \n        if (filters.dateTo) {\n          const dateTo = new Date(filters.dateTo);\n          filteredApplications = filteredApplications.filter(app => \n            new Date(app.created_at) <= dateTo\n          );\n        }\n        \n        if (filters.amountMin !== undefined) {\n          filteredApplications = filteredApplications.filter(app => \n            app.amount >= (filters.amountMin || 0)\n          );\n        }\n        \n        if (filters.amountMax !== undefined) {\n          filteredApplications = filteredApplications.filter(app => \n            app.amount <= filters.amountMax\n          );\n        }\n      }\n      \n      return filteredApplications;\n    } catch (error) {\n      console.error('Error fetching applications:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Obtiene una solicitud por su ID\n   */\n  async getApplicationById(id: string): Promise<Application | null> {\n    try {\n      // En producción\n      // const { data, error } = await supabase\n      //   .from(APPLICATIONS_TABLE)\n      //   .select('*')\n      //   .eq('id', id)\n      //   .single();\n      \n      // if (error) throw error;\n      // return data;\n      \n      // Para desarrollo\n      const application = mockApplications.find(app => app.id === id);\n      return application || null;\n    } catch (error) {\n      console.error(`Error fetching application with id ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Crea una nueva solicitud\n   */\n  async createApplication(application: Omit<Application, 'id' | 'created_at'>): Promise<Application> {\n    try {\n      // Calcular campos\n      const monthlyPayment = LoanCalculator.calculateMonthlyPayment(\n        application.amount, \n        application.interest_rate, \n        application.term_months\n      );\n      \n      const totalInterest = LoanCalculator.calculateTotalInterest(\n        application.amount, \n        application.interest_rate, \n        application.term_months\n      );\n      \n      // En producción\n      // const { data, error } = await supabase\n      //   .from(APPLICATIONS_TABLE)\n      //   .insert([{\n      //     ...application,\n      //     created_at: new Date().toISOString(),\n      //     monthly_payment: monthlyPayment,\n      //     total_interest: totalInterest,\n      //     total_payment: application.amount + totalInterest\n      //   }])\n      //   .select()\n      //   .single();\n      \n      // if (error) throw error;\n      // return data;\n      \n      // Para desarrollo\n      const newApplication: Application = {\n        ...application,\n        id: `${mockApplications.length + 1}`,\n        created_at: new Date().toISOString(),\n        monthly_payment: Math.round(monthlyPayment),\n        total_interest: Math.round(totalInterest),\n        total_payment: Math.round(application.amount + totalInterest)\n      };\n      \n      mockApplications.push(newApplication);\n      return newApplication;\n    } catch (error) {\n      console.error('Error creating application:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Actualiza una solicitud existente\n   */\n  async updateApplication(id: string, updates: Partial<Application>): Promise<Application | null> {\n    try {\n      // En producción\n      // const { data, error } = await supabase\n      //   .from(APPLICATIONS_TABLE)\n      //   .update({\n      //     ...updates,\n      //     updated_at: new Date().toISOString()\n      //   })\n      //   .eq('id', id)\n      //   .select()\n      //   .single();\n      \n      // if (error) throw error;\n      // return data;\n      \n      // Para desarrollo\n      const index = mockApplications.findIndex(app => app.id === id);\n      if (index === -1) return null;\n      \n      const updatedApp: Application = {\n        ...mockApplications[index],\n        ...updates,\n        updated_at: new Date().toISOString()\n      };\n      \n      // Recalcular si cambian monto, tasa o plazo\n      if (\n        updates.amount !== undefined || \n        updates.interest_rate !== undefined || \n        updates.term_months !== undefined\n      ) {\n        const amount = updates.amount || mockApplications[index].amount;\n        const interestRate = updates.interest_rate || mockApplications[index].interest_rate;\n        const termMonths = updates.term_months || mockApplications[index].term_months;\n        \n        updatedApp.monthly_payment = Math.round(\n          LoanCalculator.calculateMonthlyPayment(amount, interestRate, termMonths)\n        );\n        \n        updatedApp.total_interest = Math.round(\n          LoanCalculator.calculateTotalInterest(amount, interestRate, termMonths)\n        );\n        \n        updatedApp.total_payment = Math.round(amount + updatedApp.total_interest);\n      }\n      \n      mockApplications[index] = updatedApp;\n      return updatedApp;\n    } catch (error) {\n      console.error(`Error updating application with id ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Cambia el estado de una solicitud y registra el cambio en el historial\n   */\n  async changeApplicationStatus(\n    id: string, \n    status: ApplicationStatus, \n    comment: string, \n    userId: string\n  ): Promise<Application | null> {\n    try {\n      // En producción sería una transacción para actualizar estado y agregar al historial\n      // const { data: application, error: appError } = await supabase\n      //   .from(APPLICATIONS_TABLE)\n      //   .update({ \n      //     status, \n      //     updated_at: new Date().toISOString() \n      //   })\n      //   .eq('id', id)\n      //   .select()\n      //   .single();\n      \n      // if (appError) throw appError;\n      \n      // const { error: historyError } = await supabase\n      //   .from(STATUS_HISTORY_TABLE)\n      //   .insert([{\n      //     application_id: id,\n      //     status,\n      //     comment,\n      //     created_by: userId,\n      //     created_at: new Date().toISOString()\n      //   }]);\n      \n      // if (historyError) throw historyError;\n      // return application;\n      \n      // Para desarrollo\n      const application = await this.updateApplication(id, { \n        status, \n        updated_at: new Date().toISOString() \n      });\n      \n      // Simulación de actualización del historial\n      console.log('Status history updated:', {\n        application_id: id,\n        status,\n        comment,\n        created_by: userId,\n        created_at: new Date().toISOString()\n      });\n      \n      return application;\n    } catch (error) {\n      console.error(`Error changing status for application ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Elimina una solicitud\n   */\n  async deleteApplication(id: string): Promise<void> {\n    try {\n      // En producción\n      // const { error } = await supabase\n      //   .from(APPLICATIONS_TABLE)\n      //   .delete()\n      //   .eq('id', id);\n      \n      // if (error) throw error;\n      \n      // Para desarrollo\n      const index = mockApplications.findIndex(app => app.id === id);\n      if (index !== -1) {\n        mockApplications.splice(index, 1);\n      }\n    } catch (error) {\n      console.error(`Error deleting application with id ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Obtiene el historial de estados de una solicitud\n   */\n  async getStatusHistory(applicationId: string): Promise<StatusHistory[]> {\n    try {\n      // En producción\n      // const { data, error } = await supabase\n      //   .from(STATUS_HISTORY_TABLE)\n      //   .select('*')\n      //   .eq('application_id', applicationId)\n      //   .order('created_at', { ascending: false });\n      \n      // if (error) throw error;\n      // return data || [];\n      \n      // Para desarrollo, devolvemos datos simulados\n      const mockHistory: StatusHistory[] = [\n        {\n          id: '1',\n          application_id: applicationId,\n          status: ApplicationStatus.PENDING,\n          comment: 'Solicitud creada',\n          created_at: '2023-07-18T10:30:00',\n          created_by: 'user-1',\n          user_name: 'Admin'\n        }\n      ];\n      \n      // Si el ID coincide con alguno de nuestros mock, agregamos más historia\n      if (applicationId === '2' || applicationId === '3' || applicationId === '4') {\n        mockHistory.push({\n          id: '2',\n          application_id: applicationId,\n          status: ApplicationStatus.REVIEW,\n          comment: 'Solicitud en revisión',\n          created_at: '2023-07-19T11:20:00',\n          created_by: 'user-1',\n          user_name: 'Admin'\n        });\n      }\n      \n      if (applicationId === '3' || applicationId === '4') {\n        mockHistory.push({\n          id: '3',\n          application_id: applicationId,\n          status: applicationId === '3' ? ApplicationStatus.APPROVED : ApplicationStatus.REJECTED,\n          comment: applicationId === '3' ? 'Solicitud aprobada' : 'Cliente no cumple requisitos',\n          created_at: '2023-07-20T14:45:00',\n          created_by: 'user-2',\n          user_name: 'Analista'\n        });\n      }\n      \n      return mockHistory;\n    } catch (error) {\n      console.error(`Error fetching status history for application ${applicationId}:`, error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Obtiene los documentos asociados a una solicitud\n   */\n  async getDocuments(applicationId: string): Promise<Document[]> {\n    try {\n      // En producción\n      // const { data, error } = await supabase\n      //   .from(DOCUMENTS_TABLE)\n      //   .select('*')\n      //   .eq('application_id', applicationId)\n      //   .order('uploaded_at', { ascending: false });\n      \n      // if (error) throw error;\n      // return data || [];\n      \n      // Para desarrollo, datos simulados\n      return [];\n    } catch (error) {\n      console.error(`Error fetching documents for application ${applicationId}:`, error);\n      throw error;\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}