{"ast":null,"code":"import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from '../utils/constants/tables';\n// Nombre de la tabla definido como constante para evitar errores de escritura\nconst CLIENTS_TABLE = TABLES.CLIENTS || 'clients';\n\n// Verificar si la tabla existe antes de realizar operaciones\nconst tableExists = async () => {\n  try {\n    // Intentamos hacer una consulta sencilla para verificar si la tabla existe\n    const {\n      count,\n      error\n    } = await supabase.from(CLIENTS_TABLE).select('*', {\n      count: 'exact',\n      head: true\n    });\n    return !error;\n  } catch (error) {\n    console.warn('Error verificando si la tabla clients existe:', error);\n    return false;\n  }\n};\n\n// Get all clients with filters\nexport const getClients = async filters => {\n  try {\n    // Verificar si la tabla existe\n    const exists = await tableExists();\n    if (!exists) {\n      console.warn('La tabla clients no existe. Retornando lista vacía.');\n      return {\n        data: [],\n        count: 0\n      };\n    }\n    let query = supabase.from(CLIENTS_TABLE).select('*', {\n      count: 'exact'\n    });\n\n    // Apply filters\n    if (filters) {\n      // Filter by advisor\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      // Filter by company\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      // Filter by date range\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      // Search by name, email, phone, RFC or CURP\n      if (filters.searchQuery) {\n        query = query.or(`name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);\n      }\n\n      // Apply pagination if provided\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n\n    // Order by most recent first\n    query = query.order('created_at', {\n      ascending: false\n    });\n    const {\n      data,\n      error,\n      count\n    } = await query;\n    if (error) {\n      var _error$message;\n      // Check if the error is because the table doesn't exist\n      if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Using fallback empty list.');\n        return {\n          clients: [],\n          totalCount: 0\n        };\n      }\n      console.error('Error fetching clients:', error);\n      throw error;\n    }\n    return {\n      clients: data,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    var _error$message2, _error$message3;\n    // Verificar si el error es porque la tabla no existe\n    if (error instanceof Error && ((_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes('does not exist') || (_error$message3 = error.message) !== null && _error$message3 !== void 0 && _error$message3.includes('42P01'))) {\n      console.warn('La tabla clients no existe. Retornando lista vacía.');\n      return {\n        data: [],\n        count: 0\n      };\n    }\n    console.error('Error en getClients:', error);\n    throw error;\n  }\n};\n\n// Get a single client by ID\nexport const getClientById = async id => {\n  try {\n    // Verificar si la tabla existe\n    const exists = await tableExists();\n    if (!exists) {\n      console.warn('La tabla clients no existe. Retornando cliente vacío.');\n      return null;\n    }\n    const {\n      data,\n      error\n    } = await supabase.from(CLIENTS_TABLE).select('*').eq('id', id).single();\n    if (error) {\n      var _error$message4;\n      // Check if the error is because the table doesn't exist\n      if ((_error$message4 = error.message) !== null && _error$message4 !== void 0 && _error$message4.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Returning empty client.');\n        return null;\n      }\n      console.error(`Error fetching client with ID ${id}:`, error);\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    var _error$message5, _error$message6;\n    // Verificar si el error es porque la tabla no existe\n    if (error instanceof Error && ((_error$message5 = error.message) !== null && _error$message5 !== void 0 && _error$message5.includes('does not exist') || (_error$message6 = error.message) !== null && _error$message6 !== void 0 && _error$message6.includes('42P01'))) {\n      console.warn('La tabla clients no existe. Retornando cliente vacío.');\n      return null;\n    }\n    console.error(`Error in getClientById:`, error);\n    throw error;\n  }\n};\n\n// Función para escapar cadenas de texto para SQL\nfunction escapeSQLString(str) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\n// Get client applications\nexport const getClientApplications = async clientId => {\n  // Consultar aplicaciones usando MCP en lugar de Supabase\n  try {\n    // Primero obtenemos el cliente para saber su nombre\n    const client = await getClientById(clientId).catch(err => {\n      // If clients table doesn't exist, use a workaround\n      if (err.message === 'Clients table does not exist') {\n        return null;\n      }\n      throw err;\n    });\n    if (!client) {\n      console.warn('Client not found or clients table does not exist. Returning empty applications list.');\n      return [];\n    }\n\n    // Luego usamos el nombre del cliente para buscar aplicaciones\n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name)}'\n      ORDER BY created_at DESC\n    `;\n\n    // Usamos executeQuery que es el método para el MCP\n    const executeQuery = async query => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query\n          })\n        });\n        const result = await response.json();\n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        return result.data;\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    const data = await executeQuery(query);\n    return data;\n  } catch (error) {\n    console.error(`Error fetching applications for client ${clientId}:`, error);\n    throw error;\n  }\n};\n\n// Create a new client\nexport const createClient = async client => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from(CLIENTS_TABLE).insert([client]).select();\n    if (error) {\n      var _error$message7;\n      // Check if the error is because the table doesn't exist\n      if ((_error$message7 = error.message) !== null && _error$message7 !== void 0 && _error$message7.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Cannot create client.');\n        throw new Error('Clients table does not exist');\n      }\n      console.error('Error creating client:', error);\n      throw error;\n    }\n    return data[0];\n  } catch (error) {\n    console.error('Error in createClient:', error);\n    throw error;\n  }\n};\n\n// Update an existing client\nexport const updateClient = async (id, updates) => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from(CLIENTS_TABLE).update(updates).eq('id', id).select();\n    if (error) {\n      var _error$message8;\n      // Check if the error is because the table doesn't exist\n      if ((_error$message8 = error.message) !== null && _error$message8 !== void 0 && _error$message8.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Cannot update client.');\n        throw new Error('Clients table does not exist');\n      }\n      console.error(`Error updating client with ID ${id}:`, error);\n      throw error;\n    }\n    return data[0];\n  } catch (error) {\n    console.error(`Error in updateClient:`, error);\n    throw error;\n  }\n};\n\n// Delete a client\nexport const deleteClient = async id => {\n  try {\n    const {\n      error\n    } = await supabase.from(CLIENTS_TABLE).delete().eq('id', id);\n    if (error) {\n      var _error$message9;\n      // Check if the error is because the table doesn't exist\n      if ((_error$message9 = error.message) !== null && _error$message9 !== void 0 && _error$message9.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Cannot delete client.');\n        throw new Error('Clients table does not exist');\n      }\n      console.error(`Error deleting client with ID ${id}:`, error);\n      throw error;\n    }\n    return true;\n  } catch (error) {\n    console.error(`Error in deleteClient:`, error);\n    throw error;\n  }\n};\n\n// Check if a client exists with the given email or RFC\nexport const checkClientExists = async (email, rfc) => {\n  try {\n    let query = supabase.from(CLIENTS_TABLE).select('id, email, rfc').eq('email', email);\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) {\n      var _error$message10;\n      // Check if the error is because the table doesn't exist\n      if ((_error$message10 = error.message) !== null && _error$message10 !== void 0 && _error$message10.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Returning null.');\n        return null;\n      }\n      console.error('Error checking client existence:', error);\n      throw error;\n    }\n    return data.length > 0 ? data[0] : null;\n  } catch (error) {\n    console.error('Error in checkClientExists:', error);\n    throw error;\n  }\n};\n\n// Get client count by filters\nexport const getClientCount = async filters => {\n  try {\n    let query = supabase.from(CLIENTS_TABLE).select('id', {\n      count: 'exact',\n      head: true\n    });\n\n    // Apply filters\n    if (filters) {\n      // Filter by advisor\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      // Filter by company\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      // Filter by date range\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      // Search by name, email or phone\n      if (filters.searchQuery) {\n        query = query.or(`name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);\n      }\n    }\n    const {\n      count,\n      error\n    } = await query;\n    if (error) {\n      var _error$message11;\n      // Check if the error is because the table doesn't exist\n      if ((_error$message11 = error.message) !== null && _error$message11 !== void 0 && _error$message11.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Returning count 0.');\n        return 0;\n      }\n      console.error('Error getting client count:', error);\n      throw error;\n    }\n    return count || 0;\n  } catch (error) {\n    console.error('Error in getClientCount:', error);\n    return 0;\n  }\n};","map":{"version":3,"names":["supabase","TABLES","CLIENTS_TABLE","CLIENTS","tableExists","count","error","from","select","head","console","warn","getClients","filters","exists","data","query","advisor_id","eq","company_id","dateFrom","gte","dateTo","lte","searchQuery","or","page","undefined","pageSize","to","range","order","ascending","_error$message","message","includes","code","clients","totalCount","_error$message2","_error$message3","Error","getClientById","id","single","_error$message4","_error$message5","_error$message6","escapeSQLString","str","replace","getClientApplications","clientId","client","catch","err","APPLICATIONS","name","executeQuery","response","fetch","method","headers","body","JSON","stringify","result","json","createClient","insert","_error$message7","updateClient","updates","update","_error$message8","deleteClient","delete","_error$message9","checkClientExists","email","rfc","_error$message10","length","getClientCount","_error$message11"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/clientService.ts"],"sourcesContent":["import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from '../utils/constants/tables';\n\nexport interface Client {\n  id: string;\n  created_at: string;\n  name: string;\n  email: string;\n  phone: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  postal_code?: string;\n  birth_date?: string;\n  rfc?: string;\n  curp?: string;\n  company_id?: string;\n  advisor_id?: string;\n}\n\nexport interface ClientFilter {\n  searchQuery?: string;\n  advisor_id?: string;\n  company_id?: string;\n  dateFrom?: string;\n  dateTo?: string;\n  page?: number;\n  pageSize?: number;\n}\n\n// Nombre de la tabla definido como constante para evitar errores de escritura\nconst CLIENTS_TABLE = TABLES.CLIENTS || 'clients';\n\n// Verificar si la tabla existe antes de realizar operaciones\nconst tableExists = async () => {\n  try {\n    // Intentamos hacer una consulta sencilla para verificar si la tabla existe\n    const { count, error } = await supabase\n      .from(CLIENTS_TABLE)\n      .select('*', { count: 'exact', head: true });\n    \n    return !error;\n  } catch (error) {\n    console.warn('Error verificando si la tabla clients existe:', error);\n    return false;\n  }\n};\n\n// Get all clients with filters\nexport const getClients = async (filters?: ClientFilter) => {\n  try {\n    // Verificar si la tabla existe\n    const exists = await tableExists();\n    if (!exists) {\n      console.warn('La tabla clients no existe. Retornando lista vacía.');\n      return { data: [], count: 0 };\n    }\n\n    let query = supabase.from(CLIENTS_TABLE).select('*', { count: 'exact' });\n\n    // Apply filters\n    if (filters) {\n      // Filter by advisor\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      // Filter by company\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      // Filter by date range\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      // Search by name, email, phone, RFC or CURP\n      if (filters.searchQuery) {\n        query = query.or(\n          `name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n\n      // Apply pagination if provided\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n\n    // Order by most recent first\n    query = query.order('created_at', { ascending: false });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      // Check if the error is because the table doesn't exist\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Using fallback empty list.');\n        return {\n          clients: [],\n          totalCount: 0\n        };\n      }\n      \n      console.error('Error fetching clients:', error);\n      throw error;\n    }\n\n    return {\n      clients: data as Client[],\n      totalCount: count || 0\n    };\n  } catch (error) {\n    // Verificar si el error es porque la tabla no existe\n    if (error instanceof Error && (\n        error.message?.includes('does not exist') || \n        error.message?.includes('42P01'))) {\n      console.warn('La tabla clients no existe. Retornando lista vacía.');\n      return { data: [], count: 0 };\n    }\n    \n    console.error('Error en getClients:', error);\n    throw error;\n  }\n};\n\n// Get a single client by ID\nexport const getClientById = async (id: string) => {\n  try {\n    // Verificar si la tabla existe\n    const exists = await tableExists();\n    if (!exists) {\n      console.warn('La tabla clients no existe. Retornando cliente vacío.');\n      return null;\n    }\n\n    const { data, error } = await supabase\n      .from(CLIENTS_TABLE)\n      .select('*')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      // Check if the error is because the table doesn't exist\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Returning empty client.');\n        return null;\n      }\n      \n      console.error(`Error fetching client with ID ${id}:`, error);\n      throw error;\n    }\n\n    return data as Client;\n  } catch (error) {\n    // Verificar si el error es porque la tabla no existe\n    if (error instanceof Error && (\n        error.message?.includes('does not exist') || \n        error.message?.includes('42P01'))) {\n      console.warn('La tabla clients no existe. Retornando cliente vacío.');\n      return null;\n    }\n    \n    console.error(`Error in getClientById:`, error);\n    throw error;\n  }\n};\n\n// Función para escapar cadenas de texto para SQL\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\n// Get client applications\nexport const getClientApplications = async (clientId: string) => {\n  // Consultar aplicaciones usando MCP en lugar de Supabase\n  try {\n    // Primero obtenemos el cliente para saber su nombre\n    const client = await getClientById(clientId).catch(err => {\n      // If clients table doesn't exist, use a workaround\n      if (err.message === 'Clients table does not exist') {\n        return null;\n      }\n      throw err;\n    });\n    \n    if (!client) {\n      console.warn('Client not found or clients table does not exist. Returning empty applications list.');\n      return [];\n    }\n    \n    // Luego usamos el nombre del cliente para buscar aplicaciones\n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name)}'\n      ORDER BY created_at DESC\n    `;\n    \n    // Usamos executeQuery que es el método para el MCP\n    const executeQuery = async (query: string) => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query }),\n        });\n        \n        const result = await response.json();\n        \n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        \n        return result.data;\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    \n    const data = await executeQuery(query);\n    return data;\n  } catch (error) {\n    console.error(`Error fetching applications for client ${clientId}:`, error);\n    throw error;\n  }\n};\n\n// Create a new client\nexport const createClient = async (client: Omit<Client, 'id' | 'created_at'>) => {\n  try {\n    const { data, error } = await supabase\n      .from(CLIENTS_TABLE)\n      .insert([client])\n      .select();\n\n    if (error) {\n      // Check if the error is because the table doesn't exist\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Cannot create client.');\n        throw new Error('Clients table does not exist');\n      }\n      \n      console.error('Error creating client:', error);\n      throw error;\n    }\n\n    return data[0] as Client;\n  } catch (error) {\n    console.error('Error in createClient:', error);\n    throw error;\n  }\n};\n\n// Update an existing client\nexport const updateClient = async (id: string, updates: Partial<Client>) => {\n  try {\n    const { data, error } = await supabase\n      .from(CLIENTS_TABLE)\n      .update(updates)\n      .eq('id', id)\n      .select();\n\n    if (error) {\n      // Check if the error is because the table doesn't exist\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Cannot update client.');\n        throw new Error('Clients table does not exist');\n      }\n      \n      console.error(`Error updating client with ID ${id}:`, error);\n      throw error;\n    }\n\n    return data[0] as Client;\n  } catch (error) {\n    console.error(`Error in updateClient:`, error);\n    throw error;\n  }\n};\n\n// Delete a client\nexport const deleteClient = async (id: string) => {\n  try {\n    const { error } = await supabase\n      .from(CLIENTS_TABLE)\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      // Check if the error is because the table doesn't exist\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Cannot delete client.');\n        throw new Error('Clients table does not exist');\n      }\n      \n      console.error(`Error deleting client with ID ${id}:`, error);\n      throw error;\n    }\n\n    return true;\n  } catch (error) {\n    console.error(`Error in deleteClient:`, error);\n    throw error;\n  }\n};\n\n// Check if a client exists with the given email or RFC\nexport const checkClientExists = async (email: string, rfc?: string) => {\n  try {\n    let query = supabase\n      .from(CLIENTS_TABLE)\n      .select('id, email, rfc')\n      .eq('email', email);\n\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      // Check if the error is because the table doesn't exist\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Returning null.');\n        return null;\n      }\n      \n      console.error('Error checking client existence:', error);\n      throw error;\n    }\n\n    return data.length > 0 ? data[0] : null;\n  } catch (error) {\n    console.error('Error in checkClientExists:', error);\n    throw error;\n  }\n};\n\n// Get client count by filters\nexport const getClientCount = async (filters?: ClientFilter) => {\n  try {\n    let query = supabase\n      .from(CLIENTS_TABLE)\n      .select('id', { count: 'exact', head: true });\n\n    // Apply filters\n    if (filters) {\n      // Filter by advisor\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      // Filter by company\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      // Filter by date range\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      // Search by name, email or phone\n      if (filters.searchQuery) {\n        query = query.or(\n          `name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n    }\n\n    const { count, error } = await query;\n\n    if (error) {\n      // Check if the error is because the table doesn't exist\n      if (error.message?.includes('does not exist') || error.code === '42P01') {\n        console.warn('Clients table does not exist. Returning count 0.');\n        return 0;\n      }\n      \n      console.error('Error getting client count:', error);\n      throw error;\n    }\n\n    return count || 0;\n  } catch (error) {\n    console.error('Error in getClientCount:', error);\n    return 0;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}