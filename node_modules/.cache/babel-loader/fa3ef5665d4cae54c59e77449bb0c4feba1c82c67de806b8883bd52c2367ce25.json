{"ast":null,"code":"import { getServiceClient } from \"../lib/supabaseClient\";\nimport { TABLES } from \"../utils/constants/tables\";\nimport * as documentService from './documentService';\nimport { ErrorType, createAppError, logError, handleApiError, isRlsViolation, createRlsViolationError, createNoEffectError } from '../utils/errorHandling';\nimport { processNumericField } from '../utils/numberFormatting';\n\n// Re-exportamos las interfaces para mantener compatibilidad\n\nconst USERS_TABLE = 'users';\nconst mapUserToClient = userData => {\n  if (!userData) {\n    console.error('Error: userData is undefined in mapUserToClient');\n    throw new Error('No se pudo procesar la información del cliente, los datos son inválidos');\n  }\n  const fullName = userData.name || [userData.first_name, userData.paternal_surname, userData.maternal_surname].filter(Boolean).join(' ');\n  return {\n    id: userData.id,\n    created_at: userData.created_at,\n    name: fullName,\n    first_name: userData.first_name,\n    paternal_surname: userData.paternal_surname,\n    maternal_surname: userData.maternal_surname,\n    email: userData.email,\n    phone: userData.phone,\n    birth_date: userData.birth_date,\n    company_id: userData.company_id,\n    rfc: userData.rfc,\n    curp: userData.curp,\n    advisor_id: userData.advisor_id,\n    address: userData.address,\n    city: userData.city,\n    state: userData.state,\n    postal_code: userData.postal_code,\n    gender: userData.gender,\n    marital_status: userData.marital_status,\n    employment_type: userData.employment_type,\n    employment_years: userData.employment_years,\n    monthly_income: userData.monthly_income,\n    additional_income: userData.additional_income,\n    monthly_expenses: userData.monthly_expenses,\n    other_loan_balances: userData.other_loan_balances,\n    bank_name: userData.bank_name,\n    bank_clabe: userData.bank_clabe,\n    bank_account_number: userData.bank_account_number,\n    bank_account_type: userData.bank_account_type,\n    bank_account_origin: userData.bank_account_origin\n  };\n};\nexport const getClients = async filters => {\n  try {\n    // Usamos el cliente de servicio para evitar problemas de autenticación\n    const serviceClient = getServiceClient();\n    let query = serviceClient.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin', {\n      count: 'exact'\n    });\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n      if (filters.searchQuery) {\n        query = query.or(`first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);\n      }\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n    query = query.order('created_at', {\n      ascending: false\n    });\n    const {\n      data,\n      error,\n      count\n    } = await query;\n    if (error) {\n      logError(error, 'getClients', {\n        filters\n      });\n      throw handleApiError(error);\n    }\n    const clients = data ? data.map(mapUserToClient) : [];\n    return {\n      clients,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    logError(error, 'getClients', {\n      filters\n    });\n    throw handleApiError(error);\n  }\n};\nexport const getClientById = async id => {\n  try {\n    // Usamos el cliente de servicio para evitar problemas de autenticación\n    const serviceClient = getServiceClient();\n    const {\n      data,\n      error\n    } = await serviceClient.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin').eq('id', id).single();\n    if (error) {\n      logError(error, 'getClientById', {\n        clientId: id\n      });\n      throw handleApiError(error);\n    }\n    if (!data) {\n      const notFoundError = createAppError(ErrorType.NOT_FOUND, `No se encontró cliente con ID: ${id}`);\n      logError(notFoundError, 'getClientById', {\n        clientId: id\n      });\n      throw notFoundError;\n    }\n    return mapUserToClient(data);\n  } catch (error) {\n    logError(error, 'getClientById', {\n      clientId: id\n    });\n    throw handleApiError(error);\n  }\n};\nfunction escapeSQLString(str) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\nexport const getClientApplications = async clientId => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      console.error(`Error obteniendo cliente con ID ${clientId}:`, err);\n      throw handleApiError(err);\n    });\n    if (!client) {\n      const notFoundError = createAppError(ErrorType.NOT_FOUND, `El cliente no existe`);\n      logError(notFoundError, 'getClientApplications', {\n        clientId\n      });\n      return [];\n    }\n\n    // Construir la consulta con el nombre del cliente\n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name || '')}'\n      ORDER BY created_at DESC\n    `;\n    console.log(`Ejecutando consulta para obtener aplicaciones del cliente ${clientId}:`, query);\n\n    // Utilizamos el servicio de consulta SQL directo que evita problemas de RLS\n    const executeQuery = async query => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query: query\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`Error en la respuesta HTTP: ${response.status} ${response.statusText}`);\n        }\n        const result = await response.json();\n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        return result.data || [];\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    const data = await executeQuery(query);\n    console.log(`Aplicaciones encontradas para el cliente ${clientId}:`, data.length);\n    return data;\n  } catch (error) {\n    logError(error, 'getClientApplications', {\n      clientId\n    });\n    console.error(`Error completo al obtener aplicaciones para cliente ${clientId}:`, error);\n    // Devolvemos un array vacío en caso de error para no interrumpir el flujo\n    return [];\n  }\n};\nexport const uploadClientDocuments = async (clientId, documents, userId) => {\n  if (!clientId) {\n    console.error('Client ID is required for uploading documents');\n    throw new Error('El ID del cliente es requerido para subir documentos');\n  }\n\n  // Verificar que se proporcionaron documentos válidos\n  if (!documents || !Array.isArray(documents) || documents.length === 0) {\n    console.error('No valid documents provided for upload');\n    throw new Error('No se proporcionaron documentos válidos para subir');\n  }\n  if (!userId) {\n    console.error('User ID is required for uploading documents');\n    throw new Error('Se requiere el ID del usuario para subir documentos');\n  }\n  try {\n    // Obtener cliente con permisos de servicio para operaciones que requieren más privilegios\n    const serviceClient = getServiceClient();\n\n    // Asegurarse de que el bucket de almacenamiento exista\n    await documentService.ensureStorageBucketExists(serviceClient);\n\n    // Intentar subir cada documento\n    const uploadPromises = documents.map(async document => {\n      try {\n        // Verificar que el documento tenga datos válidos\n        if (!document.file || !document.name) {\n          console.error('Invalid document data', document);\n          throw new Error('Datos de documento inválidos: se requiere archivo y nombre');\n        }\n\n        // Create a document upload request compatible with the document service\n        const uploadParams = {\n          file: document.file,\n          category: document.category,\n          documentName: document.name,\n          description: document.description,\n          userId: userId,\n          client_id: clientId,\n          authClient: serviceClient\n        };\n\n        // Subir el documento\n        return await documentService.uploadDocument(uploadParams);\n      } catch (docError) {\n        // Manejo de errores específicos de permisos RLS\n        if (docError.message && (docError.message.includes('permission denied') || docError.message.includes('not authorized') || docError.message.includes('row level security'))) {\n          console.error('Permission error when uploading document:', docError);\n          throw new Error('No tienes permiso para subir documentos para este cliente. Verifica tus permisos.');\n        }\n\n        // Registrar el error pero permitir que otros uploads continúen\n        console.error(`Error uploading document for client ${clientId}:`, docError);\n        throw docError;\n      }\n    });\n    const results = await Promise.all(uploadPromises);\n    return results;\n  } catch (error) {\n    logError(error, 'uploadClientDocuments', {\n      clientId\n    });\n    throw handleApiError(error);\n  }\n};\nexport const createClient = async (client, documents, userId) => {\n  try {\n    // Create a copy to avoid modifying the original object\n    const userData = {\n      email: client.email,\n      first_name: client.first_name || '',\n      paternal_surname: client.paternal_surname || '',\n      maternal_surname: client.maternal_surname || '',\n      phone: client.phone,\n      birth_date: client.birth_date,\n      company_id: client.company_id,\n      rfc: client.rfc,\n      curp: client.curp,\n      advisor_id: client.advisor_id,\n      address: client.address,\n      city: client.city,\n      state: client.state,\n      postal_code: client.postal_code,\n      gender: client.gender,\n      marital_status: client.marital_status,\n      employment_type: client.employment_type,\n      employment_years: client.employment_years,\n      monthly_income: client.monthly_income,\n      additional_income: client.additional_income,\n      monthly_expenses: client.monthly_expenses,\n      other_loan_balances: client.other_loan_balances,\n      bank_name: client.bank_name,\n      bank_clabe: client.bank_clabe,\n      bank_account_number: client.bank_account_number,\n      bank_account_type: client.bank_account_type,\n      bank_account_origin: client.bank_account_origin\n    };\n\n    // Asegurarse de que no se incluyan campos calculados\n    // Estos campos son calculados en la aplicación pero no existen en la base de datos\n    delete userData.name;\n    delete userData.warningMessage;\n\n    // Process numeric fields\n    if (userData.employment_years !== undefined) {\n      const processed = processNumericField(userData.employment_years);\n      userData.employment_years = processed === null ? undefined : processed;\n    }\n    if (userData.monthly_income !== undefined) {\n      const processed = processNumericField(userData.monthly_income);\n      userData.monthly_income = processed === null ? undefined : processed;\n    }\n    if (userData.additional_income !== undefined) {\n      const processed = processNumericField(userData.additional_income);\n      userData.additional_income = processed === null ? undefined : processed;\n    }\n    if (userData.monthly_expenses !== undefined) {\n      const processed = processNumericField(userData.monthly_expenses);\n      userData.monthly_expenses = processed === null ? undefined : processed;\n    }\n    if (userData.other_loan_balances !== undefined) {\n      const processed = processNumericField(userData.other_loan_balances);\n      userData.other_loan_balances = processed === null ? undefined : processed;\n    }\n\n    // Ensure company_id is present as it's required by the database schema\n    if (!userData.company_id) {\n      console.warn('No company_id provided when creating client - using default company');\n      userData.company_id = \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\"; // Default company (Herramental)\n    }\n\n    // Log sanitized data for debugging\n    console.log(`Creating client with sanitized data:`, JSON.stringify(userData));\n\n    // Get the service client for this operation to evitar problemas de autenticación\n    const serviceClient = getServiceClient();\n    const {\n      data,\n      error,\n      count\n    } = await serviceClient.from(USERS_TABLE).insert([userData]).select();\n    if (error) {\n      // Verificar si es una violación de RLS\n      if (isRlsViolation(error)) {\n        throw createRlsViolationError('crear', 'cliente', 'nuevo', error);\n      }\n      logError(error, 'createClient');\n      throw handleApiError(error);\n    }\n\n    // Verify that rows were affected\n    if (!data || data.length === 0 || count === 0) {\n      const noDataError = createAppError(ErrorType.SERVER, 'No se pudo crear el cliente. No se recibieron datos del servidor.');\n      logError(noDataError, 'createClient');\n      throw noDataError;\n    }\n    const newClient = mapUserToClient(data[0]);\n    let documentResult = null;\n    if (documents && documents.length > 0 && userId && newClient.id) {\n      try {\n        documentResult = await uploadClientDocuments(newClient.id, documents, userId);\n\n        // Check if any documents failed to upload\n        if (documentResult && documentResult.length > 0) {\n          console.warn(`${documentResult.length} documents failed to upload during client creation`);\n\n          // We'll continue but note the warning\n          newClient.warningMessage = `Se creó el cliente, pero ${documentResult.length} ${documentResult.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error('Error uploading documents during client creation:', docError);\n\n        // Continue with client creation but add warning\n        newClient.warningMessage = 'Se creó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n    return newClient;\n  } catch (error) {\n    logError(error, 'createClient', {\n      clientData: client\n    });\n    throw handleApiError(error);\n  }\n};\nexport const updateClient = async (id, updates, documents, userId) => {\n  try {\n    console.log(`Starting client update for ID ${id}`, updates);\n\n    // Create a copy to avoid modifying the original object\n    const userUpdates = {\n      ...updates\n    };\n\n    // Eliminar campos calculados o virtuales que no existen en la base de datos\n    // El campo 'name' es calculado en mapUserToClient pero no existe en la tabla\n    delete userUpdates.name;\n    delete userUpdates.warningMessage;\n\n    // Process specific numeric fields\n    if ('employment_years' in updates) {\n      const processed = processNumericField(updates.employment_years);\n      userUpdates.employment_years = processed === null ? undefined : processed;\n    }\n    if ('monthly_income' in updates) {\n      const processed = processNumericField(updates.monthly_income);\n      userUpdates.monthly_income = processed === null ? undefined : processed;\n    }\n    if ('additional_income' in updates) {\n      const processed = processNumericField(updates.additional_income);\n      userUpdates.additional_income = processed === null ? undefined : processed;\n    }\n    if ('monthly_expenses' in updates) {\n      const processed = processNumericField(updates.monthly_expenses);\n      userUpdates.monthly_expenses = processed === null ? undefined : processed;\n    }\n    if ('other_loan_balances' in updates) {\n      const processed = processNumericField(updates.other_loan_balances);\n      userUpdates.other_loan_balances = processed === null ? undefined : processed;\n    }\n\n    // Remove undefined fields\n    Object.keys(userUpdates).forEach(key => {\n      const typedKey = key;\n      if (userUpdates[typedKey] === undefined) {\n        delete userUpdates[typedKey];\n      }\n    });\n    console.log(`Updating client ${id} with sanitized data:`, JSON.stringify(userUpdates));\n\n    // Get the service client for this operation to evitar problemas de permisos\n    const serviceClient = getServiceClient();\n\n    // First, verify the client exists\n    const {\n      data: existingClient,\n      error: existingError\n    } = await serviceClient.from(USERS_TABLE).select('id').eq('id', id).single();\n    if (existingError || !existingClient) {\n      const notFoundError = createAppError(ErrorType.NOT_FOUND, `No se encontró el cliente con ID ${id}. Verifique que el cliente exista.`);\n      logError(notFoundError, 'updateClient', {\n        clientId: id\n      });\n      throw notFoundError;\n    }\n\n    // Perform the update with the service client\n    const {\n      data,\n      error,\n      count\n    } = await serviceClient.from(USERS_TABLE).update(userUpdates).eq('id', id).select();\n    if (error) {\n      // Verificar si es una violación de RLS\n      if (isRlsViolation(error)) {\n        throw createRlsViolationError('actualizar', 'cliente', id, error);\n      }\n      logError(error, 'updateClient', {\n        clientId: id\n      });\n      throw handleApiError(error);\n    }\n\n    // Verify that the update affected rows\n    if (!data || data.length === 0 || count === 0) {\n      console.warn(`Update operation didn't affect any rows for client ${id}`);\n      throw createNoEffectError('update', 'cliente', id);\n    }\n    let updatedClient;\n    if (!data || data.length === 0) {\n      console.log(`No data returned when updating client with ID ${id}, fetching client data separately`);\n\n      // Fallback: fetch the client data separately\n      const {\n        data: fetchedData,\n        error: fetchError\n      } = await serviceClient.from(USERS_TABLE).select('*').eq('id', id).single();\n      if (fetchError) {\n        console.error('Error fetching updated client:', fetchError);\n        throw fetchError;\n      }\n      updatedClient = mapUserToClient(fetchedData);\n    } else {\n      updatedClient = mapUserToClient(data[0]);\n    }\n    let documentResult = null;\n\n    // Upload documents if provided\n    if (documents && documents.length > 0 && userId) {\n      try {\n        console.log(`Uploading ${documents.length} documents for client ${id}`);\n        documentResult = await uploadClientDocuments(id, documents, userId);\n\n        // Check if any documents failed to upload\n        if (documentResult && documentResult.length > 0) {\n          console.warn(`${documentResult.length} documents failed to upload during client update`);\n\n          // We'll continue but note the warning\n          updatedClient.warningMessage = `Se actualizó el cliente, pero ${documentResult.length} ${documentResult.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error(`Error uploading documents for client ${id}:`, docError);\n\n        // Continue with client update but add warning\n        updatedClient.warningMessage = 'Se actualizó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n    console.log(`Client update complete for ID ${id}`);\n    return updatedClient;\n  } catch (error) {\n    logError(error, 'updateClient', {\n      clientId: id,\n      updates\n    });\n    throw handleApiError(error);\n  }\n};\nexport const deleteClient = async id => {\n  try {\n    // Get the service client for this operation\n    const serviceClient = getServiceClient();\n    const {\n      error,\n      count\n    } = await serviceClient.from(USERS_TABLE).delete().eq('id', id);\n    if (error) {\n      // Verificar si es una violación de RLS\n      if (isRlsViolation(error)) {\n        throw createRlsViolationError('eliminar', 'cliente', id, error);\n      }\n      logError(error, 'deleteClient', {\n        clientId: id\n      });\n      throw handleApiError(error);\n    }\n\n    // Verify that rows were affected\n    if (count === 0) {\n      console.warn(`Delete operation didn't affect any rows for client ${id}`);\n      throw createNoEffectError('delete', 'cliente', id);\n    }\n    return true;\n  } catch (error) {\n    logError(error, 'deleteClient', {\n      clientId: id\n    });\n    throw handleApiError(error);\n  }\n};\nexport const checkClientExists = async (email, rfc) => {\n  try {\n    const serviceClient = getServiceClient();\n    let query = serviceClient.from(USERS_TABLE).select('id, email, rfc').eq('email', email);\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) {\n      logError(error, 'checkClientExists', {\n        email,\n        rfc\n      });\n      throw handleApiError(error);\n    }\n    return (data === null || data === void 0 ? void 0 : data.length) > 0;\n  } catch (error) {\n    logError(error, 'checkClientExists', {\n      email,\n      rfc\n    });\n    throw handleApiError(error);\n  }\n};\nexport const getClientCount = async filters => {\n  try {\n    const serviceClient = getServiceClient();\n    let query = serviceClient.from(USERS_TABLE).select('*', {\n      count: 'exact',\n      head: true\n    });\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n    }\n    const {\n      count,\n      error\n    } = await query;\n    if (error) {\n      logError(error, 'getClientCount', {\n        filters\n      });\n      throw handleApiError(error);\n    }\n    return count || 0;\n  } catch (error) {\n    logError(error, 'getClientCount', {\n      filters\n    });\n    throw handleApiError(error);\n  }\n};","map":{"version":3,"names":["getServiceClient","TABLES","documentService","ErrorType","createAppError","logError","handleApiError","isRlsViolation","createRlsViolationError","createNoEffectError","processNumericField","USERS_TABLE","mapUserToClient","userData","console","error","Error","fullName","name","first_name","paternal_surname","maternal_surname","filter","Boolean","join","id","created_at","email","phone","birth_date","company_id","rfc","curp","advisor_id","address","city","state","postal_code","gender","marital_status","employment_type","employment_years","monthly_income","additional_income","monthly_expenses","other_loan_balances","bank_name","bank_clabe","bank_account_number","bank_account_type","bank_account_origin","getClients","filters","serviceClient","query","from","select","count","eq","dateFrom","gte","dateTo","lte","searchQuery","or","page","undefined","pageSize","to","range","order","ascending","data","clients","map","totalCount","getClientById","single","clientId","notFoundError","NOT_FOUND","escapeSQLString","str","replace","getClientApplications","client","catch","err","APPLICATIONS","log","executeQuery","response","fetch","method","headers","body","JSON","stringify","ok","status","statusText","result","json","length","uploadClientDocuments","documents","userId","Array","isArray","ensureStorageBucketExists","uploadPromises","document","file","uploadParams","category","documentName","description","client_id","authClient","uploadDocument","docError","message","includes","results","Promise","all","createClient","warningMessage","processed","warn","insert","noDataError","SERVER","newClient","documentResult","clientData","updateClient","updates","userUpdates","Object","keys","forEach","key","typedKey","existingClient","existingError","update","updatedClient","fetchedData","fetchError","deleteClient","delete","checkClientExists","getClientCount","head"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/clientService.ts"],"sourcesContent":["import { supabase, getAuthenticatedClient, getServiceClient } from \"../lib/supabaseClient\";\nimport { TABLES } from \"../utils/constants/tables\";\nimport * as documentService from './documentService';\nimport { Client, ClientDocument } from \"../types/client\";\nimport { \n  ErrorType, \n  createAppError, \n  logError, \n  handleApiError, \n  isRlsViolation,\n  createRlsViolationError,\n  createNoEffectError\n} from '../utils/errorHandling';\nimport { parseNumericString, processNumericField } from '../utils/numberFormatting';\nimport { uploadClientDocuments as uploadDocs } from '../utils/documentUpload';\n\n// Re-exportamos las interfaces para mantener compatibilidad\nexport type { Client, ClientDocument };\n\nexport interface ClientFilter {\n  searchQuery?: string;\n  advisor_id?: string;\n  company_id?: string;\n  dateFrom?: string;\n  dateTo?: string;\n  page?: number;\n  pageSize?: number;\n}\n\nconst USERS_TABLE = 'users';\n\nconst mapUserToClient = (userData: any): Client => {\n  if (!userData) {\n    console.error('Error: userData is undefined in mapUserToClient');\n    throw new Error('No se pudo procesar la información del cliente, los datos son inválidos');\n  }\n  \n  const fullName = userData.name || [\n    userData.first_name,\n    userData.paternal_surname,\n    userData.maternal_surname\n  ].filter(Boolean).join(' ');\n  \n  return {\n    id: userData.id,\n    created_at: userData.created_at,\n    name: fullName,\n    first_name: userData.first_name,\n    paternal_surname: userData.paternal_surname,\n    maternal_surname: userData.maternal_surname,\n    email: userData.email,\n    phone: userData.phone,\n    birth_date: userData.birth_date,\n    company_id: userData.company_id,\n    rfc: userData.rfc,\n    curp: userData.curp,\n    advisor_id: userData.advisor_id,\n    address: userData.address,\n    city: userData.city,\n    state: userData.state,\n    postal_code: userData.postal_code,\n    gender: userData.gender,\n    marital_status: userData.marital_status,\n    employment_type: userData.employment_type,\n    employment_years: userData.employment_years,\n    monthly_income: userData.monthly_income,\n    additional_income: userData.additional_income,\n    monthly_expenses: userData.monthly_expenses,\n    other_loan_balances: userData.other_loan_balances,\n    bank_name: userData.bank_name,\n    bank_clabe: userData.bank_clabe,\n    bank_account_number: userData.bank_account_number,\n    bank_account_type: userData.bank_account_type,\n    bank_account_origin: userData.bank_account_origin,\n  };\n};\n\nexport const getClients = async (filters?: ClientFilter) => {\n  try {\n    // Usamos el cliente de servicio para evitar problemas de autenticación\n    const serviceClient = getServiceClient();\n    \n    let query = serviceClient.from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin', { count: 'exact' });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n\n    query = query.order('created_at', { ascending: false });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      logError(error, 'getClients', { filters });\n      throw handleApiError(error);\n    }\n\n    const clients = data ? data.map(mapUserToClient) : [];\n\n    return {\n      clients,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    logError(error, 'getClients', { filters });\n    throw handleApiError(error);\n  }\n};\n\nexport const getClientById = async (id: string) => {\n  try {\n    // Usamos el cliente de servicio para evitar problemas de autenticación\n    const serviceClient = getServiceClient();\n    \n    const { data, error } = await serviceClient\n      .from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      logError(error, 'getClientById', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    if (!data) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `No se encontró cliente con ID: ${id}`\n      );\n      logError(notFoundError, 'getClientById', { clientId: id });\n      throw notFoundError;\n    }\n\n    return mapUserToClient(data);\n  } catch (error) {\n    logError(error, 'getClientById', { clientId: id });\n    throw handleApiError(error);\n  }\n};\n\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\nexport const getClientApplications = async (clientId: string) => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      console.error(`Error obteniendo cliente con ID ${clientId}:`, err);\n      throw handleApiError(err);\n    });\n    \n    if (!client) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `El cliente no existe`\n      );\n      logError(notFoundError, 'getClientApplications', { clientId });\n      return [];\n    }\n    \n    // Construir la consulta con el nombre del cliente\n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name || '')}'\n      ORDER BY created_at DESC\n    `;\n    \n    console.log(`Ejecutando consulta para obtener aplicaciones del cliente ${clientId}:`, query);\n    \n    // Utilizamos el servicio de consulta SQL directo que evita problemas de RLS\n    const executeQuery = async (query: string) => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query: query }),\n        });\n        \n        if (!response.ok) {\n          throw new Error(`Error en la respuesta HTTP: ${response.status} ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        \n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        \n        return result.data || [];\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    \n    const data = await executeQuery(query);\n    console.log(`Aplicaciones encontradas para el cliente ${clientId}:`, data.length);\n    return data;\n  } catch (error) {\n    logError(error, 'getClientApplications', { clientId });\n    console.error(`Error completo al obtener aplicaciones para cliente ${clientId}:`, error);\n    // Devolvemos un array vacío en caso de error para no interrumpir el flujo\n    return [];\n  }\n};\n\nexport const uploadClientDocuments = async (\n  clientId: string,\n  documents: ClientDocument[],\n  userId: string\n): Promise<documentService.Document[]> => {\n  if (!clientId) {\n    console.error('Client ID is required for uploading documents');\n    throw new Error('El ID del cliente es requerido para subir documentos');\n  }\n\n  // Verificar que se proporcionaron documentos válidos\n  if (!documents || !Array.isArray(documents) || documents.length === 0) {\n    console.error('No valid documents provided for upload');\n    throw new Error('No se proporcionaron documentos válidos para subir');\n  }\n\n  if (!userId) {\n    console.error('User ID is required for uploading documents');\n    throw new Error('Se requiere el ID del usuario para subir documentos');\n  }\n\n  try {\n    // Obtener cliente con permisos de servicio para operaciones que requieren más privilegios\n    const serviceClient = getServiceClient();\n    \n    // Asegurarse de que el bucket de almacenamiento exista\n    await documentService.ensureStorageBucketExists(serviceClient);\n\n    // Intentar subir cada documento\n    const uploadPromises = documents.map(async (document) => {\n      try {\n        // Verificar que el documento tenga datos válidos\n        if (!document.file || !document.name) {\n          console.error('Invalid document data', document);\n          throw new Error(\n            'Datos de documento inválidos: se requiere archivo y nombre'\n          );\n        }\n\n        // Create a document upload request compatible with the document service\n        const uploadParams: documentService.UploadDocumentParams = {\n          file: document.file,\n          category: document.category,\n          documentName: document.name,\n          description: document.description,\n          userId: userId,\n          client_id: clientId,\n          authClient: serviceClient\n        };\n\n        // Subir el documento\n        return await documentService.uploadDocument(uploadParams);\n      } catch (docError: any) {\n        // Manejo de errores específicos de permisos RLS\n        if (docError.message && (\n            docError.message.includes('permission denied') || \n            docError.message.includes('not authorized') ||\n            docError.message.includes('row level security')\n          )) {\n          console.error('Permission error when uploading document:', docError);\n          throw new Error('No tienes permiso para subir documentos para este cliente. Verifica tus permisos.');\n        }\n        \n        // Registrar el error pero permitir que otros uploads continúen\n        console.error(`Error uploading document for client ${clientId}:`, docError);\n        throw docError;\n      }\n    });\n\n    const results = await Promise.all(uploadPromises);\n    \n    return results;\n  } catch (error) {\n    logError(error, 'uploadClientDocuments', { clientId });\n    throw handleApiError(error);\n  }\n};\n\nexport const createClient = async (client: Omit<Client, 'id' | 'created_at'>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    // Create a copy to avoid modifying the original object\n    const userData = {\n      email: client.email,\n      first_name: client.first_name || '',\n      paternal_surname: client.paternal_surname || '',\n      maternal_surname: client.maternal_surname || '',\n      phone: client.phone,\n      birth_date: client.birth_date,\n      company_id: client.company_id,\n      rfc: client.rfc,\n      curp: client.curp,\n      advisor_id: client.advisor_id,\n      address: client.address,\n      city: client.city,\n      state: client.state,\n      postal_code: client.postal_code,\n      gender: client.gender,\n      marital_status: client.marital_status,\n      employment_type: client.employment_type,\n      employment_years: client.employment_years,\n      monthly_income: client.monthly_income,\n      additional_income: client.additional_income,\n      monthly_expenses: client.monthly_expenses,\n      other_loan_balances: client.other_loan_balances,\n      bank_name: client.bank_name,\n      bank_clabe: client.bank_clabe,\n      bank_account_number: client.bank_account_number,\n      bank_account_type: client.bank_account_type,\n      bank_account_origin: client.bank_account_origin,\n    };\n\n    // Asegurarse de que no se incluyan campos calculados\n    // Estos campos son calculados en la aplicación pero no existen en la base de datos\n    delete (userData as any).name;\n    delete (userData as any).warningMessage;\n\n    // Process numeric fields\n    if (userData.employment_years !== undefined) {\n      const processed = processNumericField(userData.employment_years);\n      userData.employment_years = processed === null ? undefined : processed;\n    }\n    if (userData.monthly_income !== undefined) {\n      const processed = processNumericField(userData.monthly_income);\n      userData.monthly_income = processed === null ? undefined : processed;\n    }\n    if (userData.additional_income !== undefined) {\n      const processed = processNumericField(userData.additional_income);\n      userData.additional_income = processed === null ? undefined : processed;\n    }\n    if (userData.monthly_expenses !== undefined) {\n      const processed = processNumericField(userData.monthly_expenses);\n      userData.monthly_expenses = processed === null ? undefined : processed;\n    }\n    if (userData.other_loan_balances !== undefined) {\n      const processed = processNumericField(userData.other_loan_balances);\n      userData.other_loan_balances = processed === null ? undefined : processed;\n    }\n\n    // Ensure company_id is present as it's required by the database schema\n    if (!userData.company_id) {\n      console.warn('No company_id provided when creating client - using default company');\n      userData.company_id = \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\"; // Default company (Herramental)\n    }\n\n    // Log sanitized data for debugging\n    console.log(`Creating client with sanitized data:`, JSON.stringify(userData));\n\n    // Get the service client for this operation to evitar problemas de autenticación\n    const serviceClient = getServiceClient();\n\n    const { data, error, count } = await serviceClient\n      .from(USERS_TABLE)\n      .insert([userData])\n      .select();\n\n    if (error) {\n      // Verificar si es una violación de RLS\n      if (isRlsViolation(error)) {\n        throw createRlsViolationError('crear', 'cliente', 'nuevo', error);\n      }\n      \n      logError(error, 'createClient');\n      throw handleApiError(error);\n    }\n\n    // Verify that rows were affected\n    if (!data || data.length === 0 || count === 0) {\n      const noDataError = createAppError(\n        ErrorType.SERVER,\n        'No se pudo crear el cliente. No se recibieron datos del servidor.'\n      );\n      logError(noDataError, 'createClient');\n      throw noDataError;\n    }\n\n    const newClient = mapUserToClient(data[0]);\n    let documentResult = null;\n    \n    if (documents && documents.length > 0 && userId && newClient.id) {\n      try {\n        documentResult = await uploadClientDocuments(newClient.id, documents, userId);\n        \n        // Check if any documents failed to upload\n        if (documentResult && documentResult.length > 0) {\n          console.warn(`${documentResult.length} documents failed to upload during client creation`);\n          \n          // We'll continue but note the warning\n          newClient.warningMessage = `Se creó el cliente, pero ${documentResult.length} ${documentResult.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error('Error uploading documents during client creation:', docError);\n        \n        // Continue with client creation but add warning\n        newClient.warningMessage = 'Se creó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n\n    return newClient;\n  } catch (error) {\n    logError(error, 'createClient', { clientData: client });\n    throw handleApiError(error);\n  }\n};\n\nexport const updateClient = async (id: string, updates: Partial<Client>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    console.log(`Starting client update for ID ${id}`, updates);\n    \n    // Create a copy to avoid modifying the original object\n    const userUpdates: any = { ...updates };\n    \n    // Eliminar campos calculados o virtuales que no existen en la base de datos\n    // El campo 'name' es calculado en mapUserToClient pero no existe en la tabla\n    delete userUpdates.name;\n    delete userUpdates.warningMessage;\n    \n    // Process specific numeric fields\n    if ('employment_years' in updates) {\n      const processed = processNumericField(updates.employment_years);\n      userUpdates.employment_years = processed === null ? undefined : processed;\n    }\n    if ('monthly_income' in updates) {\n      const processed = processNumericField(updates.monthly_income);\n      userUpdates.monthly_income = processed === null ? undefined : processed;\n    }\n    if ('additional_income' in updates) {\n      const processed = processNumericField(updates.additional_income);\n      userUpdates.additional_income = processed === null ? undefined : processed;\n    }\n    if ('monthly_expenses' in updates) {\n      const processed = processNumericField(updates.monthly_expenses);\n      userUpdates.monthly_expenses = processed === null ? undefined : processed;\n    }\n    if ('other_loan_balances' in updates) {\n      const processed = processNumericField(updates.other_loan_balances);\n      userUpdates.other_loan_balances = processed === null ? undefined : processed;\n    }\n\n    // Remove undefined fields\n    Object.keys(userUpdates).forEach(key => {\n      const typedKey = key as keyof typeof userUpdates;\n      if (userUpdates[typedKey] === undefined) {\n        delete userUpdates[typedKey];\n      }\n    });\n\n    console.log(`Updating client ${id} with sanitized data:`, JSON.stringify(userUpdates));\n\n    // Get the service client for this operation to evitar problemas de permisos\n    const serviceClient = getServiceClient();\n\n    // First, verify the client exists\n    const { data: existingClient, error: existingError } = await serviceClient\n      .from(USERS_TABLE)\n      .select('id')\n      .eq('id', id)\n      .single();\n\n    if (existingError || !existingClient) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `No se encontró el cliente con ID ${id}. Verifique que el cliente exista.`\n      );\n      logError(notFoundError, 'updateClient', { clientId: id });\n      throw notFoundError;\n    }\n\n    // Perform the update with the service client\n    const { data, error, count } = await serviceClient\n      .from(USERS_TABLE)\n      .update(userUpdates)\n      .eq('id', id)\n      .select();\n\n    if (error) {\n      // Verificar si es una violación de RLS\n      if (isRlsViolation(error)) {\n        throw createRlsViolationError('actualizar', 'cliente', id, error);\n      }\n      \n      logError(error, 'updateClient', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    // Verify that the update affected rows\n    if (!data || data.length === 0 || count === 0) {\n      console.warn(`Update operation didn't affect any rows for client ${id}`);\n      throw createNoEffectError('update', 'cliente', id);\n    }\n\n    let updatedClient: Client;\n\n    if (!data || data.length === 0) {\n      console.log(`No data returned when updating client with ID ${id}, fetching client data separately`);\n      \n      // Fallback: fetch the client data separately\n      const { data: fetchedData, error: fetchError } = await serviceClient\n        .from(USERS_TABLE)\n        .select('*')\n        .eq('id', id)\n        .single();\n      \n      if (fetchError) {\n        console.error('Error fetching updated client:', fetchError);\n        throw fetchError;\n      }\n      \n      updatedClient = mapUserToClient(fetchedData);\n    } else {\n      updatedClient = mapUserToClient(data[0]);\n    }\n\n    let documentResult = null;\n    \n    // Upload documents if provided\n    if (documents && documents.length > 0 && userId) {\n      try {\n        console.log(`Uploading ${documents.length} documents for client ${id}`);\n        documentResult = await uploadClientDocuments(id, documents, userId);\n        \n        // Check if any documents failed to upload\n        if (documentResult && documentResult.length > 0) {\n          console.warn(`${documentResult.length} documents failed to upload during client update`);\n          \n          // We'll continue but note the warning\n          updatedClient.warningMessage = `Se actualizó el cliente, pero ${documentResult.length} ${documentResult.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error(`Error uploading documents for client ${id}:`, docError);\n        \n        // Continue with client update but add warning\n        updatedClient.warningMessage = 'Se actualizó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n\n    console.log(`Client update complete for ID ${id}`);\n    return updatedClient;\n  } catch (error) {\n    logError(error, 'updateClient', { clientId: id, updates });\n    throw handleApiError(error);\n  }\n};\n\nexport const deleteClient = async (id: string) => {\n  try {\n    // Get the service client for this operation\n    const serviceClient = getServiceClient();\n    \n    const { error, count } = await serviceClient\n      .from(USERS_TABLE)\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      // Verificar si es una violación de RLS\n      if (isRlsViolation(error)) {\n        throw createRlsViolationError('eliminar', 'cliente', id, error);\n      }\n      \n      logError(error, 'deleteClient', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    // Verify that rows were affected\n    if (count === 0) {\n      console.warn(`Delete operation didn't affect any rows for client ${id}`);\n      throw createNoEffectError('delete', 'cliente', id);\n    }\n\n    return true;\n  } catch (error) {\n    logError(error, 'deleteClient', { clientId: id });\n    throw handleApiError(error);\n  }\n};\n\nexport const checkClientExists = async (email: string, rfc?: string) => {\n  try {\n    const serviceClient = getServiceClient();\n    \n    let query = serviceClient\n      .from(USERS_TABLE)\n      .select('id, email, rfc')\n      .eq('email', email);\n    \n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n    \n    const { data, error } = await query;\n    \n    if (error) {\n      logError(error, 'checkClientExists', { email, rfc });\n      throw handleApiError(error);\n    }\n    \n    return data?.length > 0;\n  } catch (error) {\n    logError(error, 'checkClientExists', { email, rfc });\n    throw handleApiError(error);\n  }\n};\n\nexport const getClientCount = async (filters?: ClientFilter) => {\n  try {\n    const serviceClient = getServiceClient();\n    \n    let query = serviceClient\n      .from(USERS_TABLE)\n      .select('*', { count: 'exact', head: true });\n    \n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n      \n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n      \n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      \n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n    }\n    \n    const { count, error } = await query;\n    \n    if (error) {\n      logError(error, 'getClientCount', { filters });\n      throw handleApiError(error);\n    }\n    \n    return count || 0;\n  } catch (error) {\n    logError(error, 'getClientCount', { filters });\n    throw handleApiError(error);\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}