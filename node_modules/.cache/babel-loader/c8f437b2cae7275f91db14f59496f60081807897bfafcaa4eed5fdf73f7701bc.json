{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/pages/NewClient.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport MainLayout from '../components/layout/MainLayout';\nimport ClientForm from '../components/clients/ClientForm';\nimport { createClient, updateClient } from '../services/clientService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Default company ID (Herramental)\nconst DEFAULT_COMPANY_ID = \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\";\nconst NewClient = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    user\n  } = useAuth();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [sectionSubmitting, setSectionSubmitting] = useState(false);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [draftClient, setDraftClient] = useState(null);\n  const [temporaryClientId, setTemporaryClientId] = useState(null);\n  const location = useLocation();\n\n  // Cargar datos del cliente en borrador si existen en localStorage al iniciar\n  useEffect(() => {\n    try {\n      const savedDraft = localStorage.getItem('draftClient');\n      const savedClientId = localStorage.getItem('temporaryClientId');\n      if (savedDraft) {\n        setDraftClient(JSON.parse(savedDraft));\n      }\n      if (savedClientId) {\n        setTemporaryClientId(savedClientId);\n      }\n    } catch (e) {\n      console.error('Error loading draft from localStorage:', e);\n    }\n  }, []);\n  const handleSubmit = async (data, documents) => {\n    setIsSubmitting(true);\n    setError(null);\n    console.log('Submitting client data:', data);\n    try {\n      // Si el usuario es asesor o admin de empresa, asignar los IDs correspondientes\n      const clientData = {\n        ...data\n      };\n\n      // Handle advisor_id assignment\n      if (user && user.role === 'ADVISOR') {\n        clientData.advisor_id = user.id;\n      }\n\n      // Handle the company_id requirement - only set default if not selected in form\n      if (!clientData.company_id) {\n        console.log('No company selected in form, applying default/user company logic');\n        if (user) {\n          if (user.role === 'COMPANY_ADMIN') {\n            clientData.company_id = user.entityId;\n            console.log('Using company_id from COMPANY_ADMIN user:', clientData.company_id);\n          } else {\n            // For other roles without company selection, use default\n            clientData.company_id = DEFAULT_COMPANY_ID;\n            console.log('Using default company_id for user with role:', user.role);\n          }\n        } else {\n          // No user information available, use default company_id\n          clientData.company_id = DEFAULT_COMPANY_ID;\n          console.log('No user context, using default company_id');\n        }\n      } else {\n        console.log('Using company_id selected in form:', clientData.company_id);\n      }\n\n      // Si ya tenemos un cliente temporal, actualizar en vez de crear\n      let newClient;\n      if (temporaryClientId) {\n        console.log(`Updating temporary client with ID ${temporaryClientId}`);\n        newClient = await updateClient(temporaryClientId, clientData);\n\n        // Subir documentos al cliente existente\n        if (documents && documents.length > 0 && user !== null && user !== void 0 && user.id) {\n          try {\n            await uploadClientDocuments(temporaryClientId, user.id, documents);\n          } catch (docError) {\n            console.error('Error uploading documents:', docError);\n            setError('El cliente se guardó correctamente, pero hubo problemas al subir algunos documentos.');\n          }\n        }\n      } else {\n        // Crear nuevo cliente\n        newClient = await createClient(clientData, documents, user === null || user === void 0 ? void 0 : user.id);\n      }\n      console.log('Client created/updated successfully:', newClient);\n\n      // Clear local storage\n      localStorage.removeItem('draftClient');\n      localStorage.removeItem('clientFormStep');\n      localStorage.removeItem('temporaryClientId');\n\n      // Redireccionar a la lista de clientes\n      navigate('/clients');\n    } catch (error) {\n      console.error('Error al crear cliente:', error);\n      setError(error.message || 'Error al crear el cliente. Por favor, intente de nuevo.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  const handleSavePartial = async (data, step) => {\n    try {\n      setSectionSubmitting(true);\n      console.log(`Saving partial data for step ${step}:`, data);\n\n      // Asegurarnos de que tenemos todos los campos requeridos\n      const partialData = collectFieldsForStep(data, step);\n\n      // Asignar campos importantes si no están presentes\n      if (user && user.role === 'ADVISOR' && !partialData.advisor_id) {\n        partialData.advisor_id = user.id;\n      }\n      if (!partialData.company_id) {\n        if (user && user.role === 'COMPANY_ADMIN') {\n          partialData.company_id = user.entityId;\n        } else {\n          partialData.company_id = DEFAULT_COMPANY_ID;\n        }\n      }\n\n      // Update our local draft client data\n      const updatedDraftClient = {\n        ...draftClient,\n        ...partialData\n      };\n      setDraftClient(updatedDraftClient);\n\n      // Guardar los datos en Supabase\n      try {\n        // Si ya tenemos un ID de cliente temporal, actualizar\n        if (temporaryClientId) {\n          console.log(`Updating temporary client with ID ${temporaryClientId}`);\n          const updatedClient = await updateClient(temporaryClientId, partialData);\n          console.log('Client updated successfully:', updatedClient);\n        }\n        // Si es la primera vez que guardamos, crear un cliente temporal\n        else if (step === 1) {\n          console.log('Creating temporary client');\n          const newClient = await createClient(partialData, [], user === null || user === void 0 ? void 0 : user.id);\n          console.log('Temporary client created successfully:', newClient);\n          if (newClient && newClient.id) {\n            setTemporaryClientId(newClient.id);\n            localStorage.setItem('temporaryClientId', newClient.id);\n          }\n        }\n\n        // Save to local storage for persistence\n        localStorage.setItem('draftClient', JSON.stringify(updatedDraftClient));\n        setSuccessMessage(`Los datos de la sección ${step} se han guardado correctamente.`);\n\n        // Clear success message after 3 seconds\n        setTimeout(() => {\n          setSuccessMessage(null);\n        }, 3000);\n        return updatedDraftClient;\n      } catch (e) {\n        console.error('Error saving to Supabase:', e);\n        setError('Error al guardar los datos en el servidor.');\n\n        // Aún así actualizamos localStorage\n        try {\n          localStorage.setItem('draftClient', JSON.stringify(updatedDraftClient));\n        } catch (storageError) {\n          console.error('Error saving to localStorage:', storageError);\n        }\n        return null;\n      }\n    } catch (error) {\n      console.error('Error saving partial data:', error);\n      setError('Error al guardar los datos parciales.');\n      return null;\n    } finally {\n      setSectionSubmitting(false);\n    }\n  };\n\n  // Helper to ensure we have all required fields\n  const ensureRequiredFields = clientData => {\n    // Handle advisor_id assignment\n    if (user && user.role === 'ADVISOR') {\n      clientData.advisor_id = user.id;\n    }\n\n    // Handle the company_id requirement - only set default if not selected in form\n    if (!clientData.company_id) {\n      console.log('🔍 No se seleccionó empresa en el formulario, aplicando lógica predeterminada');\n      if (user) {\n        if (user.role === 'COMPANY_ADMIN') {\n          clientData.company_id = user.entityId;\n          console.log('🔍 Usando company_id del usuario COMPANY_ADMIN:', clientData.company_id);\n        } else {\n          // For other roles without company selection, use default\n          clientData.company_id = DEFAULT_COMPANY_ID;\n          console.log('🔍 Usando company_id predeterminado para usuario con rol:', user.role);\n        }\n      } else {\n        // No user information available, use default company_id\n        clientData.company_id = DEFAULT_COMPANY_ID;\n        console.log('🔍 Sin contexto de usuario, usando company_id predeterminado');\n      }\n    } else {\n      console.log('🔍 Usando company_id seleccionado en el formulario:', clientData.company_id);\n    }\n  };\n\n  // Helper to collect fields based on step\n  const collectFieldsForStep = (data, step) => {\n    const result = {};\n\n    // Always preserve these fields if they exist\n    if (data.id) result.id = data.id;\n    if (data.company_id) result.company_id = data.company_id;\n    if (data.advisor_id) result.advisor_id = data.advisor_id;\n    switch (step) {\n      case 1:\n        // Personal data\n        const personalFields = ['first_name', 'paternal_surname', 'maternal_surname', 'email', 'phone', 'rfc', 'curp', 'birth_date', 'gender', 'marital_status', 'address', 'city', 'state', 'postal_code'];\n        personalFields.forEach(field => {\n          if (field in data) {\n            result[field] = data[field];\n          }\n        });\n        break;\n      case 2:\n        // Financial details\n        const financialFields = ['employment_type', 'employment_years', 'monthly_income', 'additional_income', 'monthly_expenses', 'other_loan_balances'];\n        financialFields.forEach(field => {\n          if (field in data) {\n            result[field] = data[field];\n          }\n        });\n        break;\n      case 3:\n        // Bank details\n        const bankFields = ['bank_name', 'bank_clabe', 'bank_account_number', 'bank_account_type', 'bank_account_origin'];\n        bankFields.forEach(field => {\n          if (field in data) {\n            result[field] = data[field];\n          }\n        });\n        break;\n      default:\n        console.warn(`🔍 Paso desconocido para guardado parcial: ${step}`);\n    }\n    return result;\n  };\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate('/clients'),\n          className: \"btn btn-sm btn-outline mr-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"h-5 w-5 mr-1\",\n            viewBox: \"0 0 20 20\",\n            fill: \"currentColor\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              fillRule: \"evenodd\",\n              d: \"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\",\n              clipRule: \"evenodd\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this), \"Volver\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-2xl font-bold\",\n          children: \"Nuevo Cliente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-error\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"h-6 w-6\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            stroke: \"currentColor\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              strokeWidth: 2,\n              d: \"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setError(null),\n            className: \"ml-auto\",\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-success\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"h-6 w-6\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            stroke: \"currentColor\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              strokeWidth: 2,\n              d: \"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: successMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setSuccessMessage(null),\n            className: \"ml-auto\",\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ClientForm, {\n        initialData: draftClient || undefined,\n        onSubmit: handleSubmit,\n        onSavePartial: handleSavePartial,\n        isSubmitting: isSubmitting,\n        sectionSubmitting: sectionSubmitting\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n};\n_s(NewClient, \"HX3UlMcHrj2vjUoi1uf9H0MjstA=\", false, function () {\n  return [useNavigate, useAuth, useLocation];\n});\n_c = NewClient;\nexport default NewClient;\nvar _c;\n$RefreshReg$(_c, \"NewClient\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","useAuth","MainLayout","ClientForm","createClient","updateClient","jsxDEV","_jsxDEV","DEFAULT_COMPANY_ID","NewClient","_s","navigate","user","isSubmitting","setIsSubmitting","sectionSubmitting","setSectionSubmitting","error","setError","successMessage","setSuccessMessage","draftClient","setDraftClient","temporaryClientId","setTemporaryClientId","location","savedDraft","localStorage","getItem","savedClientId","JSON","parse","e","console","handleSubmit","data","documents","log","clientData","role","advisor_id","id","company_id","entityId","newClient","length","uploadClientDocuments","docError","removeItem","message","handleSavePartial","step","partialData","collectFieldsForStep","updatedDraftClient","updatedClient","setItem","stringify","setTimeout","storageError","ensureRequiredFields","result","personalFields","forEach","field","financialFields","bankFields","warn","children","className","onClick","xmlns","viewBox","fill","fillRule","d","clipRule","fileName","_jsxFileName","lineNumber","columnNumber","stroke","strokeLinecap","strokeLinejoin","strokeWidth","initialData","undefined","onSubmit","onSavePartial","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/pages/NewClient.tsx"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport MainLayout from '../components/layout/MainLayout';\nimport ClientForm from '../components/clients/ClientForm';\nimport { Client, ClientDocument, createClient, updateClient } from '../services/clientService';\nimport Alert from '../components/ui/Alert';\n\n// Default company ID (Herramental)\nconst DEFAULT_COMPANY_ID = \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\";\n\nconst NewClient: React.FC = () => {\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [sectionSubmitting, setSectionSubmitting] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const [draftClient, setDraftClient] = useState<Partial<Client> | null>(null);\n  const [temporaryClientId, setTemporaryClientId] = useState<string | null>(null);\n  const location = useLocation();\n\n  // Cargar datos del cliente en borrador si existen en localStorage al iniciar\n  useEffect(() => {\n    try {\n      const savedDraft = localStorage.getItem('draftClient');\n      const savedClientId = localStorage.getItem('temporaryClientId');\n      \n      if (savedDraft) {\n        setDraftClient(JSON.parse(savedDraft));\n      }\n      \n      if (savedClientId) {\n        setTemporaryClientId(savedClientId);\n      }\n    } catch (e) {\n      console.error('Error loading draft from localStorage:', e);\n    }\n  }, []);\n\n  const handleSubmit = async (data: Partial<Client>, documents: ClientDocument[]) => {\n    setIsSubmitting(true);\n    setError(null);\n    console.log('Submitting client data:', data);\n    \n    try {\n      // Si el usuario es asesor o admin de empresa, asignar los IDs correspondientes\n      const clientData: Partial<Client> = { ...data };\n      \n      // Handle advisor_id assignment\n      if (user && user.role === 'ADVISOR') {\n        clientData.advisor_id = user.id;\n      }\n      \n      // Handle the company_id requirement - only set default if not selected in form\n      if (!clientData.company_id) {\n        console.log('No company selected in form, applying default/user company logic');\n        \n        if (user) {\n          if (user.role === 'COMPANY_ADMIN') {\n            clientData.company_id = user.entityId;\n            console.log('Using company_id from COMPANY_ADMIN user:', clientData.company_id);\n          } else {\n            // For other roles without company selection, use default\n            clientData.company_id = DEFAULT_COMPANY_ID;\n            console.log('Using default company_id for user with role:', user.role);\n          }\n        } else {\n          // No user information available, use default company_id\n          clientData.company_id = DEFAULT_COMPANY_ID;\n          console.log('No user context, using default company_id');\n        }\n      } else {\n        console.log('Using company_id selected in form:', clientData.company_id);\n      }\n      \n      // Si ya tenemos un cliente temporal, actualizar en vez de crear\n      let newClient;\n      if (temporaryClientId) {\n        console.log(`Updating temporary client with ID ${temporaryClientId}`);\n        newClient = await updateClient(temporaryClientId, clientData);\n        \n        // Subir documentos al cliente existente\n        if (documents && documents.length > 0 && user?.id) {\n          try {\n            await uploadClientDocuments(temporaryClientId, user.id, documents);\n          } catch (docError) {\n            console.error('Error uploading documents:', docError);\n            setError('El cliente se guardó correctamente, pero hubo problemas al subir algunos documentos.');\n          }\n        }\n      } else {\n        // Crear nuevo cliente\n        newClient = await createClient(clientData as Omit<Client, 'id' | 'created_at'>, documents, user?.id);\n      }\n      \n      console.log('Client created/updated successfully:', newClient);\n      \n      // Clear local storage\n      localStorage.removeItem('draftClient');\n      localStorage.removeItem('clientFormStep');\n      localStorage.removeItem('temporaryClientId');\n      \n      // Redireccionar a la lista de clientes\n      navigate('/clients');\n    } catch (error: any) {\n      console.error('Error al crear cliente:', error);\n      setError(error.message || 'Error al crear el cliente. Por favor, intente de nuevo.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleSavePartial = async (data: Partial<Client>, step: number) => {\n    try {\n      setSectionSubmitting(true);\n      console.log(`Saving partial data for step ${step}:`, data);\n      \n      // Asegurarnos de que tenemos todos los campos requeridos\n      const partialData = collectFieldsForStep(data, step);\n      \n      // Asignar campos importantes si no están presentes\n      if (user && user.role === 'ADVISOR' && !partialData.advisor_id) {\n        partialData.advisor_id = user.id;\n      }\n      \n      if (!partialData.company_id) {\n        if (user && user.role === 'COMPANY_ADMIN') {\n          partialData.company_id = user.entityId;\n        } else {\n          partialData.company_id = DEFAULT_COMPANY_ID;\n        }\n      }\n      \n      // Update our local draft client data\n      const updatedDraftClient = { ...draftClient, ...partialData };\n      setDraftClient(updatedDraftClient);\n      \n      // Guardar los datos en Supabase\n      try {\n        // Si ya tenemos un ID de cliente temporal, actualizar\n        if (temporaryClientId) {\n          console.log(`Updating temporary client with ID ${temporaryClientId}`);\n          const updatedClient = await updateClient(temporaryClientId, partialData);\n          console.log('Client updated successfully:', updatedClient);\n        } \n        // Si es la primera vez que guardamos, crear un cliente temporal\n        else if (step === 1) {\n          console.log('Creating temporary client');\n          const newClient = await createClient(partialData as Omit<Client, 'id' | 'created_at'>, [], user?.id);\n          console.log('Temporary client created successfully:', newClient);\n          \n          if (newClient && newClient.id) {\n            setTemporaryClientId(newClient.id);\n            localStorage.setItem('temporaryClientId', newClient.id);\n          }\n        }\n        \n        // Save to local storage for persistence\n        localStorage.setItem('draftClient', JSON.stringify(updatedDraftClient));\n        setSuccessMessage(`Los datos de la sección ${step} se han guardado correctamente.`);\n        \n        // Clear success message after 3 seconds\n        setTimeout(() => {\n          setSuccessMessage(null);\n        }, 3000);\n        \n        return updatedDraftClient;\n      } catch (e) {\n        console.error('Error saving to Supabase:', e);\n        setError('Error al guardar los datos en el servidor.');\n        \n        // Aún así actualizamos localStorage\n        try {\n          localStorage.setItem('draftClient', JSON.stringify(updatedDraftClient));\n        } catch (storageError) {\n          console.error('Error saving to localStorage:', storageError);\n        }\n        \n        return null;\n      }\n    } catch (error) {\n      console.error('Error saving partial data:', error);\n      setError('Error al guardar los datos parciales.');\n      return null;\n    } finally {\n      setSectionSubmitting(false);\n    }\n  };\n  \n  // Helper to ensure we have all required fields\n  const ensureRequiredFields = (clientData: Partial<Client>) => {\n    // Handle advisor_id assignment\n    if (user && user.role === 'ADVISOR') {\n      clientData.advisor_id = user.id;\n    }\n    \n    // Handle the company_id requirement - only set default if not selected in form\n    if (!clientData.company_id) {\n      console.log('🔍 No se seleccionó empresa en el formulario, aplicando lógica predeterminada');\n      \n      if (user) {\n        if (user.role === 'COMPANY_ADMIN') {\n          clientData.company_id = user.entityId;\n          console.log('🔍 Usando company_id del usuario COMPANY_ADMIN:', clientData.company_id);\n        } else {\n          // For other roles without company selection, use default\n          clientData.company_id = DEFAULT_COMPANY_ID;\n          console.log('🔍 Usando company_id predeterminado para usuario con rol:', user.role);\n        }\n      } else {\n        // No user information available, use default company_id\n        clientData.company_id = DEFAULT_COMPANY_ID;\n        console.log('🔍 Sin contexto de usuario, usando company_id predeterminado');\n      }\n    } else {\n      console.log('🔍 Usando company_id seleccionado en el formulario:', clientData.company_id);\n    }\n  };\n  \n  // Helper to collect fields based on step\n  const collectFieldsForStep = (data: Partial<Client>, step: number): Partial<Client> => {\n    const result: Partial<Client> = {};\n    \n    // Always preserve these fields if they exist\n    if (data.id) result.id = data.id;\n    if (data.company_id) result.company_id = data.company_id;\n    if (data.advisor_id) result.advisor_id = data.advisor_id;\n    \n    switch(step) {\n      case 1: // Personal data\n        const personalFields = [\n          'first_name', 'paternal_surname', 'maternal_surname', 'email', 'phone',\n          'rfc', 'curp', 'birth_date', 'gender', 'marital_status', 'address',\n          'city', 'state', 'postal_code'\n        ];\n        personalFields.forEach(field => {\n          if (field in data) {\n            (result as any)[field] = (data as any)[field];\n          }\n        });\n        break;\n        \n      case 2: // Financial details\n        const financialFields = [\n          'employment_type', 'employment_years', 'monthly_income',\n          'additional_income', 'monthly_expenses', 'other_loan_balances'\n        ];\n        financialFields.forEach(field => {\n          if (field in data) {\n            (result as any)[field] = (data as any)[field];\n          }\n        });\n        break;\n        \n      case 3: // Bank details\n        const bankFields = [\n          'bank_name', 'bank_clabe', 'bank_account_number',\n          'bank_account_type', 'bank_account_origin'\n        ];\n        bankFields.forEach(field => {\n          if (field in data) {\n            (result as any)[field] = (data as any)[field];\n          }\n        });\n        break;\n        \n      default:\n        console.warn(`🔍 Paso desconocido para guardado parcial: ${step}`);\n    }\n    \n    return result;\n  };\n\n  return (\n    <MainLayout>\n      <div className=\"p-6\">\n        <div className=\"flex items-center mb-6\">\n          <button \n            onClick={() => navigate('/clients')} \n            className=\"btn btn-sm btn-outline mr-4\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clipRule=\"evenodd\" />\n            </svg>\n            Volver\n          </button>\n          <h1 className=\"text-2xl font-bold\">Nuevo Cliente</h1>\n        </div>\n        \n        {/* Display error message */}\n        {error && (\n          <div className=\"mb-4\">\n            <div className=\"alert alert-error\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <span>{error}</span>\n              <button onClick={() => setError(null)} className=\"ml-auto\">×</button>\n            </div>\n          </div>\n        )}\n        \n        {/* Display success message */}\n        {successMessage && (\n          <div className=\"mb-4\">\n            <div className=\"alert alert-success\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <span>{successMessage}</span>\n              <button onClick={() => setSuccessMessage(null)} className=\"ml-auto\">×</button>\n            </div>\n          </div>\n        )}\n        \n        <ClientForm \n          initialData={draftClient || undefined}\n          onSubmit={handleSubmit}\n          onSavePartial={handleSavePartial}\n          isSubmitting={isSubmitting}\n          sectionSubmitting={sectionSubmitting}\n        />\n      </div>\n    </MainLayout>\n  );\n};\n\nexport default NewClient; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}