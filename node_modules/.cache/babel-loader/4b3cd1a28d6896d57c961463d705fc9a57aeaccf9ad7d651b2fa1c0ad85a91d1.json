{"ast":null,"code":"// Definición de tipos para solicitudes (applications)\n\n// Estados de solicitud\nexport let ApplicationStatus = /*#__PURE__*/function (ApplicationStatus) {\n  ApplicationStatus[\"PENDING\"] = \"pending\";\n  ApplicationStatus[\"REVIEW\"] = \"review\";\n  ApplicationStatus[\"APPROVED\"] = \"approved\";\n  ApplicationStatus[\"REJECTED\"] = \"rejected\";\n  ApplicationStatus[\"COMPLETED\"] = \"completed\";\n  ApplicationStatus[\"CANCELLED\"] = \"cancelled\";\n  return ApplicationStatus;\n}({});\n\n// Tipos de aplicaciones/créditos\nexport let ApplicationType = /*#__PURE__*/function (ApplicationType) {\n  ApplicationType[\"AUTO_LOAN\"] = \"auto_loan\";\n  ApplicationType[\"CAR_BACKED_LOAN\"] = \"car_backed_loan\";\n  ApplicationType[\"PERSONAL_LOAN\"] = \"personal_loan\";\n  ApplicationType[\"CASH_ADVANCE\"] = \"cash_advance\";\n  return ApplicationType;\n}({});\n\n// Interfaz para el historial de estados\n\n// Interfaces para documentos\n\n// Interfaz principal para solicitudes\n\n// Interfaces para filtros de búsqueda\n\n// Clase de utilidad para cálculos de préstamos\nexport class LoanCalculator {\n  /**\n   * Calcula el pago mensual de un préstamo\n   * @param principal Monto principal del préstamo\n   * @param annualRate Tasa de interés anual (ej: 12 para 12%)\n   * @param termMonths Plazo en meses\n   * @returns Pago mensual\n   */\n  static calculateMonthlyPayment(principal, annualRate, termMonths) {\n    const monthlyRate = annualRate / 100 / 12;\n    return principal * monthlyRate / (1 - Math.pow(1 + monthlyRate, -termMonths));\n  }\n\n  /**\n   * Calcula el interés total pagado al final del préstamo\n   * @param principal Monto principal del préstamo\n   * @param annualRate Tasa de interés anual\n   * @param termMonths Plazo en meses\n   * @returns Interés total pagado\n   */\n  static calculateTotalInterest(principal, annualRate, termMonths) {\n    const monthlyPayment = this.calculateMonthlyPayment(principal, annualRate, termMonths);\n    return monthlyPayment * termMonths - principal;\n  }\n\n  /**\n   * Genera una tabla de amortización para un préstamo\n   * @param principal Monto principal del préstamo\n   * @param annualRate Tasa de interés anual\n   * @param termMonths Plazo en meses\n   * @returns Array de pagos mensuales con desglose\n   */\n  static generateAmortizationTable(principal, annualRate, termMonths) {\n    const monthlyRate = annualRate / 100 / 12;\n    const monthlyPayment = this.calculateMonthlyPayment(principal, annualRate, termMonths);\n    let balance = principal;\n    const schedule = [];\n    for (let month = 1; month <= termMonths; month++) {\n      const interestPayment = balance * monthlyRate;\n      const principalPayment = monthlyPayment - interestPayment;\n      balance -= principalPayment;\n      schedule.push({\n        month,\n        payment: monthlyPayment,\n        principalPayment,\n        interestPayment,\n        balance: balance > 0 ? balance : 0\n      });\n    }\n    return schedule;\n  }\n}","map":{"version":3,"names":["ApplicationStatus","ApplicationType","LoanCalculator","calculateMonthlyPayment","principal","annualRate","termMonths","monthlyRate","Math","pow","calculateTotalInterest","monthlyPayment","generateAmortizationTable","balance","schedule","month","interestPayment","principalPayment","push","payment"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/utils/types/applications.ts"],"sourcesContent":["// Definición de tipos para solicitudes (applications)\n\n// Estados de solicitud\nexport enum ApplicationStatus {\n  PENDING = 'pending',\n  REVIEW = 'review',\n  APPROVED = 'approved',\n  REJECTED = 'rejected',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n// Tipos de aplicaciones/créditos\nexport enum ApplicationType {\n  AUTO_LOAN = 'auto_loan',\n  CAR_BACKED_LOAN = 'car_backed_loan',\n  PERSONAL_LOAN = 'personal_loan',\n  CASH_ADVANCE = 'cash_advance',\n}\n\n// Interfaz para el historial de estados\nexport interface StatusHistory {\n  id: string;\n  application_id: string;\n  status: ApplicationStatus;\n  comment: string;\n  created_at: string;\n  created_by: string;\n  user_name?: string;\n}\n\n// Interfaces para documentos\nexport interface Document {\n  id: string;\n  application_id: string;\n  name: string;\n  file_type: string;\n  file_path: string;\n  uploaded_at: string;\n  uploaded_by: string;\n}\n\n// Interfaz principal para solicitudes\nexport interface Application {\n  id: string;\n  client_id: string;\n  client_name?: string;\n  email?: string;\n  phone?: string;\n  type: ApplicationType;\n  amount: number;\n  term_months: number;\n  interest_rate: number;\n  status: ApplicationStatus;\n  assigned_to?: string;\n  advisor_name?: string;\n  company_id?: string;\n  company_name?: string;\n  created_at: string;\n  updated_at?: string;\n  documents?: Document[];\n  status_history?: StatusHistory[];\n  notes?: string;\n  // Campos calculados\n  monthly_payment?: number;\n  total_payment?: number;\n  total_interest?: number;\n}\n\n// Interfaces para filtros de búsqueda\nexport interface ApplicationFilters {\n  search?: string;\n  status?: ApplicationStatus | 'all';\n  type?: ApplicationType | 'all';\n  dateFrom?: string;\n  dateTo?: string;\n  assignedTo?: string;\n  companyId?: string;\n  amountMin?: number;\n  amountMax?: number;\n}\n\n// Clase de utilidad para cálculos de préstamos\nexport class LoanCalculator {\n  /**\n   * Calcula el pago mensual de un préstamo\n   * @param principal Monto principal del préstamo\n   * @param annualRate Tasa de interés anual (ej: 12 para 12%)\n   * @param termMonths Plazo en meses\n   * @returns Pago mensual\n   */\n  static calculateMonthlyPayment(principal: number, annualRate: number, termMonths: number): number {\n    const monthlyRate = (annualRate / 100) / 12;\n    return (principal * monthlyRate) / (1 - Math.pow(1 + monthlyRate, -termMonths));\n  }\n\n  /**\n   * Calcula el interés total pagado al final del préstamo\n   * @param principal Monto principal del préstamo\n   * @param annualRate Tasa de interés anual\n   * @param termMonths Plazo en meses\n   * @returns Interés total pagado\n   */\n  static calculateTotalInterest(principal: number, annualRate: number, termMonths: number): number {\n    const monthlyPayment = this.calculateMonthlyPayment(principal, annualRate, termMonths);\n    return (monthlyPayment * termMonths) - principal;\n  }\n\n  /**\n   * Genera una tabla de amortización para un préstamo\n   * @param principal Monto principal del préstamo\n   * @param annualRate Tasa de interés anual\n   * @param termMonths Plazo en meses\n   * @returns Array de pagos mensuales con desglose\n   */\n  static generateAmortizationTable(principal: number, annualRate: number, termMonths: number): any[] {\n    const monthlyRate = (annualRate / 100) / 12;\n    const monthlyPayment = this.calculateMonthlyPayment(principal, annualRate, termMonths);\n    \n    let balance = principal;\n    const schedule = [];\n\n    for (let month = 1; month <= termMonths; month++) {\n      const interestPayment = balance * monthlyRate;\n      const principalPayment = monthlyPayment - interestPayment;\n      \n      balance -= principalPayment;\n      \n      schedule.push({\n        month,\n        payment: monthlyPayment,\n        principalPayment,\n        interestPayment,\n        balance: balance > 0 ? balance : 0,\n      });\n    }\n\n    return schedule;\n  }\n} "],"mappings":"AAAA;;AAEA;AACA,WAAYA,iBAAiB,0BAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAA,OAAjBA,iBAAiB;AAAA;;AAS7B;AACA,WAAYC,eAAe,0BAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAA,OAAfA,eAAe;AAAA;;AAO3B;;AAWA;;AAWA;;AA2BA;;AAaA;AACA,OAAO,MAAMC,cAAc,CAAC;EAC1B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,uBAAuBA,CAACC,SAAiB,EAAEC,UAAkB,EAAEC,UAAkB,EAAU;IAChG,MAAMC,WAAW,GAAIF,UAAU,GAAG,GAAG,GAAI,EAAE;IAC3C,OAAQD,SAAS,GAAGG,WAAW,IAAK,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,WAAW,EAAE,CAACD,UAAU,CAAC,CAAC;EACjF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOI,sBAAsBA,CAACN,SAAiB,EAAEC,UAAkB,EAAEC,UAAkB,EAAU;IAC/F,MAAMK,cAAc,GAAG,IAAI,CAACR,uBAAuB,CAACC,SAAS,EAAEC,UAAU,EAAEC,UAAU,CAAC;IACtF,OAAQK,cAAc,GAAGL,UAAU,GAAIF,SAAS;EAClD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOQ,yBAAyBA,CAACR,SAAiB,EAAEC,UAAkB,EAAEC,UAAkB,EAAS;IACjG,MAAMC,WAAW,GAAIF,UAAU,GAAG,GAAG,GAAI,EAAE;IAC3C,MAAMM,cAAc,GAAG,IAAI,CAACR,uBAAuB,CAACC,SAAS,EAAEC,UAAU,EAAEC,UAAU,CAAC;IAEtF,IAAIO,OAAO,GAAGT,SAAS;IACvB,MAAMU,QAAQ,GAAG,EAAE;IAEnB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,IAAIT,UAAU,EAAES,KAAK,EAAE,EAAE;MAChD,MAAMC,eAAe,GAAGH,OAAO,GAAGN,WAAW;MAC7C,MAAMU,gBAAgB,GAAGN,cAAc,GAAGK,eAAe;MAEzDH,OAAO,IAAII,gBAAgB;MAE3BH,QAAQ,CAACI,IAAI,CAAC;QACZH,KAAK;QACLI,OAAO,EAAER,cAAc;QACvBM,gBAAgB;QAChBD,eAAe;QACfH,OAAO,EAAEA,OAAO,GAAG,CAAC,GAAGA,OAAO,GAAG;MACnC,CAAC,CAAC;IACJ;IAEA,OAAOC,QAAQ;EACjB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}