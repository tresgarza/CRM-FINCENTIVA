{"ast":null,"code":"import { TABLES } from '../utils/constants/tables';\nimport { executeQuery } from '../utils/databaseUtils';\n/**\n * Obtiene estadísticas generales para el dashboard\n */\nexport const getGeneralDashboardStats = async () => {\n  try {\n    var _totalAppResult$, _amountResult$, _amountResult$2, _amountResult$3, _categoryResult$, _categoryResult$2, _categoryResult$3, _categoryResult$4;\n    // Total de aplicaciones\n    const totalApplicationsQuery = `SELECT COUNT(*) as total FROM ${TABLES.APPLICATIONS}`;\n    const totalAppResult = await executeQuery(totalApplicationsQuery);\n    const totalApplications = parseInt(((_totalAppResult$ = totalAppResult[0]) === null || _totalAppResult$ === void 0 ? void 0 : _totalAppResult$.total) || '0');\n\n    // Aplicaciones por estado\n    const applicationsByStatusQuery = `\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      GROUP BY status\n    `;\n    const statusResult = await executeQuery(applicationsByStatusQuery);\n    const applicationsByStatus = statusResult.map(row => ({\n      status: row.status,\n      count: parseInt(row.count)\n    }));\n\n    // Estadísticas de montos\n    const amountStatsQuery = `\n      SELECT \n        AVG(amount) as avg_amount, \n        MIN(amount) as min_amount, \n        MAX(amount) as max_amount \n      FROM ${TABLES.APPLICATIONS} \n      WHERE amount IS NOT NULL\n    `;\n    const amountResult = await executeQuery(amountStatsQuery);\n    const avgAmount = parseFloat(((_amountResult$ = amountResult[0]) === null || _amountResult$ === void 0 ? void 0 : _amountResult$.avg_amount) || '0');\n    const minAmount = parseFloat(((_amountResult$2 = amountResult[0]) === null || _amountResult$2 === void 0 ? void 0 : _amountResult$2.min_amount) || '0');\n    const maxAmount = parseFloat(((_amountResult$3 = amountResult[0]) === null || _amountResult$3 === void 0 ? void 0 : _amountResult$3.max_amount) || '0');\n\n    // Aplicaciones recientes\n    let recentApplications = [];\n    try {\n      const recentApplicationsQuery = `\n        SELECT id, created_at, client_name, status, amount, company_name, application_type\n        FROM ${TABLES.APPLICATIONS}\n        ORDER BY created_at DESC\n        LIMIT 10\n      `;\n      recentApplications = await executeQuery(recentApplicationsQuery);\n\n      // Asegurarse de que application_type esté presente en todos los registros\n      recentApplications = recentApplications.map(app => {\n        if (!app.application_type) {\n          // Si no tiene application_type, intentar determinar por otros campos\n          if (app.status && app.status.toLowerCase().includes('simul')) {\n            app.application_type = 'product_simulations';\n          } else if (app.status && app.status.toLowerCase().includes('solicit')) {\n            app.application_type = 'selected_plans';\n          }\n        }\n        return app;\n      });\n    } catch (error) {\n      console.error('Error al obtener aplicaciones recientes:', error);\n      // Proporcionar datos de muestra si falla la consulta\n      recentApplications = [{\n        id: '1',\n        created_at: new Date().toISOString(),\n        client_name: 'Usuario de Muestra',\n        status: 'pending',\n        amount: '10000',\n        company_name: 'Empresa Ejemplo',\n        application_type: 'selected_plans'\n      }, {\n        id: '2',\n        created_at: new Date().toISOString(),\n        client_name: 'Usuario de Muestra',\n        status: 'approved',\n        amount: '15000',\n        company_name: 'Empresa Ejemplo',\n        application_type: 'product_simulations'\n      }];\n    }\n\n    // Aplicaciones por mes (últimos 6 meses)\n    const applicationsByMonthQuery = `\n      SELECT \n        TO_CHAR(created_at, 'YYYY-MM') as month, \n        COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE created_at >= NOW() - INTERVAL '6 months'\n      GROUP BY TO_CHAR(created_at, 'YYYY-MM')\n      ORDER BY month\n    `;\n    const monthResult = await executeQuery(applicationsByMonthQuery);\n    const applicationsByMonth = monthResult.map(row => ({\n      month: row.month,\n      count: parseInt(row.count)\n    }));\n\n    // Totales por categoría principal\n    const totalByMajorCategoryQuery = `\n      SELECT \n        COUNT(*) FILTER (WHERE status IN ('approved', 'APROBADO', 'Aprobado por Asesor')) as approved,\n        COUNT(*) FILTER (WHERE status IN ('rejected', 'RECHAZADO')) as rejected,\n        COUNT(*) FILTER (WHERE status IN ('pending', 'new', 'Solicitud', 'Simulación')) as pending,\n        COUNT(*) FILTER (WHERE \n          (approved_by_advisor = false AND approved_by_company = false) OR\n          (approved_by_advisor = true AND approved_by_company = false) OR\n          (approved_by_advisor = false AND approved_by_company = true)\n        ) as pending_approval\n      FROM ${TABLES.APPLICATIONS}\n    `;\n    const categoryResult = await executeQuery(totalByMajorCategoryQuery);\n    const totalApproved = parseInt(((_categoryResult$ = categoryResult[0]) === null || _categoryResult$ === void 0 ? void 0 : _categoryResult$.approved) || '0');\n    const totalRejected = parseInt(((_categoryResult$2 = categoryResult[0]) === null || _categoryResult$2 === void 0 ? void 0 : _categoryResult$2.rejected) || '0');\n    const totalPending = parseInt(((_categoryResult$3 = categoryResult[0]) === null || _categoryResult$3 === void 0 ? void 0 : _categoryResult$3.pending) || '0');\n    const pendingApproval = parseInt(((_categoryResult$4 = categoryResult[0]) === null || _categoryResult$4 === void 0 ? void 0 : _categoryResult$4.pending_approval) || '0');\n\n    // Total clients - use a try-catch block to handle the case where the table doesn't exist\n    let totalClients = 0;\n    try {\n      var _totalClientsResult$;\n      // First attempt: try to get clients count from clients table\n      const totalClientsQuery = `SELECT COUNT(*) as total FROM ${TABLES.CLIENTS}`;\n      const totalClientsResult = await executeQuery(totalClientsQuery);\n      totalClients = parseInt(((_totalClientsResult$ = totalClientsResult[0]) === null || _totalClientsResult$ === void 0 ? void 0 : _totalClientsResult$.total) || '0');\n    } catch (error) {\n      // Fallback: if clients table doesn't exist, count distinct client names from applications\n      try {\n        var _clientNamesResult$;\n        const clientNamesQuery = `SELECT COUNT(DISTINCT client_name) as total FROM ${TABLES.APPLICATIONS}`;\n        const clientNamesResult = await executeQuery(clientNamesQuery);\n        totalClients = parseInt(((_clientNamesResult$ = clientNamesResult[0]) === null || _clientNamesResult$ === void 0 ? void 0 : _clientNamesResult$.total) || '0');\n      } catch (innerError) {\n        console.error('Error counting clients from applications table:', innerError);\n        // If that also fails, default to 0\n        totalClients = 0;\n      }\n    }\n    return {\n      totalApplications,\n      applicationsByStatus,\n      avgAmount,\n      minAmount,\n      maxAmount,\n      recentApplications,\n      applicationsByMonth,\n      totalApproved,\n      totalRejected,\n      totalPending,\n      pendingApproval,\n      totalClients\n    };\n  } catch (error) {\n    console.error('Error al obtener estadísticas del dashboard:', error);\n    throw error;\n  }\n};\n\n/**\n * Obtiene estadísticas específicas para un asesor\n * @param advisorId ID del asesor\n */\nexport const getAdvisorDashboardStats = async advisorId => {\n  try {\n    var _advisorAppResult$, _companiesResult$, _conversionResult$, _conversionResult$2, _timeResult$;\n    // Obtenemos las estadísticas generales primero\n    const baseStats = await getGeneralDashboardStats();\n\n    // Estadísticas específicas del asesor\n    // Total de aplicaciones del asesor\n    const advisorApplicationsQuery = `\n      SELECT COUNT(*) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;\n    const advisorAppResult = await executeQuery(advisorApplicationsQuery);\n    const totalAdvisorApplications = parseInt(((_advisorAppResult$ = advisorAppResult[0]) === null || _advisorAppResult$ === void 0 ? void 0 : _advisorAppResult$.total) || '0');\n\n    // Aplicaciones por estado del asesor\n    const advisorStatusQuery = `\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n      GROUP BY status\n    `;\n    const advisorStatusResult = await executeQuery(advisorStatusQuery);\n    const advisorApplicationsByStatus = advisorStatusResult.map(row => ({\n      status: row.status,\n      count: parseInt(row.count)\n    }));\n\n    // Total de clientes del asesor\n    let totalClients = 0;\n    try {\n      var _clientsResult$;\n      // First attempt: try to get clients from clients table\n      const clientsQuery = `\n        SELECT COUNT(*) as total \n        FROM ${TABLES.CLIENTS} \n        WHERE advisor_id = '${advisorId}'\n      `;\n      const clientsResult = await executeQuery(clientsQuery);\n      totalClients = parseInt(((_clientsResult$ = clientsResult[0]) === null || _clientsResult$ === void 0 ? void 0 : _clientsResult$.total) || '0');\n    } catch (error) {\n      // Fallback: count distinct client names from applications\n      try {\n        var _clientNamesResult$2;\n        const clientNamesQuery = `\n          SELECT COUNT(DISTINCT client_name) as total \n          FROM ${TABLES.APPLICATIONS} \n          WHERE assigned_to = '${advisorId}'\n        `;\n        const clientNamesResult = await executeQuery(clientNamesQuery);\n        totalClients = parseInt(((_clientNamesResult$2 = clientNamesResult[0]) === null || _clientNamesResult$2 === void 0 ? void 0 : _clientNamesResult$2.total) || '0');\n      } catch (innerError) {\n        console.error(`Error counting clients for advisor ${advisorId}:`, innerError);\n        // If that also fails, default to 0\n        totalClients = 0;\n      }\n    }\n\n    // Total de empresas asignadas al asesor\n    const companiesQuery = `\n      SELECT COUNT(DISTINCT company_id) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;\n    const companiesResult = await executeQuery(companiesQuery);\n    const totalCompanies = parseInt(((_companiesResult$ = companiesResult[0]) === null || _companiesResult$ === void 0 ? void 0 : _companiesResult$.total) || '0');\n\n    // Tasa de conversión (aprobados / total)\n    const conversionRateQuery = `\n      SELECT \n        COUNT(*) FILTER (WHERE status IN ('approved', 'APROBADO', 'completed')) as approved,\n        COUNT(*) as total\n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;\n    const conversionResult = await executeQuery(conversionRateQuery);\n    const approved = parseInt(((_conversionResult$ = conversionResult[0]) === null || _conversionResult$ === void 0 ? void 0 : _conversionResult$.approved) || '0');\n    const total = parseInt(((_conversionResult$2 = conversionResult[0]) === null || _conversionResult$2 === void 0 ? void 0 : _conversionResult$2.total) || '0');\n    const conversionRate = total > 0 ? approved / total * 100 : 0;\n\n    // Tiempo promedio hasta aprobación\n    const avgTimeQuery = `\n      SELECT AVG(EXTRACT(EPOCH FROM (approval_date_advisor - created_at))/86400) as avg_days\n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n      AND approval_date_advisor IS NOT NULL\n    `;\n    const timeResult = await executeQuery(avgTimeQuery);\n    const avgTimeToApproval = parseFloat(((_timeResult$ = timeResult[0]) === null || _timeResult$ === void 0 ? void 0 : _timeResult$.avg_days) || '0');\n\n    // Aplicaciones recientes del asesor\n    const recentAdvisorAppsQuery = `\n      SELECT id, created_at, client_name, status, amount, company_name\n      FROM ${TABLES.APPLICATIONS}\n      WHERE assigned_to = '${advisorId}'\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;\n    const recentAdvisorApps = await executeQuery(recentAdvisorAppsQuery);\n    return {\n      ...baseStats,\n      totalApplications: totalAdvisorApplications,\n      applicationsByStatus: advisorApplicationsByStatus,\n      recentApplications: recentAdvisorApps,\n      totalClients,\n      totalCompanies,\n      conversionRate,\n      avgTimeToApproval\n    };\n  } catch (error) {\n    console.error(`Error al obtener estadísticas del asesor ${advisorId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Obtiene estadísticas específicas para una empresa\n * @param companyId ID de la empresa\n */\nexport const getCompanyDashboardStats = async companyId => {\n  try {\n    var _companyAppResult$, _advisorsResult$, _timeResult$2;\n    // Obtenemos las estadísticas generales primero\n    const baseStats = await getGeneralDashboardStats();\n\n    // Estadísticas específicas de la empresa\n    // Total de aplicaciones de la empresa\n    const companyApplicationsQuery = `\n      SELECT COUNT(*) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n    `;\n    const companyAppResult = await executeQuery(companyApplicationsQuery);\n    const totalCompanyApplications = parseInt(((_companyAppResult$ = companyAppResult[0]) === null || _companyAppResult$ === void 0 ? void 0 : _companyAppResult$.total) || '0');\n\n    // Aplicaciones por estado de la empresa\n    const companyStatusQuery = `\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n      GROUP BY status\n    `;\n    const companyStatusResult = await executeQuery(companyStatusQuery);\n    const companyApplicationsByStatus = companyStatusResult.map(row => ({\n      status: row.status,\n      count: parseInt(row.count)\n    }));\n\n    // Total de asesores asignados a la empresa\n    const advisorsQuery = `\n      SELECT COUNT(DISTINCT assigned_to) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n    `;\n    const advisorsResult = await executeQuery(advisorsQuery);\n    const totalAdvisors = parseInt(((_advisorsResult$ = advisorsResult[0]) === null || _advisorsResult$ === void 0 ? void 0 : _advisorsResult$.total) || '0');\n\n    // Total de clientes de la empresa\n    let totalClientsCompany = 0;\n    try {\n      var _clientsResult$2;\n      // First attempt: try to get clients from clients table\n      const clientsQuery = `\n        SELECT COUNT(*) as total \n        FROM ${TABLES.CLIENTS} \n        WHERE company_id = '${companyId}'\n      `;\n      const clientsResult = await executeQuery(clientsQuery);\n      totalClientsCompany = parseInt(((_clientsResult$2 = clientsResult[0]) === null || _clientsResult$2 === void 0 ? void 0 : _clientsResult$2.total) || '0');\n    } catch (error) {\n      // Fallback: count distinct client names from applications\n      try {\n        var _clientNamesResult$3;\n        const clientNamesQuery = `\n          SELECT COUNT(DISTINCT client_name) as total \n          FROM ${TABLES.APPLICATIONS} \n          WHERE company_id = '${companyId}'\n        `;\n        const clientNamesResult = await executeQuery(clientNamesQuery);\n        totalClientsCompany = parseInt(((_clientNamesResult$3 = clientNamesResult[0]) === null || _clientNamesResult$3 === void 0 ? void 0 : _clientNamesResult$3.total) || '0');\n      } catch (innerError) {\n        console.error(`Error counting clients for company ${companyId}:`, innerError);\n        // If that also fails, default to 0\n        totalClientsCompany = 0;\n      }\n    }\n\n    // Tiempo promedio de aprobación\n    const avgTimeQuery = `\n      SELECT AVG(EXTRACT(EPOCH FROM (approval_date_company - created_at))/86400) as avg_days\n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n      AND approval_date_company IS NOT NULL\n    `;\n    const timeResult = await executeQuery(avgTimeQuery);\n    const avgApprovalTime = parseFloat(((_timeResult$2 = timeResult[0]) === null || _timeResult$2 === void 0 ? void 0 : _timeResult$2.avg_days) || '0');\n\n    // Aplicaciones recientes de la empresa\n    const recentCompanyAppsQuery = `\n      SELECT id, created_at, client_name, status, amount, assigned_to\n      FROM ${TABLES.APPLICATIONS}\n      WHERE company_id = '${companyId}'\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;\n    const recentCompanyApps = await executeQuery(recentCompanyAppsQuery);\n    return {\n      ...baseStats,\n      totalApplications: totalCompanyApplications,\n      applicationsByStatus: companyApplicationsByStatus,\n      recentApplications: recentCompanyApps,\n      totalAdvisors,\n      totalClientsCompany,\n      avgApprovalTime\n    };\n  } catch (error) {\n    console.error(`Error al obtener estadísticas de la empresa ${companyId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Obtiene estadísticas de aplicaciones pendientes de aprobación\n * @param userId ID del usuario (asesor o admin de empresa)\n * @param isCompanyAdmin Indica si el usuario es un admin de empresa\n */\nexport const getPendingApprovalStats = async (userId, isCompanyAdmin) => {\n  try {\n    var _result$;\n    let query = '';\n    if (isCompanyAdmin) {\n      var _companyResult$;\n      // Obtener ID de la compañía del admin\n      const companyQuery = `\n        SELECT company_id FROM ${TABLES.COMPANY_ADMINS} WHERE id = '${userId}'\n      `;\n      const companyResult = await executeQuery(companyQuery);\n      const companyId = (_companyResult$ = companyResult[0]) === null || _companyResult$ === void 0 ? void 0 : _companyResult$.company_id;\n      if (!companyId) {\n        throw new Error('No se encontró la compañía para este administrador');\n      }\n\n      // Aplicaciones pendientes de aprobación por la compañía\n      query = `\n        SELECT COUNT(*) as pending_count\n        FROM ${TABLES.APPLICATIONS}\n        WHERE company_id = '${companyId}'\n        AND approved_by_advisor = true\n        AND approved_by_company = false\n      `;\n    } else {\n      // Aplicaciones pendientes de aprobación por el asesor\n      query = `\n        SELECT COUNT(*) as pending_count\n        FROM ${TABLES.APPLICATIONS}\n        WHERE assigned_to = '${userId}'\n        AND approved_by_advisor = false\n      `;\n    }\n    const result = await executeQuery(query);\n    return {\n      pendingCount: parseInt(((_result$ = result[0]) === null || _result$ === void 0 ? void 0 : _result$.pending_count) || '0')\n    };\n  } catch (error) {\n    console.error('Error al obtener estadísticas de aprobaciones pendientes:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["TABLES","executeQuery","getGeneralDashboardStats","_totalAppResult$","_amountResult$","_amountResult$2","_amountResult$3","_categoryResult$","_categoryResult$2","_categoryResult$3","_categoryResult$4","totalApplicationsQuery","APPLICATIONS","totalAppResult","totalApplications","parseInt","total","applicationsByStatusQuery","statusResult","applicationsByStatus","map","row","status","count","amountStatsQuery","amountResult","avgAmount","parseFloat","avg_amount","minAmount","min_amount","maxAmount","max_amount","recentApplications","recentApplicationsQuery","app","application_type","toLowerCase","includes","error","console","id","created_at","Date","toISOString","client_name","amount","company_name","applicationsByMonthQuery","monthResult","applicationsByMonth","month","totalByMajorCategoryQuery","categoryResult","totalApproved","approved","totalRejected","rejected","totalPending","pending","pendingApproval","pending_approval","totalClients","_totalClientsResult$","totalClientsQuery","CLIENTS","totalClientsResult","_clientNamesResult$","clientNamesQuery","clientNamesResult","innerError","getAdvisorDashboardStats","advisorId","_advisorAppResult$","_companiesResult$","_conversionResult$","_conversionResult$2","_timeResult$","baseStats","advisorApplicationsQuery","advisorAppResult","totalAdvisorApplications","advisorStatusQuery","advisorStatusResult","advisorApplicationsByStatus","_clientsResult$","clientsQuery","clientsResult","_clientNamesResult$2","companiesQuery","companiesResult","totalCompanies","conversionRateQuery","conversionResult","conversionRate","avgTimeQuery","timeResult","avgTimeToApproval","avg_days","recentAdvisorAppsQuery","recentAdvisorApps","getCompanyDashboardStats","companyId","_companyAppResult$","_advisorsResult$","_timeResult$2","companyApplicationsQuery","companyAppResult","totalCompanyApplications","companyStatusQuery","companyStatusResult","companyApplicationsByStatus","advisorsQuery","advisorsResult","totalAdvisors","totalClientsCompany","_clientsResult$2","_clientNamesResult$3","avgApprovalTime","recentCompanyAppsQuery","recentCompanyApps","getPendingApprovalStats","userId","isCompanyAdmin","_result$","query","_companyResult$","companyQuery","COMPANY_ADMINS","companyResult","company_id","Error","result","pendingCount","pending_count"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/dashboardService.ts"],"sourcesContent":["import { TABLES } from '../utils/constants/tables';\nimport { executeQuery } from '../utils/databaseUtils';\n\nexport interface DashboardStats {\n  totalApplications: number;\n  applicationsByStatus: {\n    status: string;\n    count: number;\n  }[];\n  avgAmount: number;\n  minAmount: number;\n  maxAmount: number;\n  recentApplications: any[];\n  applicationsByMonth: {\n    month: string;\n    count: number;\n  }[];\n  totalApproved: number;\n  totalRejected: number;\n  totalPending: number;\n  pendingApproval: number;\n  totalClients: number;\n}\n\nexport interface AdvisorStats extends DashboardStats {\n  totalClients: number;\n  totalCompanies: number;\n  conversionRate: number;\n  avgTimeToApproval: number;\n}\n\nexport interface CompanyStats extends DashboardStats {\n  totalAdvisors: number;\n  totalClientsCompany: number;\n  avgApprovalTime: number;\n}\n\n/**\n * Obtiene estadísticas generales para el dashboard\n */\nexport const getGeneralDashboardStats = async (): Promise<DashboardStats> => {\n  try {\n    // Total de aplicaciones\n    const totalApplicationsQuery = `SELECT COUNT(*) as total FROM ${TABLES.APPLICATIONS}`;\n    const totalAppResult = await executeQuery(totalApplicationsQuery);\n    const totalApplications = parseInt(totalAppResult[0]?.total || '0');\n\n    // Aplicaciones por estado\n    const applicationsByStatusQuery = `\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      GROUP BY status\n    `;\n    const statusResult = await executeQuery(applicationsByStatusQuery);\n    const applicationsByStatus = statusResult.map((row: any) => ({\n      status: row.status,\n      count: parseInt(row.count)\n    }));\n\n    // Estadísticas de montos\n    const amountStatsQuery = `\n      SELECT \n        AVG(amount) as avg_amount, \n        MIN(amount) as min_amount, \n        MAX(amount) as max_amount \n      FROM ${TABLES.APPLICATIONS} \n      WHERE amount IS NOT NULL\n    `;\n    const amountResult = await executeQuery(amountStatsQuery);\n    const avgAmount = parseFloat(amountResult[0]?.avg_amount || '0');\n    const minAmount = parseFloat(amountResult[0]?.min_amount || '0');\n    const maxAmount = parseFloat(amountResult[0]?.max_amount || '0');\n\n    // Aplicaciones recientes\n    let recentApplications = [];\n    try {\n      const recentApplicationsQuery = `\n        SELECT id, created_at, client_name, status, amount, company_name, application_type\n        FROM ${TABLES.APPLICATIONS}\n        ORDER BY created_at DESC\n        LIMIT 10\n      `;\n      recentApplications = await executeQuery(recentApplicationsQuery);\n      \n      // Asegurarse de que application_type esté presente en todos los registros\n      recentApplications = recentApplications.map((app: any) => {\n        if (!app.application_type) {\n          // Si no tiene application_type, intentar determinar por otros campos\n          if (app.status && app.status.toLowerCase().includes('simul')) {\n            app.application_type = 'product_simulations';\n          } else if (app.status && app.status.toLowerCase().includes('solicit')) {\n            app.application_type = 'selected_plans';\n          }\n        }\n        return app;\n      });\n    } catch (error) {\n      console.error('Error al obtener aplicaciones recientes:', error);\n      // Proporcionar datos de muestra si falla la consulta\n      recentApplications = [\n        { id: '1', created_at: new Date().toISOString(), client_name: 'Usuario de Muestra', status: 'pending', amount: '10000', company_name: 'Empresa Ejemplo', application_type: 'selected_plans' },\n        { id: '2', created_at: new Date().toISOString(), client_name: 'Usuario de Muestra', status: 'approved', amount: '15000', company_name: 'Empresa Ejemplo', application_type: 'product_simulations' }\n      ];\n    }\n\n    // Aplicaciones por mes (últimos 6 meses)\n    const applicationsByMonthQuery = `\n      SELECT \n        TO_CHAR(created_at, 'YYYY-MM') as month, \n        COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE created_at >= NOW() - INTERVAL '6 months'\n      GROUP BY TO_CHAR(created_at, 'YYYY-MM')\n      ORDER BY month\n    `;\n    const monthResult = await executeQuery(applicationsByMonthQuery);\n    const applicationsByMonth = monthResult.map((row: any) => ({\n      month: row.month,\n      count: parseInt(row.count)\n    }));\n\n    // Totales por categoría principal\n    const totalByMajorCategoryQuery = `\n      SELECT \n        COUNT(*) FILTER (WHERE status IN ('approved', 'APROBADO', 'Aprobado por Asesor')) as approved,\n        COUNT(*) FILTER (WHERE status IN ('rejected', 'RECHAZADO')) as rejected,\n        COUNT(*) FILTER (WHERE status IN ('pending', 'new', 'Solicitud', 'Simulación')) as pending,\n        COUNT(*) FILTER (WHERE \n          (approved_by_advisor = false AND approved_by_company = false) OR\n          (approved_by_advisor = true AND approved_by_company = false) OR\n          (approved_by_advisor = false AND approved_by_company = true)\n        ) as pending_approval\n      FROM ${TABLES.APPLICATIONS}\n    `;\n    const categoryResult = await executeQuery(totalByMajorCategoryQuery);\n    const totalApproved = parseInt(categoryResult[0]?.approved || '0');\n    const totalRejected = parseInt(categoryResult[0]?.rejected || '0');\n    const totalPending = parseInt(categoryResult[0]?.pending || '0');\n    const pendingApproval = parseInt(categoryResult[0]?.pending_approval || '0');\n\n    // Total clients - use a try-catch block to handle the case where the table doesn't exist\n    let totalClients = 0;\n    try {\n      // First attempt: try to get clients count from clients table\n      const totalClientsQuery = `SELECT COUNT(*) as total FROM ${TABLES.CLIENTS}`;\n      const totalClientsResult = await executeQuery(totalClientsQuery);\n      totalClients = parseInt(totalClientsResult[0]?.total || '0');\n    } catch (error) {\n      // Fallback: if clients table doesn't exist, count distinct client names from applications\n      try {\n        const clientNamesQuery = `SELECT COUNT(DISTINCT client_name) as total FROM ${TABLES.APPLICATIONS}`;\n        const clientNamesResult = await executeQuery(clientNamesQuery);\n        totalClients = parseInt(clientNamesResult[0]?.total || '0');\n      } catch (innerError) {\n        console.error('Error counting clients from applications table:', innerError);\n        // If that also fails, default to 0\n        totalClients = 0;\n      }\n    }\n\n    return {\n      totalApplications,\n      applicationsByStatus,\n      avgAmount,\n      minAmount,\n      maxAmount,\n      recentApplications,\n      applicationsByMonth,\n      totalApproved,\n      totalRejected,\n      totalPending,\n      pendingApproval,\n      totalClients\n    };\n  } catch (error) {\n    console.error('Error al obtener estadísticas del dashboard:', error);\n    throw error;\n  }\n};\n\n/**\n * Obtiene estadísticas específicas para un asesor\n * @param advisorId ID del asesor\n */\nexport const getAdvisorDashboardStats = async (advisorId: string): Promise<AdvisorStats> => {\n  try {\n    // Obtenemos las estadísticas generales primero\n    const baseStats = await getGeneralDashboardStats();\n\n    // Estadísticas específicas del asesor\n    // Total de aplicaciones del asesor\n    const advisorApplicationsQuery = `\n      SELECT COUNT(*) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;\n    const advisorAppResult = await executeQuery(advisorApplicationsQuery);\n    const totalAdvisorApplications = parseInt(advisorAppResult[0]?.total || '0');\n\n    // Aplicaciones por estado del asesor\n    const advisorStatusQuery = `\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n      GROUP BY status\n    `;\n    const advisorStatusResult = await executeQuery(advisorStatusQuery);\n    const advisorApplicationsByStatus = advisorStatusResult.map((row: any) => ({\n      status: row.status,\n      count: parseInt(row.count)\n    }));\n\n    // Total de clientes del asesor\n    let totalClients = 0;\n    try {\n      // First attempt: try to get clients from clients table\n      const clientsQuery = `\n        SELECT COUNT(*) as total \n        FROM ${TABLES.CLIENTS} \n        WHERE advisor_id = '${advisorId}'\n      `;\n      const clientsResult = await executeQuery(clientsQuery);\n      totalClients = parseInt(clientsResult[0]?.total || '0');\n    } catch (error) {\n      // Fallback: count distinct client names from applications\n      try {\n        const clientNamesQuery = `\n          SELECT COUNT(DISTINCT client_name) as total \n          FROM ${TABLES.APPLICATIONS} \n          WHERE assigned_to = '${advisorId}'\n        `;\n        const clientNamesResult = await executeQuery(clientNamesQuery);\n        totalClients = parseInt(clientNamesResult[0]?.total || '0');\n      } catch (innerError) {\n        console.error(`Error counting clients for advisor ${advisorId}:`, innerError);\n        // If that also fails, default to 0\n        totalClients = 0;\n      }\n    }\n\n    // Total de empresas asignadas al asesor\n    const companiesQuery = `\n      SELECT COUNT(DISTINCT company_id) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;\n    const companiesResult = await executeQuery(companiesQuery);\n    const totalCompanies = parseInt(companiesResult[0]?.total || '0');\n\n    // Tasa de conversión (aprobados / total)\n    const conversionRateQuery = `\n      SELECT \n        COUNT(*) FILTER (WHERE status IN ('approved', 'APROBADO', 'completed')) as approved,\n        COUNT(*) as total\n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;\n    const conversionResult = await executeQuery(conversionRateQuery);\n    const approved = parseInt(conversionResult[0]?.approved || '0');\n    const total = parseInt(conversionResult[0]?.total || '0');\n    const conversionRate = total > 0 ? (approved / total) * 100 : 0;\n\n    // Tiempo promedio hasta aprobación\n    const avgTimeQuery = `\n      SELECT AVG(EXTRACT(EPOCH FROM (approval_date_advisor - created_at))/86400) as avg_days\n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n      AND approval_date_advisor IS NOT NULL\n    `;\n    const timeResult = await executeQuery(avgTimeQuery);\n    const avgTimeToApproval = parseFloat(timeResult[0]?.avg_days || '0');\n\n    // Aplicaciones recientes del asesor\n    const recentAdvisorAppsQuery = `\n      SELECT id, created_at, client_name, status, amount, company_name\n      FROM ${TABLES.APPLICATIONS}\n      WHERE assigned_to = '${advisorId}'\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;\n    const recentAdvisorApps = await executeQuery(recentAdvisorAppsQuery);\n\n    return {\n      ...baseStats,\n      totalApplications: totalAdvisorApplications,\n      applicationsByStatus: advisorApplicationsByStatus,\n      recentApplications: recentAdvisorApps,\n      totalClients,\n      totalCompanies,\n      conversionRate,\n      avgTimeToApproval\n    };\n  } catch (error) {\n    console.error(`Error al obtener estadísticas del asesor ${advisorId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Obtiene estadísticas específicas para una empresa\n * @param companyId ID de la empresa\n */\nexport const getCompanyDashboardStats = async (companyId: string): Promise<CompanyStats> => {\n  try {\n    // Obtenemos las estadísticas generales primero\n    const baseStats = await getGeneralDashboardStats();\n\n    // Estadísticas específicas de la empresa\n    // Total de aplicaciones de la empresa\n    const companyApplicationsQuery = `\n      SELECT COUNT(*) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n    `;\n    const companyAppResult = await executeQuery(companyApplicationsQuery);\n    const totalCompanyApplications = parseInt(companyAppResult[0]?.total || '0');\n\n    // Aplicaciones por estado de la empresa\n    const companyStatusQuery = `\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n      GROUP BY status\n    `;\n    const companyStatusResult = await executeQuery(companyStatusQuery);\n    const companyApplicationsByStatus = companyStatusResult.map((row: any) => ({\n      status: row.status,\n      count: parseInt(row.count)\n    }));\n\n    // Total de asesores asignados a la empresa\n    const advisorsQuery = `\n      SELECT COUNT(DISTINCT assigned_to) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n    `;\n    const advisorsResult = await executeQuery(advisorsQuery);\n    const totalAdvisors = parseInt(advisorsResult[0]?.total || '0');\n\n    // Total de clientes de la empresa\n    let totalClientsCompany = 0;\n    try {\n      // First attempt: try to get clients from clients table\n      const clientsQuery = `\n        SELECT COUNT(*) as total \n        FROM ${TABLES.CLIENTS} \n        WHERE company_id = '${companyId}'\n      `;\n      const clientsResult = await executeQuery(clientsQuery);\n      totalClientsCompany = parseInt(clientsResult[0]?.total || '0');\n    } catch (error) {\n      // Fallback: count distinct client names from applications\n      try {\n        const clientNamesQuery = `\n          SELECT COUNT(DISTINCT client_name) as total \n          FROM ${TABLES.APPLICATIONS} \n          WHERE company_id = '${companyId}'\n        `;\n        const clientNamesResult = await executeQuery(clientNamesQuery);\n        totalClientsCompany = parseInt(clientNamesResult[0]?.total || '0');\n      } catch (innerError) {\n        console.error(`Error counting clients for company ${companyId}:`, innerError);\n        // If that also fails, default to 0\n        totalClientsCompany = 0;\n      }\n    }\n\n    // Tiempo promedio de aprobación\n    const avgTimeQuery = `\n      SELECT AVG(EXTRACT(EPOCH FROM (approval_date_company - created_at))/86400) as avg_days\n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n      AND approval_date_company IS NOT NULL\n    `;\n    const timeResult = await executeQuery(avgTimeQuery);\n    const avgApprovalTime = parseFloat(timeResult[0]?.avg_days || '0');\n\n    // Aplicaciones recientes de la empresa\n    const recentCompanyAppsQuery = `\n      SELECT id, created_at, client_name, status, amount, assigned_to\n      FROM ${TABLES.APPLICATIONS}\n      WHERE company_id = '${companyId}'\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;\n    const recentCompanyApps = await executeQuery(recentCompanyAppsQuery);\n\n    return {\n      ...baseStats,\n      totalApplications: totalCompanyApplications,\n      applicationsByStatus: companyApplicationsByStatus,\n      recentApplications: recentCompanyApps,\n      totalAdvisors,\n      totalClientsCompany,\n      avgApprovalTime\n    };\n  } catch (error) {\n    console.error(`Error al obtener estadísticas de la empresa ${companyId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Obtiene estadísticas de aplicaciones pendientes de aprobación\n * @param userId ID del usuario (asesor o admin de empresa)\n * @param isCompanyAdmin Indica si el usuario es un admin de empresa\n */\nexport const getPendingApprovalStats = async (userId: string, isCompanyAdmin: boolean): Promise<any> => {\n  try {\n    let query = '';\n    \n    if (isCompanyAdmin) {\n      // Obtener ID de la compañía del admin\n      const companyQuery = `\n        SELECT company_id FROM ${TABLES.COMPANY_ADMINS} WHERE id = '${userId}'\n      `;\n      const companyResult = await executeQuery(companyQuery);\n      const companyId = companyResult[0]?.company_id;\n      \n      if (!companyId) {\n        throw new Error('No se encontró la compañía para este administrador');\n      }\n      \n      // Aplicaciones pendientes de aprobación por la compañía\n      query = `\n        SELECT COUNT(*) as pending_count\n        FROM ${TABLES.APPLICATIONS}\n        WHERE company_id = '${companyId}'\n        AND approved_by_advisor = true\n        AND approved_by_company = false\n      `;\n    } else {\n      // Aplicaciones pendientes de aprobación por el asesor\n      query = `\n        SELECT COUNT(*) as pending_count\n        FROM ${TABLES.APPLICATIONS}\n        WHERE assigned_to = '${userId}'\n        AND approved_by_advisor = false\n      `;\n    }\n    \n    const result = await executeQuery(query);\n    return {\n      pendingCount: parseInt(result[0]?.pending_count || '0')\n    };\n  } catch (error) {\n    console.error('Error al obtener estadísticas de aprobaciones pendientes:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}