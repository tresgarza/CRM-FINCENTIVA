{"ast":null,"code":"import { supabase } from \"../lib/supabaseClient\";\nimport { TABLES } from \"../utils/constants/tables\";\nimport * as documentService from './documentService';\nimport { ErrorType, createAppError, logError, handleApiError } from '../utils/errorHandling';\nimport { parseNumericString } from '../utils/numberFormatting';\n\n// Re-exportamos las interfaces para mantener compatibilidad\n\nconst USERS_TABLE = 'users';\nconst mapUserToClient = userData => {\n  if (!userData) {\n    console.error('Error: userData is undefined in mapUserToClient');\n    throw new Error('No se pudo procesar la información del cliente, los datos son inválidos');\n  }\n  const fullName = userData.name || [userData.first_name, userData.paternal_surname, userData.maternal_surname].filter(Boolean).join(' ');\n  return {\n    id: userData.id,\n    created_at: userData.created_at,\n    name: fullName,\n    first_name: userData.first_name,\n    paternal_surname: userData.paternal_surname,\n    maternal_surname: userData.maternal_surname,\n    email: userData.email,\n    phone: userData.phone,\n    birth_date: userData.birth_date,\n    company_id: userData.company_id,\n    rfc: userData.rfc,\n    curp: userData.curp,\n    advisor_id: userData.advisor_id,\n    address: userData.address,\n    city: userData.city,\n    state: userData.state,\n    postal_code: userData.postal_code,\n    gender: userData.gender,\n    marital_status: userData.marital_status,\n    employment_type: userData.employment_type,\n    employment_years: userData.employment_years,\n    monthly_income: userData.monthly_income,\n    additional_income: userData.additional_income,\n    monthly_expenses: userData.monthly_expenses,\n    other_loan_balances: userData.other_loan_balances,\n    bank_name: userData.bank_name,\n    bank_clabe: userData.bank_clabe,\n    bank_account_number: userData.bank_account_number,\n    bank_account_type: userData.bank_account_type,\n    bank_account_origin: userData.bank_account_origin\n  };\n};\nexport const getClients = async filters => {\n  try {\n    let query = supabase.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin', {\n      count: 'exact'\n    });\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n      if (filters.searchQuery) {\n        query = query.or(`first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);\n      }\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n    query = query.order('created_at', {\n      ascending: false\n    });\n    const {\n      data,\n      error,\n      count\n    } = await query;\n    if (error) {\n      logError(error, 'getClients', {\n        filters\n      });\n      throw handleApiError(error);\n    }\n    const clients = data ? data.map(mapUserToClient) : [];\n    return {\n      clients,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    logError(error, 'getClients', {\n      filters\n    });\n    throw handleApiError(error);\n  }\n};\nexport const getClientById = async id => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin').eq('id', id).single();\n    if (error) {\n      logError(error, 'getClientById', {\n        clientId: id\n      });\n      throw handleApiError(error);\n    }\n    if (!data) {\n      const notFoundError = createAppError(ErrorType.NOT_FOUND, `No se encontró cliente con ID: ${id}`);\n      logError(notFoundError, 'getClientById', {\n        clientId: id\n      });\n      throw notFoundError;\n    }\n    return mapUserToClient(data);\n  } catch (error) {\n    logError(error, 'getClientById', {\n      clientId: id\n    });\n    throw handleApiError(error);\n  }\n};\nfunction escapeSQLString(str) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\nexport const getClientApplications = async clientId => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      throw handleApiError(err);\n    });\n    if (!client) {\n      const notFoundError = createAppError(ErrorType.NOT_FOUND, `El cliente no existe`);\n      logError(notFoundError, 'getClientApplications', {\n        clientId\n      });\n      return [];\n    }\n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name || '')}'\n      ORDER BY created_at DESC\n    `;\n    const executeQuery = async query => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query: query\n          })\n        });\n        const result = await response.json();\n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        return result.data;\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    const data = await executeQuery(query);\n    return data;\n  } catch (error) {\n    logError(error, 'getClientApplications', {\n      clientId\n    });\n    throw handleApiError(error);\n  }\n};\nexport const uploadClientDocuments = async (clientId, userId, documents) => {\n  if (!documents || documents.length === 0) {\n    console.log('No documents to upload');\n    return {\n      successful: [],\n      failed: [],\n      allSuccessful: true\n    };\n  }\n  console.log(`Attempting to upload ${documents.length} documents for client ${clientId}`);\n\n  // Filter out invalid documents\n  const validDocuments = documents.filter(doc => {\n    if (!doc.file || !doc.category || !doc.name) {\n      logError(createAppError(ErrorType.VALIDATION, 'Invalid document data', {\n        name: doc.name || 'undefined',\n        category: doc.category || 'undefined',\n        hasFile: !!doc.file\n      }), 'uploadClientDocuments.validateDocuments', {\n        clientId\n      });\n      return false;\n    }\n    return true;\n  });\n  if (validDocuments.length === 0) {\n    const validationError = createAppError(ErrorType.VALIDATION, 'Documento inválido: falta el archivo, nombre o categoría', {\n      clientId\n    });\n    logError(validationError, 'uploadClientDocuments.noValidDocuments');\n    return {\n      successful: [],\n      failed: documents.map(doc => ({\n        name: doc.name || 'Sin nombre',\n        category: doc.category || 'Sin categoría',\n        error: 'Documento inválido: falta el archivo, nombre o categoría'\n      })),\n      allSuccessful: false,\n      warningMessage: 'No se pudo subir ningún documento porque todos estaban incompletos (faltan archivos, nombres o categorías).'\n    };\n  }\n\n  // Process documents sequentially instead of in parallel to avoid race conditions\n  const results = [];\n  const failedDocuments = [];\n  try {\n    // Intentamos verificar primero si el bucket existe para evitar múltiples intentos fallidos\n    try {\n      console.log(`Checking if storage bucket \"documents\" exists...`);\n      await documentService.ensureStorageBucketExists();\n      console.log(`Storage bucket \"documents\" exists and is accessible.`);\n    } catch (bucketError) {\n      const storageError = createAppError(ErrorType.UPLOAD, 'El almacenamiento de documentos no está disponible temporalmente', {}, bucketError);\n      logError(storageError, 'uploadClientDocuments.bucketCheck', {\n        clientId\n      });\n\n      // Agregamos todos los documentos a la lista de fallos pero permitimos que el cliente se actualice\n      for (const doc of validDocuments) {\n        failedDocuments.push({\n          name: doc.name,\n          category: doc.category,\n          error: 'El almacenamiento de documentos no está disponible temporalmente'\n        });\n      }\n\n      // Informar al usuario con mejor mensaje de error\n      let errorDetail = '';\n      if (bucketError instanceof Error) {\n        errorDetail = bucketError.message;\n\n        // Mensajes específicos según el tipo de error\n        if (errorDetail.includes('404') || errorDetail.includes('not found') || errorDetail.includes('no existe')) {\n          errorDetail = 'El bucket \"documents\" no existe en Supabase Storage.';\n        } else if (errorDetail.includes('violates row-level security policy') || errorDetail.includes('Permission denied') || errorDetail.includes('Unauthorized')) {\n          errorDetail = 'No tienes permisos para acceder al bucket \"documents\".';\n        }\n      }\n\n      // Retornamos con un mensaje de advertencia en lugar de lanzar un error\n      return {\n        successful: [],\n        failed: failedDocuments,\n        allSuccessful: false,\n        warningMessage: `Se actualizó la información del cliente, pero no se pudieron subir los documentos: ${errorDetail} El administrador debe verificar las políticas del bucket \"documents\" en Supabase Storage.`\n      };\n    }\n\n    // If we get here, the bucket exists, proceed with document upload\n    for (const doc of validDocuments) {\n      try {\n        // Attempt upload with retries (handled inside uploadDocument)\n        console.log(`Attempting to upload document ${doc.name} for client ${clientId}`);\n        for (let attempt = 1; attempt <= 3; attempt++) {\n          try {\n            const result = await documentService.uploadDocument({\n              file: doc.file,\n              client_id: clientId,\n              application_id: undefined,\n              userId,\n              documentName: doc.name,\n              category: doc.category,\n              description: doc.description || undefined\n            });\n            results.push(result);\n            console.log(`Successfully uploaded document ${doc.name} (${result.id})`);\n            break; // Exit retry loop if successful\n          } catch (uploadError) {\n            logError(uploadError, `uploadClientDocuments.documentUpload.attempt${attempt}`, {\n              clientId,\n              documentName: doc.name\n            });\n\n            // Mejorar detección de errores de políticas RLS\n            if (uploadError instanceof Error && (uploadError.message.includes(\"violates row-level security policy\") || uploadError.message.includes(\"permission denied\") || uploadError.message.includes(\"Unauthorized\") || uploadError.message.includes(\"403\"))) {\n              // Error específico de política de seguridad, no intentar de nuevo\n              failedDocuments.push({\n                name: doc.name,\n                category: doc.category,\n                error: 'Error de permisos: No se pueden subir documentos debido a restricciones de seguridad. Contacte al administrador para configurar las políticas RLS en Supabase.'\n              });\n              break; // No más reintentos para este documento\n            } else if (attempt === 3) {\n              // Last attempt failed\n              let errorMessage = 'Error desconocido';\n              if (uploadError instanceof Error) {\n                errorMessage = uploadError.message;\n              }\n              failedDocuments.push({\n                name: doc.name,\n                category: doc.category,\n                error: errorMessage\n              });\n            } else {\n              // Wait before retry with exponential backoff\n              const waitTime = 1000 * Math.pow(2, attempt - 1);\n              console.log(`Waiting ${waitTime}ms before retrying upload for document ${doc.name}`);\n              await new Promise(r => setTimeout(r, waitTime));\n              console.log(`Retrying upload for document ${doc.name} (attempt ${attempt + 1}/3)`);\n            }\n          }\n        }\n      } catch (docError) {\n        logError(docError, 'uploadClientDocuments.documentUpload', {\n          clientId,\n          documentName: doc.name\n        });\n        failedDocuments.push({\n          name: doc.name,\n          category: doc.category,\n          error: docError instanceof Error ? docError.message : 'Error desconocido'\n        });\n      }\n    }\n    if (failedDocuments.length > 0) {\n      logError(createAppError(ErrorType.UPLOAD, `${failedDocuments.length} documents failed to upload`, {\n        failedDocuments\n      }), 'uploadClientDocuments.partialFailure', {\n        clientId,\n        successCount: results.length,\n        totalCount: validDocuments.length\n      });\n    }\n\n    // Even if some documents failed, we still return success with information about failures\n    let warningMessage = null;\n    if (failedDocuments.length > 0) {\n      if (failedDocuments.length === validDocuments.length) {\n        // Todas las subidas fallaron - verificar si hay problemas de permisos\n        if (failedDocuments.some(doc => doc.error && (doc.error.includes('permisos') || doc.error.includes('seguridad') || doc.error.includes('policy') || doc.error.includes('RLS')))) {\n          warningMessage = 'Se guardó la información del cliente, pero no se pudo subir ningún documento debido a permisos insuficientes. Contacta al administrador para resolver el problema de políticas RLS en Supabase.';\n        } else {\n          warningMessage = 'Se guardó la información del cliente, pero no se pudo subir ningún documento. Por favor, intenta nuevamente más tarde.';\n        }\n      } else {\n        warningMessage = `Se guardó la información del cliente y se subieron ${results.length} documentos, pero ${failedDocuments.length} ${failedDocuments.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puedes intentar subir los documentos fallidos más tarde.`;\n      }\n    }\n    return {\n      successful: results,\n      failed: failedDocuments,\n      allSuccessful: failedDocuments.length === 0,\n      warningMessage\n    };\n  } catch (error) {\n    const appError = handleApiError(error);\n    logError(appError, 'uploadClientDocuments', {\n      clientId\n    });\n\n    // Provide more detailed error message\n    let errorMessage = 'Hubo un problema al subir los documentos. Por favor, intente de nuevo más tarde.';\n    if (error instanceof Error) {\n      if (error.message.includes('no existe') || error.message.includes('Bucket not found') || error.message.includes('404')) {\n        errorMessage = 'Error de configuración: El bucket \"documents\" no existe en Supabase Storage. El administrador debe crearlo desde el panel de Supabase.';\n      } else if (error.message.includes('Permission denied') || error.message.includes('violates row-level security policy') || error.message.includes('Unauthorized') || error.message.includes('403')) {\n        errorMessage = 'No tienes permisos suficientes para subir documentos. Por favor, contacte al administrador para configurar las políticas RLS en Supabase.';\n      } else {\n        errorMessage = `Error: ${error.message}`;\n      }\n    }\n    throw createAppError(ErrorType.UPLOAD, errorMessage, {}, error);\n  }\n};\nexport const createClient = async (client, documents, userId) => {\n  try {\n    // Create a copy to avoid modifying the original object\n    const userData = {\n      email: client.email,\n      first_name: client.first_name || '',\n      paternal_surname: client.paternal_surname || '',\n      maternal_surname: client.maternal_surname || '',\n      phone: client.phone,\n      birth_date: client.birth_date,\n      company_id: client.company_id,\n      rfc: client.rfc,\n      curp: client.curp,\n      advisor_id: client.advisor_id,\n      address: client.address,\n      city: client.city,\n      state: client.state,\n      postal_code: client.postal_code,\n      gender: client.gender,\n      marital_status: client.marital_status,\n      employment_type: client.employment_type,\n      employment_years: client.employment_years,\n      monthly_income: client.monthly_income,\n      additional_income: client.additional_income,\n      monthly_expenses: client.monthly_expenses,\n      other_loan_balances: client.other_loan_balances,\n      bank_name: client.bank_name,\n      bank_clabe: client.bank_clabe,\n      bank_account_number: client.bank_account_number,\n      bank_account_type: client.bank_account_type,\n      bank_account_origin: client.bank_account_origin\n    };\n\n    // Ensure company_id is present as it's required by the database schema\n    if (!userData.company_id) {\n      console.warn('No company_id provided when creating client - using default company');\n      userData.company_id = \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\"; // Default company (Herramental)\n    }\n    const {\n      data,\n      error\n    } = await supabase.from(USERS_TABLE).insert([userData]).select();\n    if (error) {\n      logError(error, 'createClient');\n      throw handleApiError(error);\n    }\n    if (!data || data.length === 0) {\n      const noDataError = createAppError(ErrorType.SERVER, 'No se pudo crear el cliente. No se recibieron datos del servidor.');\n      logError(noDataError, 'createClient');\n      throw noDataError;\n    }\n    const newClient = mapUserToClient(data[0]);\n    let documentResult = null;\n    if (documents && documents.length > 0 && userId && newClient.id) {\n      try {\n        documentResult = await uploadClientDocuments(newClient.id, userId, documents);\n\n        // Check if any documents failed to upload\n        if (documentResult && !documentResult.allSuccessful) {\n          console.warn(`${documentResult.failed.length} documents failed to upload during client creation`);\n\n          // We'll continue but note the warning\n          newClient.warningMessage = `Se creó el cliente, pero ${documentResult.failed.length} ${documentResult.failed.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error('Error uploading documents during client creation:', docError);\n\n        // Continue with client creation but add warning\n        newClient.warningMessage = 'Se creó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n    return newClient;\n  } catch (error) {\n    logError(error, 'createClient', {\n      clientData: client\n    });\n    throw handleApiError(error);\n  }\n};\nexport const updateClient = async (id, updates, documents, userId) => {\n  try {\n    console.log(`Starting client update for ID ${id}`, updates);\n\n    // Create a copy to avoid modifying the original object\n    const userUpdates = {\n      email: updates.email,\n      first_name: updates.first_name,\n      paternal_surname: updates.paternal_surname,\n      maternal_surname: updates.maternal_surname,\n      phone: updates.phone,\n      birth_date: updates.birth_date,\n      company_id: updates.company_id,\n      rfc: updates.rfc,\n      curp: updates.curp,\n      advisor_id: updates.advisor_id,\n      address: updates.address,\n      city: updates.city,\n      state: updates.state,\n      postal_code: updates.postal_code,\n      gender: updates.gender,\n      marital_status: updates.marital_status,\n      employment_type: updates.employment_type,\n      employment_years: updates.employment_years,\n      monthly_income: updates.monthly_income,\n      additional_income: updates.additional_income,\n      monthly_expenses: updates.monthly_expenses,\n      other_loan_balances: updates.other_loan_balances,\n      bank_name: updates.bank_name,\n      bank_clabe: updates.bank_clabe,\n      bank_account_number: updates.bank_account_number,\n      bank_account_type: updates.bank_account_type,\n      bank_account_origin: updates.bank_account_origin\n    };\n\n    // Process numeric fields\n    // Special handling to ensure numbers are correctly processed\n    const processNumericField = (value, isInteger = false) => {\n      if (value === '' || value === null || value === undefined) {\n        return undefined; // Use undefined for empty numeric fields to match type\n      }\n      return parseNumericString(String(value));\n    };\n\n    // Apply numeric conversions to all numeric fields\n    if ('employment_years' in updates) {\n      userUpdates.employment_years = processNumericField(updates.employment_years, true);\n    }\n    if ('monthly_income' in updates) {\n      userUpdates.monthly_income = processNumericField(updates.monthly_income);\n    }\n    if ('additional_income' in updates) {\n      userUpdates.additional_income = processNumericField(updates.additional_income);\n    }\n    if ('monthly_expenses' in updates) {\n      userUpdates.monthly_expenses = processNumericField(updates.monthly_expenses);\n    }\n    if ('other_loan_balances' in updates) {\n      userUpdates.other_loan_balances = processNumericField(updates.other_loan_balances);\n    }\n\n    // Remove undefined fields\n    Object.keys(userUpdates).forEach(key => {\n      const typedKey = key;\n      if (userUpdates[typedKey] === undefined) {\n        delete userUpdates[typedKey];\n      }\n    });\n    console.log(`Updating client ${id} with sanitized data:`, JSON.stringify(userUpdates));\n\n    // First, verify the client exists\n    const {\n      data: existingClient,\n      error: existingError\n    } = await supabase.from(USERS_TABLE).select('id').eq('id', id).single();\n    if (existingError || !existingClient) {\n      const notFoundError = createAppError(ErrorType.NOT_FOUND, `No se encontró el cliente con ID ${id}. Verifique que el cliente exista.`);\n      logError(notFoundError, 'updateClient', {\n        clientId: id\n      });\n      throw notFoundError;\n    }\n\n    // Perform the update\n    const {\n      data,\n      error\n    } = await supabase.from(USERS_TABLE).update(userUpdates).eq('id', id).select();\n    if (error) {\n      logError(error, 'updateClient', {\n        clientId: id\n      });\n      throw handleApiError(error);\n    }\n    let updatedClient;\n    if (!data || data.length === 0) {\n      console.log(`No data returned when updating client with ID ${id}, fetching client data separately`);\n\n      // Fallback: fetch the client data separately\n      const {\n        data: fetchedData,\n        error: fetchError\n      } = await supabase.from(USERS_TABLE).select('*').eq('id', id).single();\n      if (fetchError) {\n        console.error(`Error fetching updated client with ID ${id}:`, fetchError);\n        throw new Error('El cliente fue actualizado pero no se pudieron recuperar sus datos. Por favor, recargue la página.');\n      }\n      if (!fetchedData) {\n        console.error(`No data found for client with ID ${id} after update`);\n        throw new Error('No se encontró el cliente después de la actualización. Por favor, verifique que el cliente exista.');\n      }\n      console.log(`Successfully retrieved client data after update for ID ${id}`);\n      updatedClient = mapUserToClient(fetchedData);\n    } else {\n      console.log(`Successfully updated client with data returned, ID ${id}`);\n      updatedClient = mapUserToClient(data[0]);\n    }\n    let documentResult = null;\n\n    // Upload documents if provided\n    if (documents && documents.length > 0 && userId) {\n      try {\n        console.log(`Uploading ${documents.length} documents for client ${id}`);\n        documentResult = await uploadClientDocuments(id, userId, documents);\n\n        // Check if any documents failed to upload\n        if (documentResult && !documentResult.allSuccessful) {\n          console.warn(`${documentResult.failed.length} documents failed to upload during client update`);\n\n          // We'll continue but note the warning\n          updatedClient.warningMessage = `Se actualizó el cliente, pero ${documentResult.failed.length} ${documentResult.failed.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error(`Error uploading documents for client ${id}:`, docError);\n\n        // Continue with client update but add warning\n        updatedClient.warningMessage = 'Se actualizó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n    console.log(`Client update complete for ID ${id}`);\n    console.log('Returning updated client:', updatedClient);\n    return updatedClient;\n  } catch (error) {\n    logError(error, 'updateClient', {\n      clientId: id,\n      updates\n    });\n    throw handleApiError(error);\n  }\n};\nexport const deleteClient = async id => {\n  try {\n    const {\n      error\n    } = await supabase.from(USERS_TABLE).delete().eq('id', id);\n    if (error) {\n      logError(error, 'deleteClient', {\n        clientId: id\n      });\n      throw handleApiError(error);\n    }\n    return true;\n  } catch (error) {\n    logError(error, 'deleteClient', {\n      clientId: id\n    });\n    throw handleApiError(error);\n  }\n};\nexport const checkClientExists = async (email, rfc) => {\n  try {\n    let query = supabase.from(USERS_TABLE).select('id, email, rfc').eq('email', email);\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) {\n      logError(error, 'checkClientExists', {\n        email,\n        rfc\n      });\n      throw handleApiError(error);\n    }\n    return data.length > 0 ? data[0] : null;\n  } catch (error) {\n    logError(error, 'checkClientExists', {\n      email,\n      rfc\n    });\n    throw handleApiError(error);\n  }\n};\nexport const getClientCount = async filters => {\n  try {\n    let query = supabase.from(USERS_TABLE).select('id', {\n      count: 'exact',\n      head: true\n    });\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n      if (filters.searchQuery) {\n        query = query.or(`first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);\n      }\n    }\n    const {\n      count,\n      error\n    } = await query;\n    if (error) {\n      logError(error, 'getClientCount', {\n        filters\n      });\n      throw handleApiError(error);\n    }\n    return count || 0;\n  } catch (error) {\n    logError(error, 'getClientCount', {\n      filters\n    });\n    return 0;\n  }\n};","map":{"version":3,"names":["supabase","TABLES","documentService","ErrorType","createAppError","logError","handleApiError","parseNumericString","USERS_TABLE","mapUserToClient","userData","console","error","Error","fullName","name","first_name","paternal_surname","maternal_surname","filter","Boolean","join","id","created_at","email","phone","birth_date","company_id","rfc","curp","advisor_id","address","city","state","postal_code","gender","marital_status","employment_type","employment_years","monthly_income","additional_income","monthly_expenses","other_loan_balances","bank_name","bank_clabe","bank_account_number","bank_account_type","bank_account_origin","getClients","filters","query","from","select","count","eq","dateFrom","gte","dateTo","lte","searchQuery","or","page","undefined","pageSize","to","range","order","ascending","data","clients","map","totalCount","getClientById","single","clientId","notFoundError","NOT_FOUND","escapeSQLString","str","replace","getClientApplications","client","catch","err","APPLICATIONS","executeQuery","response","fetch","method","headers","body","JSON","stringify","result","json","uploadClientDocuments","userId","documents","length","log","successful","failed","allSuccessful","validDocuments","doc","file","category","VALIDATION","hasFile","validationError","warningMessage","results","failedDocuments","ensureStorageBucketExists","bucketError","storageError","UPLOAD","push","errorDetail","message","includes","attempt","uploadDocument","client_id","application_id","documentName","description","uploadError","errorMessage","waitTime","Math","pow","Promise","r","setTimeout","docError","successCount","some","appError","createClient","warn","insert","noDataError","SERVER","newClient","documentResult","clientData","updateClient","updates","userUpdates","processNumericField","value","isInteger","String","Object","keys","forEach","key","typedKey","existingClient","existingError","update","updatedClient","fetchedData","fetchError","deleteClient","delete","checkClientExists","getClientCount","head"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/clientService.ts"],"sourcesContent":["import { supabase } from \"../lib/supabaseClient\";\nimport { TABLES } from \"../utils/constants/tables\";\nimport * as documentService from './documentService';\nimport { Client, ClientDocument } from \"../types/client\";\nimport { DocumentUpload } from \"../types/document\";\nimport { \n  ErrorType, \n  createAppError, \n  logError, \n  showErrorToast, \n  handleApiError \n} from '../utils/errorHandling';\nimport { parseNumericString } from '../utils/numberFormatting';\n\n// Re-exportamos las interfaces para mantener compatibilidad\nexport type { Client, ClientDocument };\n\nexport interface ClientFilter {\n  searchQuery?: string;\n  advisor_id?: string;\n  company_id?: string;\n  dateFrom?: string;\n  dateTo?: string;\n  page?: number;\n  pageSize?: number;\n}\n\nconst USERS_TABLE = 'users';\n\nconst mapUserToClient = (userData: any): Client => {\n  if (!userData) {\n    console.error('Error: userData is undefined in mapUserToClient');\n    throw new Error('No se pudo procesar la información del cliente, los datos son inválidos');\n  }\n  \n  const fullName = userData.name || [\n    userData.first_name,\n    userData.paternal_surname,\n    userData.maternal_surname\n  ].filter(Boolean).join(' ');\n  \n  return {\n    id: userData.id,\n    created_at: userData.created_at,\n    name: fullName,\n    first_name: userData.first_name,\n    paternal_surname: userData.paternal_surname,\n    maternal_surname: userData.maternal_surname,\n    email: userData.email,\n    phone: userData.phone,\n    birth_date: userData.birth_date,\n    company_id: userData.company_id,\n    rfc: userData.rfc,\n    curp: userData.curp,\n    advisor_id: userData.advisor_id,\n    address: userData.address,\n    city: userData.city,\n    state: userData.state,\n    postal_code: userData.postal_code,\n    gender: userData.gender,\n    marital_status: userData.marital_status,\n    employment_type: userData.employment_type,\n    employment_years: userData.employment_years,\n    monthly_income: userData.monthly_income,\n    additional_income: userData.additional_income,\n    monthly_expenses: userData.monthly_expenses,\n    other_loan_balances: userData.other_loan_balances,\n    bank_name: userData.bank_name,\n    bank_clabe: userData.bank_clabe,\n    bank_account_number: userData.bank_account_number,\n    bank_account_type: userData.bank_account_type,\n    bank_account_origin: userData.bank_account_origin,\n  };\n};\n\nexport const getClients = async (filters?: ClientFilter) => {\n  try {\n    let query = supabase.from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin', { count: 'exact' });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n\n    query = query.order('created_at', { ascending: false });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      logError(error, 'getClients', { filters });\n      throw handleApiError(error);\n    }\n\n    const clients = data ? data.map(mapUserToClient) : [];\n\n    return {\n      clients,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    logError(error, 'getClients', { filters });\n    throw handleApiError(error);\n  }\n};\n\nexport const getClientById = async (id: string) => {\n  try {\n    const { data, error } = await supabase\n      .from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      logError(error, 'getClientById', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    if (!data) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `No se encontró cliente con ID: ${id}`\n      );\n      logError(notFoundError, 'getClientById', { clientId: id });\n      throw notFoundError;\n    }\n\n    return mapUserToClient(data);\n  } catch (error) {\n    logError(error, 'getClientById', { clientId: id });\n    throw handleApiError(error);\n  }\n};\n\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\nexport const getClientApplications = async (clientId: string) => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      throw handleApiError(err);\n    });\n    \n    if (!client) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `El cliente no existe`\n      );\n      logError(notFoundError, 'getClientApplications', { clientId });\n      return [];\n    }\n    \n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name || '')}'\n      ORDER BY created_at DESC\n    `;\n    \n    const executeQuery = async (query: string) => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query: query }),\n        });\n        \n        const result = await response.json();\n        \n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        \n        return result.data;\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    \n    const data = await executeQuery(query);\n    return data;\n  } catch (error) {\n    logError(error, 'getClientApplications', { clientId });\n    throw handleApiError(error);\n  }\n};\n\nexport const uploadClientDocuments = async (\n  clientId: string, \n  userId: string, \n  documents: ClientDocument[]\n) => {\n  if (!documents || documents.length === 0) {\n    console.log('No documents to upload');\n    return {\n      successful: [],\n      failed: [],\n      allSuccessful: true\n    };\n  }\n\n  console.log(`Attempting to upload ${documents.length} documents for client ${clientId}`);\n  \n  // Filter out invalid documents\n  const validDocuments = documents.filter(doc => {\n    if (!doc.file || !doc.category || !doc.name) {\n      logError(\n        createAppError(\n          ErrorType.VALIDATION,\n          'Invalid document data',\n          {\n            name: doc.name || 'undefined',\n            category: doc.category || 'undefined',\n            hasFile: !!doc.file\n          }\n        ),\n        'uploadClientDocuments.validateDocuments',\n        { clientId }\n      );\n      return false;\n    }\n    return true;\n  });\n\n  if (validDocuments.length === 0) {\n    const validationError = createAppError(\n      ErrorType.VALIDATION,\n      'Documento inválido: falta el archivo, nombre o categoría',\n      { clientId }\n    );\n    logError(validationError, 'uploadClientDocuments.noValidDocuments');\n    \n    return {\n      successful: [],\n      failed: documents.map(doc => ({\n        name: doc.name || 'Sin nombre',\n        category: doc.category || 'Sin categoría',\n        error: 'Documento inválido: falta el archivo, nombre o categoría'\n      })),\n      allSuccessful: false,\n      warningMessage: 'No se pudo subir ningún documento porque todos estaban incompletos (faltan archivos, nombres o categorías).'\n    };\n  }\n\n  // Process documents sequentially instead of in parallel to avoid race conditions\n  const results = [];\n  const failedDocuments = [];\n  \n  try {\n    // Intentamos verificar primero si el bucket existe para evitar múltiples intentos fallidos\n    try {\n      console.log(`Checking if storage bucket \"documents\" exists...`);\n      await documentService.ensureStorageBucketExists();\n      console.log(`Storage bucket \"documents\" exists and is accessible.`);\n    } catch (bucketError) {\n      const storageError = createAppError(\n        ErrorType.UPLOAD,\n        'El almacenamiento de documentos no está disponible temporalmente',\n        {},\n        bucketError\n      );\n      logError(storageError, 'uploadClientDocuments.bucketCheck', { clientId });\n      \n      // Agregamos todos los documentos a la lista de fallos pero permitimos que el cliente se actualice\n      for (const doc of validDocuments) {\n        failedDocuments.push({\n          name: doc.name,\n          category: doc.category,\n          error: 'El almacenamiento de documentos no está disponible temporalmente'\n        });\n      }\n      \n      // Informar al usuario con mejor mensaje de error\n      let errorDetail = '';\n      if (bucketError instanceof Error) {\n        errorDetail = bucketError.message;\n        \n        // Mensajes específicos según el tipo de error\n        if (errorDetail.includes('404') || errorDetail.includes('not found') || errorDetail.includes('no existe')) {\n          errorDetail = 'El bucket \"documents\" no existe en Supabase Storage.';\n        } else if (errorDetail.includes('violates row-level security policy') || \n                  errorDetail.includes('Permission denied') || \n                  errorDetail.includes('Unauthorized')) {\n          errorDetail = 'No tienes permisos para acceder al bucket \"documents\".';\n        }\n      }\n      \n      // Retornamos con un mensaje de advertencia en lugar de lanzar un error\n      return {\n        successful: [],\n        failed: failedDocuments,\n        allSuccessful: false,\n        warningMessage: `Se actualizó la información del cliente, pero no se pudieron subir los documentos: ${errorDetail} El administrador debe verificar las políticas del bucket \"documents\" en Supabase Storage.`\n      };\n    }\n    \n    // If we get here, the bucket exists, proceed with document upload\n    for (const doc of validDocuments) {\n      try {\n        // Attempt upload with retries (handled inside uploadDocument)\n        console.log(`Attempting to upload document ${doc.name} for client ${clientId}`);\n        \n        for (let attempt = 1; attempt <= 3; attempt++) {\n          try {\n            const result = await documentService.uploadDocument({\n              file: doc.file,\n              client_id: clientId,\n              application_id: undefined,\n              userId,\n              documentName: doc.name,\n              category: doc.category,\n              description: doc.description || undefined\n            });\n            \n            results.push(result);\n            console.log(`Successfully uploaded document ${doc.name} (${result.id})`);\n            break; // Exit retry loop if successful\n          } catch (uploadError) {\n            logError(\n              uploadError,\n              `uploadClientDocuments.documentUpload.attempt${attempt}`,\n              { clientId, documentName: doc.name }\n            );\n            \n            // Mejorar detección de errores de políticas RLS\n            if (uploadError instanceof Error && \n                (uploadError.message.includes(\"violates row-level security policy\") || \n                 uploadError.message.includes(\"permission denied\") || \n                 uploadError.message.includes(\"Unauthorized\") ||\n                 uploadError.message.includes(\"403\"))) {\n              // Error específico de política de seguridad, no intentar de nuevo\n              failedDocuments.push({\n                name: doc.name,\n                category: doc.category,\n                error: 'Error de permisos: No se pueden subir documentos debido a restricciones de seguridad. Contacte al administrador para configurar las políticas RLS en Supabase.'\n              });\n              break; // No más reintentos para este documento\n            } else if (attempt === 3) {\n              // Last attempt failed\n              let errorMessage = 'Error desconocido';\n              if (uploadError instanceof Error) {\n                errorMessage = uploadError.message;\n              }\n              \n              failedDocuments.push({\n                name: doc.name,\n                category: doc.category,\n                error: errorMessage\n              });\n            } else {\n              // Wait before retry with exponential backoff\n              const waitTime = 1000 * Math.pow(2, attempt - 1);\n              console.log(`Waiting ${waitTime}ms before retrying upload for document ${doc.name}`);\n              await new Promise(r => setTimeout(r, waitTime));\n              console.log(`Retrying upload for document ${doc.name} (attempt ${attempt + 1}/3)`);\n            }\n          }\n        }\n      } catch (docError) {\n        logError(docError, 'uploadClientDocuments.documentUpload', {\n          clientId,\n          documentName: doc.name,\n        });\n        \n        failedDocuments.push({\n          name: doc.name,\n          category: doc.category,\n          error: docError instanceof Error ? docError.message : 'Error desconocido'\n        });\n      }\n    }\n    \n    if (failedDocuments.length > 0) {\n      logError(\n        createAppError(\n          ErrorType.UPLOAD,\n          `${failedDocuments.length} documents failed to upload`,\n          { failedDocuments }\n        ),\n        'uploadClientDocuments.partialFailure',\n        { \n          clientId,\n          successCount: results.length,\n          totalCount: validDocuments.length \n        }\n      );\n    }\n    \n    // Even if some documents failed, we still return success with information about failures\n    let warningMessage = null;\n    if (failedDocuments.length > 0) {\n      if (failedDocuments.length === validDocuments.length) {\n        // Todas las subidas fallaron - verificar si hay problemas de permisos\n        if (failedDocuments.some(doc => doc.error && (\n          doc.error.includes('permisos') || \n          doc.error.includes('seguridad') || \n          doc.error.includes('policy') || \n          doc.error.includes('RLS')))) {\n          warningMessage = 'Se guardó la información del cliente, pero no se pudo subir ningún documento debido a permisos insuficientes. Contacta al administrador para resolver el problema de políticas RLS en Supabase.';\n        } else {\n          warningMessage = 'Se guardó la información del cliente, pero no se pudo subir ningún documento. Por favor, intenta nuevamente más tarde.';\n        }\n      } else {\n        warningMessage = `Se guardó la información del cliente y se subieron ${results.length} documentos, pero ${failedDocuments.length} ${failedDocuments.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puedes intentar subir los documentos fallidos más tarde.`;\n      }\n    }\n    \n    return {\n      successful: results,\n      failed: failedDocuments,\n      allSuccessful: failedDocuments.length === 0,\n      warningMessage\n    };\n  } catch (error) {\n    const appError = handleApiError(error);\n    logError(appError, 'uploadClientDocuments', { clientId });\n    \n    // Provide more detailed error message\n    let errorMessage = 'Hubo un problema al subir los documentos. Por favor, intente de nuevo más tarde.';\n    \n    if (error instanceof Error) {\n      if (error.message.includes('no existe') || error.message.includes('Bucket not found') || error.message.includes('404')) {\n        errorMessage = 'Error de configuración: El bucket \"documents\" no existe en Supabase Storage. El administrador debe crearlo desde el panel de Supabase.';\n      } else if (error.message.includes('Permission denied') || \n                error.message.includes('violates row-level security policy') || \n                error.message.includes('Unauthorized') || \n                error.message.includes('403')) {\n        errorMessage = 'No tienes permisos suficientes para subir documentos. Por favor, contacte al administrador para configurar las políticas RLS en Supabase.';\n      } else {\n        errorMessage = `Error: ${error.message}`;\n      }\n    }\n    \n    throw createAppError(\n      ErrorType.UPLOAD,\n      errorMessage,\n      {},\n      error\n    );\n  }\n};\n\nexport const createClient = async (client: Omit<Client, 'id' | 'created_at'>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    // Create a copy to avoid modifying the original object\n    const userData = {\n      email: client.email,\n      first_name: client.first_name || '',\n      paternal_surname: client.paternal_surname || '',\n      maternal_surname: client.maternal_surname || '',\n      phone: client.phone,\n      birth_date: client.birth_date,\n      company_id: client.company_id,\n      rfc: client.rfc,\n      curp: client.curp,\n      advisor_id: client.advisor_id,\n      address: client.address,\n      city: client.city,\n      state: client.state,\n      postal_code: client.postal_code,\n      gender: client.gender,\n      marital_status: client.marital_status,\n      employment_type: client.employment_type,\n      employment_years: client.employment_years,\n      monthly_income: client.monthly_income,\n      additional_income: client.additional_income,\n      monthly_expenses: client.monthly_expenses,\n      other_loan_balances: client.other_loan_balances,\n      bank_name: client.bank_name,\n      bank_clabe: client.bank_clabe,\n      bank_account_number: client.bank_account_number,\n      bank_account_type: client.bank_account_type,\n      bank_account_origin: client.bank_account_origin,\n    };\n\n    // Ensure company_id is present as it's required by the database schema\n    if (!userData.company_id) {\n      console.warn('No company_id provided when creating client - using default company');\n      userData.company_id = \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\"; // Default company (Herramental)\n    }\n\n    const { data, error } = await supabase\n      .from(USERS_TABLE)\n      .insert([userData])\n      .select();\n\n    if (error) {\n      logError(error, 'createClient');\n      throw handleApiError(error);\n    }\n\n    if (!data || data.length === 0) {\n      const noDataError = createAppError(\n        ErrorType.SERVER,\n        'No se pudo crear el cliente. No se recibieron datos del servidor.'\n      );\n      logError(noDataError, 'createClient');\n      throw noDataError;\n    }\n\n    const newClient = mapUserToClient(data[0]);\n    let documentResult = null;\n    \n    if (documents && documents.length > 0 && userId && newClient.id) {\n      try {\n        documentResult = await uploadClientDocuments(newClient.id, userId, documents);\n        \n        // Check if any documents failed to upload\n        if (documentResult && !documentResult.allSuccessful) {\n          console.warn(`${documentResult.failed.length} documents failed to upload during client creation`);\n          \n          // We'll continue but note the warning\n          newClient.warningMessage = `Se creó el cliente, pero ${documentResult.failed.length} ${documentResult.failed.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error('Error uploading documents during client creation:', docError);\n        \n        // Continue with client creation but add warning\n        newClient.warningMessage = 'Se creó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n\n    return newClient;\n  } catch (error) {\n    logError(error, 'createClient', { clientData: client });\n    throw handleApiError(error);\n  }\n};\n\nexport const updateClient = async (id: string, updates: Partial<Client>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    console.log(`Starting client update for ID ${id}`, updates);\n    \n    // Create a copy to avoid modifying the original object\n    const userUpdates = {\n      email: updates.email,\n      first_name: updates.first_name,\n      paternal_surname: updates.paternal_surname,\n      maternal_surname: updates.maternal_surname,\n      phone: updates.phone,\n      birth_date: updates.birth_date,\n      company_id: updates.company_id,\n      rfc: updates.rfc,\n      curp: updates.curp,\n      advisor_id: updates.advisor_id,\n      address: updates.address,\n      city: updates.city,\n      state: updates.state,\n      postal_code: updates.postal_code,\n      gender: updates.gender,\n      marital_status: updates.marital_status,\n      employment_type: updates.employment_type,\n      employment_years: updates.employment_years,\n      monthly_income: updates.monthly_income,\n      additional_income: updates.additional_income,\n      monthly_expenses: updates.monthly_expenses,\n      other_loan_balances: updates.other_loan_balances,\n      bank_name: updates.bank_name,\n      bank_clabe: updates.bank_clabe,\n      bank_account_number: updates.bank_account_number,\n      bank_account_type: updates.bank_account_type,\n      bank_account_origin: updates.bank_account_origin,\n    };\n\n    // Process numeric fields\n    // Special handling to ensure numbers are correctly processed\n    const processNumericField = (value: any, isInteger = false) => {\n      if (value === '' || value === null || value === undefined) {\n        return undefined; // Use undefined for empty numeric fields to match type\n      }\n      \n      return parseNumericString(String(value));\n    };\n\n    // Apply numeric conversions to all numeric fields\n    if ('employment_years' in updates) {\n      userUpdates.employment_years = processNumericField(updates.employment_years, true);\n    }\n    if ('monthly_income' in updates) {\n      userUpdates.monthly_income = processNumericField(updates.monthly_income);\n    }\n    if ('additional_income' in updates) {\n      userUpdates.additional_income = processNumericField(updates.additional_income);\n    }\n    if ('monthly_expenses' in updates) {\n      userUpdates.monthly_expenses = processNumericField(updates.monthly_expenses);\n    }\n    if ('other_loan_balances' in updates) {\n      userUpdates.other_loan_balances = processNumericField(updates.other_loan_balances);\n    }\n\n    // Remove undefined fields\n    Object.keys(userUpdates).forEach(key => {\n      const typedKey = key as keyof typeof userUpdates;\n      if (userUpdates[typedKey] === undefined) {\n        delete userUpdates[typedKey];\n      }\n    });\n\n    console.log(`Updating client ${id} with sanitized data:`, JSON.stringify(userUpdates));\n\n    // First, verify the client exists\n    const { data: existingClient, error: existingError } = await supabase\n      .from(USERS_TABLE)\n      .select('id')\n      .eq('id', id)\n      .single();\n\n    if (existingError || !existingClient) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `No se encontró el cliente con ID ${id}. Verifique que el cliente exista.`\n      );\n      logError(notFoundError, 'updateClient', { clientId: id });\n      throw notFoundError;\n    }\n\n    // Perform the update\n    const { data, error } = await supabase\n      .from(USERS_TABLE)\n      .update(userUpdates)\n      .eq('id', id)\n      .select();\n\n    if (error) {\n      logError(error, 'updateClient', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    let updatedClient: Client;\n\n    if (!data || data.length === 0) {\n      console.log(`No data returned when updating client with ID ${id}, fetching client data separately`);\n      \n      // Fallback: fetch the client data separately\n      const { data: fetchedData, error: fetchError } = await supabase\n        .from(USERS_TABLE)\n        .select('*')\n        .eq('id', id)\n        .single();\n      \n      if (fetchError) {\n        console.error(`Error fetching updated client with ID ${id}:`, fetchError);\n        throw new Error('El cliente fue actualizado pero no se pudieron recuperar sus datos. Por favor, recargue la página.');\n      }\n      \n      if (!fetchedData) {\n        console.error(`No data found for client with ID ${id} after update`);\n        throw new Error('No se encontró el cliente después de la actualización. Por favor, verifique que el cliente exista.');\n      }\n      \n      console.log(`Successfully retrieved client data after update for ID ${id}`);\n      updatedClient = mapUserToClient(fetchedData);\n    } else {\n      console.log(`Successfully updated client with data returned, ID ${id}`);\n      updatedClient = mapUserToClient(data[0]);\n    }\n    \n    let documentResult = null;\n    \n    // Upload documents if provided\n    if (documents && documents.length > 0 && userId) {\n      try {\n        console.log(`Uploading ${documents.length} documents for client ${id}`);\n        documentResult = await uploadClientDocuments(id, userId, documents);\n        \n        // Check if any documents failed to upload\n        if (documentResult && !documentResult.allSuccessful) {\n          console.warn(`${documentResult.failed.length} documents failed to upload during client update`);\n          \n          // We'll continue but note the warning\n          updatedClient.warningMessage = `Se actualizó el cliente, pero ${documentResult.failed.length} ${documentResult.failed.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error(`Error uploading documents for client ${id}:`, docError);\n        \n        // Continue with client update but add warning\n        updatedClient.warningMessage = 'Se actualizó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n\n    console.log(`Client update complete for ID ${id}`);\n    console.log('Returning updated client:', updatedClient);\n    return updatedClient;\n  } catch (error) {\n    logError(error, 'updateClient', { clientId: id, updates });\n    throw handleApiError(error);\n  }\n};\n\nexport const deleteClient = async (id: string) => {\n  try {\n    const { error } = await supabase\n      .from(USERS_TABLE)\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      logError(error, 'deleteClient', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    return true;\n  } catch (error) {\n    logError(error, 'deleteClient', { clientId: id });\n    throw handleApiError(error);\n  }\n};\n\nexport const checkClientExists = async (email: string, rfc?: string) => {\n  try {\n    let query = supabase\n      .from(USERS_TABLE)\n      .select('id, email, rfc')\n      .eq('email', email);\n\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      logError(error, 'checkClientExists', { email, rfc });\n      throw handleApiError(error);\n    }\n\n    return data.length > 0 ? data[0] : null;\n  } catch (error) {\n    logError(error, 'checkClientExists', { email, rfc });\n    throw handleApiError(error);\n  }\n};\n\nexport const getClientCount = async (filters?: ClientFilter) => {\n  try {\n    let query = supabase\n      .from(USERS_TABLE)\n      .select('id', { count: 'exact', head: true });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n    }\n\n    const { count, error } = await query;\n\n    if (error) {\n      logError(error, 'getClientCount', { filters });\n      throw handleApiError(error);\n    }\n\n    return count || 0;\n  } catch (error) {\n    logError(error, 'getClientCount', { filters });\n    return 0;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}