{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/contexts/NotificationContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { useAuth } from './AuthContext';\nimport NotificationPopup from '../components/ui/NotificationPopup';\n\n// Generate a proper UUID for notification IDs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateUUID() {\n  // Use a more standard implementation for UUID v4\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\n// For test notifications, use a valid UUID format - don't use app-timestamp\nfunction getTestApplicationId() {\n  // Use a small set of real UUIDs as sample application IDs\n  const sampleIds = ['110cc76a-1762-4df4-840e-a503fea9d7aa', '220cc76a-1762-4df4-840e-a503fea9d7bb', '330cc76a-1762-4df4-840e-a503fea9d7cc', '440cc76a-1762-4df4-840e-a503fea9d7dd', '550cc76a-1762-4df4-840e-a503fea9d7ee'];\n\n  // Pick a random ID from the sample list\n  return sampleIds[Math.floor(Math.random() * sampleIds.length)];\n}\n\n// Enum for notification types\nexport let NotificationType = /*#__PURE__*/function (NotificationType) {\n  NotificationType[\"INFO\"] = \"info\";\n  NotificationType[\"SUCCESS\"] = \"success\";\n  NotificationType[\"WARNING\"] = \"warning\";\n  NotificationType[\"ERROR\"] = \"error\";\n  NotificationType[\"NEW_APPLICATION\"] = \"new_application\";\n  NotificationType[\"APPROVAL_REQUIRED\"] = \"approval_required\";\n  NotificationType[\"NEW_MESSAGE\"] = \"new_message\";\n  NotificationType[\"APPLICATION_STATUS_UPDATED\"] = \"application_status_updated\";\n  NotificationType[\"APPLICATION_COMMENT\"] = \"application_comment\";\n  return NotificationType;\n}({});\n\n// Interfaces\n\nexport const NotificationContext = /*#__PURE__*/createContext(undefined);\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user\n  } = useAuth();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n\n  // Estado para la notificación emergente actual\n  const [currentPopup, setCurrentPopup] = useState(null);\n\n  // Referencia al ID del polling interval\n  const pollingIntervalRef = useRef(null);\n\n  // State to keep track of already notified application IDs\n  const [notifiedApplicationIds, setNotifiedApplicationIds] = useState(new Set());\n\n  // Efecto para manejar la carga inicial de notificaciones y configurar el polling\n  useEffect(() => {\n    if (user) {\n      // Cargar notificaciones al inicio\n      loadNotifications();\n\n      // Cargar aplicaciones ya notificadas desde localStorage\n      try {\n        const storedIds = localStorage.getItem('notified_application_ids');\n        if (storedIds) {\n          setNotifiedApplicationIds(new Set(JSON.parse(storedIds)));\n        }\n      } catch (error) {\n        console.error('Error cargando aplicaciones notificadas:', error);\n      }\n\n      // Verificar al inicio si hay solicitudes recientes\n      checkForNewNotifications();\n\n      // Configurar polling para verificar nuevas notificaciones cada 15 segundos (en lugar de 30)\n      pollingIntervalRef.current = setInterval(() => {\n        checkForNewNotifications();\n      }, 15000);\n\n      // Limpiar el intervalo cuando el componente se desmonte\n      return () => {\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n        }\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  // Cálculo de notificaciones no leídas\n  useEffect(() => {\n    const count = notifications.filter(notification => !notification.read).length;\n    setUnreadCount(count);\n  }, [notifications]);\n\n  // Cargar notificaciones del almacenamiento local o del servidor\n  const loadNotifications = async () => {\n    try {\n      // En un escenario real, aquí se cargarían las notificaciones del servidor\n      // Por ahora, usaremos el localStorage como ejemplo\n      const storedNotifications = localStorage.getItem('notifications');\n      if (storedNotifications) {\n        const parsed = JSON.parse(storedNotifications);\n        setNotifications(parsed.map(n => ({\n          ...n,\n          createdAt: new Date(n.createdAt)\n        })));\n      }\n    } catch (error) {\n      console.error('Error cargando notificaciones:', error);\n    }\n  };\n\n  // Verificar nuevas notificaciones en el servidor\n  const checkForNewNotifications = async () => {\n    // En una implementación real, esto sería una llamada a la API\n    // Por ahora solo simulamos la lógica\n    console.log('Verificando nuevas notificaciones...');\n    try {\n      // Verificar aplicaciones recientes - en una implementación real, se verificaría\n      // la última fecha de consulta y se traerían solo las nuevas\n      const response = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: `\n            SELECT id, client_name, application_type, company_name, created_at, status, \n                   amount, term, interest_rate, monthly_payment\n            FROM applications \n            WHERE created_at > NOW() - INTERVAL '5 minutes'\n            ORDER BY created_at DESC\n            LIMIT 5\n          `\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error al verificar nuevas aplicaciones');\n      }\n      const data = await response.json();\n\n      // Si hay aplicaciones nuevas, mostrar notificación\n      if (data.data && data.data.length > 0) {\n        // Procesar cada aplicación nueva (que no hayamos notificado antes)\n        for (const newApp of data.data) {\n          // Verificar si ya hemos notificado esta aplicación\n          if (!notifiedApplicationIds.has(newApp.id)) {\n            console.log('Nueva aplicación detectada:', newApp);\n\n            // Formatear fecha y hora para mostrar\n            const createdAt = new Date(newApp.created_at);\n            const formattedDate = new Intl.DateTimeFormat('es-MX', {\n              day: '2-digit',\n              month: '2-digit',\n              year: 'numeric'\n            }).format(createdAt);\n            const formattedTime = new Intl.DateTimeFormat('es-MX', {\n              hour: '2-digit',\n              minute: '2-digit',\n              hour12: true\n            }).format(createdAt);\n\n            // Formatear monto con separador de miles y 2 decimales\n            const formattedAmount = new Intl.NumberFormat('es-MX', {\n              style: 'currency',\n              currency: 'MXN',\n              minimumFractionDigits: 2\n            }).format(Number(newApp.amount || 0));\n\n            // Formatear tasa de interés con símbolo de porcentaje\n            const formattedRate = `${newApp.interest_rate || 0}%`;\n\n            // Formatear pago mensual\n            const formattedMonthly = new Intl.NumberFormat('es-MX', {\n              style: 'currency',\n              currency: 'MXN',\n              minimumFractionDigits: 2\n            }).format(Number(newApp.monthly_payment || 0));\n\n            // Transformar tipo de aplicación a un formato más legible\n            let appType = 'No especificado';\n            if (newApp.application_type) {\n              if (newApp.application_type === 'selected_plans') {\n                appType = 'Planes seleccionados';\n              } else if (newApp.application_type === 'product_simulations') {\n                appType = 'Simulación de producto';\n              } else {\n                appType = newApp.application_type.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n              }\n            }\n\n            // Creamos un mensaje detallado para el popup\n            const detailedMessage = `\n              <div class=\"grid grid-cols-2 gap-2 text-sm\">\n                <div class=\"font-semibold\">Cliente:</div>\n                <div>${newApp.client_name || 'Sin nombre'}</div>\n                \n                <div class=\"font-semibold\">Empresa:</div>\n                <div>${newApp.company_name || 'No especificada'}</div>\n                \n                <div class=\"font-semibold\">Tipo:</div>\n                <div>${appType}</div>\n                \n                <div class=\"font-semibold\">Monto:</div>\n                <div>${formattedAmount}</div>\n                \n                <div class=\"font-semibold\">Plazo:</div>\n                <div>${newApp.term || 'N/A'} ${newApp.term === 1 ? 'mes' : 'meses'}</div>\n                \n                <div class=\"font-semibold\">Tasa:</div>\n                <div>${formattedRate}</div>\n                \n                <div class=\"font-semibold\">Pago mensual:</div>\n                <div>${formattedMonthly}</div>\n                \n                <div class=\"font-semibold\">Fecha:</div>\n                <div>${formattedDate} ${formattedTime}</div>\n              </div>\n            `;\n            const notificationTitle = '💼 Nueva solicitud recibida';\n            const testNotification = {\n              title: notificationTitle,\n              message: `Cliente: ${newApp.client_name || 'Sin nombre'} - ${newApp.company_name || 'Empresa no especificada'}`,\n              type: NotificationType.NEW_APPLICATION,\n              relatedItemType: 'application',\n              relatedItemId: newApp.id\n            };\n            addNotification(testNotification);\n\n            // También mostrar como popup con sonido especial para nuevas aplicaciones\n            showPopup({\n              title: notificationTitle,\n              // Usar el mensaje detallado HTML\n              message: detailedMessage,\n              type: NotificationType.NEW_APPLICATION,\n              playSound: soundEnabled,\n              soundType: 'notification',\n              duration: 10000,\n              // Duración más larga (10 segundos)\n              // Usar un sonido especial para nuevas aplicaciones (más suave)\n              customSound: '/sounds/soft-three-beeps.mp3',\n              // Mostrar en el centro de la pantalla para mayor visibilidad\n              centerScreen: true\n            });\n\n            // Agregar esta aplicación a las ya notificadas\n            const updatedNotifiedIds = new Set(notifiedApplicationIds);\n            updatedNotifiedIds.add(newApp.id);\n            setNotifiedApplicationIds(updatedNotifiedIds);\n\n            // Guardar en localStorage para persistencia\n            localStorage.setItem('notified_application_ids', JSON.stringify(Array.from(updatedNotifiedIds)));\n          }\n        }\n      }\n\n      // Simulación: Ocasionalmente añadir una notificación de prueba\n      else if (Math.random() > 0.95) {\n        // Reducir frecuencia a 5% en lugar de 10%\n        const testNotification = {\n          title: 'Nueva solicitud asignada',\n          message: 'Se ha asignado una nueva solicitud de crédito a tu bandeja',\n          type: NotificationType.NEW_APPLICATION,\n          relatedItemType: 'application',\n          // Using a properly formatted UUID for testing - NOT using app-timestamp format\n          relatedItemId: getTestApplicationId()\n        };\n        addNotification(testNotification);\n\n        // También mostrar como popup con sonido\n        showPopup({\n          ...testNotification,\n          playSound: soundEnabled,\n          soundType: 'notification'\n        });\n      }\n    } catch (error) {\n      console.error('Error al verificar nuevas notificaciones:', error);\n    }\n  };\n\n  // Añadir una nueva notificación\n  const addNotification = notification => {\n    const newNotification = {\n      ...notification,\n      // Using a proper UUID for the notification ID\n      id: generateUUID(),\n      createdAt: new Date(),\n      read: false,\n      timestamp: new Date()\n    };\n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Guardar en localStorage (en producción esto iría al servidor)\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar una notificación como leída\n  const markAsRead = id => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => notification.id === id ? {\n        ...notification,\n        read: true,\n        isRead: true\n      } : notification);\n\n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar todas las notificaciones como leídas\n  const markAllAsRead = () => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => ({\n        ...notification,\n        read: true,\n        isRead: true\n      }));\n\n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Limpiar todas las notificaciones\n  const clearNotifications = () => {\n    setNotifications([]);\n    // Limpiar del localStorage\n    localStorage.setItem('notifications', JSON.stringify([]));\n  };\n\n  // Mostrar una notificación emergente\n  const showPopup = config => {\n    setCurrentPopup(config);\n\n    // Automáticamente cerrar el popup después de la duración especificada\n    setTimeout(() => {\n      setCurrentPopup(null);\n    }, config.duration || 5000);\n  };\n\n  // Activar/desactivar sonidos de notificación\n  const toggleSound = () => {\n    const newValue = !soundEnabled;\n    setSoundEnabled(newValue);\n    // Guardar preferencia en localStorage\n    localStorage.setItem('notification_sound_enabled', newValue.toString());\n  };\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    showPopup,\n    soundEnabled,\n    toggleSound,\n    setSoundEnabled\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: [children, currentPopup && /*#__PURE__*/_jsxDEV(NotificationPopup, {\n      title: currentPopup.title,\n      message: currentPopup.message,\n      type: currentPopup.type,\n      duration: currentPopup.duration,\n      playSound: currentPopup.playSound,\n      soundType: currentPopup.soundType,\n      customSound: currentPopup.customSound,\n      onClose: () => setCurrentPopup(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 428,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"gn1cFN9A8bM97VhjgydDHnYfQe8=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","useAuth","NotificationPopup","jsxDEV","_jsxDEV","generateUUID","replace","c","r","Math","random","v","toString","getTestApplicationId","sampleIds","floor","length","NotificationType","NotificationContext","undefined","useNotifications","_s","context","Error","NotificationProvider","children","_s2","user","notifications","setNotifications","unreadCount","setUnreadCount","soundEnabled","setSoundEnabled","currentPopup","setCurrentPopup","pollingIntervalRef","notifiedApplicationIds","setNotifiedApplicationIds","Set","loadNotifications","storedIds","localStorage","getItem","JSON","parse","error","console","checkForNewNotifications","current","setInterval","clearInterval","count","filter","notification","read","storedNotifications","parsed","map","n","createdAt","Date","log","response","fetch","method","headers","body","stringify","query","ok","data","json","newApp","has","id","created_at","formattedDate","Intl","DateTimeFormat","day","month","year","format","formattedTime","hour","minute","hour12","formattedAmount","NumberFormat","style","currency","minimumFractionDigits","Number","amount","formattedRate","interest_rate","formattedMonthly","monthly_payment","appType","application_type","split","word","charAt","toUpperCase","slice","join","detailedMessage","client_name","company_name","term","notificationTitle","testNotification","title","message","type","NEW_APPLICATION","relatedItemType","relatedItemId","addNotification","showPopup","playSound","soundType","duration","customSound","centerScreen","updatedNotifiedIds","add","setItem","Array","from","newNotification","timestamp","prev","updated","markAsRead","isRead","markAllAsRead","clearNotifications","config","setTimeout","toggleSound","newValue","value","Provider","onClose","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { useAuth } from './AuthContext';\nimport NotificationPopup from '../components/ui/NotificationPopup';\n\n// Generate a proper UUID for notification IDs\nfunction generateUUID() {\n  // Use a more standard implementation for UUID v4\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : ((r & 0x3) | 0x8);\n    return v.toString(16);\n  });\n}\n\n// For test notifications, use a valid UUID format - don't use app-timestamp\nfunction getTestApplicationId() {\n  // Use a small set of real UUIDs as sample application IDs\n  const sampleIds = [\n    '110cc76a-1762-4df4-840e-a503fea9d7aa',\n    '220cc76a-1762-4df4-840e-a503fea9d7bb',\n    '330cc76a-1762-4df4-840e-a503fea9d7cc',\n    '440cc76a-1762-4df4-840e-a503fea9d7dd',\n    '550cc76a-1762-4df4-840e-a503fea9d7ee'\n  ];\n  \n  // Pick a random ID from the sample list\n  return sampleIds[Math.floor(Math.random() * sampleIds.length)];\n}\n\n// Enum for notification types\nexport enum NotificationType {\n  INFO = 'info',\n  SUCCESS = 'success',\n  WARNING = 'warning',\n  ERROR = 'error',\n  NEW_APPLICATION = 'new_application',\n  APPROVAL_REQUIRED = 'approval_required',\n  NEW_MESSAGE = 'new_message',\n  APPLICATION_STATUS_UPDATED = 'application_status_updated',\n  APPLICATION_COMMENT = 'application_comment',\n}\n\n// Interfaces\ninterface Notification {\n  id: string;\n  title: string;\n  message: string;\n  createdAt: Date;\n  read: boolean;\n  type: NotificationType | 'info' | 'success' | 'warning' | 'error';\n  relatedItemId?: string;\n  relatedItemType?: string;\n  data?: any;\n  timestamp?: Date;\n  isRead?: boolean;\n}\n\ninterface NotificationPopupConfig {\n  title: string;\n  message: string;\n  type?: NotificationType | 'info' | 'success' | 'warning' | 'error';\n  duration?: number;\n  playSound?: boolean;\n  soundType?: 'notification' | 'alert' | 'approval';\n  customSound?: string;\n  centerScreen?: boolean;\n}\n\ninterface NotificationContextType {\n  notifications: Notification[];\n  unreadCount: number;\n  addNotification: (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => void;\n  markAsRead: (id: string) => void;\n  markAllAsRead: () => void;\n  clearNotifications: () => void;\n  showPopup: (config: NotificationPopupConfig) => void;\n  soundEnabled: boolean;\n  toggleSound: () => void;\n  setSoundEnabled: (enabled: boolean) => void;\n}\n\nexport const NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user } = useAuth();\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [unreadCount, setUnreadCount] = useState<number>(0);\n  const [soundEnabled, setSoundEnabled] = useState<boolean>(true);\n  \n  // Estado para la notificación emergente actual\n  const [currentPopup, setCurrentPopup] = useState<NotificationPopupConfig | null>(null);\n  \n  // Referencia al ID del polling interval\n  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // State to keep track of already notified application IDs\n  const [notifiedApplicationIds, setNotifiedApplicationIds] = useState<Set<string>>(new Set());\n\n  // Efecto para manejar la carga inicial de notificaciones y configurar el polling\n  useEffect(() => {\n    if (user) {\n      // Cargar notificaciones al inicio\n      loadNotifications();\n\n      // Cargar aplicaciones ya notificadas desde localStorage\n      try {\n        const storedIds = localStorage.getItem('notified_application_ids');\n        if (storedIds) {\n          setNotifiedApplicationIds(new Set(JSON.parse(storedIds)));\n        }\n      } catch (error) {\n        console.error('Error cargando aplicaciones notificadas:', error);\n      }\n      \n      // Verificar al inicio si hay solicitudes recientes\n      checkForNewNotifications();\n      \n      // Configurar polling para verificar nuevas notificaciones cada 15 segundos (en lugar de 30)\n      pollingIntervalRef.current = setInterval(() => {\n        checkForNewNotifications();\n      }, 15000);\n      \n      // Limpiar el intervalo cuando el componente se desmonte\n      return () => {\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n        }\n      };\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  // Cálculo de notificaciones no leídas\n  useEffect(() => {\n    const count = notifications.filter(notification => !notification.read).length;\n    setUnreadCount(count);\n  }, [notifications]);\n\n  // Cargar notificaciones del almacenamiento local o del servidor\n  const loadNotifications = async () => {\n    try {\n      // En un escenario real, aquí se cargarían las notificaciones del servidor\n      // Por ahora, usaremos el localStorage como ejemplo\n      const storedNotifications = localStorage.getItem('notifications');\n      if (storedNotifications) {\n        const parsed = JSON.parse(storedNotifications);\n        setNotifications(parsed.map((n: any) => ({\n          ...n,\n          createdAt: new Date(n.createdAt)\n        })));\n      }\n    } catch (error) {\n      console.error('Error cargando notificaciones:', error);\n    }\n  };\n\n  // Verificar nuevas notificaciones en el servidor\n  const checkForNewNotifications = async () => {\n    // En una implementación real, esto sería una llamada a la API\n    // Por ahora solo simulamos la lógica\n    console.log('Verificando nuevas notificaciones...');\n    \n    try {\n      // Verificar aplicaciones recientes - en una implementación real, se verificaría\n      // la última fecha de consulta y se traerían solo las nuevas\n      const response = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: `\n            SELECT id, client_name, application_type, company_name, created_at, status, \n                   amount, term, interest_rate, monthly_payment\n            FROM applications \n            WHERE created_at > NOW() - INTERVAL '5 minutes'\n            ORDER BY created_at DESC\n            LIMIT 5\n          `\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Error al verificar nuevas aplicaciones');\n      }\n      \n      const data = await response.json();\n      \n      // Si hay aplicaciones nuevas, mostrar notificación\n      if (data.data && data.data.length > 0) {\n        // Procesar cada aplicación nueva (que no hayamos notificado antes)\n        for (const newApp of data.data) {\n          // Verificar si ya hemos notificado esta aplicación\n          if (!notifiedApplicationIds.has(newApp.id)) {\n            console.log('Nueva aplicación detectada:', newApp);\n            \n            // Formatear fecha y hora para mostrar\n            const createdAt = new Date(newApp.created_at);\n            const formattedDate = new Intl.DateTimeFormat('es-MX', {\n              day: '2-digit',\n              month: '2-digit',\n              year: 'numeric'\n            }).format(createdAt);\n            \n            const formattedTime = new Intl.DateTimeFormat('es-MX', {\n              hour: '2-digit',\n              minute: '2-digit',\n              hour12: true\n            }).format(createdAt);\n            \n            // Formatear monto con separador de miles y 2 decimales\n            const formattedAmount = new Intl.NumberFormat('es-MX', {\n              style: 'currency',\n              currency: 'MXN',\n              minimumFractionDigits: 2\n            }).format(Number(newApp.amount || 0));\n            \n            // Formatear tasa de interés con símbolo de porcentaje\n            const formattedRate = `${newApp.interest_rate || 0}%`;\n            \n            // Formatear pago mensual\n            const formattedMonthly = new Intl.NumberFormat('es-MX', {\n              style: 'currency',\n              currency: 'MXN',\n              minimumFractionDigits: 2\n            }).format(Number(newApp.monthly_payment || 0));\n            \n            // Transformar tipo de aplicación a un formato más legible\n            let appType = 'No especificado';\n            if (newApp.application_type) {\n              if (newApp.application_type === 'selected_plans') {\n                appType = 'Planes seleccionados';\n              } else if (newApp.application_type === 'product_simulations') {\n                appType = 'Simulación de producto';\n              } else {\n                appType = newApp.application_type\n                  .split('_')\n                  .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))\n                  .join(' ');\n              }\n            }\n            \n            // Creamos un mensaje detallado para el popup\n            const detailedMessage = `\n              <div class=\"grid grid-cols-2 gap-2 text-sm\">\n                <div class=\"font-semibold\">Cliente:</div>\n                <div>${newApp.client_name || 'Sin nombre'}</div>\n                \n                <div class=\"font-semibold\">Empresa:</div>\n                <div>${newApp.company_name || 'No especificada'}</div>\n                \n                <div class=\"font-semibold\">Tipo:</div>\n                <div>${appType}</div>\n                \n                <div class=\"font-semibold\">Monto:</div>\n                <div>${formattedAmount}</div>\n                \n                <div class=\"font-semibold\">Plazo:</div>\n                <div>${newApp.term || 'N/A'} ${newApp.term === 1 ? 'mes' : 'meses'}</div>\n                \n                <div class=\"font-semibold\">Tasa:</div>\n                <div>${formattedRate}</div>\n                \n                <div class=\"font-semibold\">Pago mensual:</div>\n                <div>${formattedMonthly}</div>\n                \n                <div class=\"font-semibold\">Fecha:</div>\n                <div>${formattedDate} ${formattedTime}</div>\n              </div>\n            `;\n            \n            const notificationTitle = '💼 Nueva solicitud recibida';\n            \n            const testNotification = {\n              title: notificationTitle,\n              message: `Cliente: ${newApp.client_name || 'Sin nombre'} - ${newApp.company_name || 'Empresa no especificada'}`,\n              type: NotificationType.NEW_APPLICATION,\n              relatedItemType: 'application',\n              relatedItemId: newApp.id\n            };\n            \n            addNotification(testNotification);\n            \n            // También mostrar como popup con sonido especial para nuevas aplicaciones\n            showPopup({\n              title: notificationTitle,\n              // Usar el mensaje detallado HTML\n              message: detailedMessage,\n              type: NotificationType.NEW_APPLICATION,\n              playSound: soundEnabled,\n              soundType: 'notification',\n              duration: 10000, // Duración más larga (10 segundos)\n              // Usar un sonido especial para nuevas aplicaciones (más suave)\n              customSound: '/sounds/soft-three-beeps.mp3',\n              // Mostrar en el centro de la pantalla para mayor visibilidad\n              centerScreen: true\n            });\n            \n            // Agregar esta aplicación a las ya notificadas\n            const updatedNotifiedIds = new Set(notifiedApplicationIds);\n            updatedNotifiedIds.add(newApp.id);\n            setNotifiedApplicationIds(updatedNotifiedIds);\n            \n            // Guardar en localStorage para persistencia\n            localStorage.setItem('notified_application_ids', \n              JSON.stringify(Array.from(updatedNotifiedIds)));\n          }\n        }\n      }\n      \n      // Simulación: Ocasionalmente añadir una notificación de prueba\n      else if (Math.random() > 0.95) { // Reducir frecuencia a 5% en lugar de 10%\n        const testNotification = {\n          title: 'Nueva solicitud asignada',\n          message: 'Se ha asignado una nueva solicitud de crédito a tu bandeja',\n          type: NotificationType.NEW_APPLICATION,\n          relatedItemType: 'application',\n          // Using a properly formatted UUID for testing - NOT using app-timestamp format\n          relatedItemId: getTestApplicationId()\n        };\n        \n        addNotification(testNotification);\n        \n        // También mostrar como popup con sonido\n        showPopup({\n          ...testNotification,\n          playSound: soundEnabled,\n          soundType: 'notification'\n        });\n      }\n    } catch (error) {\n      console.error('Error al verificar nuevas notificaciones:', error);\n    }\n  };\n\n  // Añadir una nueva notificación\n  const addNotification = (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => {\n    const newNotification: Notification = {\n      ...notification,\n      // Using a proper UUID for the notification ID\n      id: generateUUID(),\n      createdAt: new Date(),\n      read: false,\n      timestamp: new Date()\n    };\n    \n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Guardar en localStorage (en producción esto iría al servidor)\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar una notificación como leída\n  const markAsRead = (id: string) => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => \n        notification.id === id \n          ? { ...notification, read: true, isRead: true } \n          : notification\n      );\n      \n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar todas las notificaciones como leídas\n  const markAllAsRead = () => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => ({ ...notification, read: true, isRead: true }));\n      \n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Limpiar todas las notificaciones\n  const clearNotifications = () => {\n    setNotifications([]);\n    // Limpiar del localStorage\n    localStorage.setItem('notifications', JSON.stringify([]));\n  };\n\n  // Mostrar una notificación emergente\n  const showPopup = (config: NotificationPopupConfig) => {\n    setCurrentPopup(config);\n    \n    // Automáticamente cerrar el popup después de la duración especificada\n    setTimeout(() => {\n      setCurrentPopup(null);\n    }, config.duration || 5000);\n  };\n\n  // Activar/desactivar sonidos de notificación\n  const toggleSound = () => {\n    const newValue = !soundEnabled;\n    setSoundEnabled(newValue);\n    // Guardar preferencia en localStorage\n    localStorage.setItem('notification_sound_enabled', newValue.toString());\n  };\n\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    showPopup,\n    soundEnabled,\n    toggleSound,\n    setSoundEnabled\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n      {currentPopup && (\n        <NotificationPopup\n          title={currentPopup.title}\n          message={currentPopup.message}\n          type={currentPopup.type as any}\n          duration={currentPopup.duration}\n          playSound={currentPopup.playSound}\n          soundType={currentPopup.soundType}\n          customSound={currentPopup.customSound}\n          onClose={() => setCurrentPopup(null)}\n        />\n      )}\n    </NotificationContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}