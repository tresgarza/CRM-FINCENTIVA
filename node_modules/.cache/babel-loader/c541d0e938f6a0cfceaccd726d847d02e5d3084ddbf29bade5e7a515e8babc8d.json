{"ast":null,"code":"/**\n * Ejecuta una consulta SQL directa\n * @param query Consulta SQL a ejecutar\n * @returns Resultado de la consulta\n */export const executeQuery=async query=>{try{const url='http://localhost:3100/query';const response=await fetch(url,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query})});if(!response.ok){throw new Error(`Error al ejecutar la consulta: ${response.statusText}`);}const result=await response.json();return result.data||[];}catch(error){console.error('Error ejecutando consulta:',error);throw error;}};/**\n * Escapa caracteres especiales en string para prevenir inyecci칩n SQL\n * @param value String a escapar\n * @returns String escapado\n */export const escapeSqlString=value=>{if(!value)return'';// Reemplazar comillas simples por dos comillas simples (est치ndar SQL)\nreturn value.replace(/'/g,\"''\");};/**\n * Formatea una fecha para SQL\n * @param date Fecha a formatear\n * @returns String formateado para SQL\n */export const formatDateForSql=date=>{return date.toISOString();};/**\n * Convierte un objeto a una cadena de condiciones SQL WHERE\n * @param conditions Objeto con condiciones {columna: valor}\n * @returns String con condiciones SQL\n */export const objectToSqlWhere=conditions=>{const clauses=[];for(const[key,value]of Object.entries(conditions)){if(value===undefined||value===null)continue;if(typeof value==='string'){clauses.push(`${key} = '${escapeSqlString(value)}'`);}else if(typeof value==='number'||typeof value==='boolean'){clauses.push(`${key} = ${value}`);}else if(value instanceof Date){clauses.push(`${key} = '${formatDateForSql(value)}'`);}else if(Array.isArray(value)){const formattedValues=value.map(v=>typeof v==='string'?`'${escapeSqlString(v)}'`:v);clauses.push(`${key} IN (${formattedValues.join(',')})`);}}return clauses.length>0?clauses.join(' AND '):'1=1';};","map":{"version":3,"names":["executeQuery","query","url","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","result","json","data","error","console","escapeSqlString","value","replace","formatDateForSql","date","toISOString","objectToSqlWhere","conditions","clauses","key","Object","entries","undefined","push","Date","Array","isArray","formattedValues","map","v","join","length"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/utils/databaseUtils.ts"],"sourcesContent":["import { supabase } from '../lib/supabaseClient';\n\n/**\n * Ejecuta una consulta SQL directa\n * @param query Consulta SQL a ejecutar\n * @returns Resultado de la consulta\n */\nexport const executeQuery = async (query: string): Promise<any[]> => {\n  try {\n    const url = 'http://localhost:3100/query';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ query }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error al ejecutar la consulta: ${response.statusText}`);\n    }\n\n    const result = await response.json();\n    return result.data || [];\n  } catch (error) {\n    console.error('Error ejecutando consulta:', error);\n    throw error;\n  }\n};\n\n/**\n * Escapa caracteres especiales en string para prevenir inyecci칩n SQL\n * @param value String a escapar\n * @returns String escapado\n */\nexport const escapeSqlString = (value: string): string => {\n  if (!value) return '';\n  \n  // Reemplazar comillas simples por dos comillas simples (est치ndar SQL)\n  return value.replace(/'/g, \"''\");\n};\n\n/**\n * Formatea una fecha para SQL\n * @param date Fecha a formatear\n * @returns String formateado para SQL\n */\nexport const formatDateForSql = (date: Date): string => {\n  return date.toISOString();\n};\n\n/**\n * Convierte un objeto a una cadena de condiciones SQL WHERE\n * @param conditions Objeto con condiciones {columna: valor}\n * @returns String con condiciones SQL\n */\nexport const objectToSqlWhere = (conditions: Record<string, any>): string => {\n  const clauses = [];\n  \n  for (const [key, value] of Object.entries(conditions)) {\n    if (value === undefined || value === null) continue;\n    \n    if (typeof value === 'string') {\n      clauses.push(`${key} = '${escapeSqlString(value)}'`);\n    } else if (typeof value === 'number' || typeof value === 'boolean') {\n      clauses.push(`${key} = ${value}`);\n    } else if (value instanceof Date) {\n      clauses.push(`${key} = '${formatDateForSql(value)}'`);\n    } else if (Array.isArray(value)) {\n      const formattedValues = value.map(v => \n        typeof v === 'string' ? `'${escapeSqlString(v)}'` : v\n      );\n      clauses.push(`${key} IN (${formattedValues.join(',')})`);\n    }\n  }\n  \n  return clauses.length > 0 ? clauses.join(' AND ') : '1=1';\n}; "],"mappings":"AAEA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,YAAY,CAAG,KAAO,CAAAC,KAAa,EAAqB,CACnE,GAAI,CACF,KAAM,CAAAC,GAAG,CAAG,6BAA6B,CACzC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACF,GAAG,CAAE,CAChCG,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAER,KAAM,CAAC,CAChC,CAAC,CAAC,CAEF,GAAI,CAACE,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,kCAAkCR,QAAQ,CAACS,UAAU,EAAE,CAAC,CAC1E,CAEA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAV,QAAQ,CAACW,IAAI,CAAC,CAAC,CACpC,MAAO,CAAAD,MAAM,CAACE,IAAI,EAAI,EAAE,CAC1B,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAE,eAAe,CAAIC,KAAa,EAAa,CACxD,GAAI,CAACA,KAAK,CAAE,MAAO,EAAE,CAErB;AACA,MAAO,CAAAA,KAAK,CAACC,OAAO,CAAC,IAAI,CAAE,IAAI,CAAC,CAClC,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,gBAAgB,CAAIC,IAAU,EAAa,CACtD,MAAO,CAAAA,IAAI,CAACC,WAAW,CAAC,CAAC,CAC3B,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,gBAAgB,CAAIC,UAA+B,EAAa,CAC3E,KAAM,CAAAC,OAAO,CAAG,EAAE,CAElB,IAAK,KAAM,CAACC,GAAG,CAAER,KAAK,CAAC,EAAI,CAAAS,MAAM,CAACC,OAAO,CAACJ,UAAU,CAAC,CAAE,CACrD,GAAIN,KAAK,GAAKW,SAAS,EAAIX,KAAK,GAAK,IAAI,CAAE,SAE3C,GAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,CAAE,CAC7BO,OAAO,CAACK,IAAI,CAAC,GAAGJ,GAAG,OAAOT,eAAe,CAACC,KAAK,CAAC,GAAG,CAAC,CACtD,CAAC,IAAM,IAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,EAAI,MAAO,CAAAA,KAAK,GAAK,SAAS,CAAE,CAClEO,OAAO,CAACK,IAAI,CAAC,GAAGJ,GAAG,MAAMR,KAAK,EAAE,CAAC,CACnC,CAAC,IAAM,IAAIA,KAAK,WAAY,CAAAa,IAAI,CAAE,CAChCN,OAAO,CAACK,IAAI,CAAC,GAAGJ,GAAG,OAAON,gBAAgB,CAACF,KAAK,CAAC,GAAG,CAAC,CACvD,CAAC,IAAM,IAAIc,KAAK,CAACC,OAAO,CAACf,KAAK,CAAC,CAAE,CAC/B,KAAM,CAAAgB,eAAe,CAAGhB,KAAK,CAACiB,GAAG,CAACC,CAAC,EACjC,MAAO,CAAAA,CAAC,GAAK,QAAQ,CAAG,IAAInB,eAAe,CAACmB,CAAC,CAAC,GAAG,CAAGA,CACtD,CAAC,CACDX,OAAO,CAACK,IAAI,CAAC,GAAGJ,GAAG,QAAQQ,eAAe,CAACG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAC1D,CACF,CAEA,MAAO,CAAAZ,OAAO,CAACa,MAAM,CAAG,CAAC,CAAGb,OAAO,CAACY,IAAI,CAAC,OAAO,CAAC,CAAG,KAAK,CAC3D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}