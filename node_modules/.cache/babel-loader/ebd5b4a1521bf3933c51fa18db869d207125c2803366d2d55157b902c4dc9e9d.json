{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/components/ui/KanbanBoard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getApprovalStatus, approveByAdvisor, approveByCompany } from '../../services/applicationService';\nimport { APPLICATION_STATUS, STATUS_LABELS } from '../../utils/constants/statuses';\nimport { usePermissions } from '../../contexts/PermissionsContext';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { TABLES } from '../../utils/constants/tables';\nimport { formatDate } from '../../utils/formatters';\nimport { APPLICATION_TYPE_LABELS } from '../../utils/constants/applications';\n\n// Verificar si APPLICATION_HISTORY tabla está definida\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APPLICATION_HISTORY_TABLE = TABLES.APPLICATION_HISTORY || 'application_history';\n\n// Función para escapar cadenas de texto para SQL\nfunction escapeSQLString(str) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\n// Interfaz para el estado de aprobación\n\n// Crear un tipo para aplicaciones con su estado de aprobación\n\nconst KanbanBoard = ({\n  applications,\n  onStatusChange\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [appsWithApproval, setAppsWithApproval] = useState([]);\n  const [processingAppId, setProcessingAppId] = useState(null);\n  const {\n    shouldFilterByEntity,\n    getEntityFilter,\n    isAdvisor,\n    isCompanyAdmin\n  } = usePermissions();\n  const {\n    user\n  } = useAuth();\n  const dragItemRef = useRef(null);\n  const dragImageRef = useRef(null);\n  const draggedItemIndexRef = useRef(-1);\n  const draggedItemNewStatusRef = useRef('');\n  const [autoTransitionMessage, setAutoTransitionMessage] = useState(null);\n\n  // Añadir estados para filtros\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const [dateFromFilter, setDateFromFilter] = useState('');\n  const [dateToFilter, setDateToFilter] = useState('');\n  const [amountMinFilter, setAmountMinFilter] = useState('');\n  const [amountMaxFilter, setAmountMaxFilter] = useState('');\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n\n  // Primero, modificar useEffect para cargar aplicaciones con datos de aprobación\n  useEffect(() => {\n    const loadApprovalStatuses = async () => {\n      if (!applications || applications.length === 0) return;\n      setIsLoading(true);\n      try {\n        const appsWithStatus = await Promise.all(applications.map(async app => {\n          // Obtener el estado de aprobación real de la API\n          const status = await getApprovalStatus(app.id);\n\n          // Devolver la aplicación con su estado de aprobación\n          return {\n            ...app,\n            approvalStatus: status || {\n              approvedByAdvisor: false,\n              approvedByCompany: false\n            },\n            // Para administradores de empresa, agregar un campo que maneja su \"estado virtual\"\n            company_review_status: isCompanyAdmin() ?\n            // Si la aplicación está en revisión o aprobada por empresa, marcarla\n            app.status === APPLICATION_STATUS.IN_REVIEW || status && status.approvedByCompany : false\n          };\n        }));\n        setAppsWithApproval(appsWithStatus);\n      } catch (error) {\n        console.error(\"Error loading approval statuses:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadApprovalStatuses();\n  }, [applications]);\n\n  // Modificar cómo se transforman las aplicaciones para ordenarlas de más viejas a más recientes\n  // en el useEffect donde se establece appsWithApproval alrededor de la línea 100-150\n  useEffect(() => {\n    const setupApplications = async () => {\n      const appsWithApprovalStatuses = await Promise.all(applications.map(async app => {\n        // Cargar estado de aprobación si aún no está cargado\n        const approvalStatus = await getApprovalStatus(app.id);\n        return {\n          ...app,\n          approvalStatus,\n          isMoving: false\n        };\n      }));\n\n      // Ordenar de más viejas a más recientes por fecha de creación\n      const sortedApps = [...appsWithApprovalStatuses].sort((a, b) => {\n        const dateA = new Date(a.created_at);\n        const dateB = new Date(b.created_at);\n        return dateA.getTime() - dateB.getTime(); // Orden ascendente (más viejas primero)\n      });\n      setAppsWithApproval(sortedApps);\n    };\n    setupApplications();\n  }, [applications]);\n\n  // Actualizar la lógica para nuevas aplicaciones para incluir todas las nuevas notificaciones\n  useEffect(() => {\n    // Verificar si hay aplicaciones que deberían estar en \"nuevo\" (recién creadas)\n    const newApplications = applications.filter(app => {\n      // Identificar aplicaciones recién creadas (menos de 24 horas)\n      const isNew = !app.status || app.status === 'pending' || app.status === 'solicitud';\n      const createdAt = new Date(app.created_at);\n      const now = new Date();\n      const hoursElapsed = (now.getTime() - createdAt.getTime()) / (1000 * 60 * 60);\n      const isRecent = hoursElapsed < 72;\n      return isRecent && (isNew || app.status === 'new');\n    });\n\n    // Si hay aplicaciones nuevas sin status o con status pendiente/solicitud, asignarles \"nuevo\"\n    if (newApplications.length > 0) {\n      console.log('Aplicaciones nuevas detectadas:', newApplications);\n      const updatedApps = [...appsWithApproval];\n      newApplications.forEach(newApp => {\n        const index = updatedApps.findIndex(app => app.id === newApp.id);\n        if (index !== -1 && (!updatedApps[index].status || updatedApps[index].status === 'pending' || updatedApps[index].status === 'solicitud')) {\n          updatedApps[index] = {\n            ...updatedApps[index],\n            status: APPLICATION_STATUS.NEW\n          };\n          console.log(`Aplicación ${newApp.id} movida a estado NUEVO`);\n        }\n      });\n      setAppsWithApproval(updatedApps);\n    }\n  }, [applications]); // Usar applications como dependencia en lugar de appsWithApproval\n\n  // Asegurar que nuevas aplicaciones se muestren inmediatamente\n  // añadiendo una función de comprobación en el useEffect principal\n  useEffect(() => {\n    const checkForNewApplications = async () => {\n      // Verificar que tenemos usuario y permisos\n      if (!(user !== null && user !== void 0 && user.id)) return;\n      try {\n        // Ejecutar esta comprobación solo si somos admin de empresa\n        if (isCompanyAdmin() && applications.length > 0) {\n          // Obtener la fecha de hace 24 horas\n          const oneDayAgo = new Date();\n          oneDayAgo.setHours(oneDayAgo.getHours() - 24);\n\n          // Buscar aplicaciones creadas en las últimas 24 horas\n          const recentApps = applications.filter(app => {\n            const createdAt = new Date(app.created_at);\n            return createdAt >= oneDayAgo;\n          });\n\n          // Si hay aplicaciones recientes, asegurarnos de que aparezcan en el tablero\n          if (recentApps.length > 0) {\n            console.log(`Encontradas ${recentApps.length} aplicaciones recientes`);\n\n            // Asegurar que todas estas aplicaciones están en nuestro estado local\n            // y que tienen el estado correcto (NEW si no tienen un estado específico)\n            const updatedApps = [...appsWithApproval];\n            let hasChanges = false;\n            recentApps.forEach(recentApp => {\n              const index = updatedApps.findIndex(app => app.id === recentApp.id);\n\n              // Si la aplicación no está en nuestro estado, agregarla\n              if (index === -1) {\n                console.log(`Agregando aplicación nueva ${recentApp.id} al estado`);\n                updatedApps.push({\n                  ...recentApp,\n                  status: recentApp.status || APPLICATION_STATUS.NEW,\n                  approvalStatus: {\n                    approvedByAdvisor: recentApp.approved_by_advisor || false,\n                    approvedByCompany: recentApp.approved_by_company || false\n                  }\n                });\n                hasChanges = true;\n              }\n              // Si no tiene estado o está en estado pendiente/solicitud, asignarle NEW\n              else if (!updatedApps[index].status || updatedApps[index].status === 'pending' || updatedApps[index].status === 'solicitud') {\n                console.log(`Actualizando estado de ${recentApp.id} a NUEVO`);\n                updatedApps[index] = {\n                  ...updatedApps[index],\n                  status: APPLICATION_STATUS.NEW\n                };\n                hasChanges = true;\n              }\n            });\n\n            // Actualizar el estado solo si hubo cambios\n            if (hasChanges) {\n              setAppsWithApproval(updatedApps);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error verificando nuevas aplicaciones:', error);\n      }\n    };\n\n    // Ejecutar la función de comprobación\n    checkForNewApplications();\n  }, [applications, user === null || user === void 0 ? void 0 : user.id, isCompanyAdmin]);\n\n  // Modificar la lógica para actualizar todas las aplicaciones con estado \"pending\" o \"solicitud\" a \"new\"\n  useEffect(() => {\n    // Si no hay aplicaciones, no hacer nada\n    if (!applications || applications.length === 0) return;\n    console.log('Verificando estado de aplicaciones:', applications.map(a => ({\n      id: a.id,\n      status: a.status\n    })));\n\n    // Actualizar solo las aplicaciones con estado específico a \"new\" sin afectar las demás\n    const updatedApps = [...appsWithApproval];\n    let hasChanges = false;\n    applications.forEach(app => {\n      const index = updatedApps.findIndex(a => a.id === app.id);\n      const needsUpdate = !app.status || app.status === 'pending' || app.status === 'solicitud';\n\n      // Solo actualizar si el estado necesita cambiar a \"new\"\n      if (index !== -1 && needsUpdate) {\n        console.log(`Actualizando estado de aplicación ${app.id} de \"${app.status}\" a \"new\"`);\n        updatedApps[index] = {\n          ...updatedApps[index],\n          status: APPLICATION_STATUS.NEW\n        };\n        hasChanges = true;\n      } else if (index === -1) {\n        // Si la aplicación no está en el array, agregarla con su estado original\n        // o \"new\" si no tiene estado o es pending/solicitud\n        const newStatus = needsUpdate ? APPLICATION_STATUS.NEW : app.status;\n        console.log(`Agregando aplicación ${app.id} con estado \"${newStatus}\"`);\n        updatedApps.push({\n          ...app,\n          status: newStatus,\n          approvalStatus: {\n            approvedByAdvisor: app.approved_by_advisor || false,\n            approvedByCompany: app.approved_by_company || false\n          }\n        });\n        hasChanges = true;\n      }\n      // Si existe y no necesita actualización, la dejamos como está\n    });\n    if (hasChanges) {\n      console.log('Actualizando aplicaciones:');\n      updatedApps.forEach(app => console.log(`- ${app.id}: ${app.status}`));\n      setAppsWithApproval(updatedApps);\n    }\n  }, [applications]);\n\n  // Modificar la forma en que agrupamos las aplicaciones por estado para los administradores de empresa\n  // para crear un flujo de trabajo independiente\n  const groupedApplications = React.useMemo(() => {\n    // Crear un objeto con todos los estados posibles como claves y arrays vacíos como valores\n    const initialGroups = Object.values(APPLICATION_STATUS).reduce((acc, status) => {\n      acc[status] = [];\n      return acc;\n    }, {});\n\n    // Para los administradores de empresa, usaremos un agrupamiento virtual basado en las aprobaciones\n    if (isCompanyAdmin()) {\n      return appsWithApproval.reduce((acc, app) => {\n        // Si está en movimiento, respetar el estado de destino\n        if (app.isMoving && app.targetStatus) {\n          // Verificar que el estado existe antes de intentar agregar la aplicación\n          if (acc[app.targetStatus]) {\n            acc[app.targetStatus].push(app);\n          } else {\n            // Si el estado no existe, usar NEW como fallback\n            console.warn(`Estado inválido detectado: ${app.targetStatus}, usando NEW como fallback`);\n            acc[APPLICATION_STATUS.NEW].push(app);\n          }\n          return acc;\n        }\n\n        // Normalizar estados \"pending\" y \"solicitud\" a \"new\"\n        if (!app.status || app.status === 'pending' || app.status === 'solicitud') {\n          acc[APPLICATION_STATUS.NEW].push(app);\n          return acc;\n        }\n\n        // Estados compartidos que siempre se muestran igual para todos los usuarios\n        const sharedStatuses = [APPLICATION_STATUS.POR_DISPERSAR, APPLICATION_STATUS.COMPLETED, APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.REJECTED];\n        if (sharedStatuses.includes(app.status)) {\n          // Verificar que el estado existe\n          if (acc[app.status]) {\n            acc[app.status].push(app);\n          } else {\n            console.warn(`Estado compartido inválido detectado: ${app.status}, usando NEW como fallback`);\n            acc[APPLICATION_STATUS.NEW].push(app);\n          }\n          return acc;\n        }\n\n        // Para los estados independientes, usar la lógica personalizada para admin de empresa\n        if (app.status === APPLICATION_STATUS.APPROVED) {\n          var _app$approvalStatus, _app$approvalStatus2, _app$approvalStatus3;\n          // Si está aprobada por la empresa pero no por el asesor, mostrarla en \"aprobado por mi\" \n          if ((_app$approvalStatus = app.approvalStatus) !== null && _app$approvalStatus !== void 0 && _app$approvalStatus.approvedByCompany && !app.approvalStatus.approvedByAdvisor) {\n            acc[APPLICATION_STATUS.APPROVED].push(app);\n            return acc;\n          }\n\n          // Si está aprobada por ambos, y el estado real es aprobado, mostrarla en aprobado\n          if ((_app$approvalStatus2 = app.approvalStatus) !== null && _app$approvalStatus2 !== void 0 && _app$approvalStatus2.approvedByCompany && (_app$approvalStatus3 = app.approvalStatus) !== null && _app$approvalStatus3 !== void 0 && _app$approvalStatus3.approvedByAdvisor) {\n            acc[APPLICATION_STATUS.APPROVED].push(app);\n            return acc;\n          }\n\n          // En otros casos, mostrarla en el estado que tenga según otras reglas\n        }\n\n        // Si está en revisión según la empresa\n        if (app.status === APPLICATION_STATUS.IN_REVIEW) {\n          var _app$approvalStatus4;\n          // Si no está aprobada por la empresa, mostrarla en \"en revisión\"\n          if (!((_app$approvalStatus4 = app.approvalStatus) !== null && _app$approvalStatus4 !== void 0 && _app$approvalStatus4.approvedByCompany)) {\n            acc[APPLICATION_STATUS.IN_REVIEW].push(app);\n            return acc;\n          }\n\n          // Si está aprobada por la empresa, mostrarla en \"aprobado por mi\"\n          acc[APPLICATION_STATUS.APPROVED].push(app);\n          return acc;\n        }\n\n        // Para nuevas aplicaciones sin aprobación\n        if (app.status === APPLICATION_STATUS.NEW) {\n          var _app$approvalStatus5;\n          // Si está aprobada por la empresa, mostrarla en \"aprobado por mi\"\n          if ((_app$approvalStatus5 = app.approvalStatus) !== null && _app$approvalStatus5 !== void 0 && _app$approvalStatus5.approvedByCompany) {\n            acc[APPLICATION_STATUS.APPROVED].push(app);\n            return acc;\n          }\n\n          // Si está en revisión por la empresa\n          if (app.company_review_status === true) {\n            acc[APPLICATION_STATUS.IN_REVIEW].push(app);\n            return acc;\n          }\n\n          // Si no tiene marca especial, mostrarla como nueva\n          acc[APPLICATION_STATUS.NEW].push(app);\n          return acc;\n        }\n\n        // Para cualquier otro caso, usar el estado real si existe, o NEW como fallback\n        if (acc[app.status]) {\n          acc[app.status].push(app);\n        } else {\n          console.warn(`Estado desconocido detectado: ${app.status}, usando NEW como fallback`);\n          acc[APPLICATION_STATUS.NEW].push(app);\n        }\n        return acc;\n      }, initialGroups);\n    }\n\n    // Para asesores y otros roles, usamos el agrupamiento normal basado en estado\n    return appsWithApproval.reduce((acc, app) => {\n      if (app.isMoving && app.targetStatus) {\n        // Si está en movimiento, verificar que el estado de destino existe\n        if (acc[app.targetStatus]) {\n          acc[app.targetStatus].push(app);\n        } else {\n          console.warn(`Estado de destino inválido: ${app.targetStatus}, usando NEW como fallback`);\n          acc[APPLICATION_STATUS.NEW].push(app);\n        }\n      } else {\n        // Si no, usar el estado normal, normalizando \"pending\" y \"solicitud\" a \"new\"\n        let status = app.status || 'new';\n\n        // Normalizar estados \"pending\" y \"solicitud\" a \"new\"\n        if (status === 'pending' || status === 'solicitud') {\n          status = APPLICATION_STATUS.NEW;\n        }\n\n        // Verificar que el estado existe antes de agregar\n        if (acc[status]) {\n          acc[status].push(app);\n        } else {\n          console.warn(`Estado inválido detectado: ${status}, usando NEW como fallback`);\n          acc[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      return acc;\n    }, initialGroups);\n  }, [appsWithApproval, isCompanyAdmin, isAdvisor]);\n\n  // Modificar la lógica de agrupamiento de aplicaciones para separar flujos\n  // Esta es la parte clave que separa completamente los flujos\n  const columns = useMemo(() => {\n    // Estados estándar del Kanban\n    const statusGroups = {\n      [APPLICATION_STATUS.NEW]: [],\n      [APPLICATION_STATUS.IN_REVIEW]: [],\n      [APPLICATION_STATUS.APPROVED]: [],\n      [APPLICATION_STATUS.POR_DISPERSAR]: [],\n      [APPLICATION_STATUS.COMPLETED]: [],\n      [APPLICATION_STATUS.EXPIRED]: [],\n      [APPLICATION_STATUS.REJECTED]: [],\n      [APPLICATION_STATUS.CANCELLED]: []\n    };\n\n    // Agrupar aplicaciones por estado\n    appsWithApproval.forEach(app => {\n      // Asegurarnos de que el app.status no es undefined antes de usarlo\n      const currentStatus = app.status || APPLICATION_STATUS.NEW;\n\n      // Lógica específica para administradores de empresa - flujo sincronizado\n      if (isCompanyAdmin()) {\n        var _app$approvalStatus6, _app$approvalStatus7;\n        // Los estados avanzados siempre deben mostrarse en su columna correspondiente\n        // independientemente del flujo (esto garantiza que se sincronicen con la vista del asesor)\n        const advancedStatuses = [APPLICATION_STATUS.POR_DISPERSAR, APPLICATION_STATUS.COMPLETED, APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.REJECTED];\n        if (advancedStatuses.includes(currentStatus)) {\n          console.log(`Mostrando tarjeta ${app.id} en estado avanzado: ${currentStatus}`);\n          statusGroups[currentStatus].push(app);\n          return;\n        }\n\n        // Para los estados básicos, aplicar la lógica personalizada del admin de empresa\n\n        // 1. Si está aprobada por empresa -> va a \"Aprobado por mi\"\n        if ((_app$approvalStatus6 = app.approvalStatus) !== null && _app$approvalStatus6 !== void 0 && _app$approvalStatus6.approvedByCompany) {\n          statusGroups[APPLICATION_STATUS.APPROVED].push(app);\n        }\n        // 2. Si está en revisión por empresa -> va a \"En Revisión\"\n        else if (app.company_review_status) {\n          statusGroups[APPLICATION_STATUS.IN_REVIEW].push(app);\n        }\n        // 3. Si no está ni en revisión ni aprobada por empresa -> va a \"Nuevo\"\n        else if (currentStatus === APPLICATION_STATUS.NEW || currentStatus === APPLICATION_STATUS.PENDING || !app.company_review_status && !((_app$approvalStatus7 = app.approvalStatus) !== null && _app$approvalStatus7 !== void 0 && _app$approvalStatus7.approvedByCompany)) {\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      // Lógica para asesores - flujo normal basado en estado real\n      else if (isAdvisor()) {\n        if (currentStatus) {\n          // Verificar que el estado existe en nuestros grupos antes de agregar\n          if (statusGroups[currentStatus]) {\n            statusGroups[currentStatus].push(app);\n          } else {\n            // Si no existe, log warning y usar NEW como fallback\n            console.warn(`Estado desconocido en columns para asesor: ${currentStatus}, usando NEW como fallback`);\n            statusGroups[APPLICATION_STATUS.NEW].push(app);\n          }\n        } else {\n          // Si no tiene estado, ponerla en \"Nuevo\"\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      // Lógica para otros roles\n      else {\n        if (currentStatus) {\n          // Verificar que el estado existe en nuestros grupos\n          if (statusGroups[currentStatus]) {\n            statusGroups[currentStatus].push(app);\n          } else {\n            // Si no existe, usar NEW como fallback\n            console.warn(`Estado desconocido en columns para otros roles: ${currentStatus}, usando NEW como fallback`);\n            statusGroups[APPLICATION_STATUS.NEW].push(app);\n          }\n        } else {\n          // Si no tiene estado, ponerla en \"Nuevo\"\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n    });\n\n    // Definición de colores para cada columna\n    const columnDefinitions = [{\n      id: APPLICATION_STATUS.NEW,\n      title: 'Nuevo',\n      color: 'warning',\n      applications: statusGroups[APPLICATION_STATUS.NEW]\n    }, {\n      id: APPLICATION_STATUS.IN_REVIEW,\n      title: 'En Revisión',\n      color: 'info',\n      applications: statusGroups[APPLICATION_STATUS.IN_REVIEW]\n    }, {\n      id: APPLICATION_STATUS.APPROVED,\n      title: 'Aprobado por mi',\n      color: 'success',\n      applications: statusGroups[APPLICATION_STATUS.APPROVED]\n    }, {\n      id: APPLICATION_STATUS.POR_DISPERSAR,\n      title: 'Por Dispersar',\n      color: 'accent',\n      applications: statusGroups[APPLICATION_STATUS.POR_DISPERSAR]\n    }, {\n      id: APPLICATION_STATUS.COMPLETED,\n      title: 'Completado',\n      color: 'primary',\n      applications: statusGroups[APPLICATION_STATUS.COMPLETED]\n    }, {\n      id: APPLICATION_STATUS.EXPIRED,\n      title: 'Expirado',\n      color: 'error',\n      applications: statusGroups[APPLICATION_STATUS.EXPIRED]\n    }, {\n      id: APPLICATION_STATUS.REJECTED,\n      title: 'Rechazado',\n      color: 'error',\n      applications: statusGroups[APPLICATION_STATUS.REJECTED]\n    }, {\n      id: APPLICATION_STATUS.CANCELLED,\n      title: 'Cancelado',\n      color: 'neutral',\n      applications: statusGroups[APPLICATION_STATUS.CANCELLED]\n    }];\n    return columnDefinitions;\n  }, [appsWithApproval, isAdvisor, isCompanyAdmin]);\n\n  // Función para actualizar localmente el estado de aprobación de una aplicación\n  const updateLocalApprovalStatus = (applicationId, updates, newStatus) => {\n    console.log(`Actualizando estado de aprobación para ${applicationId}:`, updates);\n\n    // Crear una copia del estado actual\n    const currentApps = [...appsWithApproval];\n    const appIndex = currentApps.findIndex(app => app.id === applicationId);\n    if (appIndex === -1) {\n      console.warn(`No se encontró la aplicación ${applicationId} para actualizar approval status`);\n      return;\n    }\n\n    // Crear copia profunda de la aplicación para evitar mutaciones directas\n    const updatedApp = {\n      ...currentApps[appIndex]\n    };\n\n    // Asegurar que el objeto approvalStatus exista\n    const currentApprovalStatus = updatedApp.approvalStatus || {\n      approvedByAdvisor: false,\n      approvedByCompany: false\n    };\n\n    // Crear el nuevo objeto de aprobación, asegurando que mantenemos los valores existentes\n    // a menos que se especifiquen explícitamente en el parámetro updates\n    const newApprovalStatus = {\n      approvedByAdvisor: updates.approvedByAdvisor !== undefined ? updates.approvedByAdvisor : currentApprovalStatus.approvedByAdvisor,\n      approvedByCompany: updates.approvedByCompany !== undefined ? updates.approvedByCompany : currentApprovalStatus.approvedByCompany\n    };\n    console.log(`Approval Status anterior: ${JSON.stringify(currentApprovalStatus)}`);\n    console.log(`Nuevo Approval Status: ${JSON.stringify(newApprovalStatus)}`);\n\n    // Actualizar la aplicación con el nuevo estado de aprobación\n    updatedApp.approvalStatus = newApprovalStatus;\n\n    // Para mantener sincronizados los estados, cuando quitamos la aprobación de empresa,\n    // también actualizamos el company_review_status\n    if (updates.approvedByCompany === false && isCompanyAdmin()) {\n      console.log(`Actualizando company_review_status a true porque estamos quitando aprobación`);\n      updatedApp.company_review_status = true;\n    }\n\n    // Si ambos están aprobados, asegurarnos de moverla a por_dispersar\n    if (newApprovalStatus.approvedByAdvisor && newApprovalStatus.approvedByCompany) {\n      console.log(`Ambas aprobaciones están presentes, verificando si necesita moverse a Por Dispersar`);\n      if (updatedApp.status !== APPLICATION_STATUS.POR_DISPERSAR && updatedApp.status !== APPLICATION_STATUS.COMPLETED) {\n        console.log(`Actualizando estado a Por Dispersar debido a doble aprobación`);\n        updatedApp.status = APPLICATION_STATUS.POR_DISPERSAR;\n      }\n    }\n\n    // Actualizar el array de aplicaciones\n    currentApps[appIndex] = updatedApp;\n\n    // Establecer el nuevo estado\n    setAppsWithApproval(currentApps);\n  };\n  const handleDragStart = (e, application, idx) => {\n    // Guardar la aplicación que estamos arrastrando\n    draggedItemIndexRef.current = idx;\n\n    // Almacenar el elemento que estamos arrastrando para gestionar mejor el evento\n    dragItemRef.current = e.currentTarget;\n\n    // Establecer los datos que queremos transferir\n    e.dataTransfer.setData('text/plain', application.id);\n    e.dataTransfer.effectAllowed = 'move';\n\n    // Crear una copia visual para el arrastre\n    if (!dragImageRef.current) {\n      dragImageRef.current = e.currentTarget.cloneNode(true);\n      dragImageRef.current.style.position = 'absolute';\n      dragImageRef.current.style.top = '-1000px';\n      dragImageRef.current.style.opacity = '0.8';\n      dragImageRef.current.style.transform = 'scale(0.9)';\n      dragImageRef.current.style.width = `${e.currentTarget.offsetWidth}px`;\n      document.body.appendChild(dragImageRef.current);\n    }\n\n    // Establecer la imagen de arrastre\n    if (dragImageRef.current) {\n      const rect = e.currentTarget.getBoundingClientRect();\n      e.dataTransfer.setDragImage(dragImageRef.current, rect.width / 2, 20);\n    }\n\n    // Añadir clase CSS para mostrar visualmente que el elemento está siendo arrastrado\n    if (e.currentTarget) {\n      e.currentTarget.classList.add('dragging');\n    }\n  };\n  const handleDragEnd = e => {\n    // Eliminar clase CSS de arrastre\n    if (dragItemRef.current) {\n      dragItemRef.current.classList.remove('dragging');\n      dragItemRef.current = null;\n    }\n    if (e.currentTarget) {\n      e.currentTarget.classList.remove('dragging');\n    }\n\n    // Eliminar el elemento clonado para el arrastre\n    if (dragImageRef.current) {\n      document.body.removeChild(dragImageRef.current);\n      dragImageRef.current = null;\n    }\n    draggedItemIndexRef.current = -1;\n    draggedItemNewStatusRef.current = '';\n  };\n  const handleDragOver = (e, columnStatus) => {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = 'move';\n\n    // Guardar el nuevo estado para la actualización optimista\n    if (draggedItemNewStatusRef.current !== columnStatus) {\n      draggedItemNewStatusRef.current = columnStatus;\n    }\n\n    // Añadir clase visual para indicar la columna destino\n    if (e.currentTarget.classList.contains('kanban-column')) {\n      document.querySelectorAll('.kanban-column').forEach(col => {\n        col.classList.remove('drag-over');\n      });\n      e.currentTarget.classList.add('drag-over');\n    }\n  };\n\n  // Verificar si el usuario puede arrastrar una tarjeta\n  const canDragCard = app => {\n    // No permitir arrastrar si la aplicación no tiene status o id\n    if (!app.status || !app.id) {\n      return false;\n    }\n\n    // No permitir arrastrar tarjetas que están en proceso de cambio de estado\n    if (app.isMoving) {\n      return false;\n    }\n\n    // No permitir arrastrar tarjetas que están siendo procesadas\n    if (processingAppId === app.id) {\n      return false;\n    }\n\n    // Restricciones específicas basadas en el rol del usuario\n\n    // Para asesores\n    if (isAdvisor()) {\n      var _app$approvalStatus8, _app$approvalStatus9;\n      // Estados que nunca pueden ser movidos por ningún usuario\n      const restrictedStatuses = [APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.POR_DISPERSAR];\n\n      // No permitir arrastrar si está en un estado restringido\n      if (restrictedStatuses.includes(app.status)) {\n        return false;\n      }\n\n      // Si tiene aprobaciones de ambos (asesor y empresa), no permitir mover\n      if ((_app$approvalStatus8 = app.approvalStatus) !== null && _app$approvalStatus8 !== void 0 && _app$approvalStatus8.approvedByAdvisor && (_app$approvalStatus9 = app.approvalStatus) !== null && _app$approvalStatus9 !== void 0 && _app$approvalStatus9.approvedByCompany) {\n        return false;\n      }\n      return true;\n    }\n\n    // Para administradores de empresa\n    if (isCompanyAdmin()) {\n      var _app$approvalStatus10, _app$approvalStatus11;\n      // Estados que nunca pueden ser movidos por un admin de empresa\n      const restrictedStatuses = [APPLICATION_STATUS.POR_DISPERSAR, APPLICATION_STATUS.COMPLETED, APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.REJECTED];\n\n      // No permitir arrastrar si está en un estado restringido\n      if (restrictedStatuses.includes(app.status)) {\n        return false;\n      }\n\n      // Si tiene aprobaciones de ambos (asesor y empresa), no permitir mover\n      if ((_app$approvalStatus10 = app.approvalStatus) !== null && _app$approvalStatus10 !== void 0 && _app$approvalStatus10.approvedByAdvisor && (_app$approvalStatus11 = app.approvalStatus) !== null && _app$approvalStatus11 !== void 0 && _app$approvalStatus11.approvedByCompany) {\n        return false;\n      }\n\n      // MODIFICACIÓN: Aunque el asesor haya aprobado, el admin de empresa debe poder aprobar también\n      // Aquí no se impide mover la tarjeta si solo está aprobada por el asesor\n\n      return true;\n    }\n\n    // Para otros roles, no permitir arrastrar\n    return false;\n  };\n\n  // Modificar handleDrop para manejar correctamente el flujo independiente\n  const handleDrop = async (e, newStatus) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Eliminar todas las clases de arrastre\n    document.querySelectorAll('.kanban-column').forEach(col => {\n      col.classList.remove('drag-over');\n    });\n\n    // Verificar que el newStatus es válido\n    const validStatuses = Object.values(APPLICATION_STATUS);\n    if (!validStatuses.includes(newStatus)) {\n      console.error(`Estado inválido para drop: ${newStatus}`);\n      setErrorMessage(`Error: estado \"${newStatus}\" no es válido.`);\n      return;\n    }\n\n    // Recuperar el ID de la aplicación\n    const applicationId = e.dataTransfer.getData('text/plain');\n    if (!applicationId || !(user !== null && user !== void 0 && user.id)) return;\n    const application = appsWithApproval.find(app => app.id === applicationId);\n    if (!application) return;\n    const oldStatus = application.status || APPLICATION_STATUS.NEW;\n\n    // No hacer nada si el estatus es el mismo\n    if (oldStatus === newStatus) return;\n    console.log(`Intentando mover tarjeta ${applicationId} de ${oldStatus} a ${newStatus}`);\n\n    // Establecer el ID de la aplicación que se está procesando\n    setProcessingAppId(applicationId);\n    try {\n      // Para administradores de empresa (FLUJO INDEPENDIENTE)\n      if (isCompanyAdmin()) {\n        // El admin de empresa solo puede mover tarjetas entre estos estados\n        const allowedTargetStates = [APPLICATION_STATUS.NEW, APPLICATION_STATUS.IN_REVIEW, APPLICATION_STATUS.APPROVED];\n\n        // Si intenta mover a un estado que no está permitido\n        if (!allowedTargetStates.includes(newStatus)) {\n          setErrorMessage(`No puedes mover solicitudes al estado \"${STATUS_LABELS[newStatus] || newStatus}\". Solo puedes mover entre Nuevo, En Revisión y Aprobado por mí.`);\n          setProcessingAppId(null);\n          return;\n        }\n\n        // Estados que nunca pueden ser movidos por un admin de empresa\n        const restrictedStatuses = [APPLICATION_STATUS.POR_DISPERSAR, APPLICATION_STATUS.COMPLETED, APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.REJECTED];\n\n        // Si la tarjeta está en un estado restringido, no permitir moverla\n        if (restrictedStatuses.includes(oldStatus)) {\n          setErrorMessage(`No puedes mover solicitudes que están en estado \"${STATUS_LABELS[oldStatus] || oldStatus}\".`);\n          setProcessingAppId(null);\n          return;\n        }\n\n        // Actualización optimista en UI para mejor fluidez\n        const updatedApps = [...appsWithApproval];\n        const appIndex = updatedApps.findIndex(app => app.id === applicationId);\n        if (appIndex !== -1) {\n          // Crear copia profunda para evitar referencias\n          const updatedApp = {\n            ...updatedApps[appIndex],\n            isMoving: true,\n            targetStatus: newStatus\n          };\n          if (newStatus === APPLICATION_STATUS.NEW) {\n            var _updatedApp$approvalS;\n            // Mover a Nuevo\n            updatedApp.company_review_status = false;\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              }),\n              approvedByCompany: false\n            };\n\n            // Si estaba aprobado y se mueve a Nuevo, hay que quitar la aprobación de la empresa\n            if ((_updatedApp$approvalS = updatedApp.approvalStatus) !== null && _updatedApp$approvalS !== void 0 && _updatedApp$approvalS.approvedByCompany && user !== null && user !== void 0 && user.entityId && application.company_id) {\n              try {\n                console.log(\"Quitando aprobación de empresa en la base de datos\");\n                // Ejecutamos una consulta SQL para quitar la aprobación\n                const query = `\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_company = false, \n                      approval_date_company = NULL\n                  WHERE id = '${applicationId}' AND company_id = '${application.company_id}'\n                  RETURNING *\n                `;\n                const response = await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    query\n                  })\n                });\n                const result = await response.json();\n                if (result.error) {\n                  throw new Error(result.error);\n                }\n                console.log(\"✅ Aprobación de empresa removida correctamente:\", result.data);\n\n                // Registrar en historial\n                const historyQuery = `\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'new', 'Regresado a Nuevo por administrador de empresa', '${user.entityId}')\n                  RETURNING *\n                `;\n                await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    query: historyQuery\n                  })\n                });\n\n                // Actualizar UI explícitamente\n                updateLocalApprovalStatus(applicationId, {\n                  approvedByCompany: false\n                }, APPLICATION_STATUS.NEW);\n              } catch (error) {\n                console.error(\"❌ Error al quitar aprobación de empresa:\", error);\n                setErrorMessage(`Error al quitar aprobación: ${error.message}`);\n              }\n            }\n          } else if (newStatus === APPLICATION_STATUS.IN_REVIEW) {\n            var _updatedApp$approvalS2;\n            // Mover a En Revisión\n            updatedApp.company_review_status = true;\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              }),\n              approvedByCompany: false\n            };\n\n            // Si estaba aprobado y se mueve a En Revisión, hay que quitar la aprobación de la empresa\n            if (oldStatus === APPLICATION_STATUS.APPROVED && (_updatedApp$approvalS2 = updatedApp.approvalStatus) !== null && _updatedApp$approvalS2 !== void 0 && _updatedApp$approvalS2.approvedByCompany && user !== null && user !== void 0 && user.entityId && application.company_id) {\n              try {\n                console.log(\"Quitando aprobación de empresa en la base de datos\");\n                // Ejecutamos una consulta SQL para quitar la aprobación\n                const query = `\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_company = false, \n                      approval_date_company = NULL,\n                      status = '${APPLICATION_STATUS.IN_REVIEW}'\n                  WHERE id = '${applicationId}' AND company_id = '${application.company_id}'\n                  RETURNING *\n                `;\n                const response = await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    query\n                  })\n                });\n                const result = await response.json();\n                if (result.error) {\n                  throw new Error(result.error);\n                }\n                console.log(\"✅ Aprobación de empresa removida correctamente:\", result.data);\n\n                // Registrar en historial\n                const historyQuery = `\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'in_review', 'Revisión adicional requerida por empresa', '${user.entityId}')\n                  RETURNING *\n                `;\n                await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    query: historyQuery\n                  })\n                });\n\n                // Actualizar UI explícitamente con ambas propiedades\n                updateLocalApprovalStatus(applicationId, {\n                  approvedByCompany: false\n                }, APPLICATION_STATUS.IN_REVIEW);\n\n                // Forzar actualización global de la aplicación para todos los usuarios\n                // llamando a la API de cambio de estado\n                if (onStatusChange) {\n                  try {\n                    await onStatusChange(application, APPLICATION_STATUS.IN_REVIEW);\n                    console.log(\"✅ Estado actualizado correctamente a EN REVISIÓN\");\n                  } catch (error) {\n                    console.error(\"❌ Error al actualizar estado:\", error);\n                  }\n                }\n              } catch (error) {\n                console.error(\"❌ Error al quitar aprobación de empresa:\", error);\n                setErrorMessage(`Error al quitar aprobación: ${error.message}`);\n              }\n            } else {\n              // Incluso si no estaba aprobada, forzar actualización de estado\n              if (onStatusChange) {\n                try {\n                  await onStatusChange(application, APPLICATION_STATUS.IN_REVIEW);\n                  console.log(\"✅ Estado actualizado correctamente a EN REVISIÓN\");\n                } catch (error) {\n                  console.error(\"❌ Error al actualizar estado:\", error);\n                }\n              }\n            }\n          } else if (newStatus === APPLICATION_STATUS.APPROVED) {\n            // Mover a Aprobado por mí\n            updatedApp.company_review_status = true; // Se considera revisado si está aprobado\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              }),\n              approvedByCompany: true\n            };\n\n            // Llamar a la API para aprobar por empresa\n            if (user !== null && user !== void 0 && user.entityId && application.company_id) {\n              try {\n                console.log(`Empresa ${user.entityId} está aprobando la solicitud ${applicationId}`);\n\n                // Aplicar cambio optimista a la UI primero\n                updatedApps[appIndex] = updatedApp;\n                setAppsWithApproval([...updatedApps]);\n\n                // Llamar a la API y esperar a que termine\n                const result = await approveByCompany(applicationId, \"Aprobado vía Kanban\", user.entityId, application.company_id, {\n                  company_id: application.company_id\n                } // Pasar company_id en el entityFilter\n                );\n                console.log(\"✅ Aplicación aprobada por empresa:\", result);\n\n                // Actualizar UI con respuesta del servidor\n                updateLocalApprovalStatus(applicationId, {\n                  approvedByCompany: true\n                });\n\n                // Verificar si la aplicación ya está aprobada por el asesor\n                const approvalStatus = await getApprovalStatus(applicationId);\n                console.log(\"Estado de aprobación actual:\", approvalStatus);\n\n                // Si está aprobada por ambos, mover automáticamente a \"por_dispersar\"\n                if (approvalStatus !== null && approvalStatus !== void 0 && approvalStatus.approvedByAdvisor) {\n                  console.log(\"❇️ Ambas aprobaciones completadas, moviendo a Por Dispersar\");\n                  // Mostrar notificación de transición automática\n                  setAutoTransitionMessage(`La solicitud ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR] || 'Por Dispersar'}\"`);\n\n                  // Cambiar el estado a \"por_dispersar\" después de un breve retraso\n                  setTimeout(() => {\n                    if (onStatusChange) {\n                      onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                    }\n                    // Limpiar el mensaje después de mostrar\n                    setTimeout(() => setAutoTransitionMessage(null), 3000);\n                  }, 500);\n                }\n              } catch (error) {\n                console.error(\"❌ Error al aprobar por empresa:\", error);\n                setErrorMessage(`Error al aprobar: ${error.message}`);\n\n                // Revertir el estado optimista en caso de error\n                updatedApp.approvalStatus = {\n                  ...(updatedApp.approvalStatus || {\n                    approvedByAdvisor: false,\n                    approvedByCompany: false\n                  }),\n                  approvedByCompany: false\n                };\n                updatedApps[appIndex] = updatedApp;\n                setAppsWithApproval([...updatedApps]);\n              }\n            }\n          }\n\n          // Actualizar la app en el estado\n          updatedApps[appIndex] = updatedApp;\n          setAppsWithApproval(updatedApps);\n\n          // Quitar la marca de movimiento después de un breve retraso\n          setTimeout(() => {\n            setAppsWithApproval(prev => prev.map(app => app.id === applicationId ? {\n              ...app,\n              isMoving: false,\n              targetStatus: undefined\n            } : app));\n            setProcessingAppId(null);\n          }, 500);\n        }\n      }\n      // Para asesores (flujo normal)\n      else if (isAdvisor()) {\n        // Verificar que el estado es válido\n        if (!validStatuses.includes(newStatus)) {\n          setErrorMessage(`Estado de destino \"${newStatus}\" no es válido.`);\n          setProcessingAppId(null);\n          return;\n        }\n\n        // Actualización optimista en UI\n        const updatedApps = [...appsWithApproval];\n        const appIndex = updatedApps.findIndex(app => app.id === applicationId);\n        if (appIndex !== -1) {\n          // Crear copia profunda para evitar referencias\n          const updatedApp = {\n            ...updatedApps[appIndex],\n            isMoving: true,\n            targetStatus: newStatus,\n            status: newStatus // actualizar el estado directamente\n          };\n\n          // Lógica para manejar aprobaciones de manera optimista\n          if (newStatus === APPLICATION_STATUS.APPROVED) {\n            console.log(`Advisor ${user === null || user === void 0 ? void 0 : user.id} está aprobando la solicitud ${applicationId}`);\n\n            // Actualizar inmediatamente el estado visual de aprobación del asesor\n            // para una respuesta inmediata en la UI\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              }),\n              approvedByAdvisor: true // Optimistically set to true\n            };\n\n            // Aplicar cambio optimista a la UI\n            updatedApps[appIndex] = updatedApp;\n            setAppsWithApproval([...updatedApps]); // Clone to trigger re-render\n\n            // Llamar a la API para aprobar por asesor\n            if (user !== null && user !== void 0 && user.entityId) {\n              try {\n                // Llamar a la API y esperar a que termine\n                console.log(\"Llamando a approveByAdvisor API...\");\n                const result = await approveByAdvisor(applicationId, \"Aprobado vía Kanban\", user.entityId, {\n                  advisor_id: user.entityId\n                } // Ensure we're using the advisor filter\n                );\n                console.log(\"✅ Aplicación aprobada por asesor:\", result);\n\n                // Actualizar UI con respuesta del servidor explícitamente\n                // para asegurar que el indicador se actualiza correctamente\n                updateLocalApprovalStatus(applicationId, {\n                  approvedByAdvisor: true\n                });\n\n                // Verificar si la aplicación ya está aprobada por la empresa\n                const approvalStatus = await getApprovalStatus(applicationId);\n                console.log(\"Estado de aprobación actual:\", approvalStatus);\n\n                // Si está aprobada por ambos, mover automáticamente a \"por_dispersar\"\n                if (approvalStatus !== null && approvalStatus !== void 0 && approvalStatus.approvedByCompany) {\n                  // Mostrar notificación de transición automática\n                  setAutoTransitionMessage(`La solicitud ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR] || 'Por Dispersar'}\"`);\n\n                  // Cambiar el estado a \"por_dispersar\" después de un breve retraso\n                  setTimeout(() => {\n                    if (onStatusChange) {\n                      onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                    }\n                    // Limpiar el mensaje después de mostrar\n                    setTimeout(() => setAutoTransitionMessage(null), 3000);\n                  }, 500);\n                }\n              } catch (error) {\n                console.error(\"❌ Error al aprobar por asesor:\", error);\n                setErrorMessage(`Error al aprobar: ${error.message}`);\n\n                // Revertir el estado optimista en caso de error\n                // pero solo si realmente falló la aprobación\n                const appToPatch = appsWithApproval.find(app => app.id === applicationId);\n                if (appToPatch) {\n                  updateLocalApprovalStatus(applicationId, {\n                    approvedByAdvisor: false\n                  });\n                }\n              }\n            }\n          }\n          // Si se mueve de APPROVED a otro estado, quitar la aprobación\n          else if (oldStatus === APPLICATION_STATUS.APPROVED && newStatus !== APPLICATION_STATUS.POR_DISPERSAR) {\n            console.log(\"Moviendo de aprobado a otro estado, resetear aprobación de asesor\");\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || {\n                approvedByAdvisor: false,\n                approvedByCompany: false\n              }),\n              approvedByAdvisor: false\n            };\n\n            // Actualizar en BD para quitar aprobación (nueva API)\n            if (user !== null && user !== void 0 && user.entityId && newStatus === APPLICATION_STATUS.IN_REVIEW) {\n              try {\n                console.log(\"Quitando aprobación de asesor en la base de datos\");\n                // Ejecutamos una consulta SQL para quitar la aprobación\n                const query = `\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_advisor = false, \n                      approval_date_advisor = NULL\n                  WHERE id = '${applicationId}' AND assigned_to = '${user.entityId}'\n                  RETURNING *\n                `;\n                const response = await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    query\n                  })\n                });\n                const result = await response.json();\n                if (result.error) {\n                  throw new Error(result.error);\n                }\n                console.log(\"✅ Aprobación de asesor removida correctamente:\", result.data);\n\n                // Registrar en historial\n                const historyQuery = `\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'in_review', 'Revisión adicional requerida', '${user.entityId}')\n                  RETURNING *\n                `;\n                await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    query: historyQuery\n                  })\n                });\n\n                // Actualizar UI explícitamente\n                updateLocalApprovalStatus(applicationId, {\n                  approvedByAdvisor: false\n                });\n              } catch (error) {\n                console.error(\"❌ Error al quitar aprobación del asesor:\", error);\n                setErrorMessage(`Error al quitar aprobación: ${error.message}`);\n              }\n            }\n          }\n\n          // Actualizar la app en el estado solo si no es una aprobación (ese caso ya lo manejamos arriba)\n          if (newStatus !== APPLICATION_STATUS.APPROVED) {\n            updatedApps[appIndex] = updatedApp;\n            setAppsWithApproval(updatedApps);\n          }\n\n          // Llamar a la API para actualizar el estado\n          if (onStatusChange) {\n            try {\n              await onStatusChange(application, newStatus);\n            } catch (error) {\n              console.error(\"Error updating status:\", error);\n              setErrorMessage(`Error al actualizar el estado: ${error.message}`);\n\n              // Revertir cambios en caso de error\n              setAppsWithApproval(prev => prev.map(app => app.id === applicationId ? {\n                ...app,\n                status: oldStatus,\n                isMoving: false,\n                targetStatus: undefined\n              } : app));\n            }\n          }\n\n          // Quitar la marca de movimiento después de un breve retraso\n          setTimeout(() => {\n            setAppsWithApproval(prev => prev.map(app => app.id === applicationId ? {\n              ...app,\n              isMoving: false,\n              targetStatus: undefined\n            } : app));\n            setProcessingAppId(null);\n          }, 500);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error in handleDrop:\", error);\n      setErrorMessage(`Error al actualizar el estado: ${error.message}`);\n      setProcessingAppId(null);\n    }\n  };\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat('es-MX', {\n      style: 'currency',\n      currency: 'MXN'\n    }).format(amount);\n  };\n\n  // Renderizar los indicadores de aprobación con mejor formato y legibilidad\n  const renderApprovalIndicators = app => {\n    if (!app.approvalStatus) return null;\n    const {\n      approvedByAdvisor,\n      approvedByCompany\n    } = app.approvalStatus;\n    const hasFullApproval = approvedByAdvisor && approvedByCompany;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col mt-1 space-y-1\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tooltip tooltip-top flex items-center\",\n          \"data-tip\": approvedByAdvisor ? \"Aprobado por asesor\" : \"Pendiente de aprobación por asesor\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs mr-1 whitespace-nowrap\",\n            children: \"Asesor:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1248,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-3 h-3 rounded-full ${approvedByAdvisor ? 'bg-success' : 'bg-warning'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1249,\n            columnNumber: 13\n          }, this), approvedByAdvisor && /*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"h-4 w-4 ml-1 text-success\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            stroke: \"currentColor\",\n            strokeWidth: 2,\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              d: \"M5 13l4 4L19 7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1252,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1251,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tooltip tooltip-top flex items-center ml-3\",\n          \"data-tip\": approvedByCompany ? \"Aprobado por empresa\" : \"Pendiente de aprobación por empresa\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs mr-1 whitespace-nowrap\",\n            children: \"Empresa:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1258,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-3 h-3 rounded-full ${approvedByCompany ? 'bg-success' : 'bg-warning'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1259,\n            columnNumber: 13\n          }, this), approvedByCompany && /*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"h-4 w-4 ml-1 text-success\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            stroke: \"currentColor\",\n            strokeWidth: 2,\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              d: \"M5 13l4 4L19 7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1262,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1261,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1257,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1246,\n        columnNumber: 9\n      }, this), hasFullApproval && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full flex justify-center mt-1\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"badge badge-success text-xs px-2 py-1 text-white font-medium\",\n          children: \"Aprobado Total\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1271,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1270,\n        columnNumber: 11\n      }, this), isCompanyAdmin() && approvedByCompany && app.status === APPLICATION_STATUS.APPROVED && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full flex justify-center mt-1\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => {\n            e.stopPropagation(); // Evitar que se propague al card\n            handleDrop(e, APPLICATION_STATUS.IN_REVIEW);\n          },\n          className: \"btn btn-xs btn-error w-full\",\n          children: \"Deshacer Aprobaci\\xF3n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1280,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1279,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1245,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Mejorar el formato de las etiquetas de producto para mayor legibilidad\n  const getProductLabel = type => {\n    const labels = {\n      'selected_plans': 'Crédito a Plazos',\n      'product_simulations': 'Simulación',\n      'auto_loan': 'Crédito Auto',\n      'car_backed_loan': 'Crédito con Garantía',\n      'personal_loan': 'Préstamo Personal',\n      'cash_advance': 'Adelanto de Efectivo'\n    };\n    return labels[type] || type;\n  };\n\n  // Función para renderizar el producto como una etiqueta bien formateada\n  const renderProductLabel = (type, color) => {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `badge badge-${color} badge-md text-xs px-3 py-1 whitespace-nowrap inline-block`,\n      children: getProductLabel(type || '')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1312,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Función para obtener el color apropiado para la tarjeta según estado y aprobaciones\n  const getCardColor = app => {\n    const status = app.status || '';\n\n    // Colores específicos según el estado\n    switch (status.toLowerCase()) {\n      case APPLICATION_STATUS.REJECTED:\n        return 'border-error bg-red-50';\n      case APPLICATION_STATUS.APPROVED:\n        // Si está aprobado, verificar el estado de las aprobaciones\n        if (app.approvalStatus) {\n          const {\n            approvedByAdvisor,\n            approvedByCompany\n          } = app.approvalStatus;\n          if (approvedByAdvisor && approvedByCompany) {\n            return 'border-success bg-green-100'; // Aprobado por ambos\n          } else if (approvedByAdvisor) {\n            return 'border-success bg-green-50'; // Aprobado solo por asesor\n          } else if (approvedByCompany) {\n            return 'border-info bg-blue-50'; // Aprobado solo por empresa\n          }\n        }\n        return 'border-success bg-green-50';\n      case APPLICATION_STATUS.IN_REVIEW:\n        return 'border-info bg-blue-50';\n      case APPLICATION_STATUS.NEW:\n        return 'border-warning bg-yellow-50';\n      case APPLICATION_STATUS.PENDING:\n        return 'border-warning bg-amber-50';\n      case APPLICATION_STATUS.POR_DISPERSAR:\n        return 'border-accent bg-purple-50';\n      case APPLICATION_STATUS.COMPLETED:\n        return 'border-primary bg-indigo-50';\n      case APPLICATION_STATUS.EXPIRED:\n        return 'border-error bg-red-100';\n      case APPLICATION_STATUS.CANCELLED:\n        return 'border-neutral bg-gray-100';\n      default:\n        // Si el estado no coincide con ninguno de los anteriores, usar el color de la columna\n        return `border-${app.status || 'neutral'}`;\n    }\n  };\n\n  // Estilos personalizados para mostrar claramente cuáles tarjetas se pueden arrastrar\n  const customStyles = `\n    .custom-scrollbar::-webkit-scrollbar {\n      width: 8px;\n      height: 8px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-track {\n      background: #f1f1f1;\n      border-radius: 10px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-thumb {\n      background: #888;\n      border-radius: 10px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n      background: #555;\n    }\n    \n    .kanban-card {\n      transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out, box-shadow 0.3s ease-in-out, border-color 0.3s ease;\n      touch-action: none;\n      user-select: none;\n      will-change: transform, opacity;\n    }\n    \n    .kanban-card-draggable {\n      cursor: grab !important;\n      position: relative;\n    }\n    \n    .kanban-card-draggable:hover {\n      transform: translateY(-4px);\n      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n      border-color: #a855f7;\n      z-index: 10;\n    }\n    \n    .kanban-card-draggable:active {\n      cursor: grabbing !important;\n    }\n    \n    /* Indicator for draggable cards */\n    .kanban-card-draggable::after {\n      content: '';\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      width: 20px;\n      height: 20px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23666'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M7 11.5V14m0-2.5v-6a1.5 1.5 0 113 0m-3 6a1.5 1.5 0 00-3 0v2a7.5 7.5 0 0015 0v-5a1.5 1.5 0 013 0m-6-3V11m0-5.5v-1a1.5 1.5 0 013 0v1m0 0V11' /%3E%3C/svg%3E\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      opacity: 0.7;\n      transition: opacity 0.2s ease;\n    }\n    \n    .kanban-card-draggable:hover::after {\n      opacity: 1;\n    }\n    \n    .kanban-card-locked {\n      position: relative;\n      cursor: not-allowed !important;\n      opacity: 0.8;\n    }\n    \n    .kanban-card-locked::after {\n      content: '';\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      width: 20px;\n      height: 20px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23999'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z' /%3E%3C/svg%3E\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      opacity: 0.7;\n    }\n    \n    .kanban-card.dragging {\n      opacity: 0.8;\n      transform: scale(1.03);\n      box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n      z-index: 50;\n    }\n    \n    .kanban-column {\n      transition: all 0.2s ease;\n      border-radius: 0.75rem;\n      will-change: transform, background-color;\n    }\n    \n    .kanban-column.drag-over {\n      background-color: rgba(var(--b2, 217 217 217) / 0.5);\n      transform: scale(1.01);\n      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);\n      border: 2px dashed #a855f7 !important;\n    }\n\n    .kanban-container {\n      scroll-behavior: smooth;\n    }\n\n    @media (min-width: 768px) {\n      .kanban-card-draggable:hover {\n        transform: translateY(-4px);\n        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n      }\n    }\n    \n    /* Animaciones para cambios de estado */\n    @keyframes fadeIn {\n      0% { opacity: 0; }\n      100% { opacity: 1; }\n    }\n    \n    @keyframes slideIn {\n      0% { transform: translateY(10px); opacity: 0; }\n      100% { transform: translateY(0); opacity: 1; }\n    }\n    \n    @keyframes processingPulse {\n      0% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0.4); }\n      70% { box-shadow: 0 0 0 6px rgba(124, 58, 237, 0); }\n      100% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0); }\n    }\n    \n    .kanban-card {\n      animation: fadeIn 0.3s ease-out;\n    }\n    \n    .processing-toast {\n      position: fixed;\n      bottom: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      padding: 10px 20px;\n      background-color: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      animation: slideIn 0.3s ease-out;\n    }\n    \n    .auto-transition-toast {\n      position: fixed;\n      bottom: 70px;\n      left: 50%;\n      transform: translateX(-50%);\n      padding: 10px 20px;\n      background-color: #dcfce7;\n      border: 1px solid #86efac;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      animation: slideIn 0.3s ease-out;\n    }\n    \n    /* Pop-up tooltip con instrucciones para arrastrar */\n    .drag-instructions {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background-color: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      padding: 12px 16px;\n      z-index: 1000;\n      max-width: 300px;\n      animation: fadeIn 0.3s ease-out;\n    }\n    \n    /* Mejoras para vista mobile */\n    @media (max-width: 640px) {\n      .kanban-column {\n        min-height: 300px;\n      }\n    }\n  `;\n\n  // Función para obtener clases draggable\n  const getDraggableClasses = app => {\n    // Usar la función canDragCard que está definida en el ámbito superior\n    const isDraggable = canDragCard(app) && app.id !== processingAppId;\n    return isDraggable ? 'cursor-grab kanban-card-draggable' : 'cursor-not-allowed opacity-80 kanban-card-locked';\n  };\n\n  // Función para definir los tooltips con información clara y precisa\n  const getDragTooltip = app => {\n    var _app$approvalStatus12, _app$approvalStatus13;\n    if (app.id === processingAppId) {\n      return \"Esta tarjeta está siendo procesada\";\n    }\n\n    // Si la tarjeta se puede arrastrar, mostrar mensaje informativo\n    if (canDragCard(app)) {\n      return \"Arrastra para cambiar el estado\";\n    }\n\n    // Mensajes específicos para casos donde no se puede arrastrar\n    if ((_app$approvalStatus12 = app.approvalStatus) !== null && _app$approvalStatus12 !== void 0 && _app$approvalStatus12.approvedByAdvisor && (_app$approvalStatus13 = app.approvalStatus) !== null && _app$approvalStatus13 !== void 0 && _app$approvalStatus13.approvedByCompany) {\n      return \"Esta solicitud ya está completamente aprobada y no puede ser movida\";\n    }\n\n    // Asegurarse de que app.status no es undefined\n    const status = app.status || APPLICATION_STATUS.NEW;\n\n    // Mensajes específicos según el rol y estado\n    if (isCompanyAdmin()) {\n      if (status === APPLICATION_STATUS.REJECTED) {\n        return \"Las solicitudes rechazadas solo pueden ser movidas por asesores\";\n      } else if (status === APPLICATION_STATUS.POR_DISPERSAR) {\n        return \"Esta solicitud ya está lista para dispersión y no puede regresar a estados anteriores\";\n      } else if (status === APPLICATION_STATUS.COMPLETED) {\n        return \"Esta solicitud ya está completada y no puede cambiar de estado\";\n      } else if (status === APPLICATION_STATUS.EXPIRED) {\n        return \"Esta solicitud ha expirado y no puede cambiar de estado\";\n      } else if (status === APPLICATION_STATUS.CANCELLED) {\n        return \"Esta solicitud fue cancelada y no puede cambiar de estado\";\n      }\n    }\n    return \"No puedes mover esta tarjeta en este momento\";\n  };\n\n  // Efecto para mover automáticamente tarjetas con ambas aprobaciones a \"Por Dispersar\"\n  useEffect(() => {\n    const moveFullyApprovedCards = async () => {\n      // Encontrar tarjetas que tienen ambas aprobaciones pero no están en Por Dispersar\n      const fullyApprovedCards = appsWithApproval.filter(app => {\n        var _app$approvalStatus14, _app$approvalStatus15;\n        return ((_app$approvalStatus14 = app.approvalStatus) === null || _app$approvalStatus14 === void 0 ? void 0 : _app$approvalStatus14.approvedByAdvisor) && ((_app$approvalStatus15 = app.approvalStatus) === null || _app$approvalStatus15 === void 0 ? void 0 : _app$approvalStatus15.approvedByCompany) && app.status !== APPLICATION_STATUS.POR_DISPERSAR && app.status !== APPLICATION_STATUS.COMPLETED;\n      });\n      if (fullyApprovedCards.length > 0) {\n        console.log(`Encontradas ${fullyApprovedCards.length} tarjetas con aprobación total, moviendo a Por Dispersar...`);\n\n        // Mover cada tarjeta a Por Dispersar\n        for (const app of fullyApprovedCards) {\n          if (onStatusChange) {\n            try {\n              console.log(`Moviendo tarjeta ${app.id} a Por Dispersar automáticamente...`);\n              await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n            } catch (error) {\n              console.error(`Error al mover tarjeta ${app.id} a Por Dispersar:`, error);\n            }\n          }\n        }\n      }\n    };\n\n    // Ejecutar después de un breve retraso para permitir que los estados se inicialicen\n    const timer = setTimeout(() => {\n      moveFullyApprovedCards();\n    }, 2000);\n    return () => clearTimeout(timer);\n  }, [appsWithApproval, onStatusChange]);\n\n  // Agregar una sincronización de estados avanzados para las aplicaciones existentes\n  useEffect(() => {\n    const syncAdvancedStatusCards = async () => {\n      if (!isCompanyAdmin() || applications.length === 0) return;\n      console.log(\"Sincronizando tarjetas en estados avanzados para el administrador de empresa...\");\n\n      // Estados avanzados que siempre deben sincronizarse entre ambas vistas\n      const advancedStatuses = [APPLICATION_STATUS.POR_DISPERSAR, APPLICATION_STATUS.COMPLETED, APPLICATION_STATUS.EXPIRED, APPLICATION_STATUS.CANCELLED, APPLICATION_STATUS.REJECTED];\n\n      // Buscar aplicaciones con ambas aprobaciones que deberían estar en Por Dispersar\n      const needsStatusUpdate = applications.filter(app => {\n        // Si la aplicación ya está en un estado avanzado, respetar ese estado\n        if (advancedStatuses.includes(app.status)) {\n          return false;\n        }\n\n        // Verificar si tiene ambas aprobaciones\n        return app.approved_by_advisor && app.approved_by_company;\n      });\n      if (needsStatusUpdate.length > 0) {\n        console.log(`Encontradas ${needsStatusUpdate.length} aplicaciones que necesitan actualización de estado:`);\n        const updatedApps = [...appsWithApproval];\n        let hasChanges = false;\n        for (const app of needsStatusUpdate) {\n          console.log(`- Aplicación ${app.id} con ambas aprobaciones, actualizando a Por Dispersar`);\n          const index = updatedApps.findIndex(a => a.id === app.id);\n          if (index !== -1) {\n            updatedApps[index] = {\n              ...updatedApps[index],\n              status: APPLICATION_STATUS.POR_DISPERSAR\n            };\n            hasChanges = true;\n\n            // Actualizar en la base de datos si es necesario\n            if (onStatusChange) {\n              try {\n                await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n                console.log(`✅ Estado de aplicación ${app.id} actualizado a Por Dispersar`);\n              } catch (error) {\n                console.error(`Error al actualizar estado de ${app.id}:`, error);\n              }\n            }\n          }\n        }\n        if (hasChanges) {\n          console.log(\"Actualizando estado local con aplicaciones sincronizadas\");\n          setAppsWithApproval(updatedApps);\n        }\n      }\n    };\n\n    // Ejecutar la sincronización después de cargar las aplicaciones\n    syncAdvancedStatusCards();\n  }, [applications, isCompanyAdmin, onStatusChange]);\n\n  // Mejora para sincronizar estados entre vistas del asesor y administrador de empresa\n  useEffect(() => {\n    const syncCardStatusesWithAdvisorView = () => {\n      if (!isCompanyAdmin() || applications.length === 0) return;\n\n      // Obtener todas las aplicaciones que no están en los estados básicos de flujo de empresa\n      const applicationsWithAdvancedStatus = applications.filter(app => {\n        const isBasicStatus = [APPLICATION_STATUS.NEW, APPLICATION_STATUS.IN_REVIEW, APPLICATION_STATUS.APPROVED].includes(app.status);\n        return !isBasicStatus;\n      });\n      if (applicationsWithAdvancedStatus.length > 0) {\n        console.log(`Sincronizando ${applicationsWithAdvancedStatus.length} tarjetas con estados avanzados:`);\n\n        // Crear copia del estado actual\n        const updatedApps = [...appsWithApproval];\n        let hasChanges = false;\n\n        // Actualizar cada aplicación para que refleje el estado real\n        applicationsWithAdvancedStatus.forEach(app => {\n          const index = updatedApps.findIndex(a => a.id === app.id);\n          if (index !== -1 && updatedApps[index].status !== app.status) {\n            console.log(`- Sincronizando aplicación ${app.id} de estado '${updatedApps[index].status}' a '${app.status}'`);\n\n            // Actualizar el estado para que coincida con el estado real\n            updatedApps[index] = {\n              ...updatedApps[index],\n              status: app.status\n            };\n            hasChanges = true;\n          }\n        });\n\n        // Actualizar el estado solo si hubo cambios\n        if (hasChanges) {\n          console.log(\"Actualizando estado local con aplicaciones sincronizadas\");\n          setAppsWithApproval(updatedApps);\n        }\n      }\n    };\n\n    // Ejecutar la sincronización\n    syncCardStatusesWithAdvisorView();\n  }, [applications, appsWithApproval, isCompanyAdmin]);\n\n  // Agregar un nuevo useEffect para refrescar los estados de aprobación periódicamente\n  useEffect(() => {\n    // Función para refrescar los estados de aprobación desde la API\n    const refreshApprovalStatuses = async () => {\n      if (!applications || applications.length === 0) return;\n      console.log(\"Refrescando estados de aprobación desde la API...\");\n      try {\n        const updatedApps = [...appsWithApproval];\n        let hasChanges = false;\n        for (const app of updatedApps) {\n          var _app$approvalStatus16, _app$approvalStatus17;\n          // Obtener el estado de aprobación actualizado desde la API\n          const status = await getApprovalStatus(app.id);\n\n          // Si el estado es diferente al actual, actualizarlo\n          if (status && (status.approvedByAdvisor !== ((_app$approvalStatus16 = app.approvalStatus) === null || _app$approvalStatus16 === void 0 ? void 0 : _app$approvalStatus16.approvedByAdvisor) || status.approvedByCompany !== ((_app$approvalStatus17 = app.approvalStatus) === null || _app$approvalStatus17 === void 0 ? void 0 : _app$approvalStatus17.approvedByCompany))) {\n            console.log(`Actualización encontrada para app ${app.id}:`, {\n              actual: app.approvalStatus,\n              nuevo: status\n            });\n\n            // Actualizar el estado de aprobación\n            app.approvalStatus = status;\n            hasChanges = true;\n\n            // Si hay doble aprobación y no está en Por Dispersar, actualizarlo\n            if (status.approvedByAdvisor && status.approvedByCompany && app.status !== APPLICATION_STATUS.POR_DISPERSAR && app.status !== APPLICATION_STATUS.COMPLETED) {\n              console.log(`Aplicación ${app.id} tiene doble aprobación, moviendo a Por Dispersar`);\n\n              // Actualizar el estado localmente\n              app.status = APPLICATION_STATUS.POR_DISPERSAR;\n\n              // Actualizar en la BD\n              if (onStatusChange) {\n                try {\n                  await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n                } catch (error) {\n                  console.error(`Error actualizando estado a Por Dispersar:`, error);\n                }\n              }\n            }\n          }\n        }\n\n        // Si hubo cambios, actualizar el estado\n        if (hasChanges) {\n          console.log(\"Actualizando aplicaciones con estados de aprobación refrescados\");\n          setAppsWithApproval(updatedApps);\n        }\n      } catch (error) {\n        console.error(\"Error al refrescar estados de aprobación:\", error);\n      }\n    };\n\n    // Refrescar los estados inicialmente y cada 10 segundos\n    refreshApprovalStatuses();\n    const intervalId = setInterval(() => {\n      refreshApprovalStatuses();\n    }, 10000); // 10 segundos\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [applications, appsWithApproval, onStatusChange]);\n\n  // Mejora para funcionamiento con tarjetas existentes\n  useEffect(() => {\n    // Solo ejecutar para admin de empresa\n    if (!isCompanyAdmin() || applications.length === 0) return;\n    console.log(\"Verificando y sincronizando estados de tarjetas existentes...\");\n\n    // Encontrar tarjetas que deben mostrar el mismo estado que en la vista del asesor\n    const appsNeedingSync = applications.filter(app => {\n      // Si no está en uno de los estados básicos del flujo de admin de empresa,\n      // debe sincronizarse exactamente con la vista del asesor\n      const isBasicStatus = [APPLICATION_STATUS.NEW, APPLICATION_STATUS.IN_REVIEW, APPLICATION_STATUS.APPROVED].includes(app.status);\n      return !isBasicStatus;\n    });\n    if (appsNeedingSync.length > 0) {\n      console.log(`Encontradas ${appsNeedingSync.length} tarjetas que necesitan sincronización con vista del asesor`);\n\n      // Crear copia del estado actual\n      const updatedApps = [...appsWithApproval];\n      let hasChanges = false;\n\n      // Para cada aplicación que necesita sincronización\n      appsNeedingSync.forEach(app => {\n        const index = updatedApps.findIndex(a => a.id === app.id);\n\n        // Si encontramos la aplicación y su estado es diferente al que debería tener\n        if (index !== -1 && updatedApps[index].status !== app.status) {\n          console.log(`- Actualizando tarjeta ${app.id}: de '${updatedApps[index].status}' a '${app.status}'`);\n\n          // Actualizar el estado para que coincida con el de la vista del asesor\n          updatedApps[index] = {\n            ...updatedApps[index],\n            status: app.status\n          };\n          hasChanges = true;\n        }\n      });\n\n      // Si hubo cambios, actualizar el estado\n      if (hasChanges) {\n        console.log(\"Actualizando estados para sincronizar con vista del asesor\");\n        setAppsWithApproval(updatedApps);\n      }\n    }\n  }, [applications, appsWithApproval, isCompanyAdmin]);\n\n  // Añadir función para manejar la limpieza de filtros\n  const handleClearFilters = () => {\n    setSearchQuery('');\n    setStatusFilter('all');\n    setTypeFilter('all');\n    setDateFromFilter('');\n    setDateToFilter('');\n    setAmountMinFilter('');\n    setAmountMaxFilter('');\n  };\n\n  // Modificar función para filtrar las aplicaciones según los criterios\n  const getFilteredApplications = apps => {\n    return apps.filter(app => {\n      var _app$client_name, _app$client_email;\n      // Filtro por búsqueda de texto\n      if (searchQuery && !((_app$client_name = app.client_name) !== null && _app$client_name !== void 0 && _app$client_name.toLowerCase().includes(searchQuery.toLowerCase()) || (_app$client_email = app.client_email) !== null && _app$client_email !== void 0 && _app$client_email.toLowerCase().includes(searchQuery.toLowerCase()))) {\n        return false;\n      }\n\n      // Filtro por estado\n      if (statusFilter !== 'all' && app.status !== statusFilter) {\n        return false;\n      }\n\n      // Filtro por tipo de aplicación\n      if (typeFilter !== 'all' && app.application_type !== typeFilter) {\n        return false;\n      }\n\n      // Filtro por fecha desde\n      if (dateFromFilter) {\n        const appDate = new Date(app.created_at);\n        const fromDate = new Date(dateFromFilter);\n        if (appDate < fromDate) {\n          return false;\n        }\n      }\n\n      // Filtro por fecha hasta\n      if (dateToFilter) {\n        const appDate = new Date(app.created_at);\n        const toDate = new Date(dateToFilter);\n        // Ajustar para incluir todo el día\n        toDate.setHours(23, 59, 59, 999);\n        if (appDate > toDate) {\n          return false;\n        }\n      }\n\n      // Filtro por monto mínimo\n      if (amountMinFilter && parseFloat(amountMinFilter) > 0) {\n        const amount = app.amount || app.requested_amount || 0;\n        if (amount < parseFloat(amountMinFilter)) {\n          return false;\n        }\n      }\n\n      // Filtro por monto máximo\n      if (amountMaxFilter && parseFloat(amountMaxFilter) > 0) {\n        const amount = app.amount || app.requested_amount || 0;\n        if (amount > parseFloat(amountMaxFilter)) {\n          return false;\n        }\n      }\n      return true;\n    });\n  };\n  if (applications.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-base-200 p-6 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-medium text-center\",\n        children: \"No hay solicitudes para mostrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1949,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center text-gray-500 mt-2\",\n        children: \"No se encontraron solicitudes en el sistema\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1950,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1948,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full overflow-x-auto custom-scrollbar relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: customStyles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1957,\n      columnNumber: 7\n    }, this), processingAppId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"processing-toast\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"loading loading-spinner loading-sm text-primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1962,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-medium\",\n        children: \"Actualizando estado...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1963,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1961,\n      columnNumber: 9\n    }, this), autoTransitionMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auto-transition-toast\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"loading loading-spinner loading-sm text-success\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1970,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-medium\",\n        children: autoTransitionMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1971,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1969,\n      columnNumber: 9\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 alert alert-error shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          className: \"stroke-current flex-shrink-0 h-6 w-6\",\n          fill: \"none\",\n          viewBox: \"0 0 24 24\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            strokeWidth: \"2\",\n            d: \"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1979,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1978,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1981,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1977,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-none\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-sm\",\n          onClick: () => setErrorMessage(null),\n          children: \"Cerrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1984,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1983,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1976,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-base-100 border border-base-300 rounded-lg shadow-sm\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center p-4 border-b border-base-300\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative flex-grow mr-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Buscar por nombre o email...\",\n              className: \"input input-bordered w-full pr-10\",\n              value: searchQuery,\n              onChange: e => setSearchQuery(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1994,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none\",\n              children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                className: \"h-5 w-5 text-gray-400\",\n                fill: \"none\",\n                viewBox: \"0 0 24 24\",\n                stroke: \"currentColor\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  strokeLinecap: \"round\",\n                  strokeLinejoin: \"round\",\n                  strokeWidth: 2,\n                  d: \"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2003,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2002,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2001,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1993,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-ghost btn-sm\",\n            onClick: () => setIsFilterExpanded(!isFilterExpanded),\n            children: [isFilterExpanded ? 'Ocultar Filtros' : 'Mostrar Filtros', /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              className: `h-4 w-4 ml-2 transform ${isFilterExpanded ? 'rotate-180' : ''}`,\n              viewBox: \"0 0 20 20\",\n              fill: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                fillRule: \"evenodd\",\n                d: \"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\",\n                clipRule: \"evenodd\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2014,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2013,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2008,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1992,\n          columnNumber: 11\n        }, this), isFilterExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-base-200 p-4 rounded-lg\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-semibold mb-4\",\n            children: \"Filtros Avanzados\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2021,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-control\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"label\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label-text\",\n                  children: \"Estado\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2026,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2025,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                className: \"select select-bordered w-full\",\n                value: statusFilter,\n                onChange: e => setStatusFilter(e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"all\",\n                  children: \"Todos los estados\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2033,\n                  columnNumber: 21\n                }, this), Object.entries(APPLICATION_STATUS).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: value,\n                  children: STATUS_LABELS[value] || value\n                }, key, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2035,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2028,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2024,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-control\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"label\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label-text\",\n                  children: \"Tipo de Aplicaci\\xF3n\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2042,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2041,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                className: \"select select-bordered w-full\",\n                value: typeFilter,\n                onChange: e => setTypeFilter(e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"all\",\n                  children: \"Todos los tipos\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2049,\n                  columnNumber: 21\n                }, this), Object.entries(APPLICATION_TYPE_LABELS).map(([value, label]) => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: value,\n                  children: label\n                }, value, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2051,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2044,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2040,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-control\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"label\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label-text\",\n                  children: \"Fecha Desde\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2058,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2057,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                className: \"input input-bordered w-full\",\n                value: dateFromFilter,\n                onChange: e => setDateFromFilter(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2060,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2056,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-control\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"label\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label-text\",\n                  children: \"Fecha Hasta\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2070,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2069,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                className: \"input input-bordered w-full\",\n                value: dateToFilter,\n                onChange: e => setDateToFilter(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2072,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2068,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-control\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"label\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label-text\",\n                  children: \"Monto M\\xEDnimo\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2082,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2081,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                placeholder: \"0\",\n                className: \"input input-bordered w-full\",\n                value: amountMinFilter,\n                onChange: e => setAmountMinFilter(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2084,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2080,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-control\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"label\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label-text\",\n                  children: \"Monto M\\xE1ximo\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2095,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2094,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                placeholder: \"0\",\n                className: \"input input-bordered w-full\",\n                value: amountMaxFilter,\n                onChange: e => setAmountMaxFilter(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2097,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2093,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2023,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-end\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-ghost\",\n              onClick: handleClearFilters,\n              children: \"Limpiar Filtros\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2108,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2107,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2020,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1991,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1990,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 2xl:grid-cols-6 gap-4 pb-4 kanban-container p-4\",\n      style: {\n        minWidth: '1000px'\n      },\n      children: columns.map(column => {\n        // Filtrar aplicaciones para esta columna\n        const filteredApps = getFilteredApplications(column.applications);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `bg-base-100 rounded-xl shadow-md border-t-4 border-${column.color} border-l border-r border-b flex flex-col h-full kanban-column`,\n          onDragOver: e => {\n            handleDragOver(e, column.id);\n          },\n          onDragLeave: e => {\n            e.currentTarget.classList.remove('drag-over');\n          },\n          onDrop: e => {\n            handleDrop(e, column.id);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `text-center py-3 px-4 font-bold rounded-t-lg flex items-center justify-between bg-${column.color} bg-opacity-10`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: `text-${column.color} font-bold text-lg`,\n              children: column.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2142,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `badge badge-${column.color} badge-lg`,\n              children: filteredApps.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2143,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2141,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-3 space-y-3 min-h-[500px] max-h-[calc(100vh-220px)] overflow-y-auto custom-scrollbar flex-grow\",\n            children: filteredApps.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center justify-center h-full opacity-50 border-2 border-dashed border-base-300 rounded-lg p-6\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                  xmlns: \"http://www.w3.org/2000/svg\",\n                  className: \"h-12 w-12 mx-auto text-gray-400\",\n                  fill: \"none\",\n                  viewBox: \"0 0 24 24\",\n                  stroke: \"currentColor\",\n                  children: /*#__PURE__*/_jsxDEV(\"path\", {\n                    strokeLinecap: \"round\",\n                    strokeLinejoin: \"round\",\n                    strokeWidth: 1,\n                    d: \"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2151,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2150,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm mt-2\",\n                  children: \"No hay solicitudes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2153,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2149,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2148,\n              columnNumber: 19\n            }, this) : filteredApps.map((app, index) => {\n              var _app$approvalStatus18, _app$approvalStatus19;\n              const isCardDraggable = canDragCard(app) && app.id !== processingAppId;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                \"data-tip\": getDragTooltip(app),\n                className: `card shadow hover:shadow-lg transition-all ${getCardColor(app)} border-l-4 border-t border-r border-b hover:border-primary kanban-card relative ${app.id === processingAppId ? 'processing' : ''} ${app.isMoving ? 'opacity-90' : ''} ${getDraggableClasses(app)}`,\n                draggable: isCardDraggable,\n                onDragStart: isCardDraggable ? e => handleDragStart(e, app, index) : undefined,\n                onDragEnd: isCardDraggable ? handleDragEnd : undefined,\n                style: {\n                  animation: app.id === processingAppId ? 'processingPulse 1.5s infinite' : ''\n                },\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-body p-4\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"flex justify-between items-start mb-2\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"flex flex-col\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"font-semibold mb-1\",\n                        children: app.client_name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2174,\n                        columnNumber: 31\n                      }, this), renderProductLabel(app.application_type || '', column.color)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2173,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2172,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"mt-1\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"text-sm text-gray-600 mb-2 flex items-center\",\n                      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                        xmlns: \"http://www.w3.org/2000/svg\",\n                        className: \"h-4 w-4 mr-1 inline flex-shrink-0\",\n                        fill: \"none\",\n                        viewBox: \"0 0 24 24\",\n                        stroke: \"currentColor\",\n                        children: /*#__PURE__*/_jsxDEV(\"path\", {\n                          strokeLinecap: \"round\",\n                          strokeLinejoin: \"round\",\n                          strokeWidth: 2,\n                          d: \"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2183,\n                          columnNumber: 33\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2182,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"truncate max-w-[180px] font-medium\",\n                        children: app.company_name || \"Sin empresa\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2185,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2181,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"text-xs text-gray-500 mb-2 flex items-center\",\n                      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                        xmlns: \"http://www.w3.org/2000/svg\",\n                        className: \"h-4 w-4 mr-1 inline flex-shrink-0\",\n                        fill: \"none\",\n                        viewBox: \"0 0 24 24\",\n                        stroke: \"currentColor\",\n                        children: /*#__PURE__*/_jsxDEV(\"path\", {\n                          strokeLinecap: \"round\",\n                          strokeLinejoin: \"round\",\n                          strokeWidth: 2,\n                          d: \"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2193,\n                          columnNumber: 33\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2192,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        children: app.created_at ? formatDate(app.created_at, 'datetime') : 'N/A'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2195,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2191,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"flex items-center mb-3\",\n                      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                        xmlns: \"http://www.w3.org/2000/svg\",\n                        className: \"h-4 w-4 mr-1 text-primary flex-shrink-0\",\n                        fill: \"none\",\n                        viewBox: \"0 0 24 24\",\n                        stroke: \"currentColor\",\n                        children: /*#__PURE__*/_jsxDEV(\"path\", {\n                          strokeLinecap: \"round\",\n                          strokeLinejoin: \"round\",\n                          strokeWidth: 2,\n                          d: \"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2203,\n                          columnNumber: 33\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2202,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-base font-bold text-primary\",\n                        children: formatCurrency(app.requested_amount || 0)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2205,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2201,\n                      columnNumber: 29\n                    }, this), renderApprovalIndicators(app), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"card-actions justify-end mt-3\",\n                      children: [isAdvisor() && app.status === APPLICATION_STATUS.POR_DISPERSAR && /*#__PURE__*/_jsxDEV(\"button\", {\n                        onClick: e => {\n                          e.stopPropagation(); // Evitar navegación al detalle\n                          e.preventDefault();\n                          if (onStatusChange) {\n                            setProcessingAppId(app.id);\n                            onStatusChange(app, APPLICATION_STATUS.COMPLETED).then(() => {\n                              setAutoTransitionMessage(`Solicitud ${app.id} marcada como Completada correctamente`);\n                              setTimeout(() => setAutoTransitionMessage(null), 3000);\n                            }).catch(error => {\n                              setErrorMessage(`Error al marcar como completado: ${error.message}`);\n                            }).finally(() => {\n                              setProcessingAppId(null);\n                            });\n                          }\n                        },\n                        className: \"btn btn-sm btn-accent w-full mb-2\",\n                        children: \"Marcar como Dispersado\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2216,\n                        columnNumber: 33\n                      }, this), isAdvisor() && ((_app$approvalStatus18 = app.approvalStatus) === null || _app$approvalStatus18 === void 0 ? void 0 : _app$approvalStatus18.approvedByAdvisor) && ((_app$approvalStatus19 = app.approvalStatus) === null || _app$approvalStatus19 === void 0 ? void 0 : _app$approvalStatus19.approvedByCompany) && app.status !== APPLICATION_STATUS.POR_DISPERSAR && app.status !== APPLICATION_STATUS.COMPLETED && /*#__PURE__*/_jsxDEV(\"button\", {\n                        onClick: e => {\n                          e.stopPropagation();\n                          e.preventDefault();\n                          if (onStatusChange && !processingAppId) {\n                            setProcessingAppId(app.id);\n                            onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR).then(() => {\n                              setAutoTransitionMessage(`Solicitud movida a Por Dispersar`);\n                              setTimeout(() => setAutoTransitionMessage(null), 3000);\n                            }).catch(error => {\n                              console.error(\"Error al mover a Por Dispersar:\", error);\n                            }).finally(() => {\n                              setTimeout(() => setProcessingAppId(null), 500);\n                            });\n                          }\n                        },\n                        className: \"btn btn-xs btn-accent w-full mt-2 mb-2\",\n                        children: \"Mover a Por Dispersar\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2246,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(Link, {\n                        to: `/applications/${app.id}`,\n                        className: \"btn btn-sm btn-primary w-full\",\n                        children: \"Ver Detalle\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2270,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2213,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2179,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2171,\n                  columnNumber: 25\n                }, this)\n              }, app.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2160,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2146,\n            columnNumber: 15\n          }, this)]\n        }, column.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2127,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1956,\n    columnNumber: 5\n  }, this);\n};\n_s(KanbanBoard, \"jeikJ2aOhX6FCMChjUfyCpQ2EaM=\", false, function () {\n  return [usePermissions, useAuth];\n});\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","Link","getApprovalStatus","approveByAdvisor","approveByCompany","APPLICATION_STATUS","STATUS_LABELS","usePermissions","useAuth","TABLES","formatDate","APPLICATION_TYPE_LABELS","jsxDEV","_jsxDEV","APPLICATION_HISTORY_TABLE","APPLICATION_HISTORY","escapeSQLString","str","replace","KanbanBoard","applications","onStatusChange","_s","isLoading","setIsLoading","errorMessage","setErrorMessage","appsWithApproval","setAppsWithApproval","processingAppId","setProcessingAppId","shouldFilterByEntity","getEntityFilter","isAdvisor","isCompanyAdmin","user","dragItemRef","dragImageRef","draggedItemIndexRef","draggedItemNewStatusRef","autoTransitionMessage","setAutoTransitionMessage","searchQuery","setSearchQuery","statusFilter","setStatusFilter","typeFilter","setTypeFilter","dateFromFilter","setDateFromFilter","dateToFilter","setDateToFilter","amountMinFilter","setAmountMinFilter","amountMaxFilter","setAmountMaxFilter","isFilterExpanded","setIsFilterExpanded","loadApprovalStatuses","length","appsWithStatus","Promise","all","map","app","status","id","approvalStatus","approvedByAdvisor","approvedByCompany","company_review_status","IN_REVIEW","error","console","setupApplications","appsWithApprovalStatuses","isMoving","sortedApps","sort","a","b","dateA","Date","created_at","dateB","getTime","newApplications","filter","isNew","createdAt","now","hoursElapsed","isRecent","log","updatedApps","forEach","newApp","index","findIndex","NEW","checkForNewApplications","oneDayAgo","setHours","getHours","recentApps","hasChanges","recentApp","push","approved_by_advisor","approved_by_company","needsUpdate","newStatus","groupedApplications","initialGroups","Object","values","reduce","acc","targetStatus","warn","sharedStatuses","POR_DISPERSAR","COMPLETED","EXPIRED","CANCELLED","REJECTED","includes","APPROVED","_app$approvalStatus","_app$approvalStatus2","_app$approvalStatus3","_app$approvalStatus4","_app$approvalStatus5","columns","statusGroups","currentStatus","_app$approvalStatus6","_app$approvalStatus7","advancedStatuses","PENDING","columnDefinitions","title","color","updateLocalApprovalStatus","applicationId","updates","currentApps","appIndex","updatedApp","currentApprovalStatus","newApprovalStatus","undefined","JSON","stringify","handleDragStart","e","application","idx","current","currentTarget","dataTransfer","setData","effectAllowed","cloneNode","style","position","top","opacity","transform","width","offsetWidth","document","body","appendChild","rect","getBoundingClientRect","setDragImage","classList","add","handleDragEnd","remove","removeChild","handleDragOver","columnStatus","preventDefault","stopPropagation","dropEffect","contains","querySelectorAll","col","canDragCard","_app$approvalStatus8","_app$approvalStatus9","restrictedStatuses","_app$approvalStatus10","_app$approvalStatus11","handleDrop","validStatuses","getData","find","oldStatus","allowedTargetStates","_updatedApp$approvalS","entityId","company_id","query","APPLICATIONS","response","fetch","method","headers","result","json","Error","data","historyQuery","message","_updatedApp$approvalS2","setTimeout","prev","advisor_id","appToPatch","formatCurrency","amount","Intl","NumberFormat","currency","format","renderApprovalIndicators","hasFullApproval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","onClick","getProductLabel","type","labels","renderProductLabel","getCardColor","toLowerCase","customStyles","getDraggableClasses","isDraggable","getDragTooltip","_app$approvalStatus12","_app$approvalStatus13","moveFullyApprovedCards","fullyApprovedCards","_app$approvalStatus14","_app$approvalStatus15","timer","clearTimeout","syncAdvancedStatusCards","needsStatusUpdate","syncCardStatusesWithAdvisorView","applicationsWithAdvancedStatus","isBasicStatus","refreshApprovalStatuses","_app$approvalStatus16","_app$approvalStatus17","actual","nuevo","intervalId","setInterval","clearInterval","appsNeedingSync","handleClearFilters","getFilteredApplications","apps","_app$client_name","_app$client_email","client_name","client_email","application_type","appDate","fromDate","toDate","parseFloat","requested_amount","placeholder","value","onChange","target","fillRule","clipRule","entries","key","label","minWidth","column","filteredApps","onDragOver","onDragLeave","onDrop","_app$approvalStatus18","_app$approvalStatus19","isCardDraggable","draggable","onDragStart","onDragEnd","animation","company_name","then","catch","finally","to","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/components/ui/KanbanBoard.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Application, getApprovalStatus, approveByAdvisor, approveByCompany } from '../../services/applicationService';\nimport { STATUS_COLORS, APPLICATION_STATUS, STATUS_LABELS } from '../../utils/constants/statuses';\nimport { usePermissions } from '../../contexts/PermissionsContext';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { TABLES } from '../../utils/constants/tables';\nimport { useNotifications } from '../../contexts/NotificationContext';\nimport { formatCurrency, formatDate } from '../../utils/formatters';\nimport { APPLICATION_TYPE_LABELS } from '../../utils/constants/applications';\n\n// Verificar si APPLICATION_HISTORY tabla está definida\nconst APPLICATION_HISTORY_TABLE = TABLES.APPLICATION_HISTORY || 'application_history';\n\n// Función para escapar cadenas de texto para SQL\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\ninterface KanbanBoardProps {\n  applications: Application[];\n  onStatusChange?: (application: Application, newStatus: string) => Promise<void>;\n}\n\n// Interfaz para el estado de aprobación\ninterface ApprovalStatus {\n  approvedByAdvisor: boolean;\n  approvedByCompany: boolean;\n}\n\n// Crear un tipo para aplicaciones con su estado de aprobación\ntype ApplicationWithApproval = Application & {\n  approvalStatus?: ApprovalStatus;\n  isMoving?: boolean;\n  targetStatus?: string;\n  company_review_status?: boolean;\n};\n\nconst KanbanBoard: React.FC<KanbanBoardProps> = ({ applications, onStatusChange }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const [appsWithApproval, setAppsWithApproval] = useState<ApplicationWithApproval[]>([]);\n  const [processingAppId, setProcessingAppId] = useState<string | null>(null);\n  const { shouldFilterByEntity, getEntityFilter, isAdvisor, isCompanyAdmin } = usePermissions();\n  const { user } = useAuth();\n  const dragItemRef = useRef<HTMLDivElement | null>(null);\n  const dragImageRef = useRef<HTMLDivElement | null>(null);\n  const draggedItemIndexRef = useRef<number>(-1);\n  const draggedItemNewStatusRef = useRef<string>('');\n  const [autoTransitionMessage, setAutoTransitionMessage] = useState<string | null>(null);\n  \n  // Añadir estados para filtros\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [typeFilter, setTypeFilter] = useState<string>('all');\n  const [dateFromFilter, setDateFromFilter] = useState<string>('');\n  const [dateToFilter, setDateToFilter] = useState<string>('');\n  const [amountMinFilter, setAmountMinFilter] = useState<string>('');\n  const [amountMaxFilter, setAmountMaxFilter] = useState<string>('');\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  \n  // Primero, modificar useEffect para cargar aplicaciones con datos de aprobación\n  useEffect(() => {\n    const loadApprovalStatuses = async () => {\n      if (!applications || applications.length === 0) return;\n      \n      setIsLoading(true);\n      try {\n        const appsWithStatus: ApplicationWithApproval[] = await Promise.all(\n          applications.map(async (app) => {\n            // Obtener el estado de aprobación real de la API\n            const status = await getApprovalStatus(app.id);\n            \n            // Devolver la aplicación con su estado de aprobación\n            return {\n              ...app,\n              approvalStatus: status || { approvedByAdvisor: false, approvedByCompany: false },\n              // Para administradores de empresa, agregar un campo que maneja su \"estado virtual\"\n              company_review_status: isCompanyAdmin() ? \n                // Si la aplicación está en revisión o aprobada por empresa, marcarla\n                (app.status === APPLICATION_STATUS.IN_REVIEW || \n                 (status && status.approvedByCompany)) : false\n            };\n          })\n        );\n        \n        setAppsWithApproval(appsWithStatus);\n      } catch (error) {\n        console.error(\"Error loading approval statuses:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    loadApprovalStatuses();\n  }, [applications]);\n  \n  // Modificar cómo se transforman las aplicaciones para ordenarlas de más viejas a más recientes\n  // en el useEffect donde se establece appsWithApproval alrededor de la línea 100-150\n  useEffect(() => {\n    const setupApplications = async () => {\n      const appsWithApprovalStatuses = await Promise.all(\n        applications.map(async (app) => {\n          // Cargar estado de aprobación si aún no está cargado\n          const approvalStatus = await getApprovalStatus(app.id);\n          \n          return {\n            ...app,\n            approvalStatus,\n            isMoving: false\n          };\n        })\n      );\n      \n      // Ordenar de más viejas a más recientes por fecha de creación\n      const sortedApps = [...appsWithApprovalStatuses].sort((a, b) => {\n        const dateA = new Date(a.created_at);\n        const dateB = new Date(b.created_at);\n        return dateA.getTime() - dateB.getTime(); // Orden ascendente (más viejas primero)\n      });\n      \n      setAppsWithApproval(sortedApps);\n    };\n    \n    setupApplications();\n  }, [applications]);\n  \n  // Actualizar la lógica para nuevas aplicaciones para incluir todas las nuevas notificaciones\n  useEffect(() => {\n    // Verificar si hay aplicaciones que deberían estar en \"nuevo\" (recién creadas)\n    const newApplications = applications.filter(app => {\n      // Identificar aplicaciones recién creadas (menos de 24 horas)\n      const isNew = !app.status || app.status === 'pending' || app.status === 'solicitud';\n      const createdAt = new Date(app.created_at);\n      const now = new Date();\n      const hoursElapsed = (now.getTime() - createdAt.getTime()) / (1000 * 60 * 60);\n      const isRecent = hoursElapsed < 72;\n      \n      return isRecent && (isNew || app.status === 'new');\n    });\n    \n    // Si hay aplicaciones nuevas sin status o con status pendiente/solicitud, asignarles \"nuevo\"\n    if (newApplications.length > 0) {\n      console.log('Aplicaciones nuevas detectadas:', newApplications);\n      const updatedApps = [...appsWithApproval];\n      newApplications.forEach(newApp => {\n        const index = updatedApps.findIndex(app => app.id === newApp.id);\n        if (index !== -1 && (!updatedApps[index].status || updatedApps[index].status === 'pending' || updatedApps[index].status === 'solicitud')) {\n          updatedApps[index] = {\n            ...updatedApps[index],\n            status: APPLICATION_STATUS.NEW\n          };\n          console.log(`Aplicación ${newApp.id} movida a estado NUEVO`);\n        }\n      });\n      \n      setAppsWithApproval(updatedApps);\n    }\n  }, [applications]); // Usar applications como dependencia en lugar de appsWithApproval\n\n  // Asegurar que nuevas aplicaciones se muestren inmediatamente\n  // añadiendo una función de comprobación en el useEffect principal\n  useEffect(() => {\n    const checkForNewApplications = async () => {\n      // Verificar que tenemos usuario y permisos\n      if (!user?.id) return;\n      \n      try {\n        // Ejecutar esta comprobación solo si somos admin de empresa\n        if (isCompanyAdmin() && applications.length > 0) {\n          // Obtener la fecha de hace 24 horas\n          const oneDayAgo = new Date();\n          oneDayAgo.setHours(oneDayAgo.getHours() - 24);\n          \n          // Buscar aplicaciones creadas en las últimas 24 horas\n          const recentApps = applications.filter(app => {\n            const createdAt = new Date(app.created_at);\n            return createdAt >= oneDayAgo;\n          });\n          \n          // Si hay aplicaciones recientes, asegurarnos de que aparezcan en el tablero\n          if (recentApps.length > 0) {\n            console.log(`Encontradas ${recentApps.length} aplicaciones recientes`);\n            \n            // Asegurar que todas estas aplicaciones están en nuestro estado local\n            // y que tienen el estado correcto (NEW si no tienen un estado específico)\n            const updatedApps = [...appsWithApproval];\n            let hasChanges = false;\n            \n            recentApps.forEach(recentApp => {\n              const index = updatedApps.findIndex(app => app.id === recentApp.id);\n              \n              // Si la aplicación no está en nuestro estado, agregarla\n              if (index === -1) {\n                console.log(`Agregando aplicación nueva ${recentApp.id} al estado`);\n                updatedApps.push({\n                  ...recentApp,\n                  status: recentApp.status || APPLICATION_STATUS.NEW,\n                  approvalStatus: {\n                    approvedByAdvisor: recentApp.approved_by_advisor || false,\n                    approvedByCompany: recentApp.approved_by_company || false\n                  }\n                });\n                hasChanges = true;\n              } \n              // Si no tiene estado o está en estado pendiente/solicitud, asignarle NEW\n              else if (!updatedApps[index].status || updatedApps[index].status === 'pending' || updatedApps[index].status === 'solicitud') {\n                console.log(`Actualizando estado de ${recentApp.id} a NUEVO`);\n                updatedApps[index] = {\n                  ...updatedApps[index],\n                  status: APPLICATION_STATUS.NEW\n                };\n                hasChanges = true;\n              }\n            });\n            \n            // Actualizar el estado solo si hubo cambios\n            if (hasChanges) {\n              setAppsWithApproval(updatedApps);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error verificando nuevas aplicaciones:', error);\n      }\n    };\n    \n    // Ejecutar la función de comprobación\n    checkForNewApplications();\n  }, [applications, user?.id, isCompanyAdmin]);\n  \n  // Modificar la lógica para actualizar todas las aplicaciones con estado \"pending\" o \"solicitud\" a \"new\"\n  useEffect(() => {\n    // Si no hay aplicaciones, no hacer nada\n    if (!applications || applications.length === 0) return;\n    \n    console.log('Verificando estado de aplicaciones:', applications.map(a => ({ id: a.id, status: a.status })));\n    \n    // Actualizar solo las aplicaciones con estado específico a \"new\" sin afectar las demás\n    const updatedApps = [...appsWithApproval];\n    let hasChanges = false;\n    \n    applications.forEach(app => {\n      const index = updatedApps.findIndex(a => a.id === app.id);\n      const needsUpdate = \n        !app.status || \n        app.status === 'pending' || \n        app.status === 'solicitud';\n      \n      // Solo actualizar si el estado necesita cambiar a \"new\"\n      if (index !== -1 && needsUpdate) {\n        console.log(`Actualizando estado de aplicación ${app.id} de \"${app.status}\" a \"new\"`);\n        updatedApps[index] = {\n          ...updatedApps[index],\n          status: APPLICATION_STATUS.NEW\n        };\n        hasChanges = true;\n      } else if (index === -1) {\n        // Si la aplicación no está en el array, agregarla con su estado original\n        // o \"new\" si no tiene estado o es pending/solicitud\n        const newStatus = needsUpdate ? APPLICATION_STATUS.NEW : (app.status as Application['status']);\n        console.log(`Agregando aplicación ${app.id} con estado \"${newStatus}\"`);\n        updatedApps.push({\n          ...app,\n          status: newStatus,\n          approvalStatus: {\n            approvedByAdvisor: app.approved_by_advisor || false,\n            approvedByCompany: app.approved_by_company || false\n          }\n        });\n        hasChanges = true;\n      }\n      // Si existe y no necesita actualización, la dejamos como está\n    });\n    \n    if (hasChanges) {\n      console.log('Actualizando aplicaciones:');\n      updatedApps.forEach(app => console.log(`- ${app.id}: ${app.status}`));\n      setAppsWithApproval(updatedApps);\n    }\n  }, [applications]);\n  \n  // Modificar la forma en que agrupamos las aplicaciones por estado para los administradores de empresa\n  // para crear un flujo de trabajo independiente\n  const groupedApplications = React.useMemo(() => {\n    // Crear un objeto con todos los estados posibles como claves y arrays vacíos como valores\n    const initialGroups = Object.values(APPLICATION_STATUS).reduce((acc, status) => {\n      acc[status] = [];\n      return acc as Record<string, ApplicationWithApproval[]>;\n    }, {} as Record<string, ApplicationWithApproval[]>);\n    \n    // Para los administradores de empresa, usaremos un agrupamiento virtual basado en las aprobaciones\n    if (isCompanyAdmin()) {\n    return appsWithApproval.reduce((acc, app) => {\n        // Si está en movimiento, respetar el estado de destino\n      if (app.isMoving && app.targetStatus) {\n          // Verificar que el estado existe antes de intentar agregar la aplicación\n          if (acc[app.targetStatus]) {\n        acc[app.targetStatus].push(app);\n      } else {\n            // Si el estado no existe, usar NEW como fallback\n            console.warn(`Estado inválido detectado: ${app.targetStatus}, usando NEW como fallback`);\n            acc[APPLICATION_STATUS.NEW].push(app);\n          }\n          return acc;\n        }\n        \n        // Normalizar estados \"pending\" y \"solicitud\" a \"new\"\n        if (!app.status || app.status === 'pending' || app.status === 'solicitud') {\n          acc[APPLICATION_STATUS.NEW].push(app);\n          return acc;\n        }\n        \n        // Estados compartidos que siempre se muestran igual para todos los usuarios\n        const sharedStatuses = [\n          APPLICATION_STATUS.POR_DISPERSAR,\n          APPLICATION_STATUS.COMPLETED,\n          APPLICATION_STATUS.EXPIRED,\n          APPLICATION_STATUS.CANCELLED,\n          APPLICATION_STATUS.REJECTED\n        ];\n        \n        if (sharedStatuses.includes(app.status as APPLICATION_STATUS)) {\n          // Verificar que el estado existe\n          if (acc[app.status]) {\n            acc[app.status].push(app);\n          } else {\n            console.warn(`Estado compartido inválido detectado: ${app.status}, usando NEW como fallback`);\n            acc[APPLICATION_STATUS.NEW].push(app);\n          }\n          return acc;\n        }\n        \n        // Para los estados independientes, usar la lógica personalizada para admin de empresa\n        if (app.status === APPLICATION_STATUS.APPROVED) {\n          // Si está aprobada por la empresa pero no por el asesor, mostrarla en \"aprobado por mi\" \n          if (app.approvalStatus?.approvedByCompany && !app.approvalStatus.approvedByAdvisor) {\n            acc[APPLICATION_STATUS.APPROVED].push(app);\n            return acc;\n          }\n          \n          // Si está aprobada por ambos, y el estado real es aprobado, mostrarla en aprobado\n          if (app.approvalStatus?.approvedByCompany && app.approvalStatus?.approvedByAdvisor) {\n            acc[APPLICATION_STATUS.APPROVED].push(app);\n            return acc;\n          }\n          \n          // En otros casos, mostrarla en el estado que tenga según otras reglas\n        }\n        \n        // Si está en revisión según la empresa\n        if (app.status === APPLICATION_STATUS.IN_REVIEW) {\n          // Si no está aprobada por la empresa, mostrarla en \"en revisión\"\n          if (!app.approvalStatus?.approvedByCompany) {\n            acc[APPLICATION_STATUS.IN_REVIEW].push(app);\n            return acc;\n          }\n          \n          // Si está aprobada por la empresa, mostrarla en \"aprobado por mi\"\n          acc[APPLICATION_STATUS.APPROVED].push(app);\n          return acc;\n        }\n        \n        // Para nuevas aplicaciones sin aprobación\n        if (app.status === APPLICATION_STATUS.NEW) {\n          // Si está aprobada por la empresa, mostrarla en \"aprobado por mi\"\n          if (app.approvalStatus?.approvedByCompany) {\n            acc[APPLICATION_STATUS.APPROVED].push(app);\n            return acc;\n          }\n          \n          // Si está en revisión por la empresa\n          if (app.company_review_status === true) {\n            acc[APPLICATION_STATUS.IN_REVIEW].push(app);\n            return acc;\n          }\n          \n          // Si no tiene marca especial, mostrarla como nueva\n          acc[APPLICATION_STATUS.NEW].push(app);\n          return acc;\n        }\n        \n        // Para cualquier otro caso, usar el estado real si existe, o NEW como fallback\n        if (acc[app.status]) {\n          acc[app.status].push(app);\n        } else {\n          console.warn(`Estado desconocido detectado: ${app.status}, usando NEW como fallback`);\n          acc[APPLICATION_STATUS.NEW].push(app);\n        }\n        return acc;\n      }, initialGroups);\n    }\n    \n    // Para asesores y otros roles, usamos el agrupamiento normal basado en estado\n    return appsWithApproval.reduce((acc, app) => {\n      if (app.isMoving && app.targetStatus) {\n        // Si está en movimiento, verificar que el estado de destino existe\n        if (acc[app.targetStatus]) {\n          acc[app.targetStatus].push(app);\n        } else {\n          console.warn(`Estado de destino inválido: ${app.targetStatus}, usando NEW como fallback`);\n          acc[APPLICATION_STATUS.NEW].push(app);\n        }\n      } else {\n        // Si no, usar el estado normal, normalizando \"pending\" y \"solicitud\" a \"new\"\n        let status = app.status || 'new';\n        \n        // Normalizar estados \"pending\" y \"solicitud\" a \"new\"\n        if (status === 'pending' || status === 'solicitud') {\n          status = APPLICATION_STATUS.NEW;\n        }\n        \n        // Verificar que el estado existe antes de agregar\n        if (acc[status]) {\n        acc[status].push(app);\n        } else {\n          console.warn(`Estado inválido detectado: ${status}, usando NEW como fallback`);\n          acc[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      return acc;\n    }, initialGroups);\n  }, [appsWithApproval, isCompanyAdmin, isAdvisor]);\n  \n  // Modificar la lógica de agrupamiento de aplicaciones para separar flujos\n  // Esta es la parte clave que separa completamente los flujos\n  const columns = useMemo(() => {\n    // Estados estándar del Kanban\n    const statusGroups: Record<string, ApplicationWithApproval[]> = {\n      [APPLICATION_STATUS.NEW]: [],\n      [APPLICATION_STATUS.IN_REVIEW]: [],\n      [APPLICATION_STATUS.APPROVED]: [],\n      [APPLICATION_STATUS.POR_DISPERSAR]: [],\n      [APPLICATION_STATUS.COMPLETED]: [],\n      [APPLICATION_STATUS.EXPIRED]: [],\n      [APPLICATION_STATUS.REJECTED]: [],\n      [APPLICATION_STATUS.CANCELLED]: []\n    };\n    \n    // Agrupar aplicaciones por estado\n    appsWithApproval.forEach(app => {\n      // Asegurarnos de que el app.status no es undefined antes de usarlo\n      const currentStatus = app.status || APPLICATION_STATUS.NEW;\n      \n      // Lógica específica para administradores de empresa - flujo sincronizado\n      if (isCompanyAdmin()) {\n        // Los estados avanzados siempre deben mostrarse en su columna correspondiente\n        // independientemente del flujo (esto garantiza que se sincronicen con la vista del asesor)\n        const advancedStatuses = [\n          APPLICATION_STATUS.POR_DISPERSAR,\n          APPLICATION_STATUS.COMPLETED,\n          APPLICATION_STATUS.EXPIRED,\n          APPLICATION_STATUS.CANCELLED,\n          APPLICATION_STATUS.REJECTED\n        ];\n        \n        if (advancedStatuses.includes(currentStatus as APPLICATION_STATUS)) {\n          console.log(`Mostrando tarjeta ${app.id} en estado avanzado: ${currentStatus}`);\n          statusGroups[currentStatus].push(app);\n          return;\n        }\n        \n        // Para los estados básicos, aplicar la lógica personalizada del admin de empresa\n        \n        // 1. Si está aprobada por empresa -> va a \"Aprobado por mi\"\n        if (app.approvalStatus?.approvedByCompany) {\n          statusGroups[APPLICATION_STATUS.APPROVED].push(app);\n        }\n        // 2. Si está en revisión por empresa -> va a \"En Revisión\"\n        else if (app.company_review_status) {\n          statusGroups[APPLICATION_STATUS.IN_REVIEW].push(app);\n        }\n        // 3. Si no está ni en revisión ni aprobada por empresa -> va a \"Nuevo\"\n        else if (currentStatus === APPLICATION_STATUS.NEW || \n                currentStatus === APPLICATION_STATUS.PENDING || \n                (!app.company_review_status && !app.approvalStatus?.approvedByCompany)) {\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      // Lógica para asesores - flujo normal basado en estado real\n      else if (isAdvisor()) {\n        if (currentStatus) {\n          // Verificar que el estado existe en nuestros grupos antes de agregar\n          if (statusGroups[currentStatus]) {\n            statusGroups[currentStatus].push(app);\n          } else {\n            // Si no existe, log warning y usar NEW como fallback\n            console.warn(`Estado desconocido en columns para asesor: ${currentStatus}, usando NEW como fallback`);\n            statusGroups[APPLICATION_STATUS.NEW].push(app);\n          }\n        } else {\n          // Si no tiene estado, ponerla en \"Nuevo\"\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      // Lógica para otros roles\n      else {\n        if (currentStatus) {\n          // Verificar que el estado existe en nuestros grupos\n          if (statusGroups[currentStatus]) {\n            statusGroups[currentStatus].push(app);\n          } else {\n            // Si no existe, usar NEW como fallback\n            console.warn(`Estado desconocido en columns para otros roles: ${currentStatus}, usando NEW como fallback`);\n            statusGroups[APPLICATION_STATUS.NEW].push(app);\n          }\n        } else {\n          // Si no tiene estado, ponerla en \"Nuevo\"\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n    });\n    \n    // Definición de colores para cada columna\n    const columnDefinitions = [\n      { id: APPLICATION_STATUS.NEW, title: 'Nuevo', color: 'warning', applications: statusGroups[APPLICATION_STATUS.NEW] },\n      { id: APPLICATION_STATUS.IN_REVIEW, title: 'En Revisión', color: 'info', applications: statusGroups[APPLICATION_STATUS.IN_REVIEW] },\n      { id: APPLICATION_STATUS.APPROVED, title: 'Aprobado por mi', color: 'success', applications: statusGroups[APPLICATION_STATUS.APPROVED] },\n      { id: APPLICATION_STATUS.POR_DISPERSAR, title: 'Por Dispersar', color: 'accent', applications: statusGroups[APPLICATION_STATUS.POR_DISPERSAR] },\n      { id: APPLICATION_STATUS.COMPLETED, title: 'Completado', color: 'primary', applications: statusGroups[APPLICATION_STATUS.COMPLETED] },\n      { id: APPLICATION_STATUS.EXPIRED, title: 'Expirado', color: 'error', applications: statusGroups[APPLICATION_STATUS.EXPIRED] },\n      { id: APPLICATION_STATUS.REJECTED, title: 'Rechazado', color: 'error', applications: statusGroups[APPLICATION_STATUS.REJECTED] },\n      { id: APPLICATION_STATUS.CANCELLED, title: 'Cancelado', color: 'neutral', applications: statusGroups[APPLICATION_STATUS.CANCELLED] }\n    ];\n    \n    return columnDefinitions;\n  }, [appsWithApproval, isAdvisor, isCompanyAdmin]);\n  \n  // Función para actualizar localmente el estado de aprobación de una aplicación\n  const updateLocalApprovalStatus = (applicationId: string, updates: Partial<{ approvedByAdvisor: boolean, approvedByCompany: boolean }>, newStatus?: string) => {\n    console.log(`Actualizando estado de aprobación para ${applicationId}:`, updates);\n    \n    // Crear una copia del estado actual\n    const currentApps = [...appsWithApproval];\n    const appIndex = currentApps.findIndex(app => app.id === applicationId);\n    \n    if (appIndex === -1) {\n      console.warn(`No se encontró la aplicación ${applicationId} para actualizar approval status`);\n      return;\n    }\n    \n    // Crear copia profunda de la aplicación para evitar mutaciones directas\n    const updatedApp = { ...currentApps[appIndex] };\n    \n    // Asegurar que el objeto approvalStatus exista\n    const currentApprovalStatus = updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false };\n    \n    // Crear el nuevo objeto de aprobación, asegurando que mantenemos los valores existentes\n    // a menos que se especifiquen explícitamente en el parámetro updates\n    const newApprovalStatus = {\n      approvedByAdvisor: updates.approvedByAdvisor !== undefined ? updates.approvedByAdvisor : currentApprovalStatus.approvedByAdvisor,\n      approvedByCompany: updates.approvedByCompany !== undefined ? updates.approvedByCompany : currentApprovalStatus.approvedByCompany\n    };\n    \n    console.log(`Approval Status anterior: ${JSON.stringify(currentApprovalStatus)}`);\n    console.log(`Nuevo Approval Status: ${JSON.stringify(newApprovalStatus)}`);\n    \n    // Actualizar la aplicación con el nuevo estado de aprobación\n    updatedApp.approvalStatus = newApprovalStatus;\n    \n    // Para mantener sincronizados los estados, cuando quitamos la aprobación de empresa,\n    // también actualizamos el company_review_status\n    if (updates.approvedByCompany === false && isCompanyAdmin()) {\n      console.log(`Actualizando company_review_status a true porque estamos quitando aprobación`);\n      updatedApp.company_review_status = true;\n    }\n\n    // Si ambos están aprobados, asegurarnos de moverla a por_dispersar\n    if (newApprovalStatus.approvedByAdvisor && newApprovalStatus.approvedByCompany) {\n      console.log(`Ambas aprobaciones están presentes, verificando si necesita moverse a Por Dispersar`);\n      if (updatedApp.status !== APPLICATION_STATUS.POR_DISPERSAR && \n          updatedApp.status !== APPLICATION_STATUS.COMPLETED) {\n        console.log(`Actualizando estado a Por Dispersar debido a doble aprobación`);\n        updatedApp.status = APPLICATION_STATUS.POR_DISPERSAR;\n      }\n    }\n    \n    // Actualizar el array de aplicaciones\n    currentApps[appIndex] = updatedApp;\n    \n    // Establecer el nuevo estado\n    setAppsWithApproval(currentApps);\n  };\n  \n  const handleDragStart = (e: React.DragEvent<HTMLDivElement>, application: ApplicationWithApproval, idx: number) => {\n    // Guardar la aplicación que estamos arrastrando\n    draggedItemIndexRef.current = idx;\n    \n    // Almacenar el elemento que estamos arrastrando para gestionar mejor el evento\n    dragItemRef.current = e.currentTarget;\n    \n    // Establecer los datos que queremos transferir\n    e.dataTransfer.setData('text/plain', application.id);\n    e.dataTransfer.effectAllowed = 'move';\n    \n    // Crear una copia visual para el arrastre\n    if (!dragImageRef.current) {\n      dragImageRef.current = e.currentTarget.cloneNode(true) as HTMLDivElement;\n      dragImageRef.current.style.position = 'absolute';\n      dragImageRef.current.style.top = '-1000px';\n      dragImageRef.current.style.opacity = '0.8';\n      dragImageRef.current.style.transform = 'scale(0.9)';\n      dragImageRef.current.style.width = `${e.currentTarget.offsetWidth}px`;\n      document.body.appendChild(dragImageRef.current);\n    }\n    \n    // Establecer la imagen de arrastre\n    if (dragImageRef.current) {\n      const rect = e.currentTarget.getBoundingClientRect();\n      e.dataTransfer.setDragImage(dragImageRef.current, rect.width / 2, 20);\n    }\n    \n    // Añadir clase CSS para mostrar visualmente que el elemento está siendo arrastrado\n    if (e.currentTarget) {\n      e.currentTarget.classList.add('dragging');\n    }\n  };\n  \n  const handleDragEnd = (e: React.DragEvent<HTMLDivElement>) => {\n    // Eliminar clase CSS de arrastre\n    if (dragItemRef.current) {\n      dragItemRef.current.classList.remove('dragging');\n      dragItemRef.current = null;\n    }\n    \n    if (e.currentTarget) {\n      e.currentTarget.classList.remove('dragging');\n    }\n    \n    // Eliminar el elemento clonado para el arrastre\n    if (dragImageRef.current) {\n      document.body.removeChild(dragImageRef.current);\n      dragImageRef.current = null;\n    }\n    \n    draggedItemIndexRef.current = -1;\n    draggedItemNewStatusRef.current = '';\n  };\n  \n  const handleDragOver = (e: React.DragEvent, columnStatus: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = 'move';\n    \n    // Guardar el nuevo estado para la actualización optimista\n    if (draggedItemNewStatusRef.current !== columnStatus) {\n      draggedItemNewStatusRef.current = columnStatus;\n    }\n    \n    // Añadir clase visual para indicar la columna destino\n    if (e.currentTarget.classList.contains('kanban-column')) {\n      document.querySelectorAll('.kanban-column').forEach(col => {\n        col.classList.remove('drag-over');\n      });\n      e.currentTarget.classList.add('drag-over');\n    }\n  };\n  \n  // Verificar si el usuario puede arrastrar una tarjeta\n  const canDragCard = (app: ApplicationWithApproval): boolean => {\n    // No permitir arrastrar si la aplicación no tiene status o id\n    if (!app.status || !app.id) {\n      return false;\n    }\n    \n    // No permitir arrastrar tarjetas que están en proceso de cambio de estado\n    if (app.isMoving) {\n      return false;\n    }\n    \n    // No permitir arrastrar tarjetas que están siendo procesadas\n    if (processingAppId === app.id) {\n      return false;\n    }\n    \n    // Restricciones específicas basadas en el rol del usuario\n    \n    // Para asesores\n    if (isAdvisor()) {\n      // Estados que nunca pueden ser movidos por ningún usuario\n      const restrictedStatuses = [\n        APPLICATION_STATUS.EXPIRED,\n        APPLICATION_STATUS.CANCELLED,\n        APPLICATION_STATUS.POR_DISPERSAR\n      ];\n      \n      // No permitir arrastrar si está en un estado restringido\n      if (restrictedStatuses.includes(app.status as APPLICATION_STATUS)) {\n        return false;\n      }\n      \n      // Si tiene aprobaciones de ambos (asesor y empresa), no permitir mover\n      if (app.approvalStatus?.approvedByAdvisor && app.approvalStatus?.approvedByCompany) {\n        return false;\n      }\n      \n      return true;\n    }\n    \n    // Para administradores de empresa\n    if (isCompanyAdmin()) {\n      // Estados que nunca pueden ser movidos por un admin de empresa\n      const restrictedStatuses = [\n        APPLICATION_STATUS.POR_DISPERSAR,\n        APPLICATION_STATUS.COMPLETED,\n        APPLICATION_STATUS.EXPIRED,\n        APPLICATION_STATUS.CANCELLED,\n        APPLICATION_STATUS.REJECTED\n      ];\n      \n      // No permitir arrastrar si está en un estado restringido\n      if (restrictedStatuses.includes(app.status as APPLICATION_STATUS)) {\n        return false;\n      }\n      \n      // Si tiene aprobaciones de ambos (asesor y empresa), no permitir mover\n      if (app.approvalStatus?.approvedByAdvisor && app.approvalStatus?.approvedByCompany) {\n        return false;\n      }\n      \n      // MODIFICACIÓN: Aunque el asesor haya aprobado, el admin de empresa debe poder aprobar también\n      // Aquí no se impide mover la tarjeta si solo está aprobada por el asesor\n      \n      return true;\n    }\n    \n    // Para otros roles, no permitir arrastrar\n    return false;\n  };\n  \n  // Modificar handleDrop para manejar correctamente el flujo independiente\n  const handleDrop = async (e: React.DragEvent<HTMLDivElement>, newStatus: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    // Eliminar todas las clases de arrastre\n    document.querySelectorAll('.kanban-column').forEach(col => {\n      col.classList.remove('drag-over');\n    });\n    \n    // Verificar que el newStatus es válido\n    const validStatuses = Object.values(APPLICATION_STATUS);\n    if (!validStatuses.includes(newStatus as APPLICATION_STATUS)) {\n      console.error(`Estado inválido para drop: ${newStatus}`);\n      setErrorMessage(`Error: estado \"${newStatus}\" no es válido.`);\n      return;\n    }\n    \n    // Recuperar el ID de la aplicación\n    const applicationId = e.dataTransfer.getData('text/plain');\n    if (!applicationId || !user?.id) return;\n    \n    const application = appsWithApproval.find(app => app.id === applicationId);\n    if (!application) return;\n    \n    const oldStatus = application.status || APPLICATION_STATUS.NEW;\n    \n    // No hacer nada si el estatus es el mismo\n    if (oldStatus === newStatus) return;\n    \n    console.log(`Intentando mover tarjeta ${applicationId} de ${oldStatus} a ${newStatus}`);\n    \n      // Establecer el ID de la aplicación que se está procesando\n      setProcessingAppId(applicationId);\n      \n    try {\n      // Para administradores de empresa (FLUJO INDEPENDIENTE)\n      if (isCompanyAdmin()) {\n        // El admin de empresa solo puede mover tarjetas entre estos estados\n        const allowedTargetStates = [\n          APPLICATION_STATUS.NEW,\n          APPLICATION_STATUS.IN_REVIEW,\n          APPLICATION_STATUS.APPROVED\n        ];\n        \n        // Si intenta mover a un estado que no está permitido\n        if (!allowedTargetStates.includes(newStatus as APPLICATION_STATUS)) {\n          setErrorMessage(`No puedes mover solicitudes al estado \"${STATUS_LABELS[newStatus as keyof typeof STATUS_LABELS] || newStatus}\". Solo puedes mover entre Nuevo, En Revisión y Aprobado por mí.`);\n          setProcessingAppId(null);\n          return;\n        }\n        \n        // Estados que nunca pueden ser movidos por un admin de empresa\n        const restrictedStatuses = [\n          APPLICATION_STATUS.POR_DISPERSAR,\n          APPLICATION_STATUS.COMPLETED,\n          APPLICATION_STATUS.EXPIRED,\n          APPLICATION_STATUS.CANCELLED,\n          APPLICATION_STATUS.REJECTED\n        ];\n        \n        // Si la tarjeta está en un estado restringido, no permitir moverla\n        if (restrictedStatuses.includes(oldStatus as APPLICATION_STATUS)) {\n          setErrorMessage(`No puedes mover solicitudes que están en estado \"${STATUS_LABELS[oldStatus as keyof typeof STATUS_LABELS] || oldStatus}\".`);\n          setProcessingAppId(null);\n          return;\n        }\n        \n        // Actualización optimista en UI para mejor fluidez\n      const updatedApps = [...appsWithApproval];\n      const appIndex = updatedApps.findIndex(app => app.id === applicationId);\n      \n      if (appIndex !== -1) {\n          // Crear copia profunda para evitar referencias\n        const updatedApp = { \n          ...updatedApps[appIndex], \n          isMoving: true,\n          targetStatus: newStatus \n        };\n        \n          if (newStatus === APPLICATION_STATUS.NEW) {\n            // Mover a Nuevo\n            updatedApp.company_review_status = false;\n          updatedApp.approvalStatus = {\n            ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByCompany: false\n            };\n            \n            // Si estaba aprobado y se mueve a Nuevo, hay que quitar la aprobación de la empresa\n            if (updatedApp.approvalStatus?.approvedByCompany && user?.entityId && application.company_id) {\n              try {\n                console.log(\"Quitando aprobación de empresa en la base de datos\");\n                // Ejecutamos una consulta SQL para quitar la aprobación\n                const query = `\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_company = false, \n                      approval_date_company = NULL\n                  WHERE id = '${applicationId}' AND company_id = '${application.company_id}'\n                  RETURNING *\n                `;\n                \n                const response = await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query }),\n                });\n                \n                const result = await response.json();\n                if (result.error) {\n                  throw new Error(result.error);\n                }\n                \n                console.log(\"✅ Aprobación de empresa removida correctamente:\", result.data);\n                \n                // Registrar en historial\n                const historyQuery = `\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'new', 'Regresado a Nuevo por administrador de empresa', '${user.entityId}')\n                  RETURNING *\n                `;\n                \n                await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query: historyQuery }),\n                });\n                \n                // Actualizar UI explícitamente\n                updateLocalApprovalStatus(applicationId, { approvedByCompany: false }, APPLICATION_STATUS.NEW);\n              } catch (error) {\n                console.error(\"❌ Error al quitar aprobación de empresa:\", error);\n                setErrorMessage(`Error al quitar aprobación: ${(error as Error).message}`);\n              }\n            }\n          } \n          else if (newStatus === APPLICATION_STATUS.IN_REVIEW) {\n            // Mover a En Revisión\n            updatedApp.company_review_status = true;\n          updatedApp.approvalStatus = {\n            ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByCompany: false\n            };\n            \n            // Si estaba aprobado y se mueve a En Revisión, hay que quitar la aprobación de la empresa\n            if (oldStatus === APPLICATION_STATUS.APPROVED && \n                updatedApp.approvalStatus?.approvedByCompany && \n                user?.entityId && \n                application.company_id) {\n              try {\n                console.log(\"Quitando aprobación de empresa en la base de datos\");\n                // Ejecutamos una consulta SQL para quitar la aprobación\n                const query = `\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_company = false, \n                      approval_date_company = NULL,\n                      status = '${APPLICATION_STATUS.IN_REVIEW}'\n                  WHERE id = '${applicationId}' AND company_id = '${application.company_id}'\n                  RETURNING *\n                `;\n                \n                const response = await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query }),\n                });\n                \n                const result = await response.json();\n                if (result.error) {\n                  throw new Error(result.error);\n                }\n                \n                console.log(\"✅ Aprobación de empresa removida correctamente:\", result.data);\n                \n                // Registrar en historial\n                const historyQuery = `\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'in_review', 'Revisión adicional requerida por empresa', '${user.entityId}')\n                  RETURNING *\n                `;\n                \n                await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query: historyQuery }),\n                });\n                \n                // Actualizar UI explícitamente con ambas propiedades\n                updateLocalApprovalStatus(applicationId, { \n                  approvedByCompany: false \n                }, APPLICATION_STATUS.IN_REVIEW);\n                \n                // Forzar actualización global de la aplicación para todos los usuarios\n                // llamando a la API de cambio de estado\n                if (onStatusChange) {\n                  try {\n                    await onStatusChange(application, APPLICATION_STATUS.IN_REVIEW);\n                    console.log(\"✅ Estado actualizado correctamente a EN REVISIÓN\");\n                  } catch (error) {\n                    console.error(\"❌ Error al actualizar estado:\", error);\n                  }\n                }\n              } catch (error) {\n                console.error(\"❌ Error al quitar aprobación de empresa:\", error);\n                setErrorMessage(`Error al quitar aprobación: ${(error as Error).message}`);\n              }\n            } else {\n              // Incluso si no estaba aprobada, forzar actualización de estado\n              if (onStatusChange) {\n                try {\n                  await onStatusChange(application, APPLICATION_STATUS.IN_REVIEW);\n                  console.log(\"✅ Estado actualizado correctamente a EN REVISIÓN\");\n                } catch (error) {\n                  console.error(\"❌ Error al actualizar estado:\", error);\n                }\n              }\n            }\n          } \n          else if (newStatus === APPLICATION_STATUS.APPROVED) {\n            // Mover a Aprobado por mí\n            updatedApp.company_review_status = true; // Se considera revisado si está aprobado\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByCompany: true\n            };\n            \n            // Llamar a la API para aprobar por empresa\n            if (user?.entityId && application.company_id) {\n              try {\n                console.log(`Empresa ${user.entityId} está aprobando la solicitud ${applicationId}`);\n                \n                // Aplicar cambio optimista a la UI primero\n                updatedApps[appIndex] = updatedApp;\n                setAppsWithApproval([...updatedApps]);\n                \n                // Llamar a la API y esperar a que termine\n                const result = await approveByCompany(\n                  applicationId, \n                  \"Aprobado vía Kanban\", \n                  user.entityId, \n                  application.company_id, \n                  { company_id: application.company_id } // Pasar company_id en el entityFilter\n                );\n                \n                console.log(\"✅ Aplicación aprobada por empresa:\", result);\n                \n                // Actualizar UI con respuesta del servidor\n                updateLocalApprovalStatus(applicationId, { approvedByCompany: true });\n                \n                // Verificar si la aplicación ya está aprobada por el asesor\n                const approvalStatus = await getApprovalStatus(applicationId);\n                console.log(\"Estado de aprobación actual:\", approvalStatus);\n                \n                // Si está aprobada por ambos, mover automáticamente a \"por_dispersar\"\n                if (approvalStatus?.approvedByAdvisor) {\n                  console.log(\"❇️ Ambas aprobaciones completadas, moviendo a Por Dispersar\");\n                  // Mostrar notificación de transición automática\n                  setAutoTransitionMessage(`La solicitud ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR] || 'Por Dispersar'}\"`);\n                  \n                  // Cambiar el estado a \"por_dispersar\" después de un breve retraso\n                  setTimeout(() => {\n                    if (onStatusChange) {\n                      onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                    }\n                    // Limpiar el mensaje después de mostrar\n                    setTimeout(() => setAutoTransitionMessage(null), 3000);\n                  }, 500);\n                }\n              } catch (error) {\n                console.error(\"❌ Error al aprobar por empresa:\", error);\n                setErrorMessage(`Error al aprobar: ${(error as Error).message}`);\n                \n                // Revertir el estado optimista en caso de error\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByCompany: false\n            };\n                updatedApps[appIndex] = updatedApp;\n                setAppsWithApproval([...updatedApps]);\n              }\n          }\n        }\n        \n          // Actualizar la app en el estado\n        updatedApps[appIndex] = updatedApp;\n        setAppsWithApproval(updatedApps);\n          \n          // Quitar la marca de movimiento después de un breve retraso\n          setTimeout(() => {\n            setAppsWithApproval(prev => \n              prev.map(app => \n                app.id === applicationId\n                  ? { ...app, isMoving: false, targetStatus: undefined }\n                  : app\n              )\n            );\n            setProcessingAppId(null);\n          }, 500);\n        }\n      }\n      // Para asesores (flujo normal)\n      else if (isAdvisor()) {\n        // Verificar que el estado es válido\n        if (!validStatuses.includes(newStatus as APPLICATION_STATUS)) {\n          setErrorMessage(`Estado de destino \"${newStatus}\" no es válido.`);\n          setProcessingAppId(null);\n          return;\n        }\n        \n        // Actualización optimista en UI\n        const updatedApps = [...appsWithApproval];\n        const appIndex = updatedApps.findIndex(app => app.id === applicationId);\n        \n        if (appIndex !== -1) {\n          // Crear copia profunda para evitar referencias\n          const updatedApp = { \n            ...updatedApps[appIndex], \n            isMoving: true, \n            targetStatus: newStatus, \n            status: newStatus as Application['status'] // actualizar el estado directamente\n          };\n          \n          // Lógica para manejar aprobaciones de manera optimista\n          if (newStatus === APPLICATION_STATUS.APPROVED) {\n            console.log(`Advisor ${user?.id} está aprobando la solicitud ${applicationId}`);\n            \n            // Actualizar inmediatamente el estado visual de aprobación del asesor\n            // para una respuesta inmediata en la UI\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByAdvisor: true  // Optimistically set to true\n            };\n            \n            // Aplicar cambio optimista a la UI\n            updatedApps[appIndex] = updatedApp;\n            setAppsWithApproval([...updatedApps]);  // Clone to trigger re-render\n            \n            // Llamar a la API para aprobar por asesor\n            if (user?.entityId) {\n              try {\n                // Llamar a la API y esperar a que termine\n                console.log(\"Llamando a approveByAdvisor API...\");\n                const result = await approveByAdvisor(\n            applicationId, \n            \"Aprobado vía Kanban\", \n            user.entityId, \n                  { advisor_id: user.entityId }  // Ensure we're using the advisor filter\n                );\n                \n                console.log(\"✅ Aplicación aprobada por asesor:\", result);\n                \n                // Actualizar UI con respuesta del servidor explícitamente\n                // para asegurar que el indicador se actualiza correctamente\n                updateLocalApprovalStatus(applicationId, { approvedByAdvisor: true });\n                \n                // Verificar si la aplicación ya está aprobada por la empresa\n                const approvalStatus = await getApprovalStatus(applicationId);\n                console.log(\"Estado de aprobación actual:\", approvalStatus);\n                \n                // Si está aprobada por ambos, mover automáticamente a \"por_dispersar\"\n                if (approvalStatus?.approvedByCompany) {\n                  // Mostrar notificación de transición automática\n                  setAutoTransitionMessage(`La solicitud ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR] || 'Por Dispersar'}\"`);\n                  \n                  // Cambiar el estado a \"por_dispersar\" después de un breve retraso\n                  setTimeout(() => {\n                    if (onStatusChange) {\n                      onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                    }\n                    // Limpiar el mensaje después de mostrar\n                    setTimeout(() => setAutoTransitionMessage(null), 3000);\n                  }, 500);\n                }\n              } catch (error) {\n                console.error(\"❌ Error al aprobar por asesor:\", error);\n                setErrorMessage(`Error al aprobar: ${(error as Error).message}`);\n                \n                // Revertir el estado optimista en caso de error\n                // pero solo si realmente falló la aprobación\n                const appToPatch = appsWithApproval.find(app => app.id === applicationId);\n                if (appToPatch) {\n                  updateLocalApprovalStatus(applicationId, { approvedByAdvisor: false });\n                }\n              }\n            }\n          }\n          // Si se mueve de APPROVED a otro estado, quitar la aprobación\n          else if (oldStatus === APPLICATION_STATUS.APPROVED && newStatus !== APPLICATION_STATUS.POR_DISPERSAR) {\n            console.log(\"Moviendo de aprobado a otro estado, resetear aprobación de asesor\");\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByAdvisor: false\n            };\n            \n            // Actualizar en BD para quitar aprobación (nueva API)\n            if (user?.entityId && newStatus === APPLICATION_STATUS.IN_REVIEW) {\n              try {\n                console.log(\"Quitando aprobación de asesor en la base de datos\");\n                // Ejecutamos una consulta SQL para quitar la aprobación\n                const query = `\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_advisor = false, \n                      approval_date_advisor = NULL\n                  WHERE id = '${applicationId}' AND assigned_to = '${user.entityId}'\n                  RETURNING *\n                `;\n                \n                const response = await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query }),\n                });\n                \n                const result = await response.json();\n                if (result.error) {\n                  throw new Error(result.error);\n                }\n                \n                console.log(\"✅ Aprobación de asesor removida correctamente:\", result.data);\n                \n                // Registrar en historial\n                const historyQuery = `\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'in_review', 'Revisión adicional requerida', '${user.entityId}')\n                  RETURNING *\n                `;\n                \n                await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query: historyQuery }),\n                });\n                \n                // Actualizar UI explícitamente\n                updateLocalApprovalStatus(applicationId, { approvedByAdvisor: false });\n              } catch (error) {\n                console.error(\"❌ Error al quitar aprobación del asesor:\", error);\n                setErrorMessage(`Error al quitar aprobación: ${(error as Error).message}`);\n              }\n            }\n          }\n          \n          // Actualizar la app en el estado solo si no es una aprobación (ese caso ya lo manejamos arriba)\n          if (newStatus !== APPLICATION_STATUS.APPROVED) {\n            updatedApps[appIndex] = updatedApp;\n            setAppsWithApproval(updatedApps);\n          }\n          \n          // Llamar a la API para actualizar el estado\n          if (onStatusChange) {\n            try {\n              await onStatusChange(application, newStatus);\n            } catch (error) {\n          console.error(\"Error updating status:\", error);\n              setErrorMessage(`Error al actualizar el estado: ${(error as Error).message}`);\n          \n              // Revertir cambios en caso de error\n          setAppsWithApproval(prev => \n            prev.map(app => \n              app.id === applicationId\n                    ? { ...app, status: oldStatus as Application['status'], isMoving: false, targetStatus: undefined }\n                : app\n            )\n          );\n            }\n          }\n          \n          // Quitar la marca de movimiento después de un breve retraso\n          setTimeout(() => {\n      setAppsWithApproval(prev => \n        prev.map(app => \n          app.id === applicationId\n                  ? { ...app, isMoving: false, targetStatus: undefined }\n            : app\n        )\n      );\n            setProcessingAppId(null);\n          }, 500);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error in handleDrop:\", error);\n      setErrorMessage(`Error al actualizar el estado: ${(error as Error).message}`);\n      setProcessingAppId(null);\n    }\n  };\n  \n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('es-MX', {\n      style: 'currency',\n      currency: 'MXN',\n    }).format(amount);\n  };\n  \n  // Renderizar los indicadores de aprobación con mejor formato y legibilidad\n  const renderApprovalIndicators = (app: ApplicationWithApproval) => {\n    if (!app.approvalStatus) return null;\n    \n    const { approvedByAdvisor, approvedByCompany } = app.approvalStatus;\n    const hasFullApproval = approvedByAdvisor && approvedByCompany;\n    \n    return (\n      <div className=\"flex flex-col mt-1 space-y-1\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"tooltip tooltip-top flex items-center\" data-tip={approvedByAdvisor ? \"Aprobado por asesor\" : \"Pendiente de aprobación por asesor\"}>\n            <span className=\"text-xs mr-1 whitespace-nowrap\">Asesor:</span>\n            <div className={`w-3 h-3 rounded-full ${approvedByAdvisor ? 'bg-success' : 'bg-warning'}`}></div>\n            {approvedByAdvisor && (\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 ml-1 text-success\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M5 13l4 4L19 7\" />\n              </svg>\n            )}\n          </div>\n          \n          <div className=\"tooltip tooltip-top flex items-center ml-3\" data-tip={approvedByCompany ? \"Aprobado por empresa\" : \"Pendiente de aprobación por empresa\"}>\n            <span className=\"text-xs mr-1 whitespace-nowrap\">Empresa:</span>\n            <div className={`w-3 h-3 rounded-full ${approvedByCompany ? 'bg-success' : 'bg-warning'}`}></div>\n            {approvedByCompany && (\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 ml-1 text-success\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M5 13l4 4L19 7\" />\n              </svg>\n            )}\n          </div>\n        </div>\n        \n        {/* Indicador de doble aprobación */}\n        {hasFullApproval && (\n          <div className=\"w-full flex justify-center mt-1\">\n            <div className=\"badge badge-success text-xs px-2 py-1 text-white font-medium\">\n              Aprobado Total\n            </div>\n          </div>\n        )}\n        \n        {/* Botón para deshacer aprobación (solo para empresa y si está aprobado) */}\n        {isCompanyAdmin() && approvedByCompany && app.status === APPLICATION_STATUS.APPROVED && (\n          <div className=\"w-full flex justify-center mt-1\">\n            <button \n              onClick={(e) => {\n                e.stopPropagation(); // Evitar que se propague al card\n                handleDrop(e as unknown as React.DragEvent<HTMLDivElement>, APPLICATION_STATUS.IN_REVIEW);\n              }}\n              className=\"btn btn-xs btn-error w-full\"\n            >\n              Deshacer Aprobación\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  };\n  \n  // Mejorar el formato de las etiquetas de producto para mayor legibilidad\n  const getProductLabel = (type: string) => {\n    const labels: Record<string, string> = {\n      'selected_plans': 'Crédito a Plazos',\n      'product_simulations': 'Simulación',\n      'auto_loan': 'Crédito Auto',\n      'car_backed_loan': 'Crédito con Garantía',\n      'personal_loan': 'Préstamo Personal',\n      'cash_advance': 'Adelanto de Efectivo'\n    };\n    \n    return labels[type] || type;\n  };\n  \n  // Función para renderizar el producto como una etiqueta bien formateada\n  const renderProductLabel = (type: string, color: string) => {\n    return (\n      <span className={`badge badge-${color} badge-md text-xs px-3 py-1 whitespace-nowrap inline-block`}>\n        {getProductLabel(type || '')}\n      </span>\n    );\n  };\n  \n  // Función para obtener el color apropiado para la tarjeta según estado y aprobaciones\n  const getCardColor = (app: ApplicationWithApproval) => {\n    const status = app.status || '';\n    \n    // Colores específicos según el estado\n    switch (status.toLowerCase()) {\n      case APPLICATION_STATUS.REJECTED:\n        return 'border-error bg-red-50';\n      case APPLICATION_STATUS.APPROVED:\n        // Si está aprobado, verificar el estado de las aprobaciones\n        if (app.approvalStatus) {\n          const { approvedByAdvisor, approvedByCompany } = app.approvalStatus;\n          if (approvedByAdvisor && approvedByCompany) {\n            return 'border-success bg-green-100'; // Aprobado por ambos\n          } else if (approvedByAdvisor) {\n            return 'border-success bg-green-50'; // Aprobado solo por asesor\n          } else if (approvedByCompany) {\n            return 'border-info bg-blue-50'; // Aprobado solo por empresa\n          }\n        }\n        return 'border-success bg-green-50';\n      case APPLICATION_STATUS.IN_REVIEW:\n        return 'border-info bg-blue-50';\n      case APPLICATION_STATUS.NEW:\n        return 'border-warning bg-yellow-50';\n      case APPLICATION_STATUS.PENDING:\n        return 'border-warning bg-amber-50';\n      case APPLICATION_STATUS.POR_DISPERSAR:\n        return 'border-accent bg-purple-50';\n      case APPLICATION_STATUS.COMPLETED:\n        return 'border-primary bg-indigo-50';\n      case APPLICATION_STATUS.EXPIRED:\n        return 'border-error bg-red-100';\n      case APPLICATION_STATUS.CANCELLED:\n        return 'border-neutral bg-gray-100';\n      default:\n        // Si el estado no coincide con ninguno de los anteriores, usar el color de la columna\n        return `border-${app.status || 'neutral'}`;\n    }\n  };\n  \n  // Estilos personalizados para mostrar claramente cuáles tarjetas se pueden arrastrar\n  const customStyles = `\n    .custom-scrollbar::-webkit-scrollbar {\n      width: 8px;\n      height: 8px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-track {\n      background: #f1f1f1;\n      border-radius: 10px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-thumb {\n      background: #888;\n      border-radius: 10px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n      background: #555;\n    }\n    \n    .kanban-card {\n      transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out, box-shadow 0.3s ease-in-out, border-color 0.3s ease;\n      touch-action: none;\n      user-select: none;\n      will-change: transform, opacity;\n    }\n    \n    .kanban-card-draggable {\n      cursor: grab !important;\n      position: relative;\n    }\n    \n    .kanban-card-draggable:hover {\n      transform: translateY(-4px);\n      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n      border-color: #a855f7;\n      z-index: 10;\n    }\n    \n    .kanban-card-draggable:active {\n      cursor: grabbing !important;\n    }\n    \n    /* Indicator for draggable cards */\n    .kanban-card-draggable::after {\n      content: '';\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      width: 20px;\n      height: 20px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23666'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M7 11.5V14m0-2.5v-6a1.5 1.5 0 113 0m-3 6a1.5 1.5 0 00-3 0v2a7.5 7.5 0 0015 0v-5a1.5 1.5 0 013 0m-6-3V11m0-5.5v-1a1.5 1.5 0 013 0v1m0 0V11' /%3E%3C/svg%3E\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      opacity: 0.7;\n      transition: opacity 0.2s ease;\n    }\n    \n    .kanban-card-draggable:hover::after {\n      opacity: 1;\n    }\n    \n    .kanban-card-locked {\n      position: relative;\n      cursor: not-allowed !important;\n      opacity: 0.8;\n    }\n    \n    .kanban-card-locked::after {\n      content: '';\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      width: 20px;\n      height: 20px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23999'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z' /%3E%3C/svg%3E\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      opacity: 0.7;\n    }\n    \n    .kanban-card.dragging {\n      opacity: 0.8;\n      transform: scale(1.03);\n      box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n      z-index: 50;\n    }\n    \n    .kanban-column {\n      transition: all 0.2s ease;\n      border-radius: 0.75rem;\n      will-change: transform, background-color;\n    }\n    \n    .kanban-column.drag-over {\n      background-color: rgba(var(--b2, 217 217 217) / 0.5);\n      transform: scale(1.01);\n      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);\n      border: 2px dashed #a855f7 !important;\n    }\n\n    .kanban-container {\n      scroll-behavior: smooth;\n    }\n\n    @media (min-width: 768px) {\n      .kanban-card-draggable:hover {\n        transform: translateY(-4px);\n        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n      }\n    }\n    \n    /* Animaciones para cambios de estado */\n    @keyframes fadeIn {\n      0% { opacity: 0; }\n      100% { opacity: 1; }\n    }\n    \n    @keyframes slideIn {\n      0% { transform: translateY(10px); opacity: 0; }\n      100% { transform: translateY(0); opacity: 1; }\n    }\n    \n    @keyframes processingPulse {\n      0% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0.4); }\n      70% { box-shadow: 0 0 0 6px rgba(124, 58, 237, 0); }\n      100% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0); }\n    }\n    \n    .kanban-card {\n      animation: fadeIn 0.3s ease-out;\n    }\n    \n    .processing-toast {\n      position: fixed;\n      bottom: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      padding: 10px 20px;\n      background-color: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      animation: slideIn 0.3s ease-out;\n    }\n    \n    .auto-transition-toast {\n      position: fixed;\n      bottom: 70px;\n      left: 50%;\n      transform: translateX(-50%);\n      padding: 10px 20px;\n      background-color: #dcfce7;\n      border: 1px solid #86efac;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      animation: slideIn 0.3s ease-out;\n    }\n    \n    /* Pop-up tooltip con instrucciones para arrastrar */\n    .drag-instructions {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background-color: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      padding: 12px 16px;\n      z-index: 1000;\n      max-width: 300px;\n      animation: fadeIn 0.3s ease-out;\n    }\n    \n    /* Mejoras para vista mobile */\n    @media (max-width: 640px) {\n      .kanban-column {\n        min-height: 300px;\n      }\n    }\n  `;\n  \n  // Función para obtener clases draggable\n  const getDraggableClasses = (app: ApplicationWithApproval): string => {\n    // Usar la función canDragCard que está definida en el ámbito superior\n    const isDraggable = canDragCard(app) && app.id !== processingAppId;\n    return isDraggable \n      ? 'cursor-grab kanban-card-draggable' \n      : 'cursor-not-allowed opacity-80 kanban-card-locked';\n  };\n\n  // Función para definir los tooltips con información clara y precisa\n  const getDragTooltip = (app: ApplicationWithApproval): string => {\n    if (app.id === processingAppId) {\n      return \"Esta tarjeta está siendo procesada\";\n    }\n    \n    // Si la tarjeta se puede arrastrar, mostrar mensaje informativo\n    if (canDragCard(app)) {\n      return \"Arrastra para cambiar el estado\";\n    }\n    \n    // Mensajes específicos para casos donde no se puede arrastrar\n    if (app.approvalStatus?.approvedByAdvisor && app.approvalStatus?.approvedByCompany) {\n      return \"Esta solicitud ya está completamente aprobada y no puede ser movida\";\n    }\n    \n    // Asegurarse de que app.status no es undefined\n    const status = app.status || APPLICATION_STATUS.NEW;\n    \n    // Mensajes específicos según el rol y estado\n    if (isCompanyAdmin()) {\n      if (status === APPLICATION_STATUS.REJECTED) {\n        return \"Las solicitudes rechazadas solo pueden ser movidas por asesores\";\n      } else if (status === APPLICATION_STATUS.POR_DISPERSAR) {\n        return \"Esta solicitud ya está lista para dispersión y no puede regresar a estados anteriores\";\n      } else if (status === APPLICATION_STATUS.COMPLETED) {\n        return \"Esta solicitud ya está completada y no puede cambiar de estado\";\n      } else if (status === APPLICATION_STATUS.EXPIRED) {\n        return \"Esta solicitud ha expirado y no puede cambiar de estado\";\n      } else if (status === APPLICATION_STATUS.CANCELLED) {\n        return \"Esta solicitud fue cancelada y no puede cambiar de estado\";\n      }\n    }\n    \n    return \"No puedes mover esta tarjeta en este momento\";\n  };\n\n  // Efecto para mover automáticamente tarjetas con ambas aprobaciones a \"Por Dispersar\"\n  useEffect(() => {\n    const moveFullyApprovedCards = async () => {\n      // Encontrar tarjetas que tienen ambas aprobaciones pero no están en Por Dispersar\n      const fullyApprovedCards = appsWithApproval.filter(app => \n        app.approvalStatus?.approvedByAdvisor && \n        app.approvalStatus?.approvedByCompany && \n        app.status !== APPLICATION_STATUS.POR_DISPERSAR &&\n        app.status !== APPLICATION_STATUS.COMPLETED\n      );\n      \n      if (fullyApprovedCards.length > 0) {\n        console.log(`Encontradas ${fullyApprovedCards.length} tarjetas con aprobación total, moviendo a Por Dispersar...`);\n        \n        // Mover cada tarjeta a Por Dispersar\n        for (const app of fullyApprovedCards) {\n          if (onStatusChange) {\n            try {\n              console.log(`Moviendo tarjeta ${app.id} a Por Dispersar automáticamente...`);\n              await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n            } catch (error) {\n              console.error(`Error al mover tarjeta ${app.id} a Por Dispersar:`, error);\n            }\n          }\n        }\n      }\n    };\n    \n    // Ejecutar después de un breve retraso para permitir que los estados se inicialicen\n    const timer = setTimeout(() => {\n      moveFullyApprovedCards();\n    }, 2000);\n    \n    return () => clearTimeout(timer);\n  }, [appsWithApproval, onStatusChange]);\n\n  // Agregar una sincronización de estados avanzados para las aplicaciones existentes\n  useEffect(() => {\n    const syncAdvancedStatusCards = async () => {\n      if (!isCompanyAdmin() || applications.length === 0) return;\n      \n      console.log(\"Sincronizando tarjetas en estados avanzados para el administrador de empresa...\");\n      \n      // Estados avanzados que siempre deben sincronizarse entre ambas vistas\n      const advancedStatuses = [\n        APPLICATION_STATUS.POR_DISPERSAR,\n        APPLICATION_STATUS.COMPLETED,\n        APPLICATION_STATUS.EXPIRED,\n        APPLICATION_STATUS.CANCELLED,\n        APPLICATION_STATUS.REJECTED\n      ];\n      \n      // Buscar aplicaciones con ambas aprobaciones que deberían estar en Por Dispersar\n      const needsStatusUpdate = applications.filter(app => {\n        // Si la aplicación ya está en un estado avanzado, respetar ese estado\n        if (advancedStatuses.includes(app.status as APPLICATION_STATUS)) {\n          return false;\n        }\n        \n        // Verificar si tiene ambas aprobaciones\n        return app.approved_by_advisor && app.approved_by_company;\n      });\n      \n      if (needsStatusUpdate.length > 0) {\n        console.log(`Encontradas ${needsStatusUpdate.length} aplicaciones que necesitan actualización de estado:`);\n        \n        const updatedApps = [...appsWithApproval];\n        let hasChanges = false;\n        \n        for (const app of needsStatusUpdate) {\n          console.log(`- Aplicación ${app.id} con ambas aprobaciones, actualizando a Por Dispersar`);\n          \n          const index = updatedApps.findIndex(a => a.id === app.id);\n          if (index !== -1) {\n            updatedApps[index] = {\n              ...updatedApps[index],\n              status: APPLICATION_STATUS.POR_DISPERSAR\n            };\n            hasChanges = true;\n            \n            // Actualizar en la base de datos si es necesario\n            if (onStatusChange) {\n              try {\n                await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n                console.log(`✅ Estado de aplicación ${app.id} actualizado a Por Dispersar`);\n              } catch (error) {\n                console.error(`Error al actualizar estado de ${app.id}:`, error);\n              }\n            }\n          }\n        }\n        \n        if (hasChanges) {\n          console.log(\"Actualizando estado local con aplicaciones sincronizadas\");\n          setAppsWithApproval(updatedApps);\n        }\n      }\n    };\n    \n    // Ejecutar la sincronización después de cargar las aplicaciones\n    syncAdvancedStatusCards();\n  }, [applications, isCompanyAdmin, onStatusChange]);\n\n  // Mejora para sincronizar estados entre vistas del asesor y administrador de empresa\n  useEffect(() => {\n    const syncCardStatusesWithAdvisorView = () => {\n      if (!isCompanyAdmin() || applications.length === 0) return;\n      \n      // Obtener todas las aplicaciones que no están en los estados básicos de flujo de empresa\n      const applicationsWithAdvancedStatus = applications.filter(app => {\n        const isBasicStatus = [\n          APPLICATION_STATUS.NEW,\n          APPLICATION_STATUS.IN_REVIEW,\n          APPLICATION_STATUS.APPROVED\n        ].includes(app.status as APPLICATION_STATUS);\n        \n        return !isBasicStatus;\n      });\n      \n      if (applicationsWithAdvancedStatus.length > 0) {\n        console.log(`Sincronizando ${applicationsWithAdvancedStatus.length} tarjetas con estados avanzados:`);\n        \n        // Crear copia del estado actual\n        const updatedApps = [...appsWithApproval];\n        let hasChanges = false;\n        \n        // Actualizar cada aplicación para que refleje el estado real\n        applicationsWithAdvancedStatus.forEach(app => {\n          const index = updatedApps.findIndex(a => a.id === app.id);\n          \n          if (index !== -1 && updatedApps[index].status !== app.status) {\n            console.log(`- Sincronizando aplicación ${app.id} de estado '${updatedApps[index].status}' a '${app.status}'`);\n            \n            // Actualizar el estado para que coincida con el estado real\n            updatedApps[index] = {\n              ...updatedApps[index],\n              status: app.status\n            };\n            \n            hasChanges = true;\n          }\n        });\n        \n        // Actualizar el estado solo si hubo cambios\n        if (hasChanges) {\n          console.log(\"Actualizando estado local con aplicaciones sincronizadas\");\n          setAppsWithApproval(updatedApps);\n        }\n      }\n    };\n    \n    // Ejecutar la sincronización\n    syncCardStatusesWithAdvisorView();\n  }, [applications, appsWithApproval, isCompanyAdmin]);\n\n  // Agregar un nuevo useEffect para refrescar los estados de aprobación periódicamente\n  useEffect(() => {\n    // Función para refrescar los estados de aprobación desde la API\n    const refreshApprovalStatuses = async () => {\n      if (!applications || applications.length === 0) return;\n      \n      console.log(\"Refrescando estados de aprobación desde la API...\");\n      try {\n        const updatedApps = [...appsWithApproval];\n        let hasChanges = false;\n        \n        for (const app of updatedApps) {\n          // Obtener el estado de aprobación actualizado desde la API\n          const status = await getApprovalStatus(app.id);\n          \n          // Si el estado es diferente al actual, actualizarlo\n          if (status && \n              (status.approvedByAdvisor !== app.approvalStatus?.approvedByAdvisor ||\n               status.approvedByCompany !== app.approvalStatus?.approvedByCompany)) {\n            \n            console.log(`Actualización encontrada para app ${app.id}:`, {\n              actual: app.approvalStatus,\n              nuevo: status\n            });\n            \n            // Actualizar el estado de aprobación\n            app.approvalStatus = status;\n            hasChanges = true;\n            \n            // Si hay doble aprobación y no está en Por Dispersar, actualizarlo\n            if (status.approvedByAdvisor && status.approvedByCompany && \n                app.status !== APPLICATION_STATUS.POR_DISPERSAR &&\n                app.status !== APPLICATION_STATUS.COMPLETED) {\n              console.log(`Aplicación ${app.id} tiene doble aprobación, moviendo a Por Dispersar`);\n              \n              // Actualizar el estado localmente\n              app.status = APPLICATION_STATUS.POR_DISPERSAR;\n              \n              // Actualizar en la BD\n              if (onStatusChange) {\n                try {\n                  await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n                } catch (error) {\n                  console.error(`Error actualizando estado a Por Dispersar:`, error);\n                }\n              }\n            }\n          }\n        }\n        \n        // Si hubo cambios, actualizar el estado\n        if (hasChanges) {\n          console.log(\"Actualizando aplicaciones con estados de aprobación refrescados\");\n          setAppsWithApproval(updatedApps);\n        }\n      } catch (error) {\n        console.error(\"Error al refrescar estados de aprobación:\", error);\n      }\n    };\n    \n    // Refrescar los estados inicialmente y cada 10 segundos\n    refreshApprovalStatuses();\n    \n    const intervalId = setInterval(() => {\n      refreshApprovalStatuses();\n    }, 10000); // 10 segundos\n    \n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [applications, appsWithApproval, onStatusChange]);\n\n  // Mejora para funcionamiento con tarjetas existentes\n  useEffect(() => {\n    // Solo ejecutar para admin de empresa\n    if (!isCompanyAdmin() || applications.length === 0) return;\n    \n    console.log(\"Verificando y sincronizando estados de tarjetas existentes...\");\n    \n    // Encontrar tarjetas que deben mostrar el mismo estado que en la vista del asesor\n    const appsNeedingSync = applications.filter(app => {\n      // Si no está en uno de los estados básicos del flujo de admin de empresa,\n      // debe sincronizarse exactamente con la vista del asesor\n      const isBasicStatus = [\n        APPLICATION_STATUS.NEW,\n        APPLICATION_STATUS.IN_REVIEW,\n        APPLICATION_STATUS.APPROVED\n      ].includes(app.status as APPLICATION_STATUS);\n      \n      return !isBasicStatus;\n    });\n    \n    if (appsNeedingSync.length > 0) {\n      console.log(`Encontradas ${appsNeedingSync.length} tarjetas que necesitan sincronización con vista del asesor`);\n      \n      // Crear copia del estado actual\n      const updatedApps = [...appsWithApproval];\n      let hasChanges = false;\n      \n      // Para cada aplicación que necesita sincronización\n      appsNeedingSync.forEach(app => {\n        const index = updatedApps.findIndex(a => a.id === app.id);\n        \n        // Si encontramos la aplicación y su estado es diferente al que debería tener\n        if (index !== -1 && updatedApps[index].status !== app.status) {\n          console.log(`- Actualizando tarjeta ${app.id}: de '${updatedApps[index].status}' a '${app.status}'`);\n          \n          // Actualizar el estado para que coincida con el de la vista del asesor\n          updatedApps[index] = {\n            ...updatedApps[index],\n            status: app.status\n          };\n          \n          hasChanges = true;\n        }\n      });\n      \n      // Si hubo cambios, actualizar el estado\n      if (hasChanges) {\n        console.log(\"Actualizando estados para sincronizar con vista del asesor\");\n        setAppsWithApproval(updatedApps);\n      }\n    }\n  }, [applications, appsWithApproval, isCompanyAdmin]);\n\n  // Añadir función para manejar la limpieza de filtros\n  const handleClearFilters = () => {\n    setSearchQuery('');\n    setStatusFilter('all');\n    setTypeFilter('all');\n    setDateFromFilter('');\n    setDateToFilter('');\n    setAmountMinFilter('');\n    setAmountMaxFilter('');\n  };\n\n  // Modificar función para filtrar las aplicaciones según los criterios\n  const getFilteredApplications = (apps: ApplicationWithApproval[]): ApplicationWithApproval[] => {\n    return apps.filter(app => {\n      // Filtro por búsqueda de texto\n      if (searchQuery && !(\n        (app.client_name?.toLowerCase().includes(searchQuery.toLowerCase())) ||\n        (app.client_email?.toLowerCase().includes(searchQuery.toLowerCase()))\n      )) {\n        return false;\n      }\n      \n      // Filtro por estado\n      if (statusFilter !== 'all' && app.status !== statusFilter) {\n        return false;\n      }\n      \n      // Filtro por tipo de aplicación\n      if (typeFilter !== 'all' && app.application_type !== typeFilter) {\n        return false;\n      }\n      \n      // Filtro por fecha desde\n      if (dateFromFilter) {\n        const appDate = new Date(app.created_at);\n        const fromDate = new Date(dateFromFilter);\n        if (appDate < fromDate) {\n          return false;\n        }\n      }\n      \n      // Filtro por fecha hasta\n      if (dateToFilter) {\n        const appDate = new Date(app.created_at);\n        const toDate = new Date(dateToFilter);\n        // Ajustar para incluir todo el día\n        toDate.setHours(23, 59, 59, 999);\n        if (appDate > toDate) {\n          return false;\n        }\n      }\n      \n      // Filtro por monto mínimo\n      if (amountMinFilter && parseFloat(amountMinFilter) > 0) {\n        const amount = app.amount || app.requested_amount || 0;\n        if (amount < parseFloat(amountMinFilter)) {\n          return false;\n        }\n      }\n      \n      // Filtro por monto máximo\n      if (amountMaxFilter && parseFloat(amountMaxFilter) > 0) {\n        const amount = app.amount || app.requested_amount || 0;\n        if (amount > parseFloat(amountMaxFilter)) {\n          return false;\n        }\n      }\n      \n      return true;\n    });\n  };\n\n  if (applications.length === 0) {\n    return (\n      <div className=\"bg-base-200 p-6 rounded-lg\">\n        <h3 className=\"text-xl font-medium text-center\">No hay solicitudes para mostrar</h3>\n        <p className=\"text-center text-gray-500 mt-2\">No se encontraron solicitudes en el sistema</p>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"w-full overflow-x-auto custom-scrollbar relative\">\n      <style>{customStyles}</style>\n      \n      {/* Reemplazar el overlay de carga con una notificación flotante más sutil */}\n      {processingAppId && (\n        <div className=\"processing-toast\">\n          <span className=\"loading loading-spinner loading-sm text-primary\"></span>\n          <p className=\"font-medium\">Actualizando estado...</p>\n        </div>\n      )}\n      \n      {/* Notificación para transiciones automáticas */}\n      {autoTransitionMessage && (\n        <div className=\"auto-transition-toast\">\n          <span className=\"loading loading-spinner loading-sm text-success\"></span>\n          <p className=\"font-medium\">{autoTransitionMessage}</p>\n        </div>\n      )}\n      \n      {errorMessage && (\n        <div className=\"mb-4 alert alert-error shadow-lg\">\n          <div>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"stroke-current flex-shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n            <span>{errorMessage}</span>\n          </div>\n          <div className=\"flex-none\">\n            <button className=\"btn btn-sm\" onClick={() => setErrorMessage(null)}>Cerrar</button>\n          </div>\n        </div>\n      )}\n      \n      {/* Panel de Filtros */}\n      <div className=\"mb-6\">\n        <div className=\"bg-base-100 border border-base-300 rounded-lg shadow-sm\">\n          <div className=\"flex justify-between items-center p-4 border-b border-base-300\">\n            <div className=\"relative flex-grow mr-4\">\n              <input\n                type=\"text\"\n                placeholder=\"Buscar por nombre o email...\"\n                className=\"input input-bordered w-full pr-10\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n              />\n              <div className=\"absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none\">\n                <svg className=\"h-5 w-5 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                </svg>\n              </div>\n            </div>\n            \n            <button \n              className=\"btn btn-ghost btn-sm\"\n              onClick={() => setIsFilterExpanded(!isFilterExpanded)}\n            >\n              {isFilterExpanded ? 'Ocultar Filtros' : 'Mostrar Filtros'}\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className={`h-4 w-4 ml-2 transform ${isFilterExpanded ? 'rotate-180' : ''}`} viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n              </svg>\n            </button>\n          </div>\n          \n          {isFilterExpanded && (\n            <div className=\"bg-base-200 p-4 rounded-lg\">\n              <h3 className=\"text-lg font-semibold mb-4\">Filtros Avanzados</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4\">\n                <div className=\"form-control\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Estado</span>\n                  </label>\n                  <select\n                    className=\"select select-bordered w-full\"\n                    value={statusFilter}\n                    onChange={(e) => setStatusFilter(e.target.value)}\n                  >\n                    <option value=\"all\">Todos los estados</option>\n                    {Object.entries(APPLICATION_STATUS).map(([key, value]) => (\n                      <option key={key} value={value}>{STATUS_LABELS[value as keyof typeof STATUS_LABELS] || value}</option>\n                    ))}\n                  </select>\n                </div>\n                \n                <div className=\"form-control\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Tipo de Aplicación</span>\n                  </label>\n                  <select\n                    className=\"select select-bordered w-full\"\n                    value={typeFilter}\n                    onChange={(e) => setTypeFilter(e.target.value)}\n                  >\n                    <option value=\"all\">Todos los tipos</option>\n                    {Object.entries(APPLICATION_TYPE_LABELS).map(([value, label]) => (\n                      <option key={value} value={value}>{label}</option>\n                    ))}\n                  </select>\n                </div>\n                \n                <div className=\"form-control\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Fecha Desde</span>\n                  </label>\n                  <input\n                    type=\"date\"\n                    className=\"input input-bordered w-full\"\n                    value={dateFromFilter}\n                    onChange={(e) => setDateFromFilter(e.target.value)}\n                  />\n                </div>\n                \n                <div className=\"form-control\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Fecha Hasta</span>\n                  </label>\n                  <input\n                    type=\"date\"\n                    className=\"input input-bordered w-full\"\n                    value={dateToFilter}\n                    onChange={(e) => setDateToFilter(e.target.value)}\n                  />\n                </div>\n                \n                <div className=\"form-control\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Monto Mínimo</span>\n                  </label>\n                  <input\n                    type=\"number\"\n                    placeholder=\"0\"\n                    className=\"input input-bordered w-full\"\n                    value={amountMinFilter}\n                    onChange={(e) => setAmountMinFilter(e.target.value)}\n                  />\n                </div>\n                \n                <div className=\"form-control\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Monto Máximo</span>\n                  </label>\n                  <input\n                    type=\"number\"\n                    placeholder=\"0\"\n                    className=\"input input-bordered w-full\"\n                    value={amountMaxFilter}\n                    onChange={(e) => setAmountMaxFilter(e.target.value)}\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex justify-end\">\n                <button \n                  className=\"btn btn-ghost\"\n                  onClick={handleClearFilters}\n                >\n                  Limpiar Filtros\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 2xl:grid-cols-6 gap-4 pb-4 kanban-container p-4\" style={{ minWidth: '1000px' }}>\n        {/* Modificar bucle de columnas para usar aplicaciones filtradas */}\n        {columns.map(column => {\n          // Filtrar aplicaciones para esta columna\n          const filteredApps = getFilteredApplications(column.applications);\n          \n          return (\n            <div \n              key={column.id}\n              className={`bg-base-100 rounded-xl shadow-md border-t-4 border-${column.color} border-l border-r border-b flex flex-col h-full kanban-column`}\n              onDragOver={(e) => {\n                handleDragOver(e, column.id);\n              }}\n              onDragLeave={(e) => {\n                e.currentTarget.classList.remove('drag-over');\n              }}\n              onDrop={(e) => {\n                handleDrop(e, column.id);\n              }}\n            >\n              {/* Cabecera de columna con indicador de color */}\n              <div className={`text-center py-3 px-4 font-bold rounded-t-lg flex items-center justify-between bg-${column.color} bg-opacity-10`}>\n                <span className={`text-${column.color} font-bold text-lg`}>{column.title}</span>\n                <span className={`badge badge-${column.color} badge-lg`}>{filteredApps.length}</span>\n              </div>\n              \n              <div className=\"p-3 space-y-3 min-h-[500px] max-h-[calc(100vh-220px)] overflow-y-auto custom-scrollbar flex-grow\">\n                {filteredApps.length === 0 ? (\n                  <div className=\"flex items-center justify-center h-full opacity-50 border-2 border-dashed border-base-300 rounded-lg p-6\">\n                    <div className=\"text-center\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-12 w-12 mx-auto text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                      </svg>\n                      <p className=\"text-sm mt-2\">No hay solicitudes</p>\n                    </div>\n                  </div>\n                ) : (\n                  filteredApps.map((app, index) => {\n                    const isCardDraggable = canDragCard(app) && app.id !== processingAppId;\n                    return (\n                      <div\n                        key={app.id}\n                        data-tip={getDragTooltip(app)}\n                        className={`card shadow hover:shadow-lg transition-all ${getCardColor(app)} border-l-4 border-t border-r border-b hover:border-primary kanban-card relative ${app.id === processingAppId ? 'processing' : ''} ${app.isMoving ? 'opacity-90' : ''} ${getDraggableClasses(app)}`}\n                        draggable={isCardDraggable}\n                        onDragStart={isCardDraggable ? (e) => handleDragStart(e, app, index) : undefined}\n                        onDragEnd={isCardDraggable ? handleDragEnd : undefined}\n                        style={{\n                          animation: app.id === processingAppId ? 'processingPulse 1.5s infinite' : ''\n                        }}\n                      >\n                        <div className=\"card-body p-4\">\n                          <div className=\"flex justify-between items-start mb-2\">\n                            <div className=\"flex flex-col\">\n                              <div className=\"font-semibold mb-1\">{app.client_name}</div>\n                              {renderProductLabel(app.application_type || '', column.color)}\n                            </div>\n                          </div>\n                          \n                          <div className=\"mt-1\">\n                            {/* Info de la empresa */}\n                            <div className=\"text-sm text-gray-600 mb-2 flex items-center\">\n                              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1 inline flex-shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\" />\n                              </svg>\n                              <span className=\"truncate max-w-[180px] font-medium\">\n                                {app.company_name || \"Sin empresa\"}\n                              </span>\n                            </div>\n                            \n                            {/* Fecha de creación */}\n                            <div className=\"text-xs text-gray-500 mb-2 flex items-center\">\n                              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1 inline flex-shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                              </svg>\n                              <span>\n                                {app.created_at ? formatDate(app.created_at, 'datetime') : 'N/A'}\n                              </span>\n                            </div>\n                            \n                            {/* Monto */}\n                            <div className=\"flex items-center mb-3\">\n                              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1 text-primary flex-shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                              </svg>\n                              <span className=\"text-base font-bold text-primary\">\n                                {formatCurrency(app.requested_amount || 0)}\n                              </span>\n                            </div>\n                            \n                            {/* Indicadores de estado de aprobación */}\n                            {renderApprovalIndicators(app)}\n                            \n                            <div className=\"card-actions justify-end mt-3\">\n                              {/* Botón para marcar como completado/dispersado (solo para asesores y tarjetas en Por Dispersar) */}\n                              {isAdvisor() && app.status === APPLICATION_STATUS.POR_DISPERSAR && (\n                                <button \n                                  onClick={(e) => {\n                                    e.stopPropagation(); // Evitar navegación al detalle\n                                    e.preventDefault();\n                                    if (onStatusChange) {\n                                      setProcessingAppId(app.id);\n                                      onStatusChange(app, APPLICATION_STATUS.COMPLETED)\n                                        .then(() => {\n                                          setAutoTransitionMessage(`Solicitud ${app.id} marcada como Completada correctamente`);\n                                          setTimeout(() => setAutoTransitionMessage(null), 3000);\n                                        })\n                                        .catch(error => {\n                                          setErrorMessage(`Error al marcar como completado: ${error.message}`);\n                                        })\n                                        .finally(() => {\n                                          setProcessingAppId(null);\n                                        });\n                                    }\n                                  }}\n                                  className=\"btn btn-sm btn-accent w-full mb-2\"\n                                >\n                                  Marcar como Dispersado\n                                </button>\n                              )}\n                              {/* Botón para mover a Por Dispersar cuando hay ambas aprobaciones pero no está en ese estado */}\n                              {isAdvisor() && \n                               app.approvalStatus?.approvedByAdvisor && \n                               app.approvalStatus?.approvedByCompany && \n                               app.status !== APPLICATION_STATUS.POR_DISPERSAR &&\n                               app.status !== APPLICATION_STATUS.COMPLETED && (\n                                <button \n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    e.preventDefault();\n                                    if (onStatusChange && !processingAppId) {\n                                      setProcessingAppId(app.id);\n                                      onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR)\n                                        .then(() => {\n                                          setAutoTransitionMessage(`Solicitud movida a Por Dispersar`);\n                                          setTimeout(() => setAutoTransitionMessage(null), 3000);\n                                        })\n                                        .catch(error => {\n                                          console.error(\"Error al mover a Por Dispersar:\", error);\n                                        })\n                                        .finally(() => {\n                                          setTimeout(() => setProcessingAppId(null), 500);\n                                        });\n                                    }\n                                  }}\n                                  className=\"btn btn-xs btn-accent w-full mt-2 mb-2\"\n                                >\n                                  Mover a Por Dispersar\n                                </button>\n                              )}\n                              <Link to={`/applications/${app.id}`} className=\"btn btn-sm btn-primary w-full\">\n                                Ver Detalle\n                              </Link>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default KanbanBoard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}