{"ast":null,"code":"/**\n * Service for MCP (Mini Client Protocol) \n * Used for executing direct SQL queries to our custom PostgreSQL server\n */\n\n// The base URL where our MCP server is running\nconst MCP_URL = 'http://localhost:3100';\n/**\n * Execute a SQL query against the MCP server\n * @param query SQL query to execute\n * @returns QueryResponse with data array or error message\n */\nexport const executeQuery = async query => {\n  try {\n    console.log('üîç MCP Service: Ejecutando consulta:', query);\n    const response = await fetch(`${MCP_URL}/query`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      })\n    });\n    const result = await response.json();\n    console.log('üîç MCP Service: Respuesta completa:', result);\n    if (!response.ok) {\n      console.error('üîç MCP Service: Error en la respuesta:', result);\n      throw new Error(result.error || 'Error executing query');\n    }\n\n    // La respuesta del MCP server tiene formato { data: [...], metadata: {...} }\n    // O simplemente es un array directamente\n    if (result.data) {\n      return {\n        data: result.data\n      };\n    } else if (Array.isArray(result)) {\n      return {\n        data: result\n      };\n    } else {\n      console.log('üîç MCP Service: Estructura de datos at√≠pica:', result);\n      return {\n        data: result\n      };\n    }\n  } catch (error) {\n    console.error('üîç MCP Service: Error:', error);\n    return {\n      error: error.message || 'Error connecting to MCP server'\n    };\n  }\n};\n\n/**\n * Simple ping to check if MCP server is available\n * @returns true if server is available, false otherwise\n */\nexport const pingMcpServer = async () => {\n  try {\n    const response = await fetch(`${MCP_URL}/ping`);\n    return response.ok;\n  } catch (error) {\n    console.error('MCP server ping failed:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["MCP_URL","executeQuery","query","console","log","response","fetch","method","headers","body","JSON","stringify","result","json","ok","error","Error","data","Array","isArray","message","pingMcpServer"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/mcpService.ts"],"sourcesContent":["/**\n * Service for MCP (Mini Client Protocol) \n * Used for executing direct SQL queries to our custom PostgreSQL server\n */\n\n// The base URL where our MCP server is running\nconst MCP_URL = 'http://localhost:3100';\n\ninterface QueryResponse {\n  data?: any[];\n  error?: string;\n}\n\n/**\n * Execute a SQL query against the MCP server\n * @param query SQL query to execute\n * @returns QueryResponse with data array or error message\n */\nexport const executeQuery = async (query: string): Promise<QueryResponse> => {\n  try {\n    console.log('üîç MCP Service: Ejecutando consulta:', query);\n    \n    const response = await fetch(`${MCP_URL}/query`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ query }),\n    });\n\n    const result = await response.json();\n    console.log('üîç MCP Service: Respuesta completa:', result);\n\n    if (!response.ok) {\n      console.error('üîç MCP Service: Error en la respuesta:', result);\n      throw new Error(result.error || 'Error executing query');\n    }\n\n    // La respuesta del MCP server tiene formato { data: [...], metadata: {...} }\n    // O simplemente es un array directamente\n    if (result.data) {\n      return { data: result.data };\n    } else if (Array.isArray(result)) {\n      return { data: result };\n    } else {\n      console.log('üîç MCP Service: Estructura de datos at√≠pica:', result);\n      return { data: result };\n    }\n  } catch (error: any) {\n    console.error('üîç MCP Service: Error:', error);\n    return { error: error.message || 'Error connecting to MCP server' };\n  }\n};\n\n/**\n * Simple ping to check if MCP server is available\n * @returns true if server is available, false otherwise\n */\nexport const pingMcpServer = async (): Promise<boolean> => {\n  try {\n    const response = await fetch(`${MCP_URL}/ping`);\n    return response.ok;\n  } catch (error) {\n    console.error('MCP server ping failed:', error);\n    return false;\n  }\n}; "],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,OAAO,GAAG,uBAAuB;AAOvC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,KAAa,IAA6B;EAC3E,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEF,KAAK,CAAC;IAE1D,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,QAAQ,EAAE;MAC/CO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET;MAAM,CAAC;IAChC,CAAC,CAAC;IAEF,MAAMU,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IACpCV,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEQ,MAAM,CAAC;IAE1D,IAAI,CAACP,QAAQ,CAACS,EAAE,EAAE;MAChBX,OAAO,CAACY,KAAK,CAAC,wCAAwC,EAAEH,MAAM,CAAC;MAC/D,MAAM,IAAII,KAAK,CAACJ,MAAM,CAACG,KAAK,IAAI,uBAAuB,CAAC;IAC1D;;IAEA;IACA;IACA,IAAIH,MAAM,CAACK,IAAI,EAAE;MACf,OAAO;QAAEA,IAAI,EAAEL,MAAM,CAACK;MAAK,CAAC;IAC9B,CAAC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACP,MAAM,CAAC,EAAE;MAChC,OAAO;QAAEK,IAAI,EAAEL;MAAO,CAAC;IACzB,CAAC,MAAM;MACLT,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEQ,MAAM,CAAC;MACnE,OAAO;QAAEK,IAAI,EAAEL;MAAO,CAAC;IACzB;EACF,CAAC,CAAC,OAAOG,KAAU,EAAE;IACnBZ,OAAO,CAACY,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO;MAAEA,KAAK,EAAEA,KAAK,CAACK,OAAO,IAAI;IAAiC,CAAC;EACrE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAA8B;EACzD,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,OAAO,CAAC;IAC/C,OAAOK,QAAQ,CAACS,EAAE;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}