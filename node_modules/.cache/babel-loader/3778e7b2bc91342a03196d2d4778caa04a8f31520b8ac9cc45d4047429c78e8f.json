{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect,useRef}from'react';import{useAuth}from'./AuthContext';import NotificationPopup from'../components/ui/NotificationPopup';// Generate a proper UUID for notification IDs\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function generateUUID(){// Use a more standard implementation for UUID v4\nreturn'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){const r=Math.random()*16|0;const v=c==='x'?r:r&0x3|0x8;return v.toString(16);});}// For test notifications, use a valid UUID format - don't use app-timestamp\nfunction getTestApplicationId(){// Use a small set of real UUIDs as sample application IDs\nconst sampleIds=['110cc76a-1762-4df4-840e-a503fea9d7aa','220cc76a-1762-4df4-840e-a503fea9d7bb','330cc76a-1762-4df4-840e-a503fea9d7cc','440cc76a-1762-4df4-840e-a503fea9d7dd','550cc76a-1762-4df4-840e-a503fea9d7ee'];// Pick a random ID from the sample list\nreturn sampleIds[Math.floor(Math.random()*sampleIds.length)];}// Enum for notification types\nexport let NotificationType=/*#__PURE__*/function(NotificationType){NotificationType[\"INFO\"]=\"info\";NotificationType[\"SUCCESS\"]=\"success\";NotificationType[\"WARNING\"]=\"warning\";NotificationType[\"ERROR\"]=\"error\";NotificationType[\"NEW_APPLICATION\"]=\"new_application\";NotificationType[\"APPROVAL_REQUIRED\"]=\"approval_required\";NotificationType[\"NEW_MESSAGE\"]=\"new_message\";NotificationType[\"APPLICATION_STATUS_UPDATED\"]=\"application_status_updated\";NotificationType[\"APPLICATION_COMMENT\"]=\"application_comment\";return NotificationType;}({});// Interfaces\nexport const NotificationContext=/*#__PURE__*/createContext(undefined);export const useNotifications=()=>{const context=useContext(NotificationContext);if(context===undefined){throw new Error('useNotifications must be used within a NotificationProvider');}return context;};export const NotificationProvider=_ref=>{let{children}=_ref;const{user}=useAuth();const[notifications,setNotifications]=useState([]);const[unreadCount,setUnreadCount]=useState(0);const[soundEnabled,setSoundEnabled]=useState(true);// Estado para la notificación emergente actual\nconst[currentPopup,setCurrentPopup]=useState(null);// Referencia al ID del polling interval\nconst pollingIntervalRef=useRef(null);// State to keep track of already notified application IDs with timestamps\n// This helps prevent showing the same notification multiple times\nconst[notifiedApplications,setNotifiedApplications]=useState(new Map());// Referencia para evitar múltiples ejecuciones simultáneas\nconst checkingRef=useRef(false);// Reference to the latest known notification time\nconst lastNotificationTimeRef=useRef(new Date());// Avoid duplicate notifications by ensuring we have a minimum interval between checks\nconst lastCheckTimeRef=useRef(new Date());// Efecto para manejar la carga inicial de notificaciones y configurar el polling\nuseEffect(()=>{if(user){// Cargar notificaciones al inicio\nloadNotifications();// Cargar aplicaciones ya notificadas desde localStorage\ntry{const storedNotifications=localStorage.getItem('notified_application_ids');if(storedNotifications){const parsedData=JSON.parse(storedNotifications);// Handle both old format (array) and new format (object with timestamps)\nif(Array.isArray(parsedData)){// Old format - convert to new Map with current timestamp\nconst notifiedMap=new Map();const now=Date.now();parsedData.forEach(id=>{notifiedMap.set(id,now);});setNotifiedApplications(notifiedMap);// Re-save with the new format\nsaveNotifiedApplications(notifiedMap);console.log(`Converted ${notifiedMap.size} notified application IDs from old format to new format`);}else if(typeof parsedData==='object'){// New format - convert object to Map\nconst notifiedMap=new Map();Object.entries(parsedData).forEach(_ref2=>{let[id,timestamp]=_ref2;notifiedMap.set(id,timestamp);});setNotifiedApplications(notifiedMap);console.log(`Loaded ${notifiedMap.size} notified application IDs from localStorage`);}}else{console.log('No previously notified applications found in localStorage');}// Limpiar notificaciones antiguas (más de 48 horas)\ncleanupOldNotifications();}catch(error){console.error('Error loading notified applications:',error);// Reset if there's an error\nsetNotifiedApplications(new Map());}// Set the initial last check time to now\nlastCheckTimeRef.current=new Date();// Set the initial last notification time to 10 seconds ago to avoid immediate checks\nlastNotificationTimeRef.current=new Date(Date.now()-10000);// Wait 5 seconds before first check to ensure UI is fully loaded\nconst initialCheckTimeout=setTimeout(()=>{// Primero obtenemos la fecha de la última aplicación para inicializar el sistema\ninitializeWithLastApplicationTimestamp();// Configurar polling para verificar nuevas notificaciones cada 30 seconds\n// Utilizamos un intervalo más corto para estar más atentos a nuevas solicitudes\npollingIntervalRef.current=setInterval(()=>{const now=new Date();const timeSinceLastCheck=now.getTime()-lastCheckTimeRef.current.getTime();const timeSinceLastNotification=now.getTime()-lastNotificationTimeRef.current.getTime();// Only check if:\n// 1. It's been at least 15 seconds since last check AND\n// 2. It's been at least 5 seconds since showing a notification\nif(timeSinceLastCheck>15000&&timeSinceLastNotification>5000){checkForNewNotifications();}else{console.log(`Skipping notification check (last check: ${(timeSinceLastCheck/1000).toFixed(1)}s ago, last notification: ${(timeSinceLastNotification/1000).toFixed(1)}s ago)`);}},20000);},5000);// Limpiar el intervalo cuando el componente se desmonte\nreturn()=>{if(pollingIntervalRef.current){clearInterval(pollingIntervalRef.current);}clearTimeout(initialCheckTimeout);};}},[user]);// Inicializar con el timestamp de la última aplicación\nconst initializeWithLastApplicationTimestamp=async()=>{try{// Obtener la última aplicación para usarla como referencia inicial\nconst response=await fetch('http://localhost:3100/query',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query:`\n            SELECT id, created_at, application_type, client_name, company_name, status, amount\n            FROM applications \n            ORDER BY created_at DESC\n            LIMIT 1\n          `})});if(!response.ok){throw new Error('Error querying most recent application');}const data=await response.json();if(data.data&&data.data.length>0){const lastApp=data.data[0];const lastAppId=lastApp.id;// Verificar que created_at sea una fecha válida\nlet lastAppCreatedAt;try{lastAppCreatedAt=new Date(lastApp.created_at);// Verificar que la fecha sea válida comprobando si es NaN\nif(isNaN(lastAppCreatedAt.getTime())){throw new Error('Invalid date value');}console.log(`System initialized with reference to last application: ${lastAppId} created at ${lastAppCreatedAt.toISOString()}`);}catch(dateError){console.warn(`Invalid date format for last application: ${lastApp.created_at}. Using current date instead.`);lastAppCreatedAt=new Date();// Usar fecha actual como alternativa\n}// Marcar la aplicación más reciente como ya notificada para evitar duplicados al inicio\nif(!notifiedApplications.has(lastAppId)){const appMetadata={notifiedAt:new Date().toISOString(),notificationType:'initialization',applicationType:lastApp.application_type,amount:lastApp.amount,clientName:lastApp.client_name,companyName:lastApp.company_name,status:lastApp.status};try{markApplicationAsNotified(lastAppId,lastAppCreatedAt.toISOString(),appMetadata);}catch(markError){console.error('Error marking last application as notified:',markError);}}}// Realizar la primera verificación de notificaciones\ncheckForNewNotifications();}catch(error){console.error('Error initializing with last application timestamp:',error);// Si falla, aún intentamos la primera verificación\ncheckForNewNotifications();}};// Cálculo de notificaciones no leídas\nuseEffect(()=>{const count=notifications.filter(notification=>!notification.read).length;setUnreadCount(count);},[notifications]);// Cargar notificaciones del almacenamiento local o del servidor\nconst loadNotifications=async()=>{try{// En un escenario real, aquí se cargarían las notificaciones del servidor\n// Por ahora, usaremos el localStorage como ejemplo\nconst storedNotifications=localStorage.getItem('notifications');if(storedNotifications){const parsed=JSON.parse(storedNotifications);setNotifications(parsed.map(n=>({...n,createdAt:new Date(n.createdAt)})));}}catch(error){console.error('Error loading notifications:',error);}};// Save notified applications with timestamps to localStorage\nconst saveNotifiedApplications=notifiedMap=>{try{// Convert Map to object for storage\nconst notifiedObject={};notifiedMap.forEach((timestamp,id)=>{notifiedObject[id]=timestamp;});localStorage.setItem('notified_application_ids',JSON.stringify(notifiedObject));console.log(`Saved ${notifiedMap.size} notified application IDs to localStorage`);}catch(error){console.error('Error saving notified applications:',error);}};// Función para limpiar notificaciones antiguas\nconst cleanupOldNotifications=()=>{try{const now=Date.now();const twentyFourHoursAgo=now-24*60*60*1000;// 24 horas en milisegundos\nlet totalCount=0;let cleanedCount=0;// Crear un nuevo mapa para guardar solo las notificaciones más recientes\nconst updatedNotifications=new Map();notifiedApplications.forEach((timestamp,id)=>{totalCount++;if(timestamp>twentyFourHoursAgo){// Mantener solo las notificaciones de las últimas 24 horas\nupdatedNotifications.set(id,timestamp);}else{cleanedCount++;}});if(cleanedCount>0){console.log(`Cleaned up ${cleanedCount} old notification records (${totalCount-cleanedCount} retained)`);setNotifiedApplications(updatedNotifications);saveNotifiedApplications(updatedNotifications);}else if(totalCount>0){console.log(`No old notifications to clean up (${totalCount} notifications are all within 24 hours)`);}}catch(error){console.error('Error cleaning up old notifications:',error);}};// Marcar una aplicación como notificada\nconst markApplicationAsNotified=(applicationId,createdTimestamp,metadata)=>{// Check if already marked as notified\nif(notifiedApplications.has(applicationId)){console.log(`Application ${applicationId} already marked as notified (duplicate protection)`);return;// Already notified, don't do anything\n}try{let notificationTime;// If createdTimestamp is provided, use it to set notification time just after creation\nif(createdTimestamp){try{// Try to parse the creation timestamp\nconst creationTime=new Date(createdTimestamp);// Set notification time 1 second after creation to ensure proper ordering\nnotificationTime=creationTime.getTime()+1000;console.log(`Using application creation time for notification: ${creationTime.toISOString()}`);}catch(error){// If parsing fails, use current time as fallback\nconsole.warn(`Error parsing creation timestamp \"${createdTimestamp}\":`,error);notificationTime=Date.now();}}else{// If no timestamp provided, use current time\nnotificationTime=Date.now();}// Crear un objeto de metadatos para esta aplicación si no se proporcionó uno\nconst appMetadata=metadata||{notifiedAt:new Date(notificationTime).toISOString(),notificationType:'application'};// Save to the notified applications map\nconst updatedMap=new Map(notifiedApplications);updatedMap.set(applicationId,notificationTime);setNotifiedApplications(updatedMap);// Guardar también los metadatos si es necesario para futuras optimizaciones\ntry{const metadataKey=`notification_metadata_${applicationId}`;localStorage.setItem(metadataKey,JSON.stringify(appMetadata));}catch(error){console.warn('Error saving notification metadata:',error);}// Save to localStorage\nsaveNotifiedApplications(updatedMap);// Update last notification time\nlastNotificationTimeRef.current=new Date();console.log(`Marked application ${applicationId} as notified at ${new Date(notificationTime).toISOString()}`);}catch(error){console.error('Error marking application as notified:',error);}};// Función para obtener la consulta SQL optimizada según el tipo de aplicación más reciente\nconst getOptimizedQuery=async()=>{try{// Primero, verificar el tipo de la aplicación más reciente para optimizar la consulta\nconst typeCheckResponse=await fetch('http://localhost:3100/query',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query:`\n            SELECT application_type\n            FROM applications \n            ORDER BY created_at DESC\n            LIMIT 1\n          `})});if(!typeCheckResponse.ok){console.warn('Error checking latest application type, using default query');return getDefaultQuery();}const typeData=await typeCheckResponse.json();if(!typeData.data||typeData.data.length===0){console.log('No applications found, using default query');return getDefaultQuery();}const latestType=typeData.data[0].application_type;console.log(`Latest application type: ${latestType}`);// Personalizar los campos según el tipo de aplicación\nlet additionalFields='';switch(latestType){case'selected_plans':// Para planes seleccionados, necesitamos plazo, tasa y pago mensual\nadditionalFields='';break;case'product_simulations':// Para simulaciones, podríamos necesitar campos específicos del producto\nadditionalFields='';break;case'cash_requests':// Para solicitudes de efectivo\nadditionalFields='';break;case'car_backed_loan_applications':case'auto_loan_applications':// Para préstamos de auto, podríamos necesitar datos del vehículo\nadditionalFields='';break;default:additionalFields='';}// Construir consulta con base en el tipo\nreturn`\n        SELECT id, client_name, application_type, company_name, created_at, status, \n               amount, term, interest_rate, monthly_payment, client_email, client_phone ${additionalFields}\n        FROM applications \n        WHERE created_at > NOW() - INTERVAL '30 seconds'\n        ORDER BY created_at DESC\n        LIMIT 5\n      `;}catch(error){console.error('Error building optimized query:',error);return getDefaultQuery();}};// Consulta predeterminada con campos básicos\nconst getDefaultQuery=()=>{return`\n      SELECT id, client_name, application_type, company_name, created_at, status, \n             amount, term, interest_rate, monthly_payment, client_email, client_phone\n      FROM applications \n      WHERE created_at > NOW() - INTERVAL '30 seconds'\n      ORDER BY created_at DESC\n      LIMIT 5\n    `;};const checkForNewNotifications=async()=>{// Record the check time immediately to prevent race conditions\nlastCheckTimeRef.current=new Date();// Avoid multiple executions at the same time\nif(checkingRef.current){console.log('Already checking for notifications');return;}// Make sure we don't have any lingering popups\nclearPopups();// Sincronizar con localStorage antes de verificar para evitar duplicados\ntry{const storedNotifications=localStorage.getItem('notified_application_ids');if(storedNotifications){const parsedData=JSON.parse(storedNotifications);if(typeof parsedData==='object'&&!Array.isArray(parsedData)){// Fusionar con las notificaciones actuales\nconst updatedMap=new Map(notifiedApplications);let hasChanges=false;Object.entries(parsedData).forEach(_ref3=>{let[id,timestamp]=_ref3;if(!updatedMap.has(id)){updatedMap.set(id,timestamp);hasChanges=true;}});if(hasChanges){console.log('Synchronized notification IDs from localStorage before checking');setNotifiedApplications(updatedMap);}}}}catch(error){console.error('Error synchronizing notifications from localStorage:',error);}checkingRef.current=true;console.log('Checking for new notifications...');try{// Convert notified IDs Map to array for logging\nconst notifiedIdsArray=Array.from(notifiedApplications.keys());console.log(`${notifiedIdsArray.length} already notified application IDs: ${notifiedIdsArray.join(', ').substring(0,200)}${notifiedIdsArray.length>5?'...':''}`);// Obtener consulta optimizada según tipo de aplicación\nconst optimizedQuery=await getOptimizedQuery();console.log('Using optimized query for latest application type');const response=await fetch('http://localhost:3100/query',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query:optimizedQuery})});if(!response.ok){throw new Error('Error querying recent applications');}const data=await response.json();// If there are applications, filter them first and then show notification\nif(data.data&&data.data.length>0){console.log(`Received ${data.data.length} applications from the last 30 seconds`);// Filter out any applications that have already been notified\nconst newApps=data.data.filter(app=>{const isAlreadyNotified=notifiedApplications.has(app.id);if(isAlreadyNotified){console.log(`Skipping already notified application: ${app.id}`);return false;}// Convertir el timestamp de la aplicación a Date para comparar\nlet appCreatedAt;try{appCreatedAt=new Date(app.created_at);// Verificar que la fecha sea válida\nif(isNaN(appCreatedAt.getTime())){console.warn(`Invalid date for application ${app.id}: ${app.created_at}, using current time`);appCreatedAt=new Date();// Usar fecha actual como alternativa\n}}catch(error){console.warn(`Error parsing date for application ${app.id}: ${error}`);appCreatedAt=new Date();// Usar fecha actual como alternativa\n}// Si la aplicación es de hace más de 60 segundos, no notificar\nconst isTooOld=new Date().getTime()-appCreatedAt.getTime()>60000;if(isTooOld){console.log(`Skipping too old application: ${app.id} created at ${appCreatedAt.toISOString()}`);// Marcar como notificada para evitar mostrarla en futuras verificaciones\nconst appMetadata={notifiedAt:new Date().toISOString(),notificationType:'application',applicationType:app.application_type,amount:app.amount,clientName:app.client_name,companyName:app.company_name,status:app.status};try{markApplicationAsNotified(app.id,appCreatedAt.toISOString(),appMetadata);}catch(markError){console.error(`Error marking old application as notified: ${markError}`);}return false;}return true;});console.log(`Found ${newApps.length} new applications after filtering`);if(newApps.length===0){console.log('No truly new applications found (already notified or too old)');checkingRef.current=false;return;}// Take only the first new application to show\nconst newApp=newApps[0];const appId=newApp.id;// Verificar si ya está en proceso de notificación (para evitar doble notificación)\nif(currentPopup&&currentPopup.relatedItemId===appId){console.log(`Already showing notification for application ${appId} - skipping`);checkingRef.current=false;return;}console.log(`New application detected: ${appId} (created ${new Date(newApp.created_at).toISOString()})`);// IMPORTANT: Mark as notified IMMEDIATELY to prevent duplicates\n// even if processing fails later\nconst appMetadata={notifiedAt:new Date().toISOString(),notificationType:'application',applicationType:newApp.application_type,amount:newApp.amount,clientName:newApp.client_name,companyName:newApp.company_name,status:newApp.status};try{// Verificar que la fecha sea válida\nlet createdDate;try{createdDate=new Date(newApp.created_at);if(isNaN(createdDate.getTime())){createdDate=new Date();// Usar fecha actual si no es válida\n}}catch(dateError){console.warn(`Invalid date format for new application: ${newApp.created_at}. Using current date.`);createdDate=new Date();// Usar fecha actual como alternativa\n}markApplicationAsNotified(appId,createdDate.toISOString(),appMetadata);}catch(markError){console.error('Error marking application as notified:',markError);}// Format data for notification\nlet createdAt;try{createdAt=new Date(newApp.created_at);if(isNaN(createdAt.getTime())){createdAt=new Date();// Usar fecha actual si no es válida\n}}catch(error){console.warn(`Error parsing date for notification: ${error}`);createdAt=new Date();// Usar fecha actual como alternativa\n}const formattedDate=new Intl.DateTimeFormat('es-MX',{day:'2-digit',month:'2-digit',year:'numeric'}).format(createdAt);const formattedTime=new Intl.DateTimeFormat('es-MX',{hour:'2-digit',minute:'2-digit',hour12:true}).format(createdAt);// Format amount with thousands separator and 2 decimals\nconst formattedAmount=new Intl.NumberFormat('es-MX',{style:'currency',currency:'MXN',minimumFractionDigits:2}).format(Number(newApp.amount||0));// Format interest rate with percentage\nconst formattedRate=newApp.interest_rate!==null&&newApp.interest_rate!==undefined?`${newApp.interest_rate}%`:\"N/A\";// Format monthly payment\nconst formattedMonthly=newApp.monthly_payment!==null&&newApp.monthly_payment!==undefined?new Intl.NumberFormat('es-MX',{style:'currency',currency:'MXN',minimumFractionDigits:2}).format(Number(newApp.monthly_payment)):\"N/A\";// Transform application type to a more readable format\nlet appType='No especificado';if(newApp.application_type){// Remove any trailing slash if it exists\nconst cleanType=newApp.application_type.replace(/\\/$/,'');if(cleanType==='selected_plans'){appType='Planes seleccionados';}else if(cleanType==='product_simulations'){appType='Simulación de producto';}else if(cleanType==='cash_requests'){appType='Solicitud de efectivo';}else if(cleanType==='car_backed_loan_applications'){appType='Préstamo con garantía de auto';}else if(cleanType==='auto_loan_applications'){appType='Préstamo para auto';}else{appType=cleanType.split('_').map(word=>word.charAt(0).toUpperCase()+word.slice(1)).join(' ');}}// Adaptar la información según el tipo de aplicación\nconst getApplicationSpecificHtml=(appType,app)=>{// Base de los campos comunes para todos los tipos\nconst commonFields=`\n            <div class=\"font-semibold text-gray-700\">Cliente:</div>\n            <div class=\"text-gray-900\">${app.client_name||'Sin nombre'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Empresa:</div>\n            <div class=\"text-gray-900\">${app.company_name||'No especificada'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Tipo:</div>\n            <div class=\"text-gray-900\">${appType}</div>\n          `;// Campos específicos según el tipo de aplicación\nlet specificFields='';// Planes seleccionados - enfatizar plazo, tasa, pago mensual\nif(app.application_type==='selected_plans'){specificFields=`\n              <div class=\"font-semibold text-gray-700\">Monto:</div>\n              <div class=\"text-gray-900\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term||'N/A'} ${app.term===1?'mes':'meses'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Pago mensual:</div>\n              <div class=\"text-gray-900\">${formattedMonthly}</div>\n            `;}// Simulación de producto - enfatizar tipo de producto y monto total\nelse if(app.application_type==='product_simulations'){specificFields=`\n              <div class=\"font-semibold text-gray-700\">Monto:</div>\n              <div class=\"text-gray-900 font-bold\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term&&app.term>0?app.term+(app.term===1?' mes':' meses'):'N/A'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n            `;}// Solicitudes de efectivo - enfatizar monto solicitado\nelse if(app.application_type==='cash_requests'){specificFields=`\n              <div class=\"font-semibold text-gray-700\">Monto solicitado:</div>\n              <div class=\"text-gray-900 font-bold\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term&&app.term>0?app.term+(app.term===1?' mes':' meses'):'N/A'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n            `;}// Préstamos relacionados con autos\nelse if(app.application_type==='car_backed_loan_applications'||app.application_type==='auto_loan_applications'){specificFields=`\n              <div class=\"font-semibold text-gray-700\">Monto del préstamo:</div>\n              <div class=\"text-gray-900 font-bold\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term&&app.term>0?app.term+(app.term===1?' mes':' meses'):'N/A'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Pago mensual:</div>\n              <div class=\"text-gray-900\">${formattedMonthly}</div>\n            `;}// Para cualquier otro tipo\nelse{specificFields=`\n              <div class=\"font-semibold text-gray-700\">Monto:</div>\n              <div class=\"text-gray-900\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term&&app.term>0?app.term+(app.term===1?' mes':' meses'):'N/A'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Pago mensual:</div>\n              <div class=\"text-gray-900\">${formattedMonthly}</div>\n            `;}// Contacto y fecha - comunes para todos\nconst contactFields=`\n            <div class=\"font-semibold text-gray-700\">Email:</div>\n            <div class=\"text-gray-900\">${app.client_email||'No especificado'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Teléfono:</div>\n            <div class=\"text-gray-900\">${app.client_phone||'No especificado'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Fecha:</div>\n            <div class=\"text-gray-900\">${formattedDate} ${formattedTime}</div>\n          `;return`\n            <div class=\"grid grid-cols-2 gap-2 text-sm mt-2\">\n              ${commonFields}\n              ${specificFields}\n              ${contactFields}\n            </div>\n          `;};// Obtener el HTML específico según el tipo de aplicación\nconst detailedMessage=getApplicationSpecificHtml(appType,newApp);const notificationTitle='💼 Nueva solicitud recibida';// Create the notification for the panel\nconst newNotification={title:notificationTitle,message:`Cliente: ${newApp.client_name||'Sin nombre'} - ${newApp.company_name||'Empresa no especificada'}`,type:NotificationType.NEW_APPLICATION,relatedItemType:'application',relatedItemId:appId};// Add the notification to the panel\naddNotification(newNotification);// Show popup with complete details\nshowPopup({title:notificationTitle,message:detailedMessage,type:NotificationType.NEW_APPLICATION,playSound:soundEnabled,soundType:'notification',duration:10000,// 10 seconds\ncustomSound:'/sounds/clean-notification.mp3',centerScreen:true,relatedItemId:appId});// Update last notification time to avoid duplicates\nlastNotificationTimeRef.current=new Date();}else{console.log('No new applications found in the last 30 seconds');}}catch(error){console.error('Error checking for new notifications:',error);}finally{// Always mark as not running regardless of the result\ncheckingRef.current=false;}};// Añadir una nueva notificación\nconst addNotification=notification=>{const newNotification={...notification,// Using a proper UUID for the notification ID\nid:generateUUID(),createdAt:new Date(),read:false,timestamp:new Date()};setNotifications(prev=>{const updated=[newNotification,...prev];// Guardar en localStorage (en producción esto iría al servidor)\nlocalStorage.setItem('notifications',JSON.stringify(updated));return updated;});};// Marcar una notificación como leída\nconst markAsRead=id=>{setNotifications(prev=>{const updated=prev.map(notification=>notification.id===id?{...notification,read:true,isRead:true}:notification);// Guardar en localStorage\nlocalStorage.setItem('notifications',JSON.stringify(updated));return updated;});};// Marcar todas las notificaciones como leídas\nconst markAllAsRead=()=>{setNotifications(prev=>{const updated=prev.map(notification=>({...notification,read:true,isRead:true}));// Guardar en localStorage\nlocalStorage.setItem('notifications',JSON.stringify(updated));return updated;});};// Limpiar todas las notificaciones\nconst clearNotifications=()=>{setNotifications([]);// Limpiar del localStorage\nlocalStorage.setItem('notifications',JSON.stringify([]));};// Mostrar una notificación emergente\nconst showPopup=config=>{// Verificar si ya hay un popup con el mismo título y mensaje o mismo ID relacionado (posible duplicado)\nif(currentPopup&&(currentPopup.title===config.title&&currentPopup.message===config.message||config.relatedItemId&&currentPopup.relatedItemId===config.relatedItemId)){console.log(`Ignoring duplicate popup: ${config.relatedItemId||'unknown ID'}`);return;}// Clear any existing popups to prevent stacking\nclearPopups();// Log what we're showing\nconsole.log(`Showing popup: ${config.title} ${config.relatedItemId?`(ID: ${config.relatedItemId})`:''}`);// Short timeout to ensure DOM updates before showing the new popup\nsetTimeout(()=>{setCurrentPopup(config);// Automatically close popup after the specified duration\nsetTimeout(()=>{setCurrentPopup(null);},config.duration||5000);},50);};// Clear any pending popups\nconst clearPopups=()=>{if(currentPopup){console.log('Clearing existing popup');setCurrentPopup(null);}};// Activar/desactivar sonidos de notificación\nconst toggleSound=()=>{const newValue=!soundEnabled;setSoundEnabled(newValue);// Guardar preferencia en localStorage\nlocalStorage.setItem('notification_sound_enabled',newValue.toString());};const value={notifications,unreadCount,addNotification,markAsRead,markAllAsRead,clearNotifications,showPopup,soundEnabled,toggleSound,setSoundEnabled};return/*#__PURE__*/_jsxs(NotificationContext.Provider,{value:value,children:[children,currentPopup&&/*#__PURE__*/_jsx(NotificationPopup,{title:currentPopup.title,message:currentPopup.message,type:currentPopup.type,duration:currentPopup.duration,playSound:currentPopup.playSound,soundType:currentPopup.soundType,customSound:currentPopup.customSound,onClose:()=>setCurrentPopup(null),centerScreen:currentPopup.centerScreen})]});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","useAuth","NotificationPopup","jsx","_jsx","jsxs","_jsxs","generateUUID","replace","c","r","Math","random","v","toString","getTestApplicationId","sampleIds","floor","length","NotificationType","NotificationContext","undefined","useNotifications","context","Error","NotificationProvider","_ref","children","user","notifications","setNotifications","unreadCount","setUnreadCount","soundEnabled","setSoundEnabled","currentPopup","setCurrentPopup","pollingIntervalRef","notifiedApplications","setNotifiedApplications","Map","checkingRef","lastNotificationTimeRef","Date","lastCheckTimeRef","loadNotifications","storedNotifications","localStorage","getItem","parsedData","JSON","parse","Array","isArray","notifiedMap","now","forEach","id","set","saveNotifiedApplications","console","log","size","Object","entries","_ref2","timestamp","cleanupOldNotifications","error","current","initialCheckTimeout","setTimeout","initializeWithLastApplicationTimestamp","setInterval","timeSinceLastCheck","getTime","timeSinceLastNotification","checkForNewNotifications","toFixed","clearInterval","clearTimeout","response","fetch","method","headers","body","stringify","query","ok","data","json","lastApp","lastAppId","lastAppCreatedAt","created_at","isNaN","toISOString","dateError","warn","has","appMetadata","notifiedAt","notificationType","applicationType","application_type","amount","clientName","client_name","companyName","company_name","status","markApplicationAsNotified","markError","count","filter","notification","read","parsed","map","n","createdAt","notifiedObject","setItem","twentyFourHoursAgo","totalCount","cleanedCount","updatedNotifications","applicationId","createdTimestamp","metadata","notificationTime","creationTime","updatedMap","metadataKey","getOptimizedQuery","typeCheckResponse","getDefaultQuery","typeData","latestType","additionalFields","clearPopups","hasChanges","_ref3","notifiedIdsArray","from","keys","join","substring","optimizedQuery","newApps","app","isAlreadyNotified","appCreatedAt","isTooOld","newApp","appId","relatedItemId","createdDate","formattedDate","Intl","DateTimeFormat","day","month","year","format","formattedTime","hour","minute","hour12","formattedAmount","NumberFormat","style","currency","minimumFractionDigits","Number","formattedRate","interest_rate","formattedMonthly","monthly_payment","appType","cleanType","split","word","charAt","toUpperCase","slice","getApplicationSpecificHtml","commonFields","specificFields","term","contactFields","client_email","client_phone","detailedMessage","notificationTitle","newNotification","title","message","type","NEW_APPLICATION","relatedItemType","addNotification","showPopup","playSound","soundType","duration","customSound","centerScreen","prev","updated","markAsRead","isRead","markAllAsRead","clearNotifications","config","toggleSound","newValue","value","Provider","onClose"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { useAuth } from './AuthContext';\nimport NotificationPopup from '../components/ui/NotificationPopup';\n\n// Generate a proper UUID for notification IDs\nfunction generateUUID() {\n  // Use a more standard implementation for UUID v4\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n// For test notifications, use a valid UUID format - don't use app-timestamp\nfunction getTestApplicationId() {\n  // Use a small set of real UUIDs as sample application IDs\n  const sampleIds = [\n    '110cc76a-1762-4df4-840e-a503fea9d7aa',\n    '220cc76a-1762-4df4-840e-a503fea9d7bb',\n    '330cc76a-1762-4df4-840e-a503fea9d7cc',\n    '440cc76a-1762-4df4-840e-a503fea9d7dd',\n    '550cc76a-1762-4df4-840e-a503fea9d7ee'\n  ];\n  \n  // Pick a random ID from the sample list\n  return sampleIds[Math.floor(Math.random() * sampleIds.length)];\n}\n\n// Enum for notification types\nexport enum NotificationType {\n  INFO = 'info',\n  SUCCESS = 'success',\n  WARNING = 'warning',\n  ERROR = 'error',\n  NEW_APPLICATION = 'new_application',\n  APPROVAL_REQUIRED = 'approval_required',\n  NEW_MESSAGE = 'new_message',\n  APPLICATION_STATUS_UPDATED = 'application_status_updated',\n  APPLICATION_COMMENT = 'application_comment',\n}\n\n// Interfaces\ninterface Notification {\n  id: string;\n  title: string;\n  message: string;\n  createdAt: Date;\n  read: boolean;\n  type: NotificationType | 'info' | 'success' | 'warning' | 'error';\n  relatedItemId?: string;\n  relatedItemType?: string;\n  data?: any;\n  timestamp?: Date;\n  isRead?: boolean;\n}\n\ninterface NotificationPopupConfig {\n  title: string;\n  message: string;\n  type?: NotificationType | 'info' | 'success' | 'warning' | 'error';\n  duration?: number;\n  playSound?: boolean;\n  soundType?: 'notification' | 'alert' | 'approval';\n  customSound?: string;\n  centerScreen?: boolean;\n  relatedItemId?: string; // ID del elemento relacionado (como una aplicación)\n}\n\ninterface NotificationContextType {\n  notifications: Notification[];\n  unreadCount: number;\n  addNotification: (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => void;\n  markAsRead: (id: string) => void;\n  markAllAsRead: () => void;\n  clearNotifications: () => void;\n  showPopup: (config: NotificationPopupConfig) => void;\n  soundEnabled: boolean;\n  toggleSound: () => void;\n  setSoundEnabled: (enabled: boolean) => void;\n}\n\nexport const NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user } = useAuth();\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [unreadCount, setUnreadCount] = useState<number>(0);\n  const [soundEnabled, setSoundEnabled] = useState<boolean>(true);\n  \n  // Estado para la notificación emergente actual\n  const [currentPopup, setCurrentPopup] = useState<NotificationPopupConfig | null>(null);\n  \n  // Referencia al ID del polling interval\n  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // State to keep track of already notified application IDs with timestamps\n  // This helps prevent showing the same notification multiple times\n  const [notifiedApplications, setNotifiedApplications] = useState<Map<string, number>>(new Map());\n\n  // Referencia para evitar múltiples ejecuciones simultáneas\n  const checkingRef = useRef<boolean>(false);\n  \n  // Reference to the latest known notification time\n  const lastNotificationTimeRef = useRef<Date>(new Date());\n  \n  // Avoid duplicate notifications by ensuring we have a minimum interval between checks\n  const lastCheckTimeRef = useRef<Date>(new Date());\n\n  // Efecto para manejar la carga inicial de notificaciones y configurar el polling\n  useEffect(() => {\n    if (user) {\n      // Cargar notificaciones al inicio\n      loadNotifications();\n\n      // Cargar aplicaciones ya notificadas desde localStorage\n      try {\n        const storedNotifications = localStorage.getItem('notified_application_ids');\n        if (storedNotifications) {\n          const parsedData = JSON.parse(storedNotifications);\n          \n          // Handle both old format (array) and new format (object with timestamps)\n          if (Array.isArray(parsedData)) {\n            // Old format - convert to new Map with current timestamp\n            const notifiedMap = new Map();\n            const now = Date.now();\n            parsedData.forEach((id: string) => {\n              notifiedMap.set(id, now);\n            });\n            setNotifiedApplications(notifiedMap);\n            // Re-save with the new format\n            saveNotifiedApplications(notifiedMap);\n            console.log(`Converted ${notifiedMap.size} notified application IDs from old format to new format`);\n          } else if (typeof parsedData === 'object') {\n            // New format - convert object to Map\n            const notifiedMap = new Map();\n            Object.entries(parsedData).forEach(([id, timestamp]) => {\n              notifiedMap.set(id, timestamp as number);\n            });\n            setNotifiedApplications(notifiedMap);\n            console.log(`Loaded ${notifiedMap.size} notified application IDs from localStorage`);\n          }\n        } else {\n          console.log('No previously notified applications found in localStorage');\n        }\n        \n        // Limpiar notificaciones antiguas (más de 48 horas)\n        cleanupOldNotifications();\n      } catch (error) {\n        console.error('Error loading notified applications:', error);\n        // Reset if there's an error\n        setNotifiedApplications(new Map());\n      }\n      \n      // Set the initial last check time to now\n      lastCheckTimeRef.current = new Date();\n      // Set the initial last notification time to 10 seconds ago to avoid immediate checks\n      lastNotificationTimeRef.current = new Date(Date.now() - 10000);\n      \n      // Wait 5 seconds before first check to ensure UI is fully loaded\n      const initialCheckTimeout = setTimeout(() => {\n        // Primero obtenemos la fecha de la última aplicación para inicializar el sistema\n        initializeWithLastApplicationTimestamp();\n        \n        // Configurar polling para verificar nuevas notificaciones cada 30 seconds\n        // Utilizamos un intervalo más corto para estar más atentos a nuevas solicitudes\n        pollingIntervalRef.current = setInterval(() => {\n          const now = new Date();\n          const timeSinceLastCheck = now.getTime() - lastCheckTimeRef.current.getTime();\n          const timeSinceLastNotification = now.getTime() - lastNotificationTimeRef.current.getTime();\n          \n          // Only check if:\n          // 1. It's been at least 15 seconds since last check AND\n          // 2. It's been at least 5 seconds since showing a notification\n          if (timeSinceLastCheck > 15000 && timeSinceLastNotification > 5000) {\n            checkForNewNotifications();\n          } else {\n            console.log(`Skipping notification check (last check: ${(timeSinceLastCheck/1000).toFixed(1)}s ago, last notification: ${(timeSinceLastNotification/1000).toFixed(1)}s ago)`);\n          }\n        }, 20000);\n      }, 5000);\n      \n      // Limpiar el intervalo cuando el componente se desmonte\n      return () => {\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n        }\n        clearTimeout(initialCheckTimeout);\n      };\n    }\n  }, [user]);\n\n  // Inicializar con el timestamp de la última aplicación\n  const initializeWithLastApplicationTimestamp = async () => {\n    try {\n      // Obtener la última aplicación para usarla como referencia inicial\n      const response = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: `\n            SELECT id, created_at, application_type, client_name, company_name, status, amount\n            FROM applications \n            ORDER BY created_at DESC\n            LIMIT 1\n          `\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Error querying most recent application');\n      }\n      \n      const data = await response.json();\n      \n      if (data.data && data.data.length > 0) {\n        const lastApp = data.data[0];\n        const lastAppId = lastApp.id;\n        \n        // Verificar que created_at sea una fecha válida\n        let lastAppCreatedAt;\n        try {\n          lastAppCreatedAt = new Date(lastApp.created_at);\n          // Verificar que la fecha sea válida comprobando si es NaN\n          if (isNaN(lastAppCreatedAt.getTime())) {\n            throw new Error('Invalid date value');\n          }\n          console.log(`System initialized with reference to last application: ${lastAppId} created at ${lastAppCreatedAt.toISOString()}`);\n        } catch (dateError) {\n          console.warn(`Invalid date format for last application: ${lastApp.created_at}. Using current date instead.`);\n          lastAppCreatedAt = new Date(); // Usar fecha actual como alternativa\n        }\n        \n        // Marcar la aplicación más reciente como ya notificada para evitar duplicados al inicio\n        if (!notifiedApplications.has(lastAppId)) {\n          const appMetadata = {\n            notifiedAt: new Date().toISOString(),\n            notificationType: 'initialization',\n            applicationType: lastApp.application_type,\n            amount: lastApp.amount,\n            clientName: lastApp.client_name,\n            companyName: lastApp.company_name,\n            status: lastApp.status\n          };\n          try {\n            markApplicationAsNotified(lastAppId, lastAppCreatedAt.toISOString(), appMetadata);\n          } catch (markError) {\n            console.error('Error marking last application as notified:', markError);\n          }\n        }\n      }\n      \n      // Realizar la primera verificación de notificaciones\n      checkForNewNotifications();\n    } catch (error) {\n      console.error('Error initializing with last application timestamp:', error);\n      // Si falla, aún intentamos la primera verificación\n      checkForNewNotifications();\n    }\n  };\n\n  // Cálculo de notificaciones no leídas\n  useEffect(() => {\n    const count = notifications.filter(notification => !notification.read).length;\n    setUnreadCount(count);\n  }, [notifications]);\n\n  // Cargar notificaciones del almacenamiento local o del servidor\n  const loadNotifications = async () => {\n    try {\n      // En un escenario real, aquí se cargarían las notificaciones del servidor\n      // Por ahora, usaremos el localStorage como ejemplo\n      const storedNotifications = localStorage.getItem('notifications');\n      if (storedNotifications) {\n        const parsed = JSON.parse(storedNotifications);\n        setNotifications(parsed.map((n: any) => ({\n          ...n,\n          createdAt: new Date(n.createdAt)\n        })));\n      }\n    } catch (error) {\n      console.error('Error loading notifications:', error);\n    }\n  };\n\n  // Save notified applications with timestamps to localStorage\n  const saveNotifiedApplications = (notifiedMap: Map<string, number>) => {\n    try {\n      // Convert Map to object for storage\n      const notifiedObject: Record<string, number> = {};\n      notifiedMap.forEach((timestamp, id) => {\n        notifiedObject[id] = timestamp;\n      });\n      \n      localStorage.setItem('notified_application_ids', JSON.stringify(notifiedObject));\n      console.log(`Saved ${notifiedMap.size} notified application IDs to localStorage`);\n    } catch (error) {\n      console.error('Error saving notified applications:', error);\n    }\n  };\n\n  // Función para limpiar notificaciones antiguas\n  const cleanupOldNotifications = () => {\n    try {\n      const now = Date.now();\n      const twentyFourHoursAgo = now - (24 * 60 * 60 * 1000); // 24 horas en milisegundos\n      \n      let totalCount = 0;\n      let cleanedCount = 0;\n      \n      // Crear un nuevo mapa para guardar solo las notificaciones más recientes\n      const updatedNotifications = new Map();\n      \n      notifiedApplications.forEach((timestamp, id) => {\n        totalCount++;\n        if (timestamp > twentyFourHoursAgo) {\n          // Mantener solo las notificaciones de las últimas 24 horas\n          updatedNotifications.set(id, timestamp);\n        } else {\n          cleanedCount++;\n        }\n      });\n      \n      if (cleanedCount > 0) {\n        console.log(`Cleaned up ${cleanedCount} old notification records (${totalCount - cleanedCount} retained)`);\n        setNotifiedApplications(updatedNotifications);\n        saveNotifiedApplications(updatedNotifications);\n      } else if (totalCount > 0) {\n        console.log(`No old notifications to clean up (${totalCount} notifications are all within 24 hours)`);\n      }\n    } catch (error) {\n      console.error('Error cleaning up old notifications:', error);\n    }\n  };\n\n  // Marcar una aplicación como notificada\n  const markApplicationAsNotified = (applicationId: string, createdTimestamp?: string, metadata?: any) => {\n    // Check if already marked as notified\n    if (notifiedApplications.has(applicationId)) {\n      console.log(`Application ${applicationId} already marked as notified (duplicate protection)`);\n      return; // Already notified, don't do anything\n    }\n    \n    try {\n      let notificationTime: number;\n      \n      // If createdTimestamp is provided, use it to set notification time just after creation\n      if (createdTimestamp) {\n        try {\n          // Try to parse the creation timestamp\n          const creationTime = new Date(createdTimestamp);\n          // Set notification time 1 second after creation to ensure proper ordering\n          notificationTime = creationTime.getTime() + 1000;\n          console.log(`Using application creation time for notification: ${creationTime.toISOString()}`);\n        } catch (error) {\n          // If parsing fails, use current time as fallback\n          console.warn(`Error parsing creation timestamp \"${createdTimestamp}\":`, error);\n          notificationTime = Date.now();\n        }\n      } else {\n        // If no timestamp provided, use current time\n        notificationTime = Date.now();\n      }\n      \n      // Crear un objeto de metadatos para esta aplicación si no se proporcionó uno\n      const appMetadata = metadata || {\n        notifiedAt: new Date(notificationTime).toISOString(),\n        notificationType: 'application',\n      };\n      \n      // Save to the notified applications map\n      const updatedMap = new Map(notifiedApplications);\n      updatedMap.set(applicationId, notificationTime);\n      setNotifiedApplications(updatedMap);\n      \n      // Guardar también los metadatos si es necesario para futuras optimizaciones\n      try {\n        const metadataKey = `notification_metadata_${applicationId}`;\n        localStorage.setItem(metadataKey, JSON.stringify(appMetadata));\n      } catch (error) {\n        console.warn('Error saving notification metadata:', error);\n      }\n      \n      // Save to localStorage\n      saveNotifiedApplications(updatedMap);\n      \n      // Update last notification time\n      lastNotificationTimeRef.current = new Date();\n      \n      console.log(`Marked application ${applicationId} as notified at ${new Date(notificationTime).toISOString()}`);\n    } catch (error) {\n      console.error('Error marking application as notified:', error);\n    }\n  };\n\n  // Función para obtener la consulta SQL optimizada según el tipo de aplicación más reciente\n  const getOptimizedQuery = async (): Promise<string> => {\n    try {\n      // Primero, verificar el tipo de la aplicación más reciente para optimizar la consulta\n      const typeCheckResponse = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: `\n            SELECT application_type\n            FROM applications \n            ORDER BY created_at DESC\n            LIMIT 1\n          `\n        })\n      });\n      \n      if (!typeCheckResponse.ok) {\n        console.warn('Error checking latest application type, using default query');\n        return getDefaultQuery();\n      }\n      \n      const typeData = await typeCheckResponse.json();\n      \n      if (!typeData.data || typeData.data.length === 0) {\n        console.log('No applications found, using default query');\n        return getDefaultQuery();\n      }\n      \n      const latestType = typeData.data[0].application_type;\n      console.log(`Latest application type: ${latestType}`);\n      \n      // Personalizar los campos según el tipo de aplicación\n      let additionalFields = '';\n      \n      switch(latestType) {\n        case 'selected_plans':\n          // Para planes seleccionados, necesitamos plazo, tasa y pago mensual\n          additionalFields = '';\n          break;\n        case 'product_simulations':\n          // Para simulaciones, podríamos necesitar campos específicos del producto\n          additionalFields = '';\n          break;\n        case 'cash_requests':\n          // Para solicitudes de efectivo\n          additionalFields = '';\n          break;\n        case 'car_backed_loan_applications':\n        case 'auto_loan_applications':\n          // Para préstamos de auto, podríamos necesitar datos del vehículo\n          additionalFields = '';\n          break;\n        default:\n          additionalFields = '';\n      }\n      \n      // Construir consulta con base en el tipo\n      return `\n        SELECT id, client_name, application_type, company_name, created_at, status, \n               amount, term, interest_rate, monthly_payment, client_email, client_phone ${additionalFields}\n        FROM applications \n        WHERE created_at > NOW() - INTERVAL '30 seconds'\n        ORDER BY created_at DESC\n        LIMIT 5\n      `;\n      \n    } catch (error) {\n      console.error('Error building optimized query:', error);\n      return getDefaultQuery();\n    }\n  };\n  \n  // Consulta predeterminada con campos básicos\n  const getDefaultQuery = (): string => {\n    return `\n      SELECT id, client_name, application_type, company_name, created_at, status, \n             amount, term, interest_rate, monthly_payment, client_email, client_phone\n      FROM applications \n      WHERE created_at > NOW() - INTERVAL '30 seconds'\n      ORDER BY created_at DESC\n      LIMIT 5\n    `;\n  };\n\n  const checkForNewNotifications = async () => {\n    // Record the check time immediately to prevent race conditions\n    lastCheckTimeRef.current = new Date();\n    \n    // Avoid multiple executions at the same time\n    if (checkingRef.current) {\n      console.log('Already checking for notifications');\n      return;\n    }\n    \n    // Make sure we don't have any lingering popups\n    clearPopups();\n    \n    // Sincronizar con localStorage antes de verificar para evitar duplicados\n    try {\n      const storedNotifications = localStorage.getItem('notified_application_ids');\n      if (storedNotifications) {\n        const parsedData = JSON.parse(storedNotifications);\n        if (typeof parsedData === 'object' && !Array.isArray(parsedData)) {\n          // Fusionar con las notificaciones actuales\n          const updatedMap = new Map(notifiedApplications);\n          let hasChanges = false;\n          \n          Object.entries(parsedData).forEach(([id, timestamp]) => {\n            if (!updatedMap.has(id)) {\n              updatedMap.set(id, timestamp as number);\n              hasChanges = true;\n            }\n          });\n          \n          if (hasChanges) {\n            console.log('Synchronized notification IDs from localStorage before checking');\n            setNotifiedApplications(updatedMap);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error synchronizing notifications from localStorage:', error);\n    }\n    \n    checkingRef.current = true;\n    console.log('Checking for new notifications...');\n    \n    try {\n      // Convert notified IDs Map to array for logging\n      const notifiedIdsArray = Array.from(notifiedApplications.keys());\n      console.log(`${notifiedIdsArray.length} already notified application IDs: ${notifiedIdsArray.join(', ').substring(0, 200)}${notifiedIdsArray.length > 5 ? '...' : ''}`);\n      \n      // Obtener consulta optimizada según tipo de aplicación\n      const optimizedQuery = await getOptimizedQuery();\n      console.log('Using optimized query for latest application type');\n      \n      const response = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ query: optimizedQuery })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Error querying recent applications');\n      }\n      \n      const data = await response.json();\n      \n      // If there are applications, filter them first and then show notification\n      if (data.data && data.data.length > 0) {\n        console.log(`Received ${data.data.length} applications from the last 30 seconds`);\n        \n        // Filter out any applications that have already been notified\n        const newApps = data.data.filter((app: any) => {\n          const isAlreadyNotified = notifiedApplications.has(app.id);\n          if (isAlreadyNotified) {\n            console.log(`Skipping already notified application: ${app.id}`);\n            return false;\n          }\n          \n          // Convertir el timestamp de la aplicación a Date para comparar\n          let appCreatedAt;\n          try {\n            appCreatedAt = new Date(app.created_at);\n            // Verificar que la fecha sea válida\n            if (isNaN(appCreatedAt.getTime())) {\n              console.warn(`Invalid date for application ${app.id}: ${app.created_at}, using current time`);\n              appCreatedAt = new Date(); // Usar fecha actual como alternativa\n            }\n          } catch (error) {\n            console.warn(`Error parsing date for application ${app.id}: ${error}`);\n            appCreatedAt = new Date(); // Usar fecha actual como alternativa\n          }\n          \n          // Si la aplicación es de hace más de 60 segundos, no notificar\n          const isTooOld = (new Date().getTime() - appCreatedAt.getTime()) > 60000;\n          if (isTooOld) {\n            console.log(`Skipping too old application: ${app.id} created at ${appCreatedAt.toISOString()}`);\n            // Marcar como notificada para evitar mostrarla en futuras verificaciones\n            const appMetadata = {\n              notifiedAt: new Date().toISOString(),\n              notificationType: 'application',\n              applicationType: app.application_type,\n              amount: app.amount,\n              clientName: app.client_name,\n              companyName: app.company_name,\n              status: app.status\n            };\n            try {\n              markApplicationAsNotified(app.id, appCreatedAt.toISOString(), appMetadata);\n            } catch (markError) {\n              console.error(`Error marking old application as notified: ${markError}`);\n            }\n            return false;\n          }\n          \n          return true;\n        });\n        \n        console.log(`Found ${newApps.length} new applications after filtering`);\n        \n        if (newApps.length === 0) {\n          console.log('No truly new applications found (already notified or too old)');\n          checkingRef.current = false;\n          return;\n        }\n        \n        // Take only the first new application to show\n        const newApp = newApps[0];\n        const appId = newApp.id;\n        \n        // Verificar si ya está en proceso de notificación (para evitar doble notificación)\n        if (currentPopup && currentPopup.relatedItemId === appId) {\n          console.log(`Already showing notification for application ${appId} - skipping`);\n          checkingRef.current = false;\n          return;\n        }\n        \n        console.log(`New application detected: ${appId} (created ${new Date(newApp.created_at).toISOString()})`);\n        \n        // IMPORTANT: Mark as notified IMMEDIATELY to prevent duplicates\n        // even if processing fails later\n        const appMetadata = {\n          notifiedAt: new Date().toISOString(),\n          notificationType: 'application',\n          applicationType: newApp.application_type,\n          amount: newApp.amount,\n          clientName: newApp.client_name,\n          companyName: newApp.company_name,\n          status: newApp.status\n        };\n        \n        try {\n          // Verificar que la fecha sea válida\n          let createdDate;\n          try {\n            createdDate = new Date(newApp.created_at);\n            if (isNaN(createdDate.getTime())) {\n              createdDate = new Date(); // Usar fecha actual si no es válida\n            }\n          } catch (dateError) {\n            console.warn(`Invalid date format for new application: ${newApp.created_at}. Using current date.`);\n            createdDate = new Date(); // Usar fecha actual como alternativa\n          }\n          \n          markApplicationAsNotified(appId, createdDate.toISOString(), appMetadata);\n        } catch (markError) {\n          console.error('Error marking application as notified:', markError);\n        }\n          \n        // Format data for notification\n        let createdAt;\n        try {\n          createdAt = new Date(newApp.created_at);\n          if (isNaN(createdAt.getTime())) {\n            createdAt = new Date(); // Usar fecha actual si no es válida\n          }\n        } catch (error) {\n          console.warn(`Error parsing date for notification: ${error}`);\n          createdAt = new Date(); // Usar fecha actual como alternativa\n        }\n        \n        const formattedDate = new Intl.DateTimeFormat('es-MX', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric'\n        }).format(createdAt);\n        \n        const formattedTime = new Intl.DateTimeFormat('es-MX', {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: true\n        }).format(createdAt);\n        \n        // Format amount with thousands separator and 2 decimals\n        const formattedAmount = new Intl.NumberFormat('es-MX', {\n          style: 'currency',\n          currency: 'MXN',\n          minimumFractionDigits: 2\n        }).format(Number(newApp.amount || 0));\n        \n        // Format interest rate with percentage\n        const formattedRate = newApp.interest_rate !== null && newApp.interest_rate !== undefined \n          ? `${newApp.interest_rate}%` \n          : \"N/A\";\n        \n        // Format monthly payment\n        const formattedMonthly = newApp.monthly_payment !== null && newApp.monthly_payment !== undefined\n          ? new Intl.NumberFormat('es-MX', {\n              style: 'currency',\n              currency: 'MXN',\n              minimumFractionDigits: 2\n            }).format(Number(newApp.monthly_payment))\n          : \"N/A\";\n        \n        // Transform application type to a more readable format\n        let appType = 'No especificado';\n        if (newApp.application_type) {\n          // Remove any trailing slash if it exists\n          const cleanType = newApp.application_type.replace(/\\/$/, '');\n          \n          if (cleanType === 'selected_plans') {\n            appType = 'Planes seleccionados';\n          } else if (cleanType === 'product_simulations') {\n            appType = 'Simulación de producto';\n          } else if (cleanType === 'cash_requests') {\n            appType = 'Solicitud de efectivo';\n          } else if (cleanType === 'car_backed_loan_applications') {\n            appType = 'Préstamo con garantía de auto';\n          } else if (cleanType === 'auto_loan_applications') {\n            appType = 'Préstamo para auto';\n          } else {\n            appType = cleanType\n              .split('_')\n              .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))\n              .join(' ');\n          }\n        }\n\n        // Adaptar la información según el tipo de aplicación\n        const getApplicationSpecificHtml = (appType: string, app: any) => {\n          // Base de los campos comunes para todos los tipos\n          const commonFields = `\n            <div class=\"font-semibold text-gray-700\">Cliente:</div>\n            <div class=\"text-gray-900\">${app.client_name || 'Sin nombre'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Empresa:</div>\n            <div class=\"text-gray-900\">${app.company_name || 'No especificada'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Tipo:</div>\n            <div class=\"text-gray-900\">${appType}</div>\n          `;\n\n          // Campos específicos según el tipo de aplicación\n          let specificFields = '';\n\n          // Planes seleccionados - enfatizar plazo, tasa, pago mensual\n          if (app.application_type === 'selected_plans') {\n            specificFields = `\n              <div class=\"font-semibold text-gray-700\">Monto:</div>\n              <div class=\"text-gray-900\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term || 'N/A'} ${app.term === 1 ? 'mes' : 'meses'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Pago mensual:</div>\n              <div class=\"text-gray-900\">${formattedMonthly}</div>\n            `;\n          } \n          // Simulación de producto - enfatizar tipo de producto y monto total\n          else if (app.application_type === 'product_simulations') {\n            specificFields = `\n              <div class=\"font-semibold text-gray-700\">Monto:</div>\n              <div class=\"text-gray-900 font-bold\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term && app.term > 0 ? app.term + (app.term === 1 ? ' mes' : ' meses') : 'N/A'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n            `;\n          } \n          // Solicitudes de efectivo - enfatizar monto solicitado\n          else if (app.application_type === 'cash_requests') {\n            specificFields = `\n              <div class=\"font-semibold text-gray-700\">Monto solicitado:</div>\n              <div class=\"text-gray-900 font-bold\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term && app.term > 0 ? app.term + (app.term === 1 ? ' mes' : ' meses') : 'N/A'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n            `;\n          }\n          // Préstamos relacionados con autos\n          else if (app.application_type === 'car_backed_loan_applications' || app.application_type === 'auto_loan_applications') {\n            specificFields = `\n              <div class=\"font-semibold text-gray-700\">Monto del préstamo:</div>\n              <div class=\"text-gray-900 font-bold\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term && app.term > 0 ? app.term + (app.term === 1 ? ' mes' : ' meses') : 'N/A'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Pago mensual:</div>\n              <div class=\"text-gray-900\">${formattedMonthly}</div>\n            `;\n          }\n          // Para cualquier otro tipo\n          else {\n            specificFields = `\n              <div class=\"font-semibold text-gray-700\">Monto:</div>\n              <div class=\"text-gray-900\">${formattedAmount}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Plazo:</div>\n              <div class=\"text-gray-900\">${app.term && app.term > 0 ? app.term + (app.term === 1 ? ' mes' : ' meses') : 'N/A'}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Tasa:</div>\n              <div class=\"text-gray-900\">${formattedRate}</div>\n              \n              <div class=\"font-semibold text-gray-700\">Pago mensual:</div>\n              <div class=\"text-gray-900\">${formattedMonthly}</div>\n            `;\n          }\n\n          // Contacto y fecha - comunes para todos\n          const contactFields = `\n            <div class=\"font-semibold text-gray-700\">Email:</div>\n            <div class=\"text-gray-900\">${app.client_email || 'No especificado'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Teléfono:</div>\n            <div class=\"text-gray-900\">${app.client_phone || 'No especificado'}</div>\n            \n            <div class=\"font-semibold text-gray-700\">Fecha:</div>\n            <div class=\"text-gray-900\">${formattedDate} ${formattedTime}</div>\n          `;\n\n          return `\n            <div class=\"grid grid-cols-2 gap-2 text-sm mt-2\">\n              ${commonFields}\n              ${specificFields}\n              ${contactFields}\n            </div>\n          `;\n        };\n        \n        // Obtener el HTML específico según el tipo de aplicación\n        const detailedMessage = getApplicationSpecificHtml(appType, newApp);\n        \n        const notificationTitle = '💼 Nueva solicitud recibida';\n        \n        // Create the notification for the panel\n        const newNotification = {\n          title: notificationTitle,\n          message: `Cliente: ${newApp.client_name || 'Sin nombre'} - ${newApp.company_name || 'Empresa no especificada'}`,\n          type: NotificationType.NEW_APPLICATION,\n          relatedItemType: 'application',\n          relatedItemId: appId\n        };\n        \n        // Add the notification to the panel\n        addNotification(newNotification);\n        \n        // Show popup with complete details\n        showPopup({\n          title: notificationTitle,\n          message: detailedMessage,\n          type: NotificationType.NEW_APPLICATION,\n          playSound: soundEnabled,\n          soundType: 'notification',\n          duration: 10000, // 10 seconds\n          customSound: '/sounds/clean-notification.mp3',\n          centerScreen: true,\n          relatedItemId: appId\n        });\n        \n        // Update last notification time to avoid duplicates\n        lastNotificationTimeRef.current = new Date();\n      } else {\n        console.log('No new applications found in the last 30 seconds');\n      }\n\n    } catch (error) {\n      console.error('Error checking for new notifications:', error);\n    } finally {\n      // Always mark as not running regardless of the result\n      checkingRef.current = false;\n    }\n  };\n\n  // Añadir una nueva notificación\n  const addNotification = (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => {\n    const newNotification: Notification = {\n      ...notification,\n      // Using a proper UUID for the notification ID\n      id: generateUUID(),\n      createdAt: new Date(),\n      read: false,\n      timestamp: new Date()\n    };\n    \n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Guardar en localStorage (en producción esto iría al servidor)\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar una notificación como leída\n  const markAsRead = (id: string) => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => \n        notification.id === id \n          ? { ...notification, read: true, isRead: true } \n          : notification\n      );\n      \n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar todas las notificaciones como leídas\n  const markAllAsRead = () => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => ({ ...notification, read: true, isRead: true }));\n      \n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Limpiar todas las notificaciones\n  const clearNotifications = () => {\n    setNotifications([]);\n    // Limpiar del localStorage\n    localStorage.setItem('notifications', JSON.stringify([]));\n  };\n\n  // Mostrar una notificación emergente\n  const showPopup = (config: NotificationPopupConfig) => {\n    // Verificar si ya hay un popup con el mismo título y mensaje o mismo ID relacionado (posible duplicado)\n    if (currentPopup && \n        ((currentPopup.title === config.title && currentPopup.message === config.message) ||\n         (config.relatedItemId && currentPopup.relatedItemId === config.relatedItemId))) {\n      console.log(`Ignoring duplicate popup: ${config.relatedItemId || 'unknown ID'}`);\n      return;\n    }\n\n    // Clear any existing popups to prevent stacking\n    clearPopups();\n    \n    // Log what we're showing\n    console.log(`Showing popup: ${config.title} ${config.relatedItemId ? `(ID: ${config.relatedItemId})` : ''}`);\n    \n    // Short timeout to ensure DOM updates before showing the new popup\n    setTimeout(() => {\n      setCurrentPopup(config);\n      \n      // Automatically close popup after the specified duration\n      setTimeout(() => {\n        setCurrentPopup(null);\n      }, config.duration || 5000);\n    }, 50);\n  };\n\n  // Clear any pending popups\n  const clearPopups = () => {\n    if (currentPopup) {\n      console.log('Clearing existing popup');\n      setCurrentPopup(null);\n    }\n  };\n\n  // Activar/desactivar sonidos de notificación\n  const toggleSound = () => {\n    const newValue = !soundEnabled;\n    setSoundEnabled(newValue);\n    // Guardar preferencia en localStorage\n    localStorage.setItem('notification_sound_enabled', newValue.toString());\n  };\n\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    showPopup,\n    soundEnabled,\n    toggleSound,\n    setSoundEnabled\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n      {currentPopup && (\n        <NotificationPopup\n          title={currentPopup.title}\n          message={currentPopup.message}\n          type={currentPopup.type as any}\n          duration={currentPopup.duration}\n          playSound={currentPopup.playSound}\n          soundType={currentPopup.soundType}\n          customSound={currentPopup.customSound}\n          onClose={() => setCurrentPopup(null)}\n          centerScreen={currentPopup.centerScreen}\n        />\n      )}\n    </NotificationContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}