{"ast":null,"code":"import React,{useState,useEffect,useRef,useMemo}from'react';import{Link}from'react-router-dom';import{getApprovalStatus,approveByAdvisor,approveByCompany}from'../../services/applicationService';import{APPLICATION_STATUS,STATUS_LABELS}from'../../utils/constants/statuses';import{usePermissions}from'../../contexts/PermissionsContext';import{useAuth}from'../../contexts/AuthContext';import{TABLES}from'../../utils/constants/tables';import{formatDate}from'../../utils/formatters';import{APPLICATION_TYPE_LABELS}from'../../utils/constants/applications';// Verificar si APPLICATION_HISTORY tabla está definida\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const APPLICATION_HISTORY_TABLE=TABLES.APPLICATION_HISTORY||'application_history';// Función para escapar cadenas de texto para SQL\nfunction escapeSQLString(str){if(!str)return'';return str.replace(/'/g,\"''\");}// Interfaz para el estado de aprobación\n// Crear un tipo para aplicaciones con su estado de aprobación\nconst KanbanBoard=_ref=>{let{applications,onStatusChange}=_ref;const[isLoading,setIsLoading]=useState(false);const[errorMessage,setErrorMessage]=useState(null);const[appsWithApproval,setAppsWithApproval]=useState([]);const[processingAppId,setProcessingAppId]=useState(null);const{shouldFilterByEntity,getEntityFilter,isAdvisor,isCompanyAdmin}=usePermissions();const{user}=useAuth();const dragItemRef=useRef(null);const dragImageRef=useRef(null);const draggedItemIndexRef=useRef(-1);const draggedItemNewStatusRef=useRef('');const[autoTransitionMessage,setAutoTransitionMessage]=useState(null);// Añadir estados para filtros\nconst[searchQuery,setSearchQuery]=useState('');const[statusFilter,setStatusFilter]=useState('all');const[typeFilter,setTypeFilter]=useState('all');const[dateFromFilter,setDateFromFilter]=useState('');const[dateToFilter,setDateToFilter]=useState('');const[amountMinFilter,setAmountMinFilter]=useState('');const[amountMaxFilter,setAmountMaxFilter]=useState('');const[isFilterExpanded,setIsFilterExpanded]=useState(false);// Primero, modificar useEffect para cargar aplicaciones con datos de aprobación\nuseEffect(()=>{const loadApprovalStatuses=async()=>{if(!applications||applications.length===0)return;setIsLoading(true);try{const appsWithStatus=await Promise.all(applications.map(async app=>{// Obtener el estado de aprobación real de la API\nconst status=await getApprovalStatus(app.id);// Devolver la aplicación con su estado de aprobación\nreturn{...app,approvalStatus:status||{approvedByAdvisor:false,approvedByCompany:false},// Para administradores de empresa, agregar un campo que maneja su \"estado virtual\"\ncompany_review_status:isCompanyAdmin()?// Si la aplicación está en revisión o aprobada por empresa, marcarla\napp.status===APPLICATION_STATUS.IN_REVIEW||status&&status.approvedByCompany:false};}));setAppsWithApproval(appsWithStatus);}catch(error){console.error(\"Error loading approval statuses:\",error);}finally{setIsLoading(false);}};loadApprovalStatuses();},[applications]);// Modificar cómo se transforman las aplicaciones para ordenarlas de más viejas a más recientes\n// en el useEffect donde se establece appsWithApproval alrededor de la línea 100-150\nuseEffect(()=>{const setupApplications=async()=>{const appsWithApprovalStatuses=await Promise.all(applications.map(async app=>{// Cargar estado de aprobación si aún no está cargado\nconst approvalStatus=await getApprovalStatus(app.id);return{...app,approvalStatus,isMoving:false};}));// Ordenar de más viejas a más recientes por fecha de creación\nconst sortedApps=[...appsWithApprovalStatuses].sort((a,b)=>{const dateA=new Date(a.created_at);const dateB=new Date(b.created_at);return dateA.getTime()-dateB.getTime();// Orden ascendente (más viejas primero)\n});setAppsWithApproval(sortedApps);};setupApplications();},[applications]);// Actualizar la lógica para nuevas aplicaciones para incluir todas las nuevas notificaciones\nuseEffect(()=>{// Verificar si hay aplicaciones que deberían estar en \"nuevo\" (recién creadas)\nconst newApplications=applications.filter(app=>{// Identificar aplicaciones recién creadas (menos de 24 horas)\nconst isNew=!app.status||app.status==='pending'||app.status==='solicitud';const createdAt=new Date(app.created_at);const now=new Date();const hoursElapsed=(now.getTime()-createdAt.getTime())/(1000*60*60);const isRecent=hoursElapsed<72;return isRecent&&(isNew||app.status==='new');});// Si hay aplicaciones nuevas sin status o con status pendiente/solicitud, asignarles \"nuevo\"\nif(newApplications.length>0){console.log('Aplicaciones nuevas detectadas:',newApplications);const updatedApps=[...appsWithApproval];newApplications.forEach(newApp=>{const index=updatedApps.findIndex(app=>app.id===newApp.id);if(index!==-1&&(!updatedApps[index].status||updatedApps[index].status==='pending'||updatedApps[index].status==='solicitud')){updatedApps[index]={...updatedApps[index],status:APPLICATION_STATUS.NEW};console.log(`Aplicación ${newApp.id} movida a estado NUEVO`);}});setAppsWithApproval(updatedApps);}},[applications]);// Usar applications como dependencia en lugar de appsWithApproval\n// Asegurar que nuevas aplicaciones se muestren inmediatamente\n// añadiendo una función de comprobación en el useEffect principal\nuseEffect(()=>{const checkForNewApplications=async()=>{// Verificar que tenemos usuario y permisos\nif(!(user!==null&&user!==void 0&&user.id))return;try{// Ejecutar esta comprobación solo si somos admin de empresa\nif(isCompanyAdmin()&&applications.length>0){// Obtener la fecha de hace 24 horas\nconst oneDayAgo=new Date();oneDayAgo.setHours(oneDayAgo.getHours()-24);// Buscar aplicaciones creadas en las últimas 24 horas\nconst recentApps=applications.filter(app=>{const createdAt=new Date(app.created_at);return createdAt>=oneDayAgo;});// Si hay aplicaciones recientes, asegurarnos de que aparezcan en el tablero\nif(recentApps.length>0){console.log(`Encontradas ${recentApps.length} aplicaciones recientes`);// Asegurar que todas estas aplicaciones están en nuestro estado local\n// y que tienen el estado correcto (NEW si no tienen un estado específico)\nconst updatedApps=[...appsWithApproval];let hasChanges=false;recentApps.forEach(recentApp=>{const index=updatedApps.findIndex(app=>app.id===recentApp.id);// Si la aplicación no está en nuestro estado, agregarla\nif(index===-1){console.log(`Agregando aplicación nueva ${recentApp.id} al estado`);updatedApps.push({...recentApp,status:recentApp.status||APPLICATION_STATUS.NEW,approvalStatus:{approvedByAdvisor:recentApp.approved_by_advisor||false,approvedByCompany:recentApp.approved_by_company||false}});hasChanges=true;}// Si no tiene estado o está en estado pendiente/solicitud, asignarle NEW\nelse if(!updatedApps[index].status||updatedApps[index].status==='pending'||updatedApps[index].status==='solicitud'){console.log(`Actualizando estado de ${recentApp.id} a NUEVO`);updatedApps[index]={...updatedApps[index],status:APPLICATION_STATUS.NEW};hasChanges=true;}});// Actualizar el estado solo si hubo cambios\nif(hasChanges){setAppsWithApproval(updatedApps);}}}}catch(error){console.error('Error verificando nuevas aplicaciones:',error);}};// Ejecutar la función de comprobación\ncheckForNewApplications();},[applications,user===null||user===void 0?void 0:user.id,isCompanyAdmin]);// Modificar la lógica para actualizar todas las aplicaciones con estado \"pending\" o \"solicitud\" a \"new\"\nuseEffect(()=>{// Si no hay aplicaciones, no hacer nada\nif(!applications||applications.length===0)return;console.log('Verificando estado de aplicaciones:',applications.map(a=>({id:a.id,status:a.status})));// Actualizar solo las aplicaciones con estado específico a \"new\" sin afectar las demás\nconst updatedApps=[...appsWithApproval];let hasChanges=false;applications.forEach(app=>{const index=updatedApps.findIndex(a=>a.id===app.id);const needsUpdate=!app.status||app.status==='pending'||app.status==='solicitud';// Solo actualizar si el estado necesita cambiar a \"new\"\nif(index!==-1&&needsUpdate){console.log(`Actualizando estado de aplicación ${app.id} de \"${app.status}\" a \"new\"`);updatedApps[index]={...updatedApps[index],status:APPLICATION_STATUS.NEW};hasChanges=true;}else if(index===-1){// Si la aplicación no está en el array, agregarla con su estado original\n// o \"new\" si no tiene estado o es pending/solicitud\nconst newStatus=needsUpdate?APPLICATION_STATUS.NEW:app.status;console.log(`Agregando aplicación ${app.id} con estado \"${newStatus}\"`);updatedApps.push({...app,status:newStatus,approvalStatus:{approvedByAdvisor:app.approved_by_advisor||false,approvedByCompany:app.approved_by_company||false}});hasChanges=true;}// Si existe y no necesita actualización, la dejamos como está\n});if(hasChanges){console.log('Actualizando aplicaciones:');updatedApps.forEach(app=>console.log(`- ${app.id}: ${app.status}`));setAppsWithApproval(updatedApps);}},[applications]);// Modificar la forma en que agrupamos las aplicaciones por estado para los administradores de empresa\n// para crear un flujo de trabajo independiente\nconst groupedApplications=React.useMemo(()=>{// Crear un objeto con todos los estados posibles como claves y arrays vacíos como valores\nconst initialGroups=Object.values(APPLICATION_STATUS).reduce((acc,status)=>{acc[status]=[];return acc;},{});// Para los administradores de empresa, usaremos un agrupamiento virtual basado en las aprobaciones\nif(isCompanyAdmin()){return appsWithApproval.reduce((acc,app)=>{// Si está en movimiento, respetar el estado de destino\nif(app.isMoving&&app.targetStatus){// Verificar que el estado existe antes de intentar agregar la aplicación\nif(acc[app.targetStatus]){acc[app.targetStatus].push(app);}else{// Si el estado no existe, usar NEW como fallback\nconsole.warn(`Estado inválido detectado: ${app.targetStatus}, usando NEW como fallback`);acc[APPLICATION_STATUS.NEW].push(app);}return acc;}// Normalizar estados \"pending\" y \"solicitud\" a \"new\"\nif(!app.status||app.status==='pending'||app.status==='solicitud'){acc[APPLICATION_STATUS.NEW].push(app);return acc;}// Estados compartidos que siempre se muestran igual para todos los usuarios\nconst sharedStatuses=[APPLICATION_STATUS.POR_DISPERSAR,APPLICATION_STATUS.COMPLETED,APPLICATION_STATUS.EXPIRED,APPLICATION_STATUS.CANCELLED,APPLICATION_STATUS.REJECTED];if(sharedStatuses.includes(app.status)){// Verificar que el estado existe\nif(acc[app.status]){acc[app.status].push(app);}else{console.warn(`Estado compartido inválido detectado: ${app.status}, usando NEW como fallback`);acc[APPLICATION_STATUS.NEW].push(app);}return acc;}// Para los estados independientes, usar la lógica personalizada para admin de empresa\nif(app.status===APPLICATION_STATUS.APPROVED){var _app$approvalStatus,_app$approvalStatus2,_app$approvalStatus3;// Si está aprobada por la empresa pero no por el asesor, mostrarla en \"aprobado por mi\" \nif((_app$approvalStatus=app.approvalStatus)!==null&&_app$approvalStatus!==void 0&&_app$approvalStatus.approvedByCompany&&!app.approvalStatus.approvedByAdvisor){acc[APPLICATION_STATUS.APPROVED].push(app);return acc;}// Si está aprobada por ambos, y el estado real es aprobado, mostrarla en aprobado\nif((_app$approvalStatus2=app.approvalStatus)!==null&&_app$approvalStatus2!==void 0&&_app$approvalStatus2.approvedByCompany&&(_app$approvalStatus3=app.approvalStatus)!==null&&_app$approvalStatus3!==void 0&&_app$approvalStatus3.approvedByAdvisor){acc[APPLICATION_STATUS.APPROVED].push(app);return acc;}// En otros casos, mostrarla en el estado que tenga según otras reglas\n}// Si está en revisión según la empresa\nif(app.status===APPLICATION_STATUS.IN_REVIEW){var _app$approvalStatus4;// Si no está aprobada por la empresa, mostrarla en \"en revisión\"\nif(!((_app$approvalStatus4=app.approvalStatus)!==null&&_app$approvalStatus4!==void 0&&_app$approvalStatus4.approvedByCompany)){acc[APPLICATION_STATUS.IN_REVIEW].push(app);return acc;}// Si está aprobada por la empresa, mostrarla en \"aprobado por mi\"\nacc[APPLICATION_STATUS.APPROVED].push(app);return acc;}// Para nuevas aplicaciones sin aprobación\nif(app.status===APPLICATION_STATUS.NEW){var _app$approvalStatus5;// Si está aprobada por la empresa, mostrarla en \"aprobado por mi\"\nif((_app$approvalStatus5=app.approvalStatus)!==null&&_app$approvalStatus5!==void 0&&_app$approvalStatus5.approvedByCompany){acc[APPLICATION_STATUS.APPROVED].push(app);return acc;}// Si está en revisión por la empresa\nif(app.company_review_status===true){acc[APPLICATION_STATUS.IN_REVIEW].push(app);return acc;}// Si no tiene marca especial, mostrarla como nueva\nacc[APPLICATION_STATUS.NEW].push(app);return acc;}// Para cualquier otro caso, usar el estado real si existe, o NEW como fallback\nif(acc[app.status]){acc[app.status].push(app);}else{console.warn(`Estado desconocido detectado: ${app.status}, usando NEW como fallback`);acc[APPLICATION_STATUS.NEW].push(app);}return acc;},initialGroups);}// Para asesores y otros roles, usamos el agrupamiento normal basado en estado\nreturn appsWithApproval.reduce((acc,app)=>{if(app.isMoving&&app.targetStatus){// Si está en movimiento, verificar que el estado de destino existe\nif(acc[app.targetStatus]){acc[app.targetStatus].push(app);}else{console.warn(`Estado de destino inválido: ${app.targetStatus}, usando NEW como fallback`);acc[APPLICATION_STATUS.NEW].push(app);}}else{// Si no, usar el estado normal, normalizando \"pending\" y \"solicitud\" a \"new\"\nlet status=app.status||'new';// Normalizar estados \"pending\" y \"solicitud\" a \"new\"\nif(status==='pending'||status==='solicitud'){status=APPLICATION_STATUS.NEW;}// Verificar que el estado existe antes de agregar\nif(acc[status]){acc[status].push(app);}else{console.warn(`Estado inválido detectado: ${status}, usando NEW como fallback`);acc[APPLICATION_STATUS.NEW].push(app);}}return acc;},initialGroups);},[appsWithApproval,isCompanyAdmin,isAdvisor]);// Modificar la lógica de agrupamiento de aplicaciones para separar flujos\n// Esta es la parte clave que separa completamente los flujos\nconst columns=useMemo(()=>{// Estados estándar del Kanban\nconst statusGroups={[APPLICATION_STATUS.NEW]:[],[APPLICATION_STATUS.IN_REVIEW]:[],[APPLICATION_STATUS.APPROVED]:[],[APPLICATION_STATUS.POR_DISPERSAR]:[],[APPLICATION_STATUS.COMPLETED]:[],[APPLICATION_STATUS.EXPIRED]:[],[APPLICATION_STATUS.REJECTED]:[],[APPLICATION_STATUS.CANCELLED]:[]};// Agrupar aplicaciones por estado\nappsWithApproval.forEach(app=>{// Asegurarnos de que el app.status no es undefined antes de usarlo\nconst currentStatus=app.status||APPLICATION_STATUS.NEW;// Lógica específica para administradores de empresa - flujo sincronizado\nif(isCompanyAdmin()){var _app$approvalStatus6,_app$approvalStatus7;// Los estados avanzados siempre deben mostrarse en su columna correspondiente\n// independientemente del flujo (esto garantiza que se sincronicen con la vista del asesor)\nconst advancedStatuses=[APPLICATION_STATUS.POR_DISPERSAR,APPLICATION_STATUS.COMPLETED,APPLICATION_STATUS.EXPIRED,APPLICATION_STATUS.CANCELLED,APPLICATION_STATUS.REJECTED];if(advancedStatuses.includes(currentStatus)){console.log(`Mostrando tarjeta ${app.id} en estado avanzado: ${currentStatus}`);statusGroups[currentStatus].push(app);return;}// Para los estados básicos, aplicar la lógica personalizada del admin de empresa\n// 1. Si está aprobada por empresa -> va a \"Aprobado por mi\"\nif((_app$approvalStatus6=app.approvalStatus)!==null&&_app$approvalStatus6!==void 0&&_app$approvalStatus6.approvedByCompany){statusGroups[APPLICATION_STATUS.APPROVED].push(app);}// 2. Si está en revisión por empresa -> va a \"En Revisión\"\nelse if(app.company_review_status){statusGroups[APPLICATION_STATUS.IN_REVIEW].push(app);}// 3. Si no está ni en revisión ni aprobada por empresa -> va a \"Nuevo\"\nelse if(currentStatus===APPLICATION_STATUS.NEW||currentStatus===APPLICATION_STATUS.PENDING||!app.company_review_status&&!((_app$approvalStatus7=app.approvalStatus)!==null&&_app$approvalStatus7!==void 0&&_app$approvalStatus7.approvedByCompany)){statusGroups[APPLICATION_STATUS.NEW].push(app);}}// Lógica para asesores - flujo normal basado en estado real\nelse if(isAdvisor()){if(currentStatus){// Verificar que el estado existe en nuestros grupos antes de agregar\nif(statusGroups[currentStatus]){statusGroups[currentStatus].push(app);}else{// Si no existe, log warning y usar NEW como fallback\nconsole.warn(`Estado desconocido en columns para asesor: ${currentStatus}, usando NEW como fallback`);statusGroups[APPLICATION_STATUS.NEW].push(app);}}else{// Si no tiene estado, ponerla en \"Nuevo\"\nstatusGroups[APPLICATION_STATUS.NEW].push(app);}}// Lógica para otros roles\nelse{if(currentStatus){// Verificar que el estado existe en nuestros grupos\nif(statusGroups[currentStatus]){statusGroups[currentStatus].push(app);}else{// Si no existe, usar NEW como fallback\nconsole.warn(`Estado desconocido en columns para otros roles: ${currentStatus}, usando NEW como fallback`);statusGroups[APPLICATION_STATUS.NEW].push(app);}}else{// Si no tiene estado, ponerla en \"Nuevo\"\nstatusGroups[APPLICATION_STATUS.NEW].push(app);}}});// Definición de colores para cada columna\nconst columnDefinitions=[{id:APPLICATION_STATUS.NEW,title:'Nuevo',color:'warning',applications:statusGroups[APPLICATION_STATUS.NEW]},{id:APPLICATION_STATUS.IN_REVIEW,title:'En Revisión',color:'info',applications:statusGroups[APPLICATION_STATUS.IN_REVIEW]},{id:APPLICATION_STATUS.APPROVED,title:'Aprobado por mi',color:'success',applications:statusGroups[APPLICATION_STATUS.APPROVED]},{id:APPLICATION_STATUS.POR_DISPERSAR,title:'Por Dispersar',color:'accent',applications:statusGroups[APPLICATION_STATUS.POR_DISPERSAR]},{id:APPLICATION_STATUS.COMPLETED,title:'Completado',color:'primary',applications:statusGroups[APPLICATION_STATUS.COMPLETED]},{id:APPLICATION_STATUS.EXPIRED,title:'Expirado',color:'error',applications:statusGroups[APPLICATION_STATUS.EXPIRED]},{id:APPLICATION_STATUS.REJECTED,title:'Rechazado',color:'error',applications:statusGroups[APPLICATION_STATUS.REJECTED]},{id:APPLICATION_STATUS.CANCELLED,title:'Cancelado',color:'neutral',applications:statusGroups[APPLICATION_STATUS.CANCELLED]}];return columnDefinitions;},[appsWithApproval,isAdvisor,isCompanyAdmin]);// Función para actualizar localmente el estado de aprobación de una aplicación\nconst updateLocalApprovalStatus=(applicationId,updates,newStatus)=>{console.log(`Actualizando estado de aprobación para ${applicationId}:`,updates);// Crear una copia del estado actual\nconst currentApps=[...appsWithApproval];const appIndex=currentApps.findIndex(app=>app.id===applicationId);if(appIndex===-1){console.warn(`No se encontró la aplicación ${applicationId} para actualizar approval status`);return;}// Crear copia profunda de la aplicación para evitar mutaciones directas\nconst updatedApp={...currentApps[appIndex]};// Asegurar que el objeto approvalStatus exista\nconst currentApprovalStatus=updatedApp.approvalStatus||{approvedByAdvisor:false,approvedByCompany:false};// Crear el nuevo objeto de aprobación, asegurando que mantenemos los valores existentes\n// a menos que se especifiquen explícitamente en el parámetro updates\nconst newApprovalStatus={approvedByAdvisor:updates.approvedByAdvisor!==undefined?updates.approvedByAdvisor:currentApprovalStatus.approvedByAdvisor,approvedByCompany:updates.approvedByCompany!==undefined?updates.approvedByCompany:currentApprovalStatus.approvedByCompany};console.log(`Approval Status anterior: ${JSON.stringify(currentApprovalStatus)}`);console.log(`Nuevo Approval Status: ${JSON.stringify(newApprovalStatus)}`);// Actualizar la aplicación con el nuevo estado de aprobación\nupdatedApp.approvalStatus=newApprovalStatus;// Para mantener sincronizados los estados, cuando quitamos la aprobación de empresa,\n// también actualizamos el company_review_status\nif(updates.approvedByCompany===false&&isCompanyAdmin()){console.log(`Actualizando company_review_status a true porque estamos quitando aprobación`);updatedApp.company_review_status=true;}// Si ambos están aprobados, asegurarnos de moverla a por_dispersar\nif(newApprovalStatus.approvedByAdvisor&&newApprovalStatus.approvedByCompany){console.log(`Ambas aprobaciones están presentes, verificando si necesita moverse a Por Dispersar`);if(updatedApp.status!==APPLICATION_STATUS.POR_DISPERSAR&&updatedApp.status!==APPLICATION_STATUS.COMPLETED){console.log(`Actualizando estado a Por Dispersar debido a doble aprobación`);updatedApp.status=APPLICATION_STATUS.POR_DISPERSAR;}}// Actualizar el array de aplicaciones\ncurrentApps[appIndex]=updatedApp;// Establecer el nuevo estado\nsetAppsWithApproval(currentApps);};const handleDragStart=(e,application,idx)=>{// Guardar la aplicación que estamos arrastrando\ndraggedItemIndexRef.current=idx;// Almacenar el elemento que estamos arrastrando para gestionar mejor el evento\ndragItemRef.current=e.currentTarget;// Establecer los datos que queremos transferir\ne.dataTransfer.setData('text/plain',application.id);e.dataTransfer.effectAllowed='move';// Crear una copia visual para el arrastre\nif(!dragImageRef.current){dragImageRef.current=e.currentTarget.cloneNode(true);dragImageRef.current.style.position='absolute';dragImageRef.current.style.top='-1000px';dragImageRef.current.style.opacity='0.8';dragImageRef.current.style.transform='scale(0.9)';dragImageRef.current.style.width=`${e.currentTarget.offsetWidth}px`;document.body.appendChild(dragImageRef.current);}// Establecer la imagen de arrastre\nif(dragImageRef.current){const rect=e.currentTarget.getBoundingClientRect();e.dataTransfer.setDragImage(dragImageRef.current,rect.width/2,20);}// Añadir clase CSS para mostrar visualmente que el elemento está siendo arrastrado\nif(e.currentTarget){e.currentTarget.classList.add('dragging');}};const handleDragEnd=e=>{// Eliminar clase CSS de arrastre\nif(dragItemRef.current){dragItemRef.current.classList.remove('dragging');dragItemRef.current=null;}if(e.currentTarget){e.currentTarget.classList.remove('dragging');}// Eliminar el elemento clonado para el arrastre\nif(dragImageRef.current){document.body.removeChild(dragImageRef.current);dragImageRef.current=null;}draggedItemIndexRef.current=-1;draggedItemNewStatusRef.current='';};const handleDragOver=(e,columnStatus)=>{e.preventDefault();e.stopPropagation();e.dataTransfer.dropEffect='move';// Guardar el nuevo estado para la actualización optimista\nif(draggedItemNewStatusRef.current!==columnStatus){draggedItemNewStatusRef.current=columnStatus;}// Añadir clase visual para indicar la columna destino\nif(e.currentTarget.classList.contains('kanban-column')){document.querySelectorAll('.kanban-column').forEach(col=>{col.classList.remove('drag-over');});e.currentTarget.classList.add('drag-over');}};// Verificar si el usuario puede arrastrar una tarjeta\nconst canDragCard=app=>{// No permitir arrastrar si la aplicación no tiene status o id\nif(!app.status||!app.id){return false;}// No permitir arrastrar tarjetas que están en proceso de cambio de estado\nif(app.isMoving){return false;}// No permitir arrastrar tarjetas que están siendo procesadas\nif(processingAppId===app.id){return false;}// Restricciones específicas basadas en el rol del usuario\n// Para asesores\nif(isAdvisor()){var _app$approvalStatus8,_app$approvalStatus9;// Estados que nunca pueden ser movidos por ningún usuario\nconst restrictedStatuses=[APPLICATION_STATUS.EXPIRED,APPLICATION_STATUS.CANCELLED,APPLICATION_STATUS.POR_DISPERSAR];// No permitir arrastrar si está en un estado restringido\nif(restrictedStatuses.includes(app.status)){return false;}// Si tiene aprobaciones de ambos (asesor y empresa), no permitir mover\nif((_app$approvalStatus8=app.approvalStatus)!==null&&_app$approvalStatus8!==void 0&&_app$approvalStatus8.approvedByAdvisor&&(_app$approvalStatus9=app.approvalStatus)!==null&&_app$approvalStatus9!==void 0&&_app$approvalStatus9.approvedByCompany){return false;}return true;}// Para administradores de empresa\nif(isCompanyAdmin()){var _app$approvalStatus10,_app$approvalStatus11;// Estados que nunca pueden ser movidos por un admin de empresa\nconst restrictedStatuses=[APPLICATION_STATUS.POR_DISPERSAR,APPLICATION_STATUS.COMPLETED,APPLICATION_STATUS.EXPIRED,APPLICATION_STATUS.CANCELLED,APPLICATION_STATUS.REJECTED];// No permitir arrastrar si está en un estado restringido\nif(restrictedStatuses.includes(app.status)){return false;}// Si tiene aprobaciones de ambos (asesor y empresa), no permitir mover\nif((_app$approvalStatus10=app.approvalStatus)!==null&&_app$approvalStatus10!==void 0&&_app$approvalStatus10.approvedByAdvisor&&(_app$approvalStatus11=app.approvalStatus)!==null&&_app$approvalStatus11!==void 0&&_app$approvalStatus11.approvedByCompany){return false;}// MODIFICACIÓN: Aunque el asesor haya aprobado, el admin de empresa debe poder aprobar también\n// Aquí no se impide mover la tarjeta si solo está aprobada por el asesor\nreturn true;}// Para otros roles, no permitir arrastrar\nreturn false;};// Modificar handleDrop para manejar correctamente el flujo independiente\nconst handleDrop=async(e,newStatus)=>{e.preventDefault();e.stopPropagation();// Eliminar todas las clases de arrastre\ndocument.querySelectorAll('.kanban-column').forEach(col=>{col.classList.remove('drag-over');});// Verificar que el newStatus es válido\nconst validStatuses=Object.values(APPLICATION_STATUS);if(!validStatuses.includes(newStatus)){console.error(`Estado inválido para drop: ${newStatus}`);setErrorMessage(`Error: estado \"${newStatus}\" no es válido.`);return;}// Recuperar el ID de la aplicación\nconst applicationId=e.dataTransfer.getData('text/plain');if(!applicationId||!(user!==null&&user!==void 0&&user.id))return;const application=appsWithApproval.find(app=>app.id===applicationId);if(!application)return;const oldStatus=application.status||APPLICATION_STATUS.NEW;// No hacer nada si el estatus es el mismo\nif(oldStatus===newStatus)return;console.log(`Intentando mover tarjeta ${applicationId} de ${oldStatus} a ${newStatus}`);// Establecer el ID de la aplicación que se está procesando\nsetProcessingAppId(applicationId);try{// Para administradores de empresa (FLUJO INDEPENDIENTE)\nif(isCompanyAdmin()){// El admin de empresa solo puede mover tarjetas entre estos estados\nconst allowedTargetStates=[APPLICATION_STATUS.NEW,APPLICATION_STATUS.IN_REVIEW,APPLICATION_STATUS.APPROVED];// Si intenta mover a un estado que no está permitido\nif(!allowedTargetStates.includes(newStatus)){setErrorMessage(`No puedes mover solicitudes al estado \"${STATUS_LABELS[newStatus]||newStatus}\". Solo puedes mover entre Nuevo, En Revisión y Aprobado por mí.`);setProcessingAppId(null);return;}// Estados que nunca pueden ser movidos por un admin de empresa\nconst restrictedStatuses=[APPLICATION_STATUS.POR_DISPERSAR,APPLICATION_STATUS.COMPLETED,APPLICATION_STATUS.EXPIRED,APPLICATION_STATUS.CANCELLED,APPLICATION_STATUS.REJECTED];// Si la tarjeta está en un estado restringido, no permitir moverla\nif(restrictedStatuses.includes(oldStatus)){setErrorMessage(`No puedes mover solicitudes que están en estado \"${STATUS_LABELS[oldStatus]||oldStatus}\".`);setProcessingAppId(null);return;}// Actualización optimista en UI para mejor fluidez\nconst updatedApps=[...appsWithApproval];const appIndex=updatedApps.findIndex(app=>app.id===applicationId);if(appIndex!==-1){// Crear copia profunda para evitar referencias\nconst updatedApp={...updatedApps[appIndex],isMoving:true,targetStatus:newStatus};if(newStatus===APPLICATION_STATUS.NEW){var _updatedApp$approvalS;// Mover a Nuevo\nupdatedApp.company_review_status=false;updatedApp.approvalStatus={...(updatedApp.approvalStatus||{approvedByAdvisor:false,approvedByCompany:false}),approvedByCompany:false};// Si estaba aprobado y se mueve a Nuevo, hay que quitar la aprobación de la empresa\nif((_updatedApp$approvalS=updatedApp.approvalStatus)!==null&&_updatedApp$approvalS!==void 0&&_updatedApp$approvalS.approvedByCompany&&user!==null&&user!==void 0&&user.entityId&&application.company_id){try{console.log(\"Quitando aprobación de empresa en la base de datos\");// Ejecutamos una consulta SQL para quitar la aprobación\nconst query=`\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_company = false, \n                      approval_date_company = NULL\n                  WHERE id = '${applicationId}' AND company_id = '${application.company_id}'\n                  RETURNING *\n                `;const response=await fetch('http://localhost:3100/query',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query})});const result=await response.json();if(result.error){throw new Error(result.error);}console.log(\"✅ Aprobación de empresa removida correctamente:\",result.data);// Registrar en historial\nconst historyQuery=`\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'new', 'Regresado a Nuevo por administrador de empresa', '${user.entityId}')\n                  RETURNING *\n                `;await fetch('http://localhost:3100/query',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query:historyQuery})});// Actualizar UI explícitamente\nupdateLocalApprovalStatus(applicationId,{approvedByCompany:false},APPLICATION_STATUS.NEW);}catch(error){console.error(\"❌ Error al quitar aprobación de empresa:\",error);setErrorMessage(`Error al quitar aprobación: ${error.message}`);}}}else if(newStatus===APPLICATION_STATUS.IN_REVIEW){var _updatedApp$approvalS2;// Mover a En Revisión\nupdatedApp.company_review_status=true;updatedApp.approvalStatus={...(updatedApp.approvalStatus||{approvedByAdvisor:false,approvedByCompany:false}),approvedByCompany:false};// Si estaba aprobado y se mueve a En Revisión, hay que quitar la aprobación de la empresa\nif(oldStatus===APPLICATION_STATUS.APPROVED&&(_updatedApp$approvalS2=updatedApp.approvalStatus)!==null&&_updatedApp$approvalS2!==void 0&&_updatedApp$approvalS2.approvedByCompany&&user!==null&&user!==void 0&&user.entityId&&application.company_id){try{console.log(\"Quitando aprobación de empresa en la base de datos\");// Ejecutamos una consulta SQL para quitar la aprobación\nconst query=`\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_company = false, \n                      approval_date_company = NULL,\n                      status = '${APPLICATION_STATUS.IN_REVIEW}'\n                  WHERE id = '${applicationId}' AND company_id = '${application.company_id}'\n                  RETURNING *\n                `;const response=await fetch('http://localhost:3100/query',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query})});const result=await response.json();if(result.error){throw new Error(result.error);}console.log(\"✅ Aprobación de empresa removida correctamente:\",result.data);// Registrar en historial\nconst historyQuery=`\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'in_review', 'Revisión adicional requerida por empresa', '${user.entityId}')\n                  RETURNING *\n                `;await fetch('http://localhost:3100/query',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query:historyQuery})});// Actualizar UI explícitamente con ambas propiedades\nupdateLocalApprovalStatus(applicationId,{approvedByCompany:false},APPLICATION_STATUS.IN_REVIEW);// Forzar actualización global de la aplicación para todos los usuarios\n// llamando a la API de cambio de estado\nif(onStatusChange){try{await onStatusChange(application,APPLICATION_STATUS.IN_REVIEW);console.log(\"✅ Estado actualizado correctamente a EN REVISIÓN\");}catch(error){console.error(\"❌ Error al actualizar estado:\",error);}}}catch(error){console.error(\"❌ Error al quitar aprobación de empresa:\",error);setErrorMessage(`Error al quitar aprobación: ${error.message}`);}}else{// Incluso si no estaba aprobada, forzar actualización de estado\nif(onStatusChange){try{await onStatusChange(application,APPLICATION_STATUS.IN_REVIEW);console.log(\"✅ Estado actualizado correctamente a EN REVISIÓN\");}catch(error){console.error(\"❌ Error al actualizar estado:\",error);}}}}else if(newStatus===APPLICATION_STATUS.APPROVED){// Mover a Aprobado por mí\nupdatedApp.company_review_status=true;// Se considera revisado si está aprobado\nupdatedApp.approvalStatus={...(updatedApp.approvalStatus||{approvedByAdvisor:false,approvedByCompany:false}),approvedByCompany:true};// Llamar a la API para aprobar por empresa\nif(user!==null&&user!==void 0&&user.entityId&&application.company_id){try{console.log(`Empresa ${user.entityId} está aprobando la solicitud ${applicationId}`);// Aplicar cambio optimista a la UI primero\nupdatedApps[appIndex]=updatedApp;setAppsWithApproval([...updatedApps]);// Llamar a la API y esperar a que termine\nconst result=await approveByCompany(applicationId,\"Aprobado vía Kanban\",user.entityId,application.company_id,{company_id:application.company_id}// Pasar company_id en el entityFilter\n);console.log(\"✅ Aplicación aprobada por empresa:\",result);// Actualizar UI con respuesta del servidor\nupdateLocalApprovalStatus(applicationId,{approvedByCompany:true});// Verificar si la aplicación ya está aprobada por el asesor\nconst approvalStatus=await getApprovalStatus(applicationId);console.log(\"Estado de aprobación actual:\",approvalStatus);// Si está aprobada por ambos, mover automáticamente a \"por_dispersar\"\nif(approvalStatus!==null&&approvalStatus!==void 0&&approvalStatus.approvedByAdvisor){console.log(\"❇️ Ambas aprobaciones completadas, moviendo a Por Dispersar\");// Mostrar notificación de transición automática\nsetAutoTransitionMessage(`La solicitud ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR]||'Por Dispersar'}\"`);// Cambiar el estado a \"por_dispersar\" después de un breve retraso\nsetTimeout(()=>{if(onStatusChange){onStatusChange(application,APPLICATION_STATUS.POR_DISPERSAR);}// Limpiar el mensaje después de mostrar\nsetTimeout(()=>setAutoTransitionMessage(null),3000);},500);}}catch(error){console.error(\"❌ Error al aprobar por empresa:\",error);setErrorMessage(`Error al aprobar: ${error.message}`);// Revertir el estado optimista en caso de error\nupdatedApp.approvalStatus={...(updatedApp.approvalStatus||{approvedByAdvisor:false,approvedByCompany:false}),approvedByCompany:false};updatedApps[appIndex]=updatedApp;setAppsWithApproval([...updatedApps]);}}}// Actualizar la app en el estado\nupdatedApps[appIndex]=updatedApp;setAppsWithApproval(updatedApps);// Quitar la marca de movimiento después de un breve retraso\nsetTimeout(()=>{setAppsWithApproval(prev=>prev.map(app=>app.id===applicationId?{...app,isMoving:false,targetStatus:undefined}:app));setProcessingAppId(null);},500);}}// Para asesores (flujo normal)\nelse if(isAdvisor()){// Verificar que el estado es válido\nif(!validStatuses.includes(newStatus)){setErrorMessage(`Estado de destino \"${newStatus}\" no es válido.`);setProcessingAppId(null);return;}// Actualización optimista en UI\nconst updatedApps=[...appsWithApproval];const appIndex=updatedApps.findIndex(app=>app.id===applicationId);if(appIndex!==-1){// Crear copia profunda para evitar referencias\nconst updatedApp={...updatedApps[appIndex],isMoving:true,targetStatus:newStatus,status:newStatus// actualizar el estado directamente\n};// Lógica para manejar aprobaciones de manera optimista\nif(newStatus===APPLICATION_STATUS.APPROVED){console.log(`Advisor ${user===null||user===void 0?void 0:user.id} está aprobando la solicitud ${applicationId}`);// Actualizar inmediatamente el estado visual de aprobación del asesor\n// para una respuesta inmediata en la UI\nupdatedApp.approvalStatus={...(updatedApp.approvalStatus||{approvedByAdvisor:false,approvedByCompany:false}),approvedByAdvisor:true// Optimistically set to true\n};// Aplicar cambio optimista a la UI\nupdatedApps[appIndex]=updatedApp;setAppsWithApproval([...updatedApps]);// Clone to trigger re-render\n// Llamar a la API para aprobar por asesor\nif(user!==null&&user!==void 0&&user.entityId){try{// Llamar a la API y esperar a que termine\nconsole.log(\"Llamando a approveByAdvisor API...\");const result=await approveByAdvisor(applicationId,\"Aprobado vía Kanban\",user.entityId,{advisor_id:user.entityId}// Ensure we're using the advisor filter\n);console.log(\"✅ Aplicación aprobada por asesor:\",result);// Actualizar UI con respuesta del servidor explícitamente\n// para asegurar que el indicador se actualiza correctamente\nupdateLocalApprovalStatus(applicationId,{approvedByAdvisor:true});// Verificar si la aplicación ya está aprobada por la empresa\nconst approvalStatus=await getApprovalStatus(applicationId);console.log(\"Estado de aprobación actual:\",approvalStatus);// Si está aprobada por ambos, mover automáticamente a \"por_dispersar\"\nif(approvalStatus!==null&&approvalStatus!==void 0&&approvalStatus.approvedByCompany){// Mostrar notificación de transición automática\nsetAutoTransitionMessage(`La solicitud ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR]||'Por Dispersar'}\"`);// Cambiar el estado a \"por_dispersar\" después de un breve retraso\nsetTimeout(()=>{if(onStatusChange){onStatusChange(application,APPLICATION_STATUS.POR_DISPERSAR);}// Limpiar el mensaje después de mostrar\nsetTimeout(()=>setAutoTransitionMessage(null),3000);},500);}}catch(error){console.error(\"❌ Error al aprobar por asesor:\",error);setErrorMessage(`Error al aprobar: ${error.message}`);// Revertir el estado optimista en caso de error\n// pero solo si realmente falló la aprobación\nconst appToPatch=appsWithApproval.find(app=>app.id===applicationId);if(appToPatch){updateLocalApprovalStatus(applicationId,{approvedByAdvisor:false});}}}}// Si se mueve de APPROVED a otro estado, quitar la aprobación\nelse if(oldStatus===APPLICATION_STATUS.APPROVED&&newStatus!==APPLICATION_STATUS.POR_DISPERSAR){console.log(\"Moviendo de aprobado a otro estado, resetear aprobación de asesor\");updatedApp.approvalStatus={...(updatedApp.approvalStatus||{approvedByAdvisor:false,approvedByCompany:false}),approvedByAdvisor:false};// Actualizar en BD para quitar aprobación (nueva API)\nif(user!==null&&user!==void 0&&user.entityId&&newStatus===APPLICATION_STATUS.IN_REVIEW){try{console.log(\"Quitando aprobación de asesor en la base de datos\");// Ejecutamos una consulta SQL para quitar la aprobación\nconst query=`\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_advisor = false, \n                      approval_date_advisor = NULL\n                  WHERE id = '${applicationId}' AND assigned_to = '${user.entityId}'\n                  RETURNING *\n                `;const response=await fetch('http://localhost:3100/query',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query})});const result=await response.json();if(result.error){throw new Error(result.error);}console.log(\"✅ Aprobación de asesor removida correctamente:\",result.data);// Registrar en historial\nconst historyQuery=`\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'in_review', 'Revisión adicional requerida', '${user.entityId}')\n                  RETURNING *\n                `;await fetch('http://localhost:3100/query',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query:historyQuery})});// Actualizar UI explícitamente\nupdateLocalApprovalStatus(applicationId,{approvedByAdvisor:false});}catch(error){console.error(\"❌ Error al quitar aprobación del asesor:\",error);setErrorMessage(`Error al quitar aprobación: ${error.message}`);}}}// Actualizar la app en el estado solo si no es una aprobación (ese caso ya lo manejamos arriba)\nif(newStatus!==APPLICATION_STATUS.APPROVED){updatedApps[appIndex]=updatedApp;setAppsWithApproval(updatedApps);}// Llamar a la API para actualizar el estado\nif(onStatusChange){try{await onStatusChange(application,newStatus);}catch(error){console.error(\"Error updating status:\",error);setErrorMessage(`Error al actualizar el estado: ${error.message}`);// Revertir cambios en caso de error\nsetAppsWithApproval(prev=>prev.map(app=>app.id===applicationId?{...app,status:oldStatus,isMoving:false,targetStatus:undefined}:app));}}// Quitar la marca de movimiento después de un breve retraso\nsetTimeout(()=>{setAppsWithApproval(prev=>prev.map(app=>app.id===applicationId?{...app,isMoving:false,targetStatus:undefined}:app));setProcessingAppId(null);},500);}}}catch(error){console.error(\"Error in handleDrop:\",error);setErrorMessage(`Error al actualizar el estado: ${error.message}`);setProcessingAppId(null);}};const formatCurrency=amount=>{return new Intl.NumberFormat('es-MX',{style:'currency',currency:'MXN'}).format(amount);};// Renderizar los indicadores de aprobación con mejor formato y legibilidad\nconst renderApprovalIndicators=app=>{if(!app.approvalStatus)return null;const{approvedByAdvisor,approvedByCompany}=app.approvalStatus;const hasFullApproval=approvedByAdvisor&&approvedByCompany;return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col mt-1 space-y-1\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"tooltip tooltip-top flex items-center\",\"data-tip\":approvedByAdvisor?\"Aprobado por asesor\":\"Pendiente de aprobación por asesor\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-xs mr-1 whitespace-nowrap\",children:\"Asesor:\"}),/*#__PURE__*/_jsx(\"div\",{className:`w-3 h-3 rounded-full ${approvedByAdvisor?'bg-success':'bg-warning'}`}),approvedByAdvisor&&/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-4 w-4 ml-1 text-success\",fill:\"none\",viewBox:\"0 0 24 24\",stroke:\"currentColor\",strokeWidth:2,children:/*#__PURE__*/_jsx(\"path\",{strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M5 13l4 4L19 7\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"tooltip tooltip-top flex items-center ml-3\",\"data-tip\":approvedByCompany?\"Aprobado por empresa\":\"Pendiente de aprobación por empresa\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-xs mr-1 whitespace-nowrap\",children:\"Empresa:\"}),/*#__PURE__*/_jsx(\"div\",{className:`w-3 h-3 rounded-full ${approvedByCompany?'bg-success':'bg-warning'}`}),approvedByCompany&&/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-4 w-4 ml-1 text-success\",fill:\"none\",viewBox:\"0 0 24 24\",stroke:\"currentColor\",strokeWidth:2,children:/*#__PURE__*/_jsx(\"path\",{strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M5 13l4 4L19 7\"})})]})]}),hasFullApproval&&/*#__PURE__*/_jsx(\"div\",{className:\"w-full flex justify-center mt-1\",children:/*#__PURE__*/_jsx(\"div\",{className:\"badge badge-success text-xs px-2 py-1 text-white font-medium\",children:\"Aprobado Total\"})}),isCompanyAdmin()&&approvedByCompany&&app.status===APPLICATION_STATUS.APPROVED&&/*#__PURE__*/_jsx(\"div\",{className:\"w-full flex justify-center mt-1\",children:/*#__PURE__*/_jsx(\"button\",{onClick:e=>{e.stopPropagation();// Evitar que se propague al card\nhandleDrop(e,APPLICATION_STATUS.IN_REVIEW);},className:\"btn btn-xs btn-error w-full\",children:\"Deshacer Aprobaci\\xF3n\"})})]});};// Mejorar el formato de las etiquetas de producto para mayor legibilidad\nconst getProductLabel=type=>{const labels={'selected_plans':'Crédito a Plazos','product_simulations':'Simulación','auto_loan':'Crédito Auto','car_backed_loan':'Crédito con Garantía','personal_loan':'Préstamo Personal','cash_advance':'Adelanto de Efectivo'};return labels[type]||type;};// Función para renderizar el producto como una etiqueta bien formateada\nconst renderProductLabel=(type,color)=>{return/*#__PURE__*/_jsx(\"span\",{className:`badge badge-${color} badge-md text-xs px-3 py-1 whitespace-nowrap inline-block`,children:getProductLabel(type||'')});};// Función para obtener el color apropiado para la tarjeta según estado y aprobaciones\nconst getCardColor=app=>{const status=app.status||'';// Colores específicos según el estado\nswitch(status.toLowerCase()){case APPLICATION_STATUS.REJECTED:return'border-error bg-red-50';case APPLICATION_STATUS.APPROVED:// Si está aprobado, verificar el estado de las aprobaciones\nif(app.approvalStatus){const{approvedByAdvisor,approvedByCompany}=app.approvalStatus;if(approvedByAdvisor&&approvedByCompany){return'border-success bg-green-100';// Aprobado por ambos\n}else if(approvedByAdvisor){return'border-success bg-green-50';// Aprobado solo por asesor\n}else if(approvedByCompany){return'border-info bg-blue-50';// Aprobado solo por empresa\n}}return'border-success bg-green-50';case APPLICATION_STATUS.IN_REVIEW:return'border-info bg-blue-50';case APPLICATION_STATUS.NEW:return'border-warning bg-yellow-50';case APPLICATION_STATUS.PENDING:return'border-warning bg-amber-50';case APPLICATION_STATUS.POR_DISPERSAR:return'border-accent bg-purple-50';case APPLICATION_STATUS.COMPLETED:return'border-primary bg-indigo-50';case APPLICATION_STATUS.EXPIRED:return'border-error bg-red-100';case APPLICATION_STATUS.CANCELLED:return'border-neutral bg-gray-100';default:// Si el estado no coincide con ninguno de los anteriores, usar el color de la columna\nreturn`border-${app.status||'neutral'}`;}};// Estilos personalizados para mostrar claramente cuáles tarjetas se pueden arrastrar\nconst customStyles=`\n    .custom-scrollbar::-webkit-scrollbar {\n      width: 8px;\n      height: 8px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-track {\n      background: #f1f1f1;\n      border-radius: 10px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-thumb {\n      background: #888;\n      border-radius: 10px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n      background: #555;\n    }\n    \n    .kanban-card {\n      transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out, box-shadow 0.3s ease-in-out, border-color 0.3s ease;\n      touch-action: none;\n      user-select: none;\n      will-change: transform, opacity;\n    }\n    \n    .kanban-card-draggable {\n      cursor: grab !important;\n      position: relative;\n    }\n    \n    .kanban-card-draggable:hover {\n      transform: translateY(-4px);\n      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n      border-color: #a855f7;\n      z-index: 10;\n    }\n    \n    .kanban-card-draggable:active {\n      cursor: grabbing !important;\n    }\n    \n    /* Indicator for draggable cards */\n    .kanban-card-draggable::after {\n      content: '';\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      width: 20px;\n      height: 20px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23666'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M7 11.5V14m0-2.5v-6a1.5 1.5 0 113 0m-3 6a1.5 1.5 0 00-3 0v2a7.5 7.5 0 0015 0v-5a1.5 1.5 0 013 0m-6-3V11m0-5.5v-1a1.5 1.5 0 013 0v1m0 0V11' /%3E%3C/svg%3E\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      opacity: 0.7;\n      transition: opacity 0.2s ease;\n    }\n    \n    .kanban-card-draggable:hover::after {\n      opacity: 1;\n    }\n    \n    .kanban-card-locked {\n      position: relative;\n      cursor: not-allowed !important;\n      opacity: 0.8;\n    }\n    \n    .kanban-card-locked::after {\n      content: '';\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      width: 20px;\n      height: 20px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23999'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z' /%3E%3C/svg%3E\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      opacity: 0.7;\n    }\n    \n    .kanban-card.dragging {\n      opacity: 0.8;\n      transform: scale(1.03);\n      box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n      z-index: 50;\n    }\n    \n    .kanban-column {\n      transition: all 0.2s ease;\n      border-radius: 0.75rem;\n      will-change: transform, background-color;\n    }\n    \n    .kanban-column.drag-over {\n      background-color: rgba(var(--b2, 217 217 217) / 0.5);\n      transform: scale(1.01);\n      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);\n      border: 2px dashed #a855f7 !important;\n    }\n\n    .kanban-container {\n      scroll-behavior: smooth;\n    }\n\n    @media (min-width: 768px) {\n      .kanban-card-draggable:hover {\n        transform: translateY(-4px);\n        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n      }\n    }\n    \n    /* Animaciones para cambios de estado */\n    @keyframes fadeIn {\n      0% { opacity: 0; }\n      100% { opacity: 1; }\n    }\n    \n    @keyframes slideIn {\n      0% { transform: translateY(10px); opacity: 0; }\n      100% { transform: translateY(0); opacity: 1; }\n    }\n    \n    @keyframes processingPulse {\n      0% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0.4); }\n      70% { box-shadow: 0 0 0 6px rgba(124, 58, 237, 0); }\n      100% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0); }\n    }\n    \n    .kanban-card {\n      animation: fadeIn 0.3s ease-out;\n    }\n    \n    .processing-toast {\n      position: fixed;\n      bottom: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      padding: 10px 20px;\n      background-color: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      animation: slideIn 0.3s ease-out;\n    }\n    \n    .auto-transition-toast {\n      position: fixed;\n      bottom: 70px;\n      left: 50%;\n      transform: translateX(-50%);\n      padding: 10px 20px;\n      background-color: #dcfce7;\n      border: 1px solid #86efac;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      animation: slideIn 0.3s ease-out;\n    }\n    \n    /* Pop-up tooltip con instrucciones para arrastrar */\n    .drag-instructions {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background-color: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      padding: 12px 16px;\n      z-index: 1000;\n      max-width: 300px;\n      animation: fadeIn 0.3s ease-out;\n    }\n    \n    /* Mejoras para vista mobile */\n    @media (max-width: 640px) {\n      .kanban-column {\n        min-height: 300px;\n      }\n    }\n  `;// Función para obtener clases draggable\nconst getDraggableClasses=app=>{// Usar la función canDragCard que está definida en el ámbito superior\nconst isDraggable=canDragCard(app)&&app.id!==processingAppId;return isDraggable?'cursor-grab kanban-card-draggable':'cursor-not-allowed opacity-80 kanban-card-locked';};// Función para definir los tooltips con información clara y precisa\nconst getDragTooltip=app=>{var _app$approvalStatus12,_app$approvalStatus13;if(app.id===processingAppId){return\"Esta tarjeta está siendo procesada\";}// Si la tarjeta se puede arrastrar, mostrar mensaje informativo\nif(canDragCard(app)){return\"Arrastra para cambiar el estado\";}// Mensajes específicos para casos donde no se puede arrastrar\nif((_app$approvalStatus12=app.approvalStatus)!==null&&_app$approvalStatus12!==void 0&&_app$approvalStatus12.approvedByAdvisor&&(_app$approvalStatus13=app.approvalStatus)!==null&&_app$approvalStatus13!==void 0&&_app$approvalStatus13.approvedByCompany){return\"Esta solicitud ya está completamente aprobada y no puede ser movida\";}// Asegurarse de que app.status no es undefined\nconst status=app.status||APPLICATION_STATUS.NEW;// Mensajes específicos según el rol y estado\nif(isCompanyAdmin()){if(status===APPLICATION_STATUS.REJECTED){return\"Las solicitudes rechazadas solo pueden ser movidas por asesores\";}else if(status===APPLICATION_STATUS.POR_DISPERSAR){return\"Esta solicitud ya está lista para dispersión y no puede regresar a estados anteriores\";}else if(status===APPLICATION_STATUS.COMPLETED){return\"Esta solicitud ya está completada y no puede cambiar de estado\";}else if(status===APPLICATION_STATUS.EXPIRED){return\"Esta solicitud ha expirado y no puede cambiar de estado\";}else if(status===APPLICATION_STATUS.CANCELLED){return\"Esta solicitud fue cancelada y no puede cambiar de estado\";}}return\"No puedes mover esta tarjeta en este momento\";};// Efecto para mover automáticamente tarjetas con ambas aprobaciones a \"Por Dispersar\"\nuseEffect(()=>{const moveFullyApprovedCards=async()=>{// Encontrar tarjetas que tienen ambas aprobaciones pero no están en Por Dispersar\nconst fullyApprovedCards=appsWithApproval.filter(app=>{var _app$approvalStatus14,_app$approvalStatus15;return((_app$approvalStatus14=app.approvalStatus)===null||_app$approvalStatus14===void 0?void 0:_app$approvalStatus14.approvedByAdvisor)&&((_app$approvalStatus15=app.approvalStatus)===null||_app$approvalStatus15===void 0?void 0:_app$approvalStatus15.approvedByCompany)&&app.status!==APPLICATION_STATUS.POR_DISPERSAR&&app.status!==APPLICATION_STATUS.COMPLETED;});if(fullyApprovedCards.length>0){console.log(`Encontradas ${fullyApprovedCards.length} tarjetas con aprobación total, moviendo a Por Dispersar...`);// Mover cada tarjeta a Por Dispersar\nfor(const app of fullyApprovedCards){if(onStatusChange){try{console.log(`Moviendo tarjeta ${app.id} a Por Dispersar automáticamente...`);await onStatusChange(app,APPLICATION_STATUS.POR_DISPERSAR);}catch(error){console.error(`Error al mover tarjeta ${app.id} a Por Dispersar:`,error);}}}}};// Ejecutar después de un breve retraso para permitir que los estados se inicialicen\nconst timer=setTimeout(()=>{moveFullyApprovedCards();},2000);return()=>clearTimeout(timer);},[appsWithApproval,onStatusChange]);// Agregar una sincronización de estados avanzados para las aplicaciones existentes\nuseEffect(()=>{const syncAdvancedStatusCards=async()=>{if(!isCompanyAdmin()||applications.length===0)return;console.log(\"Sincronizando tarjetas en estados avanzados para el administrador de empresa...\");// Estados avanzados que siempre deben sincronizarse entre ambas vistas\nconst advancedStatuses=[APPLICATION_STATUS.POR_DISPERSAR,APPLICATION_STATUS.COMPLETED,APPLICATION_STATUS.EXPIRED,APPLICATION_STATUS.CANCELLED,APPLICATION_STATUS.REJECTED];// Buscar aplicaciones con ambas aprobaciones que deberían estar en Por Dispersar\nconst needsStatusUpdate=applications.filter(app=>{// Si la aplicación ya está en un estado avanzado, respetar ese estado\nif(advancedStatuses.includes(app.status)){return false;}// Verificar si tiene ambas aprobaciones\nreturn app.approved_by_advisor&&app.approved_by_company;});if(needsStatusUpdate.length>0){console.log(`Encontradas ${needsStatusUpdate.length} aplicaciones que necesitan actualización de estado:`);const updatedApps=[...appsWithApproval];let hasChanges=false;for(const app of needsStatusUpdate){console.log(`- Aplicación ${app.id} con ambas aprobaciones, actualizando a Por Dispersar`);const index=updatedApps.findIndex(a=>a.id===app.id);if(index!==-1){updatedApps[index]={...updatedApps[index],status:APPLICATION_STATUS.POR_DISPERSAR};hasChanges=true;// Actualizar en la base de datos si es necesario\nif(onStatusChange){try{await onStatusChange(app,APPLICATION_STATUS.POR_DISPERSAR);console.log(`✅ Estado de aplicación ${app.id} actualizado a Por Dispersar`);}catch(error){console.error(`Error al actualizar estado de ${app.id}:`,error);}}}}if(hasChanges){console.log(\"Actualizando estado local con aplicaciones sincronizadas\");setAppsWithApproval(updatedApps);}}};// Ejecutar la sincronización después de cargar las aplicaciones\nsyncAdvancedStatusCards();},[applications,isCompanyAdmin,onStatusChange]);// Mejora para sincronizar estados entre vistas del asesor y administrador de empresa\nuseEffect(()=>{const syncCardStatusesWithAdvisorView=()=>{if(!isCompanyAdmin()||applications.length===0)return;// Obtener todas las aplicaciones que no están en los estados básicos de flujo de empresa\nconst applicationsWithAdvancedStatus=applications.filter(app=>{const isBasicStatus=[APPLICATION_STATUS.NEW,APPLICATION_STATUS.IN_REVIEW,APPLICATION_STATUS.APPROVED].includes(app.status);return!isBasicStatus;});if(applicationsWithAdvancedStatus.length>0){console.log(`Sincronizando ${applicationsWithAdvancedStatus.length} tarjetas con estados avanzados:`);// Crear copia del estado actual\nconst updatedApps=[...appsWithApproval];let hasChanges=false;// Actualizar cada aplicación para que refleje el estado real\napplicationsWithAdvancedStatus.forEach(app=>{const index=updatedApps.findIndex(a=>a.id===app.id);if(index!==-1&&updatedApps[index].status!==app.status){console.log(`- Sincronizando aplicación ${app.id} de estado '${updatedApps[index].status}' a '${app.status}'`);// Actualizar el estado para que coincida con el estado real\nupdatedApps[index]={...updatedApps[index],status:app.status};hasChanges=true;}});// Actualizar el estado solo si hubo cambios\nif(hasChanges){console.log(\"Actualizando estado local con aplicaciones sincronizadas\");setAppsWithApproval(updatedApps);}}};// Ejecutar la sincronización\nsyncCardStatusesWithAdvisorView();},[applications,appsWithApproval,isCompanyAdmin]);// Agregar un nuevo useEffect para refrescar los estados de aprobación periódicamente\nuseEffect(()=>{// Función para refrescar los estados de aprobación desde la API\nconst refreshApprovalStatuses=async()=>{if(!applications||applications.length===0)return;console.log(\"Refrescando estados de aprobación desde la API...\");try{const updatedApps=[...appsWithApproval];let hasChanges=false;for(const app of updatedApps){var _app$approvalStatus16,_app$approvalStatus17;// Obtener el estado de aprobación actualizado desde la API\nconst status=await getApprovalStatus(app.id);// Si el estado es diferente al actual, actualizarlo\nif(status&&(status.approvedByAdvisor!==((_app$approvalStatus16=app.approvalStatus)===null||_app$approvalStatus16===void 0?void 0:_app$approvalStatus16.approvedByAdvisor)||status.approvedByCompany!==((_app$approvalStatus17=app.approvalStatus)===null||_app$approvalStatus17===void 0?void 0:_app$approvalStatus17.approvedByCompany))){console.log(`Actualización encontrada para app ${app.id}:`,{actual:app.approvalStatus,nuevo:status});// Actualizar el estado de aprobación\napp.approvalStatus=status;hasChanges=true;// Si hay doble aprobación y no está en Por Dispersar, actualizarlo\nif(status.approvedByAdvisor&&status.approvedByCompany&&app.status!==APPLICATION_STATUS.POR_DISPERSAR&&app.status!==APPLICATION_STATUS.COMPLETED){console.log(`Aplicación ${app.id} tiene doble aprobación, moviendo a Por Dispersar`);// Actualizar el estado localmente\napp.status=APPLICATION_STATUS.POR_DISPERSAR;// Actualizar en la BD\nif(onStatusChange){try{await onStatusChange(app,APPLICATION_STATUS.POR_DISPERSAR);}catch(error){console.error(`Error actualizando estado a Por Dispersar:`,error);}}}}}// Si hubo cambios, actualizar el estado\nif(hasChanges){console.log(\"Actualizando aplicaciones con estados de aprobación refrescados\");setAppsWithApproval(updatedApps);}}catch(error){console.error(\"Error al refrescar estados de aprobación:\",error);}};// Refrescar los estados inicialmente y cada 10 segundos\nrefreshApprovalStatuses();const intervalId=setInterval(()=>{refreshApprovalStatuses();},10000);// 10 segundos\nreturn()=>{clearInterval(intervalId);};},[applications,appsWithApproval,onStatusChange]);// Mejora para funcionamiento con tarjetas existentes\nuseEffect(()=>{// Solo ejecutar para admin de empresa\nif(!isCompanyAdmin()||applications.length===0)return;console.log(\"Verificando y sincronizando estados de tarjetas existentes...\");// Encontrar tarjetas que deben mostrar el mismo estado que en la vista del asesor\nconst appsNeedingSync=applications.filter(app=>{// Si no está en uno de los estados básicos del flujo de admin de empresa,\n// debe sincronizarse exactamente con la vista del asesor\nconst isBasicStatus=[APPLICATION_STATUS.NEW,APPLICATION_STATUS.IN_REVIEW,APPLICATION_STATUS.APPROVED].includes(app.status);return!isBasicStatus;});if(appsNeedingSync.length>0){console.log(`Encontradas ${appsNeedingSync.length} tarjetas que necesitan sincronización con vista del asesor`);// Crear copia del estado actual\nconst updatedApps=[...appsWithApproval];let hasChanges=false;// Para cada aplicación que necesita sincronización\nappsNeedingSync.forEach(app=>{const index=updatedApps.findIndex(a=>a.id===app.id);// Si encontramos la aplicación y su estado es diferente al que debería tener\nif(index!==-1&&updatedApps[index].status!==app.status){console.log(`- Actualizando tarjeta ${app.id}: de '${updatedApps[index].status}' a '${app.status}'`);// Actualizar el estado para que coincida con el de la vista del asesor\nupdatedApps[index]={...updatedApps[index],status:app.status};hasChanges=true;}});// Si hubo cambios, actualizar el estado\nif(hasChanges){console.log(\"Actualizando estados para sincronizar con vista del asesor\");setAppsWithApproval(updatedApps);}}},[applications,appsWithApproval,isCompanyAdmin]);// Añadir función para manejar la limpieza de filtros\nconst handleClearFilters=()=>{setSearchQuery('');setStatusFilter('all');setTypeFilter('all');setDateFromFilter('');setDateToFilter('');setAmountMinFilter('');setAmountMaxFilter('');};// Modificar función para filtrar las aplicaciones según los criterios\nconst getFilteredApplications=apps=>{return apps.filter(app=>{var _app$client_name,_app$client_email;// Filtro por búsqueda de texto\nif(searchQuery&&!((_app$client_name=app.client_name)!==null&&_app$client_name!==void 0&&_app$client_name.toLowerCase().includes(searchQuery.toLowerCase())||(_app$client_email=app.client_email)!==null&&_app$client_email!==void 0&&_app$client_email.toLowerCase().includes(searchQuery.toLowerCase()))){return false;}// Filtro por estado\nif(statusFilter!=='all'&&app.status!==statusFilter){return false;}// Filtro por tipo de aplicación\nif(typeFilter!=='all'&&app.application_type!==typeFilter){return false;}// Filtro por fecha desde\nif(dateFromFilter){const appDate=new Date(app.created_at);const fromDate=new Date(dateFromFilter);if(appDate<fromDate){return false;}}// Filtro por fecha hasta\nif(dateToFilter){const appDate=new Date(app.created_at);const toDate=new Date(dateToFilter);// Ajustar para incluir todo el día\ntoDate.setHours(23,59,59,999);if(appDate>toDate){return false;}}// Filtro por monto mínimo\nif(amountMinFilter&&parseFloat(amountMinFilter)>0){const amount=app.amount||app.requested_amount||0;if(amount<parseFloat(amountMinFilter)){return false;}}// Filtro por monto máximo\nif(amountMaxFilter&&parseFloat(amountMaxFilter)>0){const amount=app.amount||app.requested_amount||0;if(amount>parseFloat(amountMaxFilter)){return false;}}return true;});};if(applications.length===0){return/*#__PURE__*/_jsxs(\"div\",{className:\"bg-base-200 p-6 rounded-lg\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-xl font-medium text-center\",children:\"No hay solicitudes para mostrar\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-center text-gray-500 mt-2\",children:\"No se encontraron solicitudes en el sistema\"})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"w-full overflow-x-auto custom-scrollbar relative\",children:[/*#__PURE__*/_jsx(\"style\",{children:customStyles}),processingAppId&&/*#__PURE__*/_jsxs(\"div\",{className:\"processing-toast\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"loading loading-spinner loading-sm text-primary\"}),/*#__PURE__*/_jsx(\"p\",{className:\"font-medium\",children:\"Actualizando estado...\"})]}),autoTransitionMessage&&/*#__PURE__*/_jsxs(\"div\",{className:\"auto-transition-toast\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"loading loading-spinner loading-sm text-success\"}),/*#__PURE__*/_jsx(\"p\",{className:\"font-medium\",children:autoTransitionMessage})]}),errorMessage&&/*#__PURE__*/_jsxs(\"div\",{className:\"mb-4 alert alert-error shadow-lg\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"stroke-current flex-shrink-0 h-6 w-6\",fill:\"none\",viewBox:\"0 0 24 24\",children:/*#__PURE__*/_jsx(\"path\",{strokeLinecap:\"round\",strokeLinejoin:\"round\",strokeWidth:\"2\",d:\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"})}),/*#__PURE__*/_jsx(\"span\",{children:errorMessage})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex-none\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-sm\",onClick:()=>setErrorMessage(null),children:\"Cerrar\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"mb-6\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-base-100 border border-base-300 rounded-lg shadow-sm\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center p-4 border-b border-base-300\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"relative flex-grow mr-4\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Buscar por nombre o email...\",className:\"input input-bordered w-full pr-10\",value:searchQuery,onChange:e=>setSearchQuery(e.target.value)}),/*#__PURE__*/_jsx(\"div\",{className:\"absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none\",children:/*#__PURE__*/_jsx(\"svg\",{className:\"h-5 w-5 text-gray-400\",fill:\"none\",viewBox:\"0 0 24 24\",stroke:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{strokeLinecap:\"round\",strokeLinejoin:\"round\",strokeWidth:2,d:\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"})})})]}),/*#__PURE__*/_jsxs(\"button\",{className:\"btn btn-ghost btn-sm\",onClick:()=>setIsFilterExpanded(!isFilterExpanded),children:[isFilterExpanded?'Ocultar Filtros':'Mostrar Filtros',/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:`h-4 w-4 ml-2 transform ${isFilterExpanded?'rotate-180':''}`,viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\",clipRule:\"evenodd\"})})]})]}),isFilterExpanded&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-base-200 p-4 rounded-lg\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold mb-4\",children:\"Filtros Avanzados\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-control\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"label\",children:/*#__PURE__*/_jsx(\"span\",{className:\"label-text\",children:\"Estado\"})}),/*#__PURE__*/_jsxs(\"select\",{className:\"select select-bordered w-full\",value:statusFilter,onChange:e=>setStatusFilter(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"all\",children:\"Todos los estados\"}),Object.entries(APPLICATION_STATUS).map(_ref2=>{let[key,value]=_ref2;return/*#__PURE__*/_jsx(\"option\",{value:value,children:STATUS_LABELS[value]||value},key);})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-control\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"label\",children:/*#__PURE__*/_jsx(\"span\",{className:\"label-text\",children:\"Tipo de Aplicaci\\xF3n\"})}),/*#__PURE__*/_jsxs(\"select\",{className:\"select select-bordered w-full\",value:typeFilter,onChange:e=>setTypeFilter(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"all\",children:\"Todos los tipos\"}),Object.entries(APPLICATION_TYPE_LABELS).map(_ref3=>{let[value,label]=_ref3;return/*#__PURE__*/_jsx(\"option\",{value:value,children:label},value);})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-control\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"label\",children:/*#__PURE__*/_jsx(\"span\",{className:\"label-text\",children:\"Fecha Desde\"})}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",className:\"input input-bordered w-full\",value:dateFromFilter,onChange:e=>setDateFromFilter(e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-control\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"label\",children:/*#__PURE__*/_jsx(\"span\",{className:\"label-text\",children:\"Fecha Hasta\"})}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",className:\"input input-bordered w-full\",value:dateToFilter,onChange:e=>setDateToFilter(e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-control\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"label\",children:/*#__PURE__*/_jsx(\"span\",{className:\"label-text\",children:\"Monto M\\xEDnimo\"})}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",placeholder:\"0\",className:\"input input-bordered w-full\",value:amountMinFilter,onChange:e=>setAmountMinFilter(e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-control\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"label\",children:/*#__PURE__*/_jsx(\"span\",{className:\"label-text\",children:\"Monto M\\xE1ximo\"})}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",placeholder:\"0\",className:\"input input-bordered w-full\",value:amountMaxFilter,onChange:e=>setAmountMaxFilter(e.target.value)})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-end\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-ghost\",onClick:handleClearFilters,children:\"Limpiar Filtros\"})})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 2xl:grid-cols-6 gap-4 pb-4 kanban-container p-4\",style:{minWidth:'1000px'},children:columns.map(column=>{// Filtrar aplicaciones para esta columna\nconst filteredApps=getFilteredApplications(column.applications);return/*#__PURE__*/_jsxs(\"div\",{className:`bg-base-100 rounded-xl shadow-md border-t-4 border-${column.color} border-l border-r border-b flex flex-col h-full kanban-column`,onDragOver:e=>{handleDragOver(e,column.id);},onDragLeave:e=>{e.currentTarget.classList.remove('drag-over');},onDrop:e=>{handleDrop(e,column.id);},children:[/*#__PURE__*/_jsxs(\"div\",{className:`text-center py-3 px-4 font-bold rounded-t-lg flex items-center justify-between bg-${column.color} bg-opacity-10`,children:[/*#__PURE__*/_jsx(\"span\",{className:`text-${column.color} font-bold text-lg`,children:column.title}),/*#__PURE__*/_jsx(\"span\",{className:`badge badge-${column.color} badge-lg`,children:filteredApps.length})]}),/*#__PURE__*/_jsx(\"div\",{className:\"p-3 space-y-3 min-h-[500px] max-h-[calc(100vh-220px)] overflow-y-auto custom-scrollbar flex-grow\",children:filteredApps.length===0?/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center justify-center h-full opacity-50 border-2 border-dashed border-base-300 rounded-lg p-6\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-12 w-12 mx-auto text-gray-400\",fill:\"none\",viewBox:\"0 0 24 24\",stroke:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{strokeLinecap:\"round\",strokeLinejoin:\"round\",strokeWidth:1,d:\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"})}),/*#__PURE__*/_jsx(\"p\",{className:\"text-sm mt-2\",children:\"No hay solicitudes\"})]})}):filteredApps.map((app,index)=>{var _app$approvalStatus18,_app$approvalStatus19;const isCardDraggable=canDragCard(app)&&app.id!==processingAppId;return/*#__PURE__*/_jsx(\"div\",{\"data-tip\":getDragTooltip(app),className:`card shadow hover:shadow-lg transition-all ${getCardColor(app)} border-l-4 border-t border-r border-b hover:border-primary kanban-card relative ${app.id===processingAppId?'processing':''} ${app.isMoving?'opacity-90':''} ${getDraggableClasses(app)}`,draggable:isCardDraggable,onDragStart:isCardDraggable?e=>handleDragStart(e,app,index):undefined,onDragEnd:isCardDraggable?handleDragEnd:undefined,style:{animation:app.id===processingAppId?'processingPulse 1.5s infinite':''},children:/*#__PURE__*/_jsxs(\"div\",{className:\"card-body p-4\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-between items-start mb-2\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"font-semibold mb-1\",children:app.client_name}),renderProductLabel(app.application_type||'',column.color)]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-1\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-gray-600 mb-2 flex items-center\",children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-4 w-4 mr-1 inline flex-shrink-0\",fill:\"none\",viewBox:\"0 0 24 24\",stroke:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{strokeLinecap:\"round\",strokeLinejoin:\"round\",strokeWidth:2,d:\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"})}),/*#__PURE__*/_jsx(\"span\",{className:\"truncate max-w-[180px] font-medium\",children:app.company_name||\"Sin empresa\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-xs text-gray-500 mb-2 flex items-center\",children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-4 w-4 mr-1 inline flex-shrink-0\",fill:\"none\",viewBox:\"0 0 24 24\",stroke:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{strokeLinecap:\"round\",strokeLinejoin:\"round\",strokeWidth:2,d:\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"})}),/*#__PURE__*/_jsx(\"span\",{children:app.created_at?formatDate(app.created_at,'datetime'):'N/A'})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center mb-3\",children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-4 w-4 mr-1 text-primary flex-shrink-0\",fill:\"none\",viewBox:\"0 0 24 24\",stroke:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{strokeLinecap:\"round\",strokeLinejoin:\"round\",strokeWidth:2,d:\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"})}),/*#__PURE__*/_jsx(\"span\",{className:\"text-base font-bold text-primary\",children:formatCurrency(app.requested_amount||0)})]}),renderApprovalIndicators(app),/*#__PURE__*/_jsxs(\"div\",{className:\"card-actions justify-end mt-3\",children:[isAdvisor()&&app.status===APPLICATION_STATUS.POR_DISPERSAR&&/*#__PURE__*/_jsx(\"button\",{onClick:e=>{e.stopPropagation();// Evitar navegación al detalle\ne.preventDefault();if(onStatusChange){setProcessingAppId(app.id);onStatusChange(app,APPLICATION_STATUS.COMPLETED).then(()=>{setAutoTransitionMessage(`Solicitud ${app.id} marcada como Completada correctamente`);setTimeout(()=>setAutoTransitionMessage(null),3000);}).catch(error=>{setErrorMessage(`Error al marcar como completado: ${error.message}`);}).finally(()=>{setProcessingAppId(null);});}},className:\"btn btn-sm btn-accent w-full mb-2\",children:\"Marcar como Dispersado\"}),isAdvisor()&&((_app$approvalStatus18=app.approvalStatus)===null||_app$approvalStatus18===void 0?void 0:_app$approvalStatus18.approvedByAdvisor)&&((_app$approvalStatus19=app.approvalStatus)===null||_app$approvalStatus19===void 0?void 0:_app$approvalStatus19.approvedByCompany)&&app.status!==APPLICATION_STATUS.POR_DISPERSAR&&app.status!==APPLICATION_STATUS.COMPLETED&&/*#__PURE__*/_jsx(\"button\",{onClick:e=>{e.stopPropagation();e.preventDefault();if(onStatusChange&&!processingAppId){setProcessingAppId(app.id);onStatusChange(app,APPLICATION_STATUS.POR_DISPERSAR).then(()=>{setAutoTransitionMessage(`Solicitud movida a Por Dispersar`);setTimeout(()=>setAutoTransitionMessage(null),3000);}).catch(error=>{console.error(\"Error al mover a Por Dispersar:\",error);}).finally(()=>{setTimeout(()=>setProcessingAppId(null),500);});}},className:\"btn btn-xs btn-accent w-full mt-2 mb-2\",children:\"Mover a Por Dispersar\"}),/*#__PURE__*/_jsx(Link,{to:`/applications/${app.id}`,className:\"btn btn-sm btn-primary w-full\",children:\"Ver Detalle\"})]})]})]})},app.id);})})]},column.id);})})]});};export default KanbanBoard;","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","Link","getApprovalStatus","approveByAdvisor","approveByCompany","APPLICATION_STATUS","STATUS_LABELS","usePermissions","useAuth","TABLES","formatDate","APPLICATION_TYPE_LABELS","jsx","_jsx","jsxs","_jsxs","APPLICATION_HISTORY_TABLE","APPLICATION_HISTORY","escapeSQLString","str","replace","KanbanBoard","_ref","applications","onStatusChange","isLoading","setIsLoading","errorMessage","setErrorMessage","appsWithApproval","setAppsWithApproval","processingAppId","setProcessingAppId","shouldFilterByEntity","getEntityFilter","isAdvisor","isCompanyAdmin","user","dragItemRef","dragImageRef","draggedItemIndexRef","draggedItemNewStatusRef","autoTransitionMessage","setAutoTransitionMessage","searchQuery","setSearchQuery","statusFilter","setStatusFilter","typeFilter","setTypeFilter","dateFromFilter","setDateFromFilter","dateToFilter","setDateToFilter","amountMinFilter","setAmountMinFilter","amountMaxFilter","setAmountMaxFilter","isFilterExpanded","setIsFilterExpanded","loadApprovalStatuses","length","appsWithStatus","Promise","all","map","app","status","id","approvalStatus","approvedByAdvisor","approvedByCompany","company_review_status","IN_REVIEW","error","console","setupApplications","appsWithApprovalStatuses","isMoving","sortedApps","sort","a","b","dateA","Date","created_at","dateB","getTime","newApplications","filter","isNew","createdAt","now","hoursElapsed","isRecent","log","updatedApps","forEach","newApp","index","findIndex","NEW","checkForNewApplications","oneDayAgo","setHours","getHours","recentApps","hasChanges","recentApp","push","approved_by_advisor","approved_by_company","needsUpdate","newStatus","groupedApplications","initialGroups","Object","values","reduce","acc","targetStatus","warn","sharedStatuses","POR_DISPERSAR","COMPLETED","EXPIRED","CANCELLED","REJECTED","includes","APPROVED","_app$approvalStatus","_app$approvalStatus2","_app$approvalStatus3","_app$approvalStatus4","_app$approvalStatus5","columns","statusGroups","currentStatus","_app$approvalStatus6","_app$approvalStatus7","advancedStatuses","PENDING","columnDefinitions","title","color","updateLocalApprovalStatus","applicationId","updates","currentApps","appIndex","updatedApp","currentApprovalStatus","newApprovalStatus","undefined","JSON","stringify","handleDragStart","e","application","idx","current","currentTarget","dataTransfer","setData","effectAllowed","cloneNode","style","position","top","opacity","transform","width","offsetWidth","document","body","appendChild","rect","getBoundingClientRect","setDragImage","classList","add","handleDragEnd","remove","removeChild","handleDragOver","columnStatus","preventDefault","stopPropagation","dropEffect","contains","querySelectorAll","col","canDragCard","_app$approvalStatus8","_app$approvalStatus9","restrictedStatuses","_app$approvalStatus10","_app$approvalStatus11","handleDrop","validStatuses","getData","find","oldStatus","allowedTargetStates","_updatedApp$approvalS","entityId","company_id","query","APPLICATIONS","response","fetch","method","headers","result","json","Error","data","historyQuery","message","_updatedApp$approvalS2","setTimeout","prev","advisor_id","appToPatch","formatCurrency","amount","Intl","NumberFormat","currency","format","renderApprovalIndicators","hasFullApproval","className","children","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","onClick","getProductLabel","type","labels","renderProductLabel","getCardColor","toLowerCase","customStyles","getDraggableClasses","isDraggable","getDragTooltip","_app$approvalStatus12","_app$approvalStatus13","moveFullyApprovedCards","fullyApprovedCards","_app$approvalStatus14","_app$approvalStatus15","timer","clearTimeout","syncAdvancedStatusCards","needsStatusUpdate","syncCardStatusesWithAdvisorView","applicationsWithAdvancedStatus","isBasicStatus","refreshApprovalStatuses","_app$approvalStatus16","_app$approvalStatus17","actual","nuevo","intervalId","setInterval","clearInterval","appsNeedingSync","handleClearFilters","getFilteredApplications","apps","_app$client_name","_app$client_email","client_name","client_email","application_type","appDate","fromDate","toDate","parseFloat","requested_amount","placeholder","value","onChange","target","fillRule","clipRule","entries","_ref2","key","_ref3","label","minWidth","column","filteredApps","onDragOver","onDragLeave","onDrop","_app$approvalStatus18","_app$approvalStatus19","isCardDraggable","draggable","onDragStart","onDragEnd","animation","company_name","then","catch","finally","to"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/components/ui/KanbanBoard.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Application, getApprovalStatus, approveByAdvisor, approveByCompany } from '../../services/applicationService';\nimport { STATUS_COLORS, APPLICATION_STATUS, STATUS_LABELS } from '../../utils/constants/statuses';\nimport { usePermissions } from '../../contexts/PermissionsContext';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { TABLES } from '../../utils/constants/tables';\nimport { useNotifications } from '../../contexts/NotificationContext';\nimport { formatCurrency, formatDate } from '../../utils/formatters';\nimport { APPLICATION_TYPE_LABELS } from '../../utils/constants/applications';\n\n// Verificar si APPLICATION_HISTORY tabla está definida\nconst APPLICATION_HISTORY_TABLE = TABLES.APPLICATION_HISTORY || 'application_history';\n\n// Función para escapar cadenas de texto para SQL\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\ninterface KanbanBoardProps {\n  applications: Application[];\n  onStatusChange?: (application: Application, newStatus: string) => Promise<void>;\n}\n\n// Interfaz para el estado de aprobación\ninterface ApprovalStatus {\n  approvedByAdvisor: boolean;\n  approvedByCompany: boolean;\n}\n\n// Crear un tipo para aplicaciones con su estado de aprobación\ntype ApplicationWithApproval = Application & {\n  approvalStatus?: ApprovalStatus;\n  isMoving?: boolean;\n  targetStatus?: string;\n  company_review_status?: boolean;\n};\n\nconst KanbanBoard: React.FC<KanbanBoardProps> = ({ applications, onStatusChange }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const [appsWithApproval, setAppsWithApproval] = useState<ApplicationWithApproval[]>([]);\n  const [processingAppId, setProcessingAppId] = useState<string | null>(null);\n  const { shouldFilterByEntity, getEntityFilter, isAdvisor, isCompanyAdmin } = usePermissions();\n  const { user } = useAuth();\n  const dragItemRef = useRef<HTMLDivElement | null>(null);\n  const dragImageRef = useRef<HTMLDivElement | null>(null);\n  const draggedItemIndexRef = useRef<number>(-1);\n  const draggedItemNewStatusRef = useRef<string>('');\n  const [autoTransitionMessage, setAutoTransitionMessage] = useState<string | null>(null);\n  \n  // Añadir estados para filtros\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [typeFilter, setTypeFilter] = useState<string>('all');\n  const [dateFromFilter, setDateFromFilter] = useState<string>('');\n  const [dateToFilter, setDateToFilter] = useState<string>('');\n  const [amountMinFilter, setAmountMinFilter] = useState<string>('');\n  const [amountMaxFilter, setAmountMaxFilter] = useState<string>('');\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  \n  // Primero, modificar useEffect para cargar aplicaciones con datos de aprobación\n  useEffect(() => {\n    const loadApprovalStatuses = async () => {\n      if (!applications || applications.length === 0) return;\n      \n      setIsLoading(true);\n      try {\n        const appsWithStatus: ApplicationWithApproval[] = await Promise.all(\n          applications.map(async (app) => {\n            // Obtener el estado de aprobación real de la API\n            const status = await getApprovalStatus(app.id);\n            \n            // Devolver la aplicación con su estado de aprobación\n            return {\n              ...app,\n              approvalStatus: status || { approvedByAdvisor: false, approvedByCompany: false },\n              // Para administradores de empresa, agregar un campo que maneja su \"estado virtual\"\n              company_review_status: isCompanyAdmin() ? \n                // Si la aplicación está en revisión o aprobada por empresa, marcarla\n                (app.status === APPLICATION_STATUS.IN_REVIEW || \n                 (status && status.approvedByCompany)) : false\n            };\n          })\n        );\n        \n        setAppsWithApproval(appsWithStatus);\n      } catch (error) {\n        console.error(\"Error loading approval statuses:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    loadApprovalStatuses();\n  }, [applications]);\n  \n  // Modificar cómo se transforman las aplicaciones para ordenarlas de más viejas a más recientes\n  // en el useEffect donde se establece appsWithApproval alrededor de la línea 100-150\n  useEffect(() => {\n    const setupApplications = async () => {\n      const appsWithApprovalStatuses = await Promise.all(\n        applications.map(async (app) => {\n          // Cargar estado de aprobación si aún no está cargado\n          const approvalStatus = await getApprovalStatus(app.id);\n          \n          return {\n            ...app,\n            approvalStatus,\n            isMoving: false\n          };\n        })\n      );\n      \n      // Ordenar de más viejas a más recientes por fecha de creación\n      const sortedApps = [...appsWithApprovalStatuses].sort((a, b) => {\n        const dateA = new Date(a.created_at);\n        const dateB = new Date(b.created_at);\n        return dateA.getTime() - dateB.getTime(); // Orden ascendente (más viejas primero)\n      });\n      \n      setAppsWithApproval(sortedApps);\n    };\n    \n    setupApplications();\n  }, [applications]);\n  \n  // Actualizar la lógica para nuevas aplicaciones para incluir todas las nuevas notificaciones\n  useEffect(() => {\n    // Verificar si hay aplicaciones que deberían estar en \"nuevo\" (recién creadas)\n    const newApplications = applications.filter(app => {\n      // Identificar aplicaciones recién creadas (menos de 24 horas)\n      const isNew = !app.status || app.status === 'pending' || app.status === 'solicitud';\n      const createdAt = new Date(app.created_at);\n      const now = new Date();\n      const hoursElapsed = (now.getTime() - createdAt.getTime()) / (1000 * 60 * 60);\n      const isRecent = hoursElapsed < 72;\n      \n      return isRecent && (isNew || app.status === 'new');\n    });\n    \n    // Si hay aplicaciones nuevas sin status o con status pendiente/solicitud, asignarles \"nuevo\"\n    if (newApplications.length > 0) {\n      console.log('Aplicaciones nuevas detectadas:', newApplications);\n      const updatedApps = [...appsWithApproval];\n      newApplications.forEach(newApp => {\n        const index = updatedApps.findIndex(app => app.id === newApp.id);\n        if (index !== -1 && (!updatedApps[index].status || updatedApps[index].status === 'pending' || updatedApps[index].status === 'solicitud')) {\n          updatedApps[index] = {\n            ...updatedApps[index],\n            status: APPLICATION_STATUS.NEW\n          };\n          console.log(`Aplicación ${newApp.id} movida a estado NUEVO`);\n        }\n      });\n      \n      setAppsWithApproval(updatedApps);\n    }\n  }, [applications]); // Usar applications como dependencia en lugar de appsWithApproval\n\n  // Asegurar que nuevas aplicaciones se muestren inmediatamente\n  // añadiendo una función de comprobación en el useEffect principal\n  useEffect(() => {\n    const checkForNewApplications = async () => {\n      // Verificar que tenemos usuario y permisos\n      if (!user?.id) return;\n      \n      try {\n        // Ejecutar esta comprobación solo si somos admin de empresa\n        if (isCompanyAdmin() && applications.length > 0) {\n          // Obtener la fecha de hace 24 horas\n          const oneDayAgo = new Date();\n          oneDayAgo.setHours(oneDayAgo.getHours() - 24);\n          \n          // Buscar aplicaciones creadas en las últimas 24 horas\n          const recentApps = applications.filter(app => {\n            const createdAt = new Date(app.created_at);\n            return createdAt >= oneDayAgo;\n          });\n          \n          // Si hay aplicaciones recientes, asegurarnos de que aparezcan en el tablero\n          if (recentApps.length > 0) {\n            console.log(`Encontradas ${recentApps.length} aplicaciones recientes`);\n            \n            // Asegurar que todas estas aplicaciones están en nuestro estado local\n            // y que tienen el estado correcto (NEW si no tienen un estado específico)\n            const updatedApps = [...appsWithApproval];\n            let hasChanges = false;\n            \n            recentApps.forEach(recentApp => {\n              const index = updatedApps.findIndex(app => app.id === recentApp.id);\n              \n              // Si la aplicación no está en nuestro estado, agregarla\n              if (index === -1) {\n                console.log(`Agregando aplicación nueva ${recentApp.id} al estado`);\n                updatedApps.push({\n                  ...recentApp,\n                  status: recentApp.status || APPLICATION_STATUS.NEW,\n                  approvalStatus: {\n                    approvedByAdvisor: recentApp.approved_by_advisor || false,\n                    approvedByCompany: recentApp.approved_by_company || false\n                  }\n                });\n                hasChanges = true;\n              } \n              // Si no tiene estado o está en estado pendiente/solicitud, asignarle NEW\n              else if (!updatedApps[index].status || updatedApps[index].status === 'pending' || updatedApps[index].status === 'solicitud') {\n                console.log(`Actualizando estado de ${recentApp.id} a NUEVO`);\n                updatedApps[index] = {\n                  ...updatedApps[index],\n                  status: APPLICATION_STATUS.NEW\n                };\n                hasChanges = true;\n              }\n            });\n            \n            // Actualizar el estado solo si hubo cambios\n            if (hasChanges) {\n              setAppsWithApproval(updatedApps);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error verificando nuevas aplicaciones:', error);\n      }\n    };\n    \n    // Ejecutar la función de comprobación\n    checkForNewApplications();\n  }, [applications, user?.id, isCompanyAdmin]);\n  \n  // Modificar la lógica para actualizar todas las aplicaciones con estado \"pending\" o \"solicitud\" a \"new\"\n  useEffect(() => {\n    // Si no hay aplicaciones, no hacer nada\n    if (!applications || applications.length === 0) return;\n    \n    console.log('Verificando estado de aplicaciones:', applications.map(a => ({ id: a.id, status: a.status })));\n    \n    // Actualizar solo las aplicaciones con estado específico a \"new\" sin afectar las demás\n    const updatedApps = [...appsWithApproval];\n    let hasChanges = false;\n    \n    applications.forEach(app => {\n      const index = updatedApps.findIndex(a => a.id === app.id);\n      const needsUpdate = \n        !app.status || \n        app.status === 'pending' || \n        app.status === 'solicitud';\n      \n      // Solo actualizar si el estado necesita cambiar a \"new\"\n      if (index !== -1 && needsUpdate) {\n        console.log(`Actualizando estado de aplicación ${app.id} de \"${app.status}\" a \"new\"`);\n        updatedApps[index] = {\n          ...updatedApps[index],\n          status: APPLICATION_STATUS.NEW\n        };\n        hasChanges = true;\n      } else if (index === -1) {\n        // Si la aplicación no está en el array, agregarla con su estado original\n        // o \"new\" si no tiene estado o es pending/solicitud\n        const newStatus = needsUpdate ? APPLICATION_STATUS.NEW : (app.status as Application['status']);\n        console.log(`Agregando aplicación ${app.id} con estado \"${newStatus}\"`);\n        updatedApps.push({\n          ...app,\n          status: newStatus,\n          approvalStatus: {\n            approvedByAdvisor: app.approved_by_advisor || false,\n            approvedByCompany: app.approved_by_company || false\n          }\n        });\n        hasChanges = true;\n      }\n      // Si existe y no necesita actualización, la dejamos como está\n    });\n    \n    if (hasChanges) {\n      console.log('Actualizando aplicaciones:');\n      updatedApps.forEach(app => console.log(`- ${app.id}: ${app.status}`));\n      setAppsWithApproval(updatedApps);\n    }\n  }, [applications]);\n  \n  // Modificar la forma en que agrupamos las aplicaciones por estado para los administradores de empresa\n  // para crear un flujo de trabajo independiente\n  const groupedApplications = React.useMemo(() => {\n    // Crear un objeto con todos los estados posibles como claves y arrays vacíos como valores\n    const initialGroups = Object.values(APPLICATION_STATUS).reduce((acc, status) => {\n      acc[status] = [];\n      return acc as Record<string, ApplicationWithApproval[]>;\n    }, {} as Record<string, ApplicationWithApproval[]>);\n    \n    // Para los administradores de empresa, usaremos un agrupamiento virtual basado en las aprobaciones\n    if (isCompanyAdmin()) {\n    return appsWithApproval.reduce((acc, app) => {\n        // Si está en movimiento, respetar el estado de destino\n      if (app.isMoving && app.targetStatus) {\n          // Verificar que el estado existe antes de intentar agregar la aplicación\n          if (acc[app.targetStatus]) {\n        acc[app.targetStatus].push(app);\n      } else {\n            // Si el estado no existe, usar NEW como fallback\n            console.warn(`Estado inválido detectado: ${app.targetStatus}, usando NEW como fallback`);\n            acc[APPLICATION_STATUS.NEW].push(app);\n          }\n          return acc;\n        }\n        \n        // Normalizar estados \"pending\" y \"solicitud\" a \"new\"\n        if (!app.status || app.status === 'pending' || app.status === 'solicitud') {\n          acc[APPLICATION_STATUS.NEW].push(app);\n          return acc;\n        }\n        \n        // Estados compartidos que siempre se muestran igual para todos los usuarios\n        const sharedStatuses = [\n          APPLICATION_STATUS.POR_DISPERSAR,\n          APPLICATION_STATUS.COMPLETED,\n          APPLICATION_STATUS.EXPIRED,\n          APPLICATION_STATUS.CANCELLED,\n          APPLICATION_STATUS.REJECTED\n        ];\n        \n        if (sharedStatuses.includes(app.status as APPLICATION_STATUS)) {\n          // Verificar que el estado existe\n          if (acc[app.status]) {\n            acc[app.status].push(app);\n          } else {\n            console.warn(`Estado compartido inválido detectado: ${app.status}, usando NEW como fallback`);\n            acc[APPLICATION_STATUS.NEW].push(app);\n          }\n          return acc;\n        }\n        \n        // Para los estados independientes, usar la lógica personalizada para admin de empresa\n        if (app.status === APPLICATION_STATUS.APPROVED) {\n          // Si está aprobada por la empresa pero no por el asesor, mostrarla en \"aprobado por mi\" \n          if (app.approvalStatus?.approvedByCompany && !app.approvalStatus.approvedByAdvisor) {\n            acc[APPLICATION_STATUS.APPROVED].push(app);\n            return acc;\n          }\n          \n          // Si está aprobada por ambos, y el estado real es aprobado, mostrarla en aprobado\n          if (app.approvalStatus?.approvedByCompany && app.approvalStatus?.approvedByAdvisor) {\n            acc[APPLICATION_STATUS.APPROVED].push(app);\n            return acc;\n          }\n          \n          // En otros casos, mostrarla en el estado que tenga según otras reglas\n        }\n        \n        // Si está en revisión según la empresa\n        if (app.status === APPLICATION_STATUS.IN_REVIEW) {\n          // Si no está aprobada por la empresa, mostrarla en \"en revisión\"\n          if (!app.approvalStatus?.approvedByCompany) {\n            acc[APPLICATION_STATUS.IN_REVIEW].push(app);\n            return acc;\n          }\n          \n          // Si está aprobada por la empresa, mostrarla en \"aprobado por mi\"\n          acc[APPLICATION_STATUS.APPROVED].push(app);\n          return acc;\n        }\n        \n        // Para nuevas aplicaciones sin aprobación\n        if (app.status === APPLICATION_STATUS.NEW) {\n          // Si está aprobada por la empresa, mostrarla en \"aprobado por mi\"\n          if (app.approvalStatus?.approvedByCompany) {\n            acc[APPLICATION_STATUS.APPROVED].push(app);\n            return acc;\n          }\n          \n          // Si está en revisión por la empresa\n          if (app.company_review_status === true) {\n            acc[APPLICATION_STATUS.IN_REVIEW].push(app);\n            return acc;\n          }\n          \n          // Si no tiene marca especial, mostrarla como nueva\n          acc[APPLICATION_STATUS.NEW].push(app);\n          return acc;\n        }\n        \n        // Para cualquier otro caso, usar el estado real si existe, o NEW como fallback\n        if (acc[app.status]) {\n          acc[app.status].push(app);\n        } else {\n          console.warn(`Estado desconocido detectado: ${app.status}, usando NEW como fallback`);\n          acc[APPLICATION_STATUS.NEW].push(app);\n        }\n        return acc;\n      }, initialGroups);\n    }\n    \n    // Para asesores y otros roles, usamos el agrupamiento normal basado en estado\n    return appsWithApproval.reduce((acc, app) => {\n      if (app.isMoving && app.targetStatus) {\n        // Si está en movimiento, verificar que el estado de destino existe\n        if (acc[app.targetStatus]) {\n          acc[app.targetStatus].push(app);\n        } else {\n          console.warn(`Estado de destino inválido: ${app.targetStatus}, usando NEW como fallback`);\n          acc[APPLICATION_STATUS.NEW].push(app);\n        }\n      } else {\n        // Si no, usar el estado normal, normalizando \"pending\" y \"solicitud\" a \"new\"\n        let status = app.status || 'new';\n        \n        // Normalizar estados \"pending\" y \"solicitud\" a \"new\"\n        if (status === 'pending' || status === 'solicitud') {\n          status = APPLICATION_STATUS.NEW;\n        }\n        \n        // Verificar que el estado existe antes de agregar\n        if (acc[status]) {\n        acc[status].push(app);\n        } else {\n          console.warn(`Estado inválido detectado: ${status}, usando NEW como fallback`);\n          acc[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      return acc;\n    }, initialGroups);\n  }, [appsWithApproval, isCompanyAdmin, isAdvisor]);\n  \n  // Modificar la lógica de agrupamiento de aplicaciones para separar flujos\n  // Esta es la parte clave que separa completamente los flujos\n  const columns = useMemo(() => {\n    // Estados estándar del Kanban\n    const statusGroups: Record<string, ApplicationWithApproval[]> = {\n      [APPLICATION_STATUS.NEW]: [],\n      [APPLICATION_STATUS.IN_REVIEW]: [],\n      [APPLICATION_STATUS.APPROVED]: [],\n      [APPLICATION_STATUS.POR_DISPERSAR]: [],\n      [APPLICATION_STATUS.COMPLETED]: [],\n      [APPLICATION_STATUS.EXPIRED]: [],\n      [APPLICATION_STATUS.REJECTED]: [],\n      [APPLICATION_STATUS.CANCELLED]: []\n    };\n    \n    // Agrupar aplicaciones por estado\n    appsWithApproval.forEach(app => {\n      // Asegurarnos de que el app.status no es undefined antes de usarlo\n      const currentStatus = app.status || APPLICATION_STATUS.NEW;\n      \n      // Lógica específica para administradores de empresa - flujo sincronizado\n      if (isCompanyAdmin()) {\n        // Los estados avanzados siempre deben mostrarse en su columna correspondiente\n        // independientemente del flujo (esto garantiza que se sincronicen con la vista del asesor)\n        const advancedStatuses = [\n          APPLICATION_STATUS.POR_DISPERSAR,\n          APPLICATION_STATUS.COMPLETED,\n          APPLICATION_STATUS.EXPIRED,\n          APPLICATION_STATUS.CANCELLED,\n          APPLICATION_STATUS.REJECTED\n        ];\n        \n        if (advancedStatuses.includes(currentStatus as APPLICATION_STATUS)) {\n          console.log(`Mostrando tarjeta ${app.id} en estado avanzado: ${currentStatus}`);\n          statusGroups[currentStatus].push(app);\n          return;\n        }\n        \n        // Para los estados básicos, aplicar la lógica personalizada del admin de empresa\n        \n        // 1. Si está aprobada por empresa -> va a \"Aprobado por mi\"\n        if (app.approvalStatus?.approvedByCompany) {\n          statusGroups[APPLICATION_STATUS.APPROVED].push(app);\n        }\n        // 2. Si está en revisión por empresa -> va a \"En Revisión\"\n        else if (app.company_review_status) {\n          statusGroups[APPLICATION_STATUS.IN_REVIEW].push(app);\n        }\n        // 3. Si no está ni en revisión ni aprobada por empresa -> va a \"Nuevo\"\n        else if (currentStatus === APPLICATION_STATUS.NEW || \n                currentStatus === APPLICATION_STATUS.PENDING || \n                (!app.company_review_status && !app.approvalStatus?.approvedByCompany)) {\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      // Lógica para asesores - flujo normal basado en estado real\n      else if (isAdvisor()) {\n        if (currentStatus) {\n          // Verificar que el estado existe en nuestros grupos antes de agregar\n          if (statusGroups[currentStatus]) {\n            statusGroups[currentStatus].push(app);\n          } else {\n            // Si no existe, log warning y usar NEW como fallback\n            console.warn(`Estado desconocido en columns para asesor: ${currentStatus}, usando NEW como fallback`);\n            statusGroups[APPLICATION_STATUS.NEW].push(app);\n          }\n        } else {\n          // Si no tiene estado, ponerla en \"Nuevo\"\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n      // Lógica para otros roles\n      else {\n        if (currentStatus) {\n          // Verificar que el estado existe en nuestros grupos\n          if (statusGroups[currentStatus]) {\n            statusGroups[currentStatus].push(app);\n          } else {\n            // Si no existe, usar NEW como fallback\n            console.warn(`Estado desconocido en columns para otros roles: ${currentStatus}, usando NEW como fallback`);\n            statusGroups[APPLICATION_STATUS.NEW].push(app);\n          }\n        } else {\n          // Si no tiene estado, ponerla en \"Nuevo\"\n          statusGroups[APPLICATION_STATUS.NEW].push(app);\n        }\n      }\n    });\n    \n    // Definición de colores para cada columna\n    const columnDefinitions = [\n      { id: APPLICATION_STATUS.NEW, title: 'Nuevo', color: 'warning', applications: statusGroups[APPLICATION_STATUS.NEW] },\n      { id: APPLICATION_STATUS.IN_REVIEW, title: 'En Revisión', color: 'info', applications: statusGroups[APPLICATION_STATUS.IN_REVIEW] },\n      { id: APPLICATION_STATUS.APPROVED, title: 'Aprobado por mi', color: 'success', applications: statusGroups[APPLICATION_STATUS.APPROVED] },\n      { id: APPLICATION_STATUS.POR_DISPERSAR, title: 'Por Dispersar', color: 'accent', applications: statusGroups[APPLICATION_STATUS.POR_DISPERSAR] },\n      { id: APPLICATION_STATUS.COMPLETED, title: 'Completado', color: 'primary', applications: statusGroups[APPLICATION_STATUS.COMPLETED] },\n      { id: APPLICATION_STATUS.EXPIRED, title: 'Expirado', color: 'error', applications: statusGroups[APPLICATION_STATUS.EXPIRED] },\n      { id: APPLICATION_STATUS.REJECTED, title: 'Rechazado', color: 'error', applications: statusGroups[APPLICATION_STATUS.REJECTED] },\n      { id: APPLICATION_STATUS.CANCELLED, title: 'Cancelado', color: 'neutral', applications: statusGroups[APPLICATION_STATUS.CANCELLED] }\n    ];\n    \n    return columnDefinitions;\n  }, [appsWithApproval, isAdvisor, isCompanyAdmin]);\n  \n  // Función para actualizar localmente el estado de aprobación de una aplicación\n  const updateLocalApprovalStatus = (applicationId: string, updates: Partial<{ approvedByAdvisor: boolean, approvedByCompany: boolean }>, newStatus?: string) => {\n    console.log(`Actualizando estado de aprobación para ${applicationId}:`, updates);\n    \n    // Crear una copia del estado actual\n    const currentApps = [...appsWithApproval];\n    const appIndex = currentApps.findIndex(app => app.id === applicationId);\n    \n    if (appIndex === -1) {\n      console.warn(`No se encontró la aplicación ${applicationId} para actualizar approval status`);\n      return;\n    }\n    \n    // Crear copia profunda de la aplicación para evitar mutaciones directas\n    const updatedApp = { ...currentApps[appIndex] };\n    \n    // Asegurar que el objeto approvalStatus exista\n    const currentApprovalStatus = updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false };\n    \n    // Crear el nuevo objeto de aprobación, asegurando que mantenemos los valores existentes\n    // a menos que se especifiquen explícitamente en el parámetro updates\n    const newApprovalStatus = {\n      approvedByAdvisor: updates.approvedByAdvisor !== undefined ? updates.approvedByAdvisor : currentApprovalStatus.approvedByAdvisor,\n      approvedByCompany: updates.approvedByCompany !== undefined ? updates.approvedByCompany : currentApprovalStatus.approvedByCompany\n    };\n    \n    console.log(`Approval Status anterior: ${JSON.stringify(currentApprovalStatus)}`);\n    console.log(`Nuevo Approval Status: ${JSON.stringify(newApprovalStatus)}`);\n    \n    // Actualizar la aplicación con el nuevo estado de aprobación\n    updatedApp.approvalStatus = newApprovalStatus;\n    \n    // Para mantener sincronizados los estados, cuando quitamos la aprobación de empresa,\n    // también actualizamos el company_review_status\n    if (updates.approvedByCompany === false && isCompanyAdmin()) {\n      console.log(`Actualizando company_review_status a true porque estamos quitando aprobación`);\n      updatedApp.company_review_status = true;\n    }\n\n    // Si ambos están aprobados, asegurarnos de moverla a por_dispersar\n    if (newApprovalStatus.approvedByAdvisor && newApprovalStatus.approvedByCompany) {\n      console.log(`Ambas aprobaciones están presentes, verificando si necesita moverse a Por Dispersar`);\n      if (updatedApp.status !== APPLICATION_STATUS.POR_DISPERSAR && \n          updatedApp.status !== APPLICATION_STATUS.COMPLETED) {\n        console.log(`Actualizando estado a Por Dispersar debido a doble aprobación`);\n        updatedApp.status = APPLICATION_STATUS.POR_DISPERSAR;\n      }\n    }\n    \n    // Actualizar el array de aplicaciones\n    currentApps[appIndex] = updatedApp;\n    \n    // Establecer el nuevo estado\n    setAppsWithApproval(currentApps);\n  };\n  \n  const handleDragStart = (e: React.DragEvent<HTMLDivElement>, application: ApplicationWithApproval, idx: number) => {\n    // Guardar la aplicación que estamos arrastrando\n    draggedItemIndexRef.current = idx;\n    \n    // Almacenar el elemento que estamos arrastrando para gestionar mejor el evento\n    dragItemRef.current = e.currentTarget;\n    \n    // Establecer los datos que queremos transferir\n    e.dataTransfer.setData('text/plain', application.id);\n    e.dataTransfer.effectAllowed = 'move';\n    \n    // Crear una copia visual para el arrastre\n    if (!dragImageRef.current) {\n      dragImageRef.current = e.currentTarget.cloneNode(true) as HTMLDivElement;\n      dragImageRef.current.style.position = 'absolute';\n      dragImageRef.current.style.top = '-1000px';\n      dragImageRef.current.style.opacity = '0.8';\n      dragImageRef.current.style.transform = 'scale(0.9)';\n      dragImageRef.current.style.width = `${e.currentTarget.offsetWidth}px`;\n      document.body.appendChild(dragImageRef.current);\n    }\n    \n    // Establecer la imagen de arrastre\n    if (dragImageRef.current) {\n      const rect = e.currentTarget.getBoundingClientRect();\n      e.dataTransfer.setDragImage(dragImageRef.current, rect.width / 2, 20);\n    }\n    \n    // Añadir clase CSS para mostrar visualmente que el elemento está siendo arrastrado\n    if (e.currentTarget) {\n      e.currentTarget.classList.add('dragging');\n    }\n  };\n  \n  const handleDragEnd = (e: React.DragEvent<HTMLDivElement>) => {\n    // Eliminar clase CSS de arrastre\n    if (dragItemRef.current) {\n      dragItemRef.current.classList.remove('dragging');\n      dragItemRef.current = null;\n    }\n    \n    if (e.currentTarget) {\n      e.currentTarget.classList.remove('dragging');\n    }\n    \n    // Eliminar el elemento clonado para el arrastre\n    if (dragImageRef.current) {\n      document.body.removeChild(dragImageRef.current);\n      dragImageRef.current = null;\n    }\n    \n    draggedItemIndexRef.current = -1;\n    draggedItemNewStatusRef.current = '';\n  };\n  \n  const handleDragOver = (e: React.DragEvent, columnStatus: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = 'move';\n    \n    // Guardar el nuevo estado para la actualización optimista\n    if (draggedItemNewStatusRef.current !== columnStatus) {\n      draggedItemNewStatusRef.current = columnStatus;\n    }\n    \n    // Añadir clase visual para indicar la columna destino\n    if (e.currentTarget.classList.contains('kanban-column')) {\n      document.querySelectorAll('.kanban-column').forEach(col => {\n        col.classList.remove('drag-over');\n      });\n      e.currentTarget.classList.add('drag-over');\n    }\n  };\n  \n  // Verificar si el usuario puede arrastrar una tarjeta\n  const canDragCard = (app: ApplicationWithApproval): boolean => {\n    // No permitir arrastrar si la aplicación no tiene status o id\n    if (!app.status || !app.id) {\n      return false;\n    }\n    \n    // No permitir arrastrar tarjetas que están en proceso de cambio de estado\n    if (app.isMoving) {\n      return false;\n    }\n    \n    // No permitir arrastrar tarjetas que están siendo procesadas\n    if (processingAppId === app.id) {\n      return false;\n    }\n    \n    // Restricciones específicas basadas en el rol del usuario\n    \n    // Para asesores\n    if (isAdvisor()) {\n      // Estados que nunca pueden ser movidos por ningún usuario\n      const restrictedStatuses = [\n        APPLICATION_STATUS.EXPIRED,\n        APPLICATION_STATUS.CANCELLED,\n        APPLICATION_STATUS.POR_DISPERSAR\n      ];\n      \n      // No permitir arrastrar si está en un estado restringido\n      if (restrictedStatuses.includes(app.status as APPLICATION_STATUS)) {\n        return false;\n      }\n      \n      // Si tiene aprobaciones de ambos (asesor y empresa), no permitir mover\n      if (app.approvalStatus?.approvedByAdvisor && app.approvalStatus?.approvedByCompany) {\n        return false;\n      }\n      \n      return true;\n    }\n    \n    // Para administradores de empresa\n    if (isCompanyAdmin()) {\n      // Estados que nunca pueden ser movidos por un admin de empresa\n      const restrictedStatuses = [\n        APPLICATION_STATUS.POR_DISPERSAR,\n        APPLICATION_STATUS.COMPLETED,\n        APPLICATION_STATUS.EXPIRED,\n        APPLICATION_STATUS.CANCELLED,\n        APPLICATION_STATUS.REJECTED\n      ];\n      \n      // No permitir arrastrar si está en un estado restringido\n      if (restrictedStatuses.includes(app.status as APPLICATION_STATUS)) {\n        return false;\n      }\n      \n      // Si tiene aprobaciones de ambos (asesor y empresa), no permitir mover\n      if (app.approvalStatus?.approvedByAdvisor && app.approvalStatus?.approvedByCompany) {\n        return false;\n      }\n      \n      // MODIFICACIÓN: Aunque el asesor haya aprobado, el admin de empresa debe poder aprobar también\n      // Aquí no se impide mover la tarjeta si solo está aprobada por el asesor\n      \n      return true;\n    }\n    \n    // Para otros roles, no permitir arrastrar\n    return false;\n  };\n  \n  // Modificar handleDrop para manejar correctamente el flujo independiente\n  const handleDrop = async (e: React.DragEvent<HTMLDivElement>, newStatus: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    // Eliminar todas las clases de arrastre\n    document.querySelectorAll('.kanban-column').forEach(col => {\n      col.classList.remove('drag-over');\n    });\n    \n    // Verificar que el newStatus es válido\n    const validStatuses = Object.values(APPLICATION_STATUS);\n    if (!validStatuses.includes(newStatus as APPLICATION_STATUS)) {\n      console.error(`Estado inválido para drop: ${newStatus}`);\n      setErrorMessage(`Error: estado \"${newStatus}\" no es válido.`);\n      return;\n    }\n    \n    // Recuperar el ID de la aplicación\n    const applicationId = e.dataTransfer.getData('text/plain');\n    if (!applicationId || !user?.id) return;\n    \n    const application = appsWithApproval.find(app => app.id === applicationId);\n    if (!application) return;\n    \n    const oldStatus = application.status || APPLICATION_STATUS.NEW;\n    \n    // No hacer nada si el estatus es el mismo\n    if (oldStatus === newStatus) return;\n    \n    console.log(`Intentando mover tarjeta ${applicationId} de ${oldStatus} a ${newStatus}`);\n    \n      // Establecer el ID de la aplicación que se está procesando\n      setProcessingAppId(applicationId);\n      \n    try {\n      // Para administradores de empresa (FLUJO INDEPENDIENTE)\n      if (isCompanyAdmin()) {\n        // El admin de empresa solo puede mover tarjetas entre estos estados\n        const allowedTargetStates = [\n          APPLICATION_STATUS.NEW,\n          APPLICATION_STATUS.IN_REVIEW,\n          APPLICATION_STATUS.APPROVED\n        ];\n        \n        // Si intenta mover a un estado que no está permitido\n        if (!allowedTargetStates.includes(newStatus as APPLICATION_STATUS)) {\n          setErrorMessage(`No puedes mover solicitudes al estado \"${STATUS_LABELS[newStatus as keyof typeof STATUS_LABELS] || newStatus}\". Solo puedes mover entre Nuevo, En Revisión y Aprobado por mí.`);\n          setProcessingAppId(null);\n          return;\n        }\n        \n        // Estados que nunca pueden ser movidos por un admin de empresa\n        const restrictedStatuses = [\n          APPLICATION_STATUS.POR_DISPERSAR,\n          APPLICATION_STATUS.COMPLETED,\n          APPLICATION_STATUS.EXPIRED,\n          APPLICATION_STATUS.CANCELLED,\n          APPLICATION_STATUS.REJECTED\n        ];\n        \n        // Si la tarjeta está en un estado restringido, no permitir moverla\n        if (restrictedStatuses.includes(oldStatus as APPLICATION_STATUS)) {\n          setErrorMessage(`No puedes mover solicitudes que están en estado \"${STATUS_LABELS[oldStatus as keyof typeof STATUS_LABELS] || oldStatus}\".`);\n          setProcessingAppId(null);\n          return;\n        }\n        \n        // Actualización optimista en UI para mejor fluidez\n      const updatedApps = [...appsWithApproval];\n      const appIndex = updatedApps.findIndex(app => app.id === applicationId);\n      \n      if (appIndex !== -1) {\n          // Crear copia profunda para evitar referencias\n        const updatedApp = { \n          ...updatedApps[appIndex], \n          isMoving: true,\n          targetStatus: newStatus \n        };\n        \n          if (newStatus === APPLICATION_STATUS.NEW) {\n            // Mover a Nuevo\n            updatedApp.company_review_status = false;\n          updatedApp.approvalStatus = {\n            ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByCompany: false\n            };\n            \n            // Si estaba aprobado y se mueve a Nuevo, hay que quitar la aprobación de la empresa\n            if (updatedApp.approvalStatus?.approvedByCompany && user?.entityId && application.company_id) {\n              try {\n                console.log(\"Quitando aprobación de empresa en la base de datos\");\n                // Ejecutamos una consulta SQL para quitar la aprobación\n                const query = `\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_company = false, \n                      approval_date_company = NULL\n                  WHERE id = '${applicationId}' AND company_id = '${application.company_id}'\n                  RETURNING *\n                `;\n                \n                const response = await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query }),\n                });\n                \n                const result = await response.json();\n                if (result.error) {\n                  throw new Error(result.error);\n                }\n                \n                console.log(\"✅ Aprobación de empresa removida correctamente:\", result.data);\n                \n                // Registrar en historial\n                const historyQuery = `\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'new', 'Regresado a Nuevo por administrador de empresa', '${user.entityId}')\n                  RETURNING *\n                `;\n                \n                await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query: historyQuery }),\n                });\n                \n                // Actualizar UI explícitamente\n                updateLocalApprovalStatus(applicationId, { approvedByCompany: false }, APPLICATION_STATUS.NEW);\n              } catch (error) {\n                console.error(\"❌ Error al quitar aprobación de empresa:\", error);\n                setErrorMessage(`Error al quitar aprobación: ${(error as Error).message}`);\n              }\n            }\n          } \n          else if (newStatus === APPLICATION_STATUS.IN_REVIEW) {\n            // Mover a En Revisión\n            updatedApp.company_review_status = true;\n          updatedApp.approvalStatus = {\n            ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByCompany: false\n            };\n            \n            // Si estaba aprobado y se mueve a En Revisión, hay que quitar la aprobación de la empresa\n            if (oldStatus === APPLICATION_STATUS.APPROVED && \n                updatedApp.approvalStatus?.approvedByCompany && \n                user?.entityId && \n                application.company_id) {\n              try {\n                console.log(\"Quitando aprobación de empresa en la base de datos\");\n                // Ejecutamos una consulta SQL para quitar la aprobación\n                const query = `\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_company = false, \n                      approval_date_company = NULL,\n                      status = '${APPLICATION_STATUS.IN_REVIEW}'\n                  WHERE id = '${applicationId}' AND company_id = '${application.company_id}'\n                  RETURNING *\n                `;\n                \n                const response = await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query }),\n                });\n                \n                const result = await response.json();\n                if (result.error) {\n                  throw new Error(result.error);\n                }\n                \n                console.log(\"✅ Aprobación de empresa removida correctamente:\", result.data);\n                \n                // Registrar en historial\n                const historyQuery = `\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'in_review', 'Revisión adicional requerida por empresa', '${user.entityId}')\n                  RETURNING *\n                `;\n                \n                await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query: historyQuery }),\n                });\n                \n                // Actualizar UI explícitamente con ambas propiedades\n                updateLocalApprovalStatus(applicationId, { \n                  approvedByCompany: false \n                }, APPLICATION_STATUS.IN_REVIEW);\n                \n                // Forzar actualización global de la aplicación para todos los usuarios\n                // llamando a la API de cambio de estado\n                if (onStatusChange) {\n                  try {\n                    await onStatusChange(application, APPLICATION_STATUS.IN_REVIEW);\n                    console.log(\"✅ Estado actualizado correctamente a EN REVISIÓN\");\n                  } catch (error) {\n                    console.error(\"❌ Error al actualizar estado:\", error);\n                  }\n                }\n              } catch (error) {\n                console.error(\"❌ Error al quitar aprobación de empresa:\", error);\n                setErrorMessage(`Error al quitar aprobación: ${(error as Error).message}`);\n              }\n            } else {\n              // Incluso si no estaba aprobada, forzar actualización de estado\n              if (onStatusChange) {\n                try {\n                  await onStatusChange(application, APPLICATION_STATUS.IN_REVIEW);\n                  console.log(\"✅ Estado actualizado correctamente a EN REVISIÓN\");\n                } catch (error) {\n                  console.error(\"❌ Error al actualizar estado:\", error);\n                }\n              }\n            }\n          } \n          else if (newStatus === APPLICATION_STATUS.APPROVED) {\n            // Mover a Aprobado por mí\n            updatedApp.company_review_status = true; // Se considera revisado si está aprobado\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByCompany: true\n            };\n            \n            // Llamar a la API para aprobar por empresa\n            if (user?.entityId && application.company_id) {\n              try {\n                console.log(`Empresa ${user.entityId} está aprobando la solicitud ${applicationId}`);\n                \n                // Aplicar cambio optimista a la UI primero\n                updatedApps[appIndex] = updatedApp;\n                setAppsWithApproval([...updatedApps]);\n                \n                // Llamar a la API y esperar a que termine\n                const result = await approveByCompany(\n                  applicationId, \n                  \"Aprobado vía Kanban\", \n                  user.entityId, \n                  application.company_id, \n                  { company_id: application.company_id } // Pasar company_id en el entityFilter\n                );\n                \n                console.log(\"✅ Aplicación aprobada por empresa:\", result);\n                \n                // Actualizar UI con respuesta del servidor\n                updateLocalApprovalStatus(applicationId, { approvedByCompany: true });\n                \n                // Verificar si la aplicación ya está aprobada por el asesor\n                const approvalStatus = await getApprovalStatus(applicationId);\n                console.log(\"Estado de aprobación actual:\", approvalStatus);\n                \n                // Si está aprobada por ambos, mover automáticamente a \"por_dispersar\"\n                if (approvalStatus?.approvedByAdvisor) {\n                  console.log(\"❇️ Ambas aprobaciones completadas, moviendo a Por Dispersar\");\n                  // Mostrar notificación de transición automática\n                  setAutoTransitionMessage(`La solicitud ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR] || 'Por Dispersar'}\"`);\n                  \n                  // Cambiar el estado a \"por_dispersar\" después de un breve retraso\n                  setTimeout(() => {\n                    if (onStatusChange) {\n                      onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                    }\n                    // Limpiar el mensaje después de mostrar\n                    setTimeout(() => setAutoTransitionMessage(null), 3000);\n                  }, 500);\n                }\n              } catch (error) {\n                console.error(\"❌ Error al aprobar por empresa:\", error);\n                setErrorMessage(`Error al aprobar: ${(error as Error).message}`);\n                \n                // Revertir el estado optimista en caso de error\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByCompany: false\n            };\n                updatedApps[appIndex] = updatedApp;\n                setAppsWithApproval([...updatedApps]);\n              }\n          }\n        }\n        \n          // Actualizar la app en el estado\n        updatedApps[appIndex] = updatedApp;\n        setAppsWithApproval(updatedApps);\n          \n          // Quitar la marca de movimiento después de un breve retraso\n          setTimeout(() => {\n            setAppsWithApproval(prev => \n              prev.map(app => \n                app.id === applicationId\n                  ? { ...app, isMoving: false, targetStatus: undefined }\n                  : app\n              )\n            );\n            setProcessingAppId(null);\n          }, 500);\n        }\n      }\n      // Para asesores (flujo normal)\n      else if (isAdvisor()) {\n        // Verificar que el estado es válido\n        if (!validStatuses.includes(newStatus as APPLICATION_STATUS)) {\n          setErrorMessage(`Estado de destino \"${newStatus}\" no es válido.`);\n          setProcessingAppId(null);\n          return;\n        }\n        \n        // Actualización optimista en UI\n        const updatedApps = [...appsWithApproval];\n        const appIndex = updatedApps.findIndex(app => app.id === applicationId);\n        \n        if (appIndex !== -1) {\n          // Crear copia profunda para evitar referencias\n          const updatedApp = { \n            ...updatedApps[appIndex], \n            isMoving: true, \n            targetStatus: newStatus, \n            status: newStatus as Application['status'] // actualizar el estado directamente\n          };\n          \n          // Lógica para manejar aprobaciones de manera optimista\n          if (newStatus === APPLICATION_STATUS.APPROVED) {\n            console.log(`Advisor ${user?.id} está aprobando la solicitud ${applicationId}`);\n            \n            // Actualizar inmediatamente el estado visual de aprobación del asesor\n            // para una respuesta inmediata en la UI\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByAdvisor: true  // Optimistically set to true\n            };\n            \n            // Aplicar cambio optimista a la UI\n            updatedApps[appIndex] = updatedApp;\n            setAppsWithApproval([...updatedApps]);  // Clone to trigger re-render\n            \n            // Llamar a la API para aprobar por asesor\n            if (user?.entityId) {\n              try {\n                // Llamar a la API y esperar a que termine\n                console.log(\"Llamando a approveByAdvisor API...\");\n                const result = await approveByAdvisor(\n            applicationId, \n            \"Aprobado vía Kanban\", \n            user.entityId, \n                  { advisor_id: user.entityId }  // Ensure we're using the advisor filter\n                );\n                \n                console.log(\"✅ Aplicación aprobada por asesor:\", result);\n                \n                // Actualizar UI con respuesta del servidor explícitamente\n                // para asegurar que el indicador se actualiza correctamente\n                updateLocalApprovalStatus(applicationId, { approvedByAdvisor: true });\n                \n                // Verificar si la aplicación ya está aprobada por la empresa\n                const approvalStatus = await getApprovalStatus(applicationId);\n                console.log(\"Estado de aprobación actual:\", approvalStatus);\n                \n                // Si está aprobada por ambos, mover automáticamente a \"por_dispersar\"\n                if (approvalStatus?.approvedByCompany) {\n                  // Mostrar notificación de transición automática\n                  setAutoTransitionMessage(`La solicitud ha sido aprobada por asesor y empresa. Moviendo automáticamente a \"${STATUS_LABELS[APPLICATION_STATUS.POR_DISPERSAR] || 'Por Dispersar'}\"`);\n                  \n                  // Cambiar el estado a \"por_dispersar\" después de un breve retraso\n                  setTimeout(() => {\n                    if (onStatusChange) {\n                      onStatusChange(application, APPLICATION_STATUS.POR_DISPERSAR);\n                    }\n                    // Limpiar el mensaje después de mostrar\n                    setTimeout(() => setAutoTransitionMessage(null), 3000);\n                  }, 500);\n                }\n              } catch (error) {\n                console.error(\"❌ Error al aprobar por asesor:\", error);\n                setErrorMessage(`Error al aprobar: ${(error as Error).message}`);\n                \n                // Revertir el estado optimista en caso de error\n                // pero solo si realmente falló la aprobación\n                const appToPatch = appsWithApproval.find(app => app.id === applicationId);\n                if (appToPatch) {\n                  updateLocalApprovalStatus(applicationId, { approvedByAdvisor: false });\n                }\n              }\n            }\n          }\n          // Si se mueve de APPROVED a otro estado, quitar la aprobación\n          else if (oldStatus === APPLICATION_STATUS.APPROVED && newStatus !== APPLICATION_STATUS.POR_DISPERSAR) {\n            console.log(\"Moviendo de aprobado a otro estado, resetear aprobación de asesor\");\n            updatedApp.approvalStatus = {\n              ...(updatedApp.approvalStatus || { approvedByAdvisor: false, approvedByCompany: false }),\n              approvedByAdvisor: false\n            };\n            \n            // Actualizar en BD para quitar aprobación (nueva API)\n            if (user?.entityId && newStatus === APPLICATION_STATUS.IN_REVIEW) {\n              try {\n                console.log(\"Quitando aprobación de asesor en la base de datos\");\n                // Ejecutamos una consulta SQL para quitar la aprobación\n                const query = `\n                  UPDATE ${TABLES.APPLICATIONS}\n                  SET approved_by_advisor = false, \n                      approval_date_advisor = NULL\n                  WHERE id = '${applicationId}' AND assigned_to = '${user.entityId}'\n                  RETURNING *\n                `;\n                \n                const response = await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query }),\n                });\n                \n                const result = await response.json();\n                if (result.error) {\n                  throw new Error(result.error);\n                }\n                \n                console.log(\"✅ Aprobación de asesor removida correctamente:\", result.data);\n                \n                // Registrar en historial\n                const historyQuery = `\n                  INSERT INTO ${APPLICATION_HISTORY_TABLE} (application_id, status, comment, created_by)\n                  VALUES ('${applicationId}', 'in_review', 'Revisión adicional requerida', '${user.entityId}')\n                  RETURNING *\n                `;\n                \n                await fetch('http://localhost:3100/query', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ query: historyQuery }),\n                });\n                \n                // Actualizar UI explícitamente\n                updateLocalApprovalStatus(applicationId, { approvedByAdvisor: false });\n              } catch (error) {\n                console.error(\"❌ Error al quitar aprobación del asesor:\", error);\n                setErrorMessage(`Error al quitar aprobación: ${(error as Error).message}`);\n              }\n            }\n          }\n          \n          // Actualizar la app en el estado solo si no es una aprobación (ese caso ya lo manejamos arriba)\n          if (newStatus !== APPLICATION_STATUS.APPROVED) {\n            updatedApps[appIndex] = updatedApp;\n            setAppsWithApproval(updatedApps);\n          }\n          \n          // Llamar a la API para actualizar el estado\n          if (onStatusChange) {\n            try {\n              await onStatusChange(application, newStatus);\n            } catch (error) {\n          console.error(\"Error updating status:\", error);\n              setErrorMessage(`Error al actualizar el estado: ${(error as Error).message}`);\n          \n              // Revertir cambios en caso de error\n          setAppsWithApproval(prev => \n            prev.map(app => \n              app.id === applicationId\n                    ? { ...app, status: oldStatus as Application['status'], isMoving: false, targetStatus: undefined }\n                : app\n            )\n          );\n            }\n          }\n          \n          // Quitar la marca de movimiento después de un breve retraso\n          setTimeout(() => {\n      setAppsWithApproval(prev => \n        prev.map(app => \n          app.id === applicationId\n                  ? { ...app, isMoving: false, targetStatus: undefined }\n            : app\n        )\n      );\n            setProcessingAppId(null);\n          }, 500);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error in handleDrop:\", error);\n      setErrorMessage(`Error al actualizar el estado: ${(error as Error).message}`);\n      setProcessingAppId(null);\n    }\n  };\n  \n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('es-MX', {\n      style: 'currency',\n      currency: 'MXN',\n    }).format(amount);\n  };\n  \n  // Renderizar los indicadores de aprobación con mejor formato y legibilidad\n  const renderApprovalIndicators = (app: ApplicationWithApproval) => {\n    if (!app.approvalStatus) return null;\n    \n    const { approvedByAdvisor, approvedByCompany } = app.approvalStatus;\n    const hasFullApproval = approvedByAdvisor && approvedByCompany;\n    \n    return (\n      <div className=\"flex flex-col mt-1 space-y-1\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"tooltip tooltip-top flex items-center\" data-tip={approvedByAdvisor ? \"Aprobado por asesor\" : \"Pendiente de aprobación por asesor\"}>\n            <span className=\"text-xs mr-1 whitespace-nowrap\">Asesor:</span>\n            <div className={`w-3 h-3 rounded-full ${approvedByAdvisor ? 'bg-success' : 'bg-warning'}`}></div>\n            {approvedByAdvisor && (\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 ml-1 text-success\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M5 13l4 4L19 7\" />\n              </svg>\n            )}\n          </div>\n          \n          <div className=\"tooltip tooltip-top flex items-center ml-3\" data-tip={approvedByCompany ? \"Aprobado por empresa\" : \"Pendiente de aprobación por empresa\"}>\n            <span className=\"text-xs mr-1 whitespace-nowrap\">Empresa:</span>\n            <div className={`w-3 h-3 rounded-full ${approvedByCompany ? 'bg-success' : 'bg-warning'}`}></div>\n            {approvedByCompany && (\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 ml-1 text-success\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M5 13l4 4L19 7\" />\n              </svg>\n            )}\n          </div>\n        </div>\n        \n        {/* Indicador de doble aprobación */}\n        {hasFullApproval && (\n          <div className=\"w-full flex justify-center mt-1\">\n            <div className=\"badge badge-success text-xs px-2 py-1 text-white font-medium\">\n              Aprobado Total\n            </div>\n          </div>\n        )}\n        \n        {/* Botón para deshacer aprobación (solo para empresa y si está aprobado) */}\n        {isCompanyAdmin() && approvedByCompany && app.status === APPLICATION_STATUS.APPROVED && (\n          <div className=\"w-full flex justify-center mt-1\">\n            <button \n              onClick={(e) => {\n                e.stopPropagation(); // Evitar que se propague al card\n                handleDrop(e as unknown as React.DragEvent<HTMLDivElement>, APPLICATION_STATUS.IN_REVIEW);\n              }}\n              className=\"btn btn-xs btn-error w-full\"\n            >\n              Deshacer Aprobación\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  };\n  \n  // Mejorar el formato de las etiquetas de producto para mayor legibilidad\n  const getProductLabel = (type: string) => {\n    const labels: Record<string, string> = {\n      'selected_plans': 'Crédito a Plazos',\n      'product_simulations': 'Simulación',\n      'auto_loan': 'Crédito Auto',\n      'car_backed_loan': 'Crédito con Garantía',\n      'personal_loan': 'Préstamo Personal',\n      'cash_advance': 'Adelanto de Efectivo'\n    };\n    \n    return labels[type] || type;\n  };\n  \n  // Función para renderizar el producto como una etiqueta bien formateada\n  const renderProductLabel = (type: string, color: string) => {\n    return (\n      <span className={`badge badge-${color} badge-md text-xs px-3 py-1 whitespace-nowrap inline-block`}>\n        {getProductLabel(type || '')}\n      </span>\n    );\n  };\n  \n  // Función para obtener el color apropiado para la tarjeta según estado y aprobaciones\n  const getCardColor = (app: ApplicationWithApproval) => {\n    const status = app.status || '';\n    \n    // Colores específicos según el estado\n    switch (status.toLowerCase()) {\n      case APPLICATION_STATUS.REJECTED:\n        return 'border-error bg-red-50';\n      case APPLICATION_STATUS.APPROVED:\n        // Si está aprobado, verificar el estado de las aprobaciones\n        if (app.approvalStatus) {\n          const { approvedByAdvisor, approvedByCompany } = app.approvalStatus;\n          if (approvedByAdvisor && approvedByCompany) {\n            return 'border-success bg-green-100'; // Aprobado por ambos\n          } else if (approvedByAdvisor) {\n            return 'border-success bg-green-50'; // Aprobado solo por asesor\n          } else if (approvedByCompany) {\n            return 'border-info bg-blue-50'; // Aprobado solo por empresa\n          }\n        }\n        return 'border-success bg-green-50';\n      case APPLICATION_STATUS.IN_REVIEW:\n        return 'border-info bg-blue-50';\n      case APPLICATION_STATUS.NEW:\n        return 'border-warning bg-yellow-50';\n      case APPLICATION_STATUS.PENDING:\n        return 'border-warning bg-amber-50';\n      case APPLICATION_STATUS.POR_DISPERSAR:\n        return 'border-accent bg-purple-50';\n      case APPLICATION_STATUS.COMPLETED:\n        return 'border-primary bg-indigo-50';\n      case APPLICATION_STATUS.EXPIRED:\n        return 'border-error bg-red-100';\n      case APPLICATION_STATUS.CANCELLED:\n        return 'border-neutral bg-gray-100';\n      default:\n        // Si el estado no coincide con ninguno de los anteriores, usar el color de la columna\n        return `border-${app.status || 'neutral'}`;\n    }\n  };\n  \n  // Estilos personalizados para mostrar claramente cuáles tarjetas se pueden arrastrar\n  const customStyles = `\n    .custom-scrollbar::-webkit-scrollbar {\n      width: 8px;\n      height: 8px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-track {\n      background: #f1f1f1;\n      border-radius: 10px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-thumb {\n      background: #888;\n      border-radius: 10px;\n    }\n    \n    .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n      background: #555;\n    }\n    \n    .kanban-card {\n      transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out, box-shadow 0.3s ease-in-out, border-color 0.3s ease;\n      touch-action: none;\n      user-select: none;\n      will-change: transform, opacity;\n    }\n    \n    .kanban-card-draggable {\n      cursor: grab !important;\n      position: relative;\n    }\n    \n    .kanban-card-draggable:hover {\n      transform: translateY(-4px);\n      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n      border-color: #a855f7;\n      z-index: 10;\n    }\n    \n    .kanban-card-draggable:active {\n      cursor: grabbing !important;\n    }\n    \n    /* Indicator for draggable cards */\n    .kanban-card-draggable::after {\n      content: '';\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      width: 20px;\n      height: 20px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23666'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M7 11.5V14m0-2.5v-6a1.5 1.5 0 113 0m-3 6a1.5 1.5 0 00-3 0v2a7.5 7.5 0 0015 0v-5a1.5 1.5 0 013 0m-6-3V11m0-5.5v-1a1.5 1.5 0 013 0v1m0 0V11' /%3E%3C/svg%3E\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      opacity: 0.7;\n      transition: opacity 0.2s ease;\n    }\n    \n    .kanban-card-draggable:hover::after {\n      opacity: 1;\n    }\n    \n    .kanban-card-locked {\n      position: relative;\n      cursor: not-allowed !important;\n      opacity: 0.8;\n    }\n    \n    .kanban-card-locked::after {\n      content: '';\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      width: 20px;\n      height: 20px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23999'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z' /%3E%3C/svg%3E\");\n      background-size: contain;\n      background-repeat: no-repeat;\n      opacity: 0.7;\n    }\n    \n    .kanban-card.dragging {\n      opacity: 0.8;\n      transform: scale(1.03);\n      box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n      z-index: 50;\n    }\n    \n    .kanban-column {\n      transition: all 0.2s ease;\n      border-radius: 0.75rem;\n      will-change: transform, background-color;\n    }\n    \n    .kanban-column.drag-over {\n      background-color: rgba(var(--b2, 217 217 217) / 0.5);\n      transform: scale(1.01);\n      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);\n      border: 2px dashed #a855f7 !important;\n    }\n\n    .kanban-container {\n      scroll-behavior: smooth;\n    }\n\n    @media (min-width: 768px) {\n      .kanban-card-draggable:hover {\n        transform: translateY(-4px);\n        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n      }\n    }\n    \n    /* Animaciones para cambios de estado */\n    @keyframes fadeIn {\n      0% { opacity: 0; }\n      100% { opacity: 1; }\n    }\n    \n    @keyframes slideIn {\n      0% { transform: translateY(10px); opacity: 0; }\n      100% { transform: translateY(0); opacity: 1; }\n    }\n    \n    @keyframes processingPulse {\n      0% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0.4); }\n      70% { box-shadow: 0 0 0 6px rgba(124, 58, 237, 0); }\n      100% { box-shadow: 0 0 0 0 rgba(124, 58, 237, 0); }\n    }\n    \n    .kanban-card {\n      animation: fadeIn 0.3s ease-out;\n    }\n    \n    .processing-toast {\n      position: fixed;\n      bottom: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      padding: 10px 20px;\n      background-color: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      animation: slideIn 0.3s ease-out;\n    }\n    \n    .auto-transition-toast {\n      position: fixed;\n      bottom: 70px;\n      left: 50%;\n      transform: translateX(-50%);\n      padding: 10px 20px;\n      background-color: #dcfce7;\n      border: 1px solid #86efac;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      animation: slideIn 0.3s ease-out;\n    }\n    \n    /* Pop-up tooltip con instrucciones para arrastrar */\n    .drag-instructions {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background-color: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      padding: 12px 16px;\n      z-index: 1000;\n      max-width: 300px;\n      animation: fadeIn 0.3s ease-out;\n    }\n    \n    /* Mejoras para vista mobile */\n    @media (max-width: 640px) {\n      .kanban-column {\n        min-height: 300px;\n      }\n    }\n  `;\n  \n  // Función para obtener clases draggable\n  const getDraggableClasses = (app: ApplicationWithApproval): string => {\n    // Usar la función canDragCard que está definida en el ámbito superior\n    const isDraggable = canDragCard(app) && app.id !== processingAppId;\n    return isDraggable \n      ? 'cursor-grab kanban-card-draggable' \n      : 'cursor-not-allowed opacity-80 kanban-card-locked';\n  };\n\n  // Función para definir los tooltips con información clara y precisa\n  const getDragTooltip = (app: ApplicationWithApproval): string => {\n    if (app.id === processingAppId) {\n      return \"Esta tarjeta está siendo procesada\";\n    }\n    \n    // Si la tarjeta se puede arrastrar, mostrar mensaje informativo\n    if (canDragCard(app)) {\n      return \"Arrastra para cambiar el estado\";\n    }\n    \n    // Mensajes específicos para casos donde no se puede arrastrar\n    if (app.approvalStatus?.approvedByAdvisor && app.approvalStatus?.approvedByCompany) {\n      return \"Esta solicitud ya está completamente aprobada y no puede ser movida\";\n    }\n    \n    // Asegurarse de que app.status no es undefined\n    const status = app.status || APPLICATION_STATUS.NEW;\n    \n    // Mensajes específicos según el rol y estado\n    if (isCompanyAdmin()) {\n      if (status === APPLICATION_STATUS.REJECTED) {\n        return \"Las solicitudes rechazadas solo pueden ser movidas por asesores\";\n      } else if (status === APPLICATION_STATUS.POR_DISPERSAR) {\n        return \"Esta solicitud ya está lista para dispersión y no puede regresar a estados anteriores\";\n      } else if (status === APPLICATION_STATUS.COMPLETED) {\n        return \"Esta solicitud ya está completada y no puede cambiar de estado\";\n      } else if (status === APPLICATION_STATUS.EXPIRED) {\n        return \"Esta solicitud ha expirado y no puede cambiar de estado\";\n      } else if (status === APPLICATION_STATUS.CANCELLED) {\n        return \"Esta solicitud fue cancelada y no puede cambiar de estado\";\n      }\n    }\n    \n    return \"No puedes mover esta tarjeta en este momento\";\n  };\n\n  // Efecto para mover automáticamente tarjetas con ambas aprobaciones a \"Por Dispersar\"\n  useEffect(() => {\n    const moveFullyApprovedCards = async () => {\n      // Encontrar tarjetas que tienen ambas aprobaciones pero no están en Por Dispersar\n      const fullyApprovedCards = appsWithApproval.filter(app => \n        app.approvalStatus?.approvedByAdvisor && \n        app.approvalStatus?.approvedByCompany && \n        app.status !== APPLICATION_STATUS.POR_DISPERSAR &&\n        app.status !== APPLICATION_STATUS.COMPLETED\n      );\n      \n      if (fullyApprovedCards.length > 0) {\n        console.log(`Encontradas ${fullyApprovedCards.length} tarjetas con aprobación total, moviendo a Por Dispersar...`);\n        \n        // Mover cada tarjeta a Por Dispersar\n        for (const app of fullyApprovedCards) {\n          if (onStatusChange) {\n            try {\n              console.log(`Moviendo tarjeta ${app.id} a Por Dispersar automáticamente...`);\n              await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n            } catch (error) {\n              console.error(`Error al mover tarjeta ${app.id} a Por Dispersar:`, error);\n            }\n          }\n        }\n      }\n    };\n    \n    // Ejecutar después de un breve retraso para permitir que los estados se inicialicen\n    const timer = setTimeout(() => {\n      moveFullyApprovedCards();\n    }, 2000);\n    \n    return () => clearTimeout(timer);\n  }, [appsWithApproval, onStatusChange]);\n\n  // Agregar una sincronización de estados avanzados para las aplicaciones existentes\n  useEffect(() => {\n    const syncAdvancedStatusCards = async () => {\n      if (!isCompanyAdmin() || applications.length === 0) return;\n      \n      console.log(\"Sincronizando tarjetas en estados avanzados para el administrador de empresa...\");\n      \n      // Estados avanzados que siempre deben sincronizarse entre ambas vistas\n      const advancedStatuses = [\n        APPLICATION_STATUS.POR_DISPERSAR,\n        APPLICATION_STATUS.COMPLETED,\n        APPLICATION_STATUS.EXPIRED,\n        APPLICATION_STATUS.CANCELLED,\n        APPLICATION_STATUS.REJECTED\n      ];\n      \n      // Buscar aplicaciones con ambas aprobaciones que deberían estar en Por Dispersar\n      const needsStatusUpdate = applications.filter(app => {\n        // Si la aplicación ya está en un estado avanzado, respetar ese estado\n        if (advancedStatuses.includes(app.status as APPLICATION_STATUS)) {\n          return false;\n        }\n        \n        // Verificar si tiene ambas aprobaciones\n        return app.approved_by_advisor && app.approved_by_company;\n      });\n      \n      if (needsStatusUpdate.length > 0) {\n        console.log(`Encontradas ${needsStatusUpdate.length} aplicaciones que necesitan actualización de estado:`);\n        \n        const updatedApps = [...appsWithApproval];\n        let hasChanges = false;\n        \n        for (const app of needsStatusUpdate) {\n          console.log(`- Aplicación ${app.id} con ambas aprobaciones, actualizando a Por Dispersar`);\n          \n          const index = updatedApps.findIndex(a => a.id === app.id);\n          if (index !== -1) {\n            updatedApps[index] = {\n              ...updatedApps[index],\n              status: APPLICATION_STATUS.POR_DISPERSAR\n            };\n            hasChanges = true;\n            \n            // Actualizar en la base de datos si es necesario\n            if (onStatusChange) {\n              try {\n                await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n                console.log(`✅ Estado de aplicación ${app.id} actualizado a Por Dispersar`);\n              } catch (error) {\n                console.error(`Error al actualizar estado de ${app.id}:`, error);\n              }\n            }\n          }\n        }\n        \n        if (hasChanges) {\n          console.log(\"Actualizando estado local con aplicaciones sincronizadas\");\n          setAppsWithApproval(updatedApps);\n        }\n      }\n    };\n    \n    // Ejecutar la sincronización después de cargar las aplicaciones\n    syncAdvancedStatusCards();\n  }, [applications, isCompanyAdmin, onStatusChange]);\n\n  // Mejora para sincronizar estados entre vistas del asesor y administrador de empresa\n  useEffect(() => {\n    const syncCardStatusesWithAdvisorView = () => {\n      if (!isCompanyAdmin() || applications.length === 0) return;\n      \n      // Obtener todas las aplicaciones que no están en los estados básicos de flujo de empresa\n      const applicationsWithAdvancedStatus = applications.filter(app => {\n        const isBasicStatus = [\n          APPLICATION_STATUS.NEW,\n          APPLICATION_STATUS.IN_REVIEW,\n          APPLICATION_STATUS.APPROVED\n        ].includes(app.status as APPLICATION_STATUS);\n        \n        return !isBasicStatus;\n      });\n      \n      if (applicationsWithAdvancedStatus.length > 0) {\n        console.log(`Sincronizando ${applicationsWithAdvancedStatus.length} tarjetas con estados avanzados:`);\n        \n        // Crear copia del estado actual\n        const updatedApps = [...appsWithApproval];\n        let hasChanges = false;\n        \n        // Actualizar cada aplicación para que refleje el estado real\n        applicationsWithAdvancedStatus.forEach(app => {\n          const index = updatedApps.findIndex(a => a.id === app.id);\n          \n          if (index !== -1 && updatedApps[index].status !== app.status) {\n            console.log(`- Sincronizando aplicación ${app.id} de estado '${updatedApps[index].status}' a '${app.status}'`);\n            \n            // Actualizar el estado para que coincida con el estado real\n            updatedApps[index] = {\n              ...updatedApps[index],\n              status: app.status\n            };\n            \n            hasChanges = true;\n          }\n        });\n        \n        // Actualizar el estado solo si hubo cambios\n        if (hasChanges) {\n          console.log(\"Actualizando estado local con aplicaciones sincronizadas\");\n          setAppsWithApproval(updatedApps);\n        }\n      }\n    };\n    \n    // Ejecutar la sincronización\n    syncCardStatusesWithAdvisorView();\n  }, [applications, appsWithApproval, isCompanyAdmin]);\n\n  // Agregar un nuevo useEffect para refrescar los estados de aprobación periódicamente\n  useEffect(() => {\n    // Función para refrescar los estados de aprobación desde la API\n    const refreshApprovalStatuses = async () => {\n      if (!applications || applications.length === 0) return;\n      \n      console.log(\"Refrescando estados de aprobación desde la API...\");\n      try {\n        const updatedApps = [...appsWithApproval];\n        let hasChanges = false;\n        \n        for (const app of updatedApps) {\n          // Obtener el estado de aprobación actualizado desde la API\n          const status = await getApprovalStatus(app.id);\n          \n          // Si el estado es diferente al actual, actualizarlo\n          if (status && \n              (status.approvedByAdvisor !== app.approvalStatus?.approvedByAdvisor ||\n               status.approvedByCompany !== app.approvalStatus?.approvedByCompany)) {\n            \n            console.log(`Actualización encontrada para app ${app.id}:`, {\n              actual: app.approvalStatus,\n              nuevo: status\n            });\n            \n            // Actualizar el estado de aprobación\n            app.approvalStatus = status;\n            hasChanges = true;\n            \n            // Si hay doble aprobación y no está en Por Dispersar, actualizarlo\n            if (status.approvedByAdvisor && status.approvedByCompany && \n                app.status !== APPLICATION_STATUS.POR_DISPERSAR &&\n                app.status !== APPLICATION_STATUS.COMPLETED) {\n              console.log(`Aplicación ${app.id} tiene doble aprobación, moviendo a Por Dispersar`);\n              \n              // Actualizar el estado localmente\n              app.status = APPLICATION_STATUS.POR_DISPERSAR;\n              \n              // Actualizar en la BD\n              if (onStatusChange) {\n                try {\n                  await onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR);\n                } catch (error) {\n                  console.error(`Error actualizando estado a Por Dispersar:`, error);\n                }\n              }\n            }\n          }\n        }\n        \n        // Si hubo cambios, actualizar el estado\n        if (hasChanges) {\n          console.log(\"Actualizando aplicaciones con estados de aprobación refrescados\");\n          setAppsWithApproval(updatedApps);\n        }\n      } catch (error) {\n        console.error(\"Error al refrescar estados de aprobación:\", error);\n      }\n    };\n    \n    // Refrescar los estados inicialmente y cada 10 segundos\n    refreshApprovalStatuses();\n    \n    const intervalId = setInterval(() => {\n      refreshApprovalStatuses();\n    }, 10000); // 10 segundos\n    \n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [applications, appsWithApproval, onStatusChange]);\n\n  // Mejora para funcionamiento con tarjetas existentes\n  useEffect(() => {\n    // Solo ejecutar para admin de empresa\n    if (!isCompanyAdmin() || applications.length === 0) return;\n    \n    console.log(\"Verificando y sincronizando estados de tarjetas existentes...\");\n    \n    // Encontrar tarjetas que deben mostrar el mismo estado que en la vista del asesor\n    const appsNeedingSync = applications.filter(app => {\n      // Si no está en uno de los estados básicos del flujo de admin de empresa,\n      // debe sincronizarse exactamente con la vista del asesor\n      const isBasicStatus = [\n        APPLICATION_STATUS.NEW,\n        APPLICATION_STATUS.IN_REVIEW,\n        APPLICATION_STATUS.APPROVED\n      ].includes(app.status as APPLICATION_STATUS);\n      \n      return !isBasicStatus;\n    });\n    \n    if (appsNeedingSync.length > 0) {\n      console.log(`Encontradas ${appsNeedingSync.length} tarjetas que necesitan sincronización con vista del asesor`);\n      \n      // Crear copia del estado actual\n      const updatedApps = [...appsWithApproval];\n      let hasChanges = false;\n      \n      // Para cada aplicación que necesita sincronización\n      appsNeedingSync.forEach(app => {\n        const index = updatedApps.findIndex(a => a.id === app.id);\n        \n        // Si encontramos la aplicación y su estado es diferente al que debería tener\n        if (index !== -1 && updatedApps[index].status !== app.status) {\n          console.log(`- Actualizando tarjeta ${app.id}: de '${updatedApps[index].status}' a '${app.status}'`);\n          \n          // Actualizar el estado para que coincida con el de la vista del asesor\n          updatedApps[index] = {\n            ...updatedApps[index],\n            status: app.status\n          };\n          \n          hasChanges = true;\n        }\n      });\n      \n      // Si hubo cambios, actualizar el estado\n      if (hasChanges) {\n        console.log(\"Actualizando estados para sincronizar con vista del asesor\");\n        setAppsWithApproval(updatedApps);\n      }\n    }\n  }, [applications, appsWithApproval, isCompanyAdmin]);\n\n  // Añadir función para manejar la limpieza de filtros\n  const handleClearFilters = () => {\n    setSearchQuery('');\n    setStatusFilter('all');\n    setTypeFilter('all');\n    setDateFromFilter('');\n    setDateToFilter('');\n    setAmountMinFilter('');\n    setAmountMaxFilter('');\n  };\n\n  // Modificar función para filtrar las aplicaciones según los criterios\n  const getFilteredApplications = (apps: ApplicationWithApproval[]): ApplicationWithApproval[] => {\n    return apps.filter(app => {\n      // Filtro por búsqueda de texto\n      if (searchQuery && !(\n        (app.client_name?.toLowerCase().includes(searchQuery.toLowerCase())) ||\n        (app.client_email?.toLowerCase().includes(searchQuery.toLowerCase()))\n      )) {\n        return false;\n      }\n      \n      // Filtro por estado\n      if (statusFilter !== 'all' && app.status !== statusFilter) {\n        return false;\n      }\n      \n      // Filtro por tipo de aplicación\n      if (typeFilter !== 'all' && app.application_type !== typeFilter) {\n        return false;\n      }\n      \n      // Filtro por fecha desde\n      if (dateFromFilter) {\n        const appDate = new Date(app.created_at);\n        const fromDate = new Date(dateFromFilter);\n        if (appDate < fromDate) {\n          return false;\n        }\n      }\n      \n      // Filtro por fecha hasta\n      if (dateToFilter) {\n        const appDate = new Date(app.created_at);\n        const toDate = new Date(dateToFilter);\n        // Ajustar para incluir todo el día\n        toDate.setHours(23, 59, 59, 999);\n        if (appDate > toDate) {\n          return false;\n        }\n      }\n      \n      // Filtro por monto mínimo\n      if (amountMinFilter && parseFloat(amountMinFilter) > 0) {\n        const amount = app.amount || app.requested_amount || 0;\n        if (amount < parseFloat(amountMinFilter)) {\n          return false;\n        }\n      }\n      \n      // Filtro por monto máximo\n      if (amountMaxFilter && parseFloat(amountMaxFilter) > 0) {\n        const amount = app.amount || app.requested_amount || 0;\n        if (amount > parseFloat(amountMaxFilter)) {\n          return false;\n        }\n      }\n      \n      return true;\n    });\n  };\n\n  if (applications.length === 0) {\n    return (\n      <div className=\"bg-base-200 p-6 rounded-lg\">\n        <h3 className=\"text-xl font-medium text-center\">No hay solicitudes para mostrar</h3>\n        <p className=\"text-center text-gray-500 mt-2\">No se encontraron solicitudes en el sistema</p>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"w-full overflow-x-auto custom-scrollbar relative\">\n      <style>{customStyles}</style>\n      \n      {/* Reemplazar el overlay de carga con una notificación flotante más sutil */}\n      {processingAppId && (\n        <div className=\"processing-toast\">\n          <span className=\"loading loading-spinner loading-sm text-primary\"></span>\n          <p className=\"font-medium\">Actualizando estado...</p>\n        </div>\n      )}\n      \n      {/* Notificación para transiciones automáticas */}\n      {autoTransitionMessage && (\n        <div className=\"auto-transition-toast\">\n          <span className=\"loading loading-spinner loading-sm text-success\"></span>\n          <p className=\"font-medium\">{autoTransitionMessage}</p>\n        </div>\n      )}\n      \n      {errorMessage && (\n        <div className=\"mb-4 alert alert-error shadow-lg\">\n          <div>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"stroke-current flex-shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n            <span>{errorMessage}</span>\n          </div>\n          <div className=\"flex-none\">\n            <button className=\"btn btn-sm\" onClick={() => setErrorMessage(null)}>Cerrar</button>\n          </div>\n        </div>\n      )}\n      \n      {/* Panel de Filtros */}\n      <div className=\"mb-6\">\n        <div className=\"bg-base-100 border border-base-300 rounded-lg shadow-sm\">\n          <div className=\"flex justify-between items-center p-4 border-b border-base-300\">\n            <div className=\"relative flex-grow mr-4\">\n              <input\n                type=\"text\"\n                placeholder=\"Buscar por nombre o email...\"\n                className=\"input input-bordered w-full pr-10\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n              />\n              <div className=\"absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none\">\n                <svg className=\"h-5 w-5 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                </svg>\n              </div>\n            </div>\n            \n            <button \n              className=\"btn btn-ghost btn-sm\"\n              onClick={() => setIsFilterExpanded(!isFilterExpanded)}\n            >\n              {isFilterExpanded ? 'Ocultar Filtros' : 'Mostrar Filtros'}\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className={`h-4 w-4 ml-2 transform ${isFilterExpanded ? 'rotate-180' : ''}`} viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n              </svg>\n            </button>\n          </div>\n          \n          {isFilterExpanded && (\n            <div className=\"bg-base-200 p-4 rounded-lg\">\n              <h3 className=\"text-lg font-semibold mb-4\">Filtros Avanzados</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4\">\n                <div className=\"form-control\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Estado</span>\n                  </label>\n                  <select\n                    className=\"select select-bordered w-full\"\n                    value={statusFilter}\n                    onChange={(e) => setStatusFilter(e.target.value)}\n                  >\n                    <option value=\"all\">Todos los estados</option>\n                    {Object.entries(APPLICATION_STATUS).map(([key, value]) => (\n                      <option key={key} value={value}>{STATUS_LABELS[value as keyof typeof STATUS_LABELS] || value}</option>\n                    ))}\n                  </select>\n                </div>\n                \n                <div className=\"form-control\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Tipo de Aplicación</span>\n                  </label>\n                  <select\n                    className=\"select select-bordered w-full\"\n                    value={typeFilter}\n                    onChange={(e) => setTypeFilter(e.target.value)}\n                  >\n                    <option value=\"all\">Todos los tipos</option>\n                    {Object.entries(APPLICATION_TYPE_LABELS).map(([value, label]) => (\n                      <option key={value} value={value}>{label}</option>\n                    ))}\n                  </select>\n                </div>\n                \n                <div className=\"form-control\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Fecha Desde</span>\n                  </label>\n                  <input\n                    type=\"date\"\n                    className=\"input input-bordered w-full\"\n                    value={dateFromFilter}\n                    onChange={(e) => setDateFromFilter(e.target.value)}\n                  />\n                </div>\n                \n                <div className=\"form-control\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Fecha Hasta</span>\n                  </label>\n                  <input\n                    type=\"date\"\n                    className=\"input input-bordered w-full\"\n                    value={dateToFilter}\n                    onChange={(e) => setDateToFilter(e.target.value)}\n                  />\n                </div>\n                \n                <div className=\"form-control\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Monto Mínimo</span>\n                  </label>\n                  <input\n                    type=\"number\"\n                    placeholder=\"0\"\n                    className=\"input input-bordered w-full\"\n                    value={amountMinFilter}\n                    onChange={(e) => setAmountMinFilter(e.target.value)}\n                  />\n                </div>\n                \n                <div className=\"form-control\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Monto Máximo</span>\n                  </label>\n                  <input\n                    type=\"number\"\n                    placeholder=\"0\"\n                    className=\"input input-bordered w-full\"\n                    value={amountMaxFilter}\n                    onChange={(e) => setAmountMaxFilter(e.target.value)}\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex justify-end\">\n                <button \n                  className=\"btn btn-ghost\"\n                  onClick={handleClearFilters}\n                >\n                  Limpiar Filtros\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 2xl:grid-cols-6 gap-4 pb-4 kanban-container p-4\" style={{ minWidth: '1000px' }}>\n        {/* Modificar bucle de columnas para usar aplicaciones filtradas */}\n        {columns.map(column => {\n          // Filtrar aplicaciones para esta columna\n          const filteredApps = getFilteredApplications(column.applications);\n          \n          return (\n            <div \n              key={column.id}\n              className={`bg-base-100 rounded-xl shadow-md border-t-4 border-${column.color} border-l border-r border-b flex flex-col h-full kanban-column`}\n              onDragOver={(e) => {\n                handleDragOver(e, column.id);\n              }}\n              onDragLeave={(e) => {\n                e.currentTarget.classList.remove('drag-over');\n              }}\n              onDrop={(e) => {\n                handleDrop(e, column.id);\n              }}\n            >\n              {/* Cabecera de columna con indicador de color */}\n              <div className={`text-center py-3 px-4 font-bold rounded-t-lg flex items-center justify-between bg-${column.color} bg-opacity-10`}>\n                <span className={`text-${column.color} font-bold text-lg`}>{column.title}</span>\n                <span className={`badge badge-${column.color} badge-lg`}>{filteredApps.length}</span>\n              </div>\n              \n              <div className=\"p-3 space-y-3 min-h-[500px] max-h-[calc(100vh-220px)] overflow-y-auto custom-scrollbar flex-grow\">\n                {filteredApps.length === 0 ? (\n                  <div className=\"flex items-center justify-center h-full opacity-50 border-2 border-dashed border-base-300 rounded-lg p-6\">\n                    <div className=\"text-center\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-12 w-12 mx-auto text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                      </svg>\n                      <p className=\"text-sm mt-2\">No hay solicitudes</p>\n                    </div>\n                  </div>\n                ) : (\n                  filteredApps.map((app, index) => {\n                    const isCardDraggable = canDragCard(app) && app.id !== processingAppId;\n                    return (\n                      <div\n                        key={app.id}\n                        data-tip={getDragTooltip(app)}\n                        className={`card shadow hover:shadow-lg transition-all ${getCardColor(app)} border-l-4 border-t border-r border-b hover:border-primary kanban-card relative ${app.id === processingAppId ? 'processing' : ''} ${app.isMoving ? 'opacity-90' : ''} ${getDraggableClasses(app)}`}\n                        draggable={isCardDraggable}\n                        onDragStart={isCardDraggable ? (e) => handleDragStart(e, app, index) : undefined}\n                        onDragEnd={isCardDraggable ? handleDragEnd : undefined}\n                        style={{\n                          animation: app.id === processingAppId ? 'processingPulse 1.5s infinite' : ''\n                        }}\n                      >\n                        <div className=\"card-body p-4\">\n                          <div className=\"flex justify-between items-start mb-2\">\n                            <div className=\"flex flex-col\">\n                              <div className=\"font-semibold mb-1\">{app.client_name}</div>\n                              {renderProductLabel(app.application_type || '', column.color)}\n                            </div>\n                          </div>\n                          \n                          <div className=\"mt-1\">\n                            {/* Info de la empresa */}\n                            <div className=\"text-sm text-gray-600 mb-2 flex items-center\">\n                              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1 inline flex-shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\" />\n                              </svg>\n                              <span className=\"truncate max-w-[180px] font-medium\">\n                                {app.company_name || \"Sin empresa\"}\n                              </span>\n                            </div>\n                            \n                            {/* Fecha de creación */}\n                            <div className=\"text-xs text-gray-500 mb-2 flex items-center\">\n                              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1 inline flex-shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                              </svg>\n                              <span>\n                                {app.created_at ? formatDate(app.created_at, 'datetime') : 'N/A'}\n                              </span>\n                            </div>\n                            \n                            {/* Monto */}\n                            <div className=\"flex items-center mb-3\">\n                              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1 text-primary flex-shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                              </svg>\n                              <span className=\"text-base font-bold text-primary\">\n                                {formatCurrency(app.requested_amount || 0)}\n                              </span>\n                            </div>\n                            \n                            {/* Indicadores de estado de aprobación */}\n                            {renderApprovalIndicators(app)}\n                            \n                            <div className=\"card-actions justify-end mt-3\">\n                              {/* Botón para marcar como completado/dispersado (solo para asesores y tarjetas en Por Dispersar) */}\n                              {isAdvisor() && app.status === APPLICATION_STATUS.POR_DISPERSAR && (\n                                <button \n                                  onClick={(e) => {\n                                    e.stopPropagation(); // Evitar navegación al detalle\n                                    e.preventDefault();\n                                    if (onStatusChange) {\n                                      setProcessingAppId(app.id);\n                                      onStatusChange(app, APPLICATION_STATUS.COMPLETED)\n                                        .then(() => {\n                                          setAutoTransitionMessage(`Solicitud ${app.id} marcada como Completada correctamente`);\n                                          setTimeout(() => setAutoTransitionMessage(null), 3000);\n                                        })\n                                        .catch(error => {\n                                          setErrorMessage(`Error al marcar como completado: ${error.message}`);\n                                        })\n                                        .finally(() => {\n                                          setProcessingAppId(null);\n                                        });\n                                    }\n                                  }}\n                                  className=\"btn btn-sm btn-accent w-full mb-2\"\n                                >\n                                  Marcar como Dispersado\n                                </button>\n                              )}\n                              {/* Botón para mover a Por Dispersar cuando hay ambas aprobaciones pero no está en ese estado */}\n                              {isAdvisor() && \n                               app.approvalStatus?.approvedByAdvisor && \n                               app.approvalStatus?.approvedByCompany && \n                               app.status !== APPLICATION_STATUS.POR_DISPERSAR &&\n                               app.status !== APPLICATION_STATUS.COMPLETED && (\n                                <button \n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    e.preventDefault();\n                                    if (onStatusChange && !processingAppId) {\n                                      setProcessingAppId(app.id);\n                                      onStatusChange(app, APPLICATION_STATUS.POR_DISPERSAR)\n                                        .then(() => {\n                                          setAutoTransitionMessage(`Solicitud movida a Por Dispersar`);\n                                          setTimeout(() => setAutoTransitionMessage(null), 3000);\n                                        })\n                                        .catch(error => {\n                                          console.error(\"Error al mover a Por Dispersar:\", error);\n                                        })\n                                        .finally(() => {\n                                          setTimeout(() => setProcessingAppId(null), 500);\n                                        });\n                                    }\n                                  }}\n                                  className=\"btn btn-xs btn-accent w-full mt-2 mb-2\"\n                                >\n                                  Mover a Por Dispersar\n                                </button>\n                              )}\n                              <Link to={`/applications/${app.id}`} className=\"btn btn-sm btn-primary w-full\">\n                                Ver Detalle\n                              </Link>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default KanbanBoard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}