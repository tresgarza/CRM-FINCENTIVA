{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { USER_ROLES } from '../utils/constants/roles';\n\n// Tipos\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // Simular verificación de sesión al iniciar\n  useEffect(() => {\n    const checkStoredUser = () => {\n      try {\n        const storedUser = localStorage.getItem('crm_user');\n        if (storedUser) {\n          setUser(JSON.parse(storedUser));\n        }\n      } catch (error) {\n        console.error('Error checking stored user:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkStoredUser();\n  }, []);\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n\n      // Simulación de autenticación\n      if (email === 'admin@fincentiva.com' && password === 'admin123') {\n        const mockUser = {\n          id: '1',\n          email: 'admin@fincentiva.com',\n          name: 'Administrador',\n          role: 'SUPERADMIN'\n        };\n\n        // Guardar en localStorage para mantener la sesión\n        localStorage.setItem('crm_user', JSON.stringify(mockUser));\n        setUser(mockUser);\n        return {\n          data: {\n            user: mockUser\n          },\n          error: null\n        };\n      }\n      return {\n        data: null,\n        error: 'Credenciales inválidas'\n      };\n    } catch (error) {\n      console.error('Error signing in:', error);\n      return {\n        error,\n        data: null\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signInWithCode = async (accessCode, userType) => {\n    try {\n      setLoading(true);\n\n      // Consultar la base de datos para verificar el access_code\n      let queryUrl = 'http://localhost:3100/query';\n      let queryBody = {};\n      if (userType === USER_ROLES.ADVISOR) {\n        queryBody = {\n          query: `SELECT * FROM advisors WHERE access_code = '${accessCode}' LIMIT 1`\n        };\n      } else if (userType === USER_ROLES.COMPANY_ADMIN) {\n        queryBody = {\n          query: `SELECT * FROM company_admins WHERE access_code = '${accessCode}' LIMIT 1`\n        };\n      } else {\n        return {\n          data: null,\n          error: 'Tipo de usuario no válido'\n        };\n      }\n      try {\n        const response = await fetch(queryUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(queryBody)\n        });\n        const result = await response.json();\n        if (result.error) {\n          console.error('Database error:', result.error);\n          return {\n            data: null,\n            error: 'Error de base de datos'\n          };\n        }\n        if (result.data && result.data.length > 0) {\n          const userData = result.data[0];\n          const userInfo = {\n            id: userData.id,\n            email: userData.email,\n            name: userData.name,\n            role: userType,\n            entityId: userType === USER_ROLES.COMPANY_ADMIN ? userData.company_id : userData.id\n          };\n\n          // Guardar en localStorage para mantener la sesión\n          localStorage.setItem('crm_user', JSON.stringify(userInfo));\n          setUser(userInfo);\n          return {\n            data: {\n              user: userInfo\n            },\n            error: null\n          };\n        }\n        return {\n          data: null,\n          error: 'Código de acceso inválido'\n        };\n      } catch (fetchError) {\n        // Manejar específicamente errores de fetch\n        console.error('Network error:', fetchError);\n        return {\n          data: null,\n          error: 'Error de conexión: No se pudo contactar al servidor'\n        };\n      }\n    } catch (error) {\n      // Convertir cualquier error a string para evitar renderizar objetos Error directamente\n      console.error('Error signing in with code:', error);\n      const errorMessage = error instanceof Error ? error.message : typeof error === 'string' ? error : 'Error desconocido al iniciar sesión';\n      return {\n        data: null,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signOut = async () => {\n    try {\n      // Eliminar datos de sesión\n      localStorage.removeItem('crm_user');\n      setUser(null);\n      setSession(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n  const value = {\n    user,\n    session,\n    loading,\n    signIn,\n    signInWithCode,\n    signOut,\n    setUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"lmMbdFBKazcrOU3zjajimGWLreU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","USER_ROLES","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","session","setSession","loading","setLoading","checkStoredUser","storedUser","localStorage","getItem","JSON","parse","error","console","signIn","email","password","mockUser","id","name","role","setItem","stringify","data","signInWithCode","accessCode","userType","queryUrl","queryBody","ADVISOR","query","COMPANY_ADMIN","response","fetch","method","headers","body","result","json","length","userData","userInfo","entityId","company_id","fetchError","errorMessage","message","signOut","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Session } from '@supabase/supabase-js';\nimport { USER_ROLES } from '../utils/constants/roles';\n\n// Tipos\ninterface User {\n  id: string;\n  email: string;\n  name?: string;\n  role: string;\n  entityId?: string; // ID del asesor o empresa asociada\n}\n\ninterface AuthContextType {\n  user: User | null;\n  session: Session | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<{\n    error: any | null;\n    data: any | null;\n  }>;\n  signInWithCode: (accessCode: string, userType: string) => Promise<{\n    error: any | null;\n    data: any | null;\n  }>;\n  signOut: () => Promise<void>;\n  setUser: React.Dispatch<React.SetStateAction<User | null>>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  // Simular verificación de sesión al iniciar\n  useEffect(() => {\n    const checkStoredUser = () => {\n      try {\n        const storedUser = localStorage.getItem('crm_user');\n        if (storedUser) {\n          setUser(JSON.parse(storedUser));\n        }\n      } catch (error) {\n        console.error('Error checking stored user:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkStoredUser();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      \n      // Simulación de autenticación\n      if (email === 'admin@fincentiva.com' && password === 'admin123') {\n        const mockUser: User = {\n          id: '1',\n          email: 'admin@fincentiva.com',\n          name: 'Administrador',\n          role: 'SUPERADMIN',\n        };\n        \n        // Guardar en localStorage para mantener la sesión\n        localStorage.setItem('crm_user', JSON.stringify(mockUser));\n        setUser(mockUser);\n        \n        return { data: { user: mockUser }, error: null };\n      }\n      \n      return { data: null, error: 'Credenciales inválidas' };\n    } catch (error) {\n      console.error('Error signing in:', error);\n      return { error, data: null };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signInWithCode = async (accessCode: string, userType: string) => {\n    try {\n      setLoading(true);\n      \n      // Consultar la base de datos para verificar el access_code\n      let queryUrl = 'http://localhost:3100/query';\n      let queryBody = {};\n      \n      if (userType === USER_ROLES.ADVISOR) {\n        queryBody = {\n          query: `SELECT * FROM advisors WHERE access_code = '${accessCode}' LIMIT 1`\n        };\n      } else if (userType === USER_ROLES.COMPANY_ADMIN) {\n        queryBody = {\n          query: `SELECT * FROM company_admins WHERE access_code = '${accessCode}' LIMIT 1`\n        };\n      } else {\n        return { data: null, error: 'Tipo de usuario no válido' };\n      }\n      \n      try {\n        const response = await fetch(queryUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(queryBody),\n        });\n        \n        const result = await response.json();\n        \n        if (result.error) {\n          console.error('Database error:', result.error);\n          return { data: null, error: 'Error de base de datos' };\n        }\n        \n        if (result.data && result.data.length > 0) {\n          const userData = result.data[0];\n          const userInfo: User = {\n            id: userData.id,\n            email: userData.email,\n            name: userData.name,\n            role: userType,\n            entityId: userType === USER_ROLES.COMPANY_ADMIN ? userData.company_id : userData.id,\n          };\n          \n          // Guardar en localStorage para mantener la sesión\n          localStorage.setItem('crm_user', JSON.stringify(userInfo));\n          setUser(userInfo);\n          \n          return { data: { user: userInfo }, error: null };\n        }\n        \n        return { data: null, error: 'Código de acceso inválido' };\n      } catch (fetchError) {\n        // Manejar específicamente errores de fetch\n        console.error('Network error:', fetchError);\n        return { data: null, error: 'Error de conexión: No se pudo contactar al servidor' };\n      }\n    } catch (error) {\n      // Convertir cualquier error a string para evitar renderizar objetos Error directamente\n      console.error('Error signing in with code:', error);\n      const errorMessage = error instanceof Error \n        ? error.message \n        : typeof error === 'string' \n          ? error \n          : 'Error desconocido al iniciar sesión';\n      \n      return { data: null, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      // Eliminar datos de sesión\n      localStorage.removeItem('crm_user');\n      setUser(null);\n      setSession(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  const value = {\n    user,\n    session,\n    loading,\n    signIn,\n    signInWithCode,\n    signOut,\n    setUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}