{"ast":null,"code":"import{supabase}from'../lib/supabaseClient';import{TABLES}from'./constants/tables';/**\n * Verifica si una tabla existe en la base de datos\n * @param tableName Nombre de la tabla a verificar\n * @returns Boolean indicando si la tabla existe\n */export const checkTableExists=async tableName=>{try{// Intenta hacer una consulta mínima a la tabla\nconst{error}=await supabase.from(tableName).select('*',{count:'exact',head:true}).limit(1);// Si no hay error, la tabla existe\nreturn!error;}catch(error){console.warn(`Error verificando si la tabla ${tableName} existe:`,error);return false;}};/**\n * Verifica todas las tablas importantes del sistema\n * @returns Array con el estado de cada tabla\n */export const checkAllTables=async()=>{const tableList=Object.values(TABLES);const results=[];for(const tableName of tableList){const exists=await checkTableExists(tableName);results.push({name:tableName,exists});}return results;};/**\n * Imprime en consola el estado de las tablas\n */export const logTableStatus=async()=>{console.info('Verificando estructura de la base de datos...');const tableStatus=await checkAllTables();console.group('Estado de tablas:');tableStatus.forEach(table=>{if(table.exists){console.info(`✅ Tabla ${table.name}: OK`);}else{console.warn(`❌ Tabla ${table.name}: No existe`);}});console.groupEnd();const missingTables=tableStatus.filter(t=>!t.exists);if(missingTables.length>0){console.warn(`Se encontraron ${missingTables.length} tablas faltantes. La aplicación podría no funcionar correctamente.`);}else{console.info('Todas las tablas necesarias existen en la base de datos.');}};/**\n * Inicializa la verificación de estructura de BD al inicio de la aplicación\n */export const initDbStructureCheck=()=>{// Ejecutar verificación al inicio\nlogTableStatus().catch(error=>{console.error('Error verificando estructura de base de datos:',error);});};","map":{"version":3,"names":["supabase","TABLES","checkTableExists","tableName","error","from","select","count","head","limit","console","warn","checkAllTables","tableList","Object","values","results","exists","push","name","logTableStatus","info","tableStatus","group","forEach","table","groupEnd","missingTables","filter","t","length","initDbStructureCheck","catch"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/utils/dbStructureCheck.ts"],"sourcesContent":["import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from './constants/tables';\n\ninterface TableStatus {\n  name: string;\n  exists: boolean;\n}\n\n/**\n * Verifica si una tabla existe en la base de datos\n * @param tableName Nombre de la tabla a verificar\n * @returns Boolean indicando si la tabla existe\n */\nexport const checkTableExists = async (tableName: string): Promise<boolean> => {\n  try {\n    // Intenta hacer una consulta mínima a la tabla\n    const { error } = await supabase\n      .from(tableName)\n      .select('*', { count: 'exact', head: true })\n      .limit(1);\n    \n    // Si no hay error, la tabla existe\n    return !error;\n  } catch (error) {\n    console.warn(`Error verificando si la tabla ${tableName} existe:`, error);\n    return false;\n  }\n};\n\n/**\n * Verifica todas las tablas importantes del sistema\n * @returns Array con el estado de cada tabla\n */\nexport const checkAllTables = async (): Promise<TableStatus[]> => {\n  const tableList = Object.values(TABLES);\n  const results: TableStatus[] = [];\n  \n  for (const tableName of tableList) {\n    const exists = await checkTableExists(tableName);\n    results.push({\n      name: tableName,\n      exists\n    });\n  }\n  \n  return results;\n};\n\n/**\n * Imprime en consola el estado de las tablas\n */\nexport const logTableStatus = async (): Promise<void> => {\n  console.info('Verificando estructura de la base de datos...');\n  const tableStatus = await checkAllTables();\n  \n  console.group('Estado de tablas:');\n  tableStatus.forEach(table => {\n    if (table.exists) {\n      console.info(`✅ Tabla ${table.name}: OK`);\n    } else {\n      console.warn(`❌ Tabla ${table.name}: No existe`);\n    }\n  });\n  console.groupEnd();\n  \n  const missingTables = tableStatus.filter(t => !t.exists);\n  if (missingTables.length > 0) {\n    console.warn(`Se encontraron ${missingTables.length} tablas faltantes. La aplicación podría no funcionar correctamente.`);\n  } else {\n    console.info('Todas las tablas necesarias existen en la base de datos.');\n  }\n};\n\n/**\n * Inicializa la verificación de estructura de BD al inicio de la aplicación\n */\nexport const initDbStructureCheck = (): void => {\n  // Ejecutar verificación al inicio\n  logTableStatus().catch(error => {\n    console.error('Error verificando estructura de base de datos:', error);\n  });\n}; "],"mappings":"AAAA,OAASA,QAAQ,KAAQ,uBAAuB,CAChD,OAASC,MAAM,KAAQ,oBAAoB,CAO3C;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,gBAAgB,CAAG,KAAO,CAAAC,SAAiB,EAAuB,CAC7E,GAAI,CACF;AACA,KAAM,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAJ,QAAQ,CAC7BK,IAAI,CAACF,SAAS,CAAC,CACfG,MAAM,CAAC,GAAG,CAAE,CAAEC,KAAK,CAAE,OAAO,CAAEC,IAAI,CAAE,IAAK,CAAC,CAAC,CAC3CC,KAAK,CAAC,CAAC,CAAC,CAEX;AACA,MAAO,CAACL,KAAK,CACf,CAAE,MAAOA,KAAK,CAAE,CACdM,OAAO,CAACC,IAAI,CAAC,iCAAiCR,SAAS,UAAU,CAAEC,KAAK,CAAC,CACzE,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAQ,cAAc,CAAG,KAAAA,CAAA,GAAoC,CAChE,KAAM,CAAAC,SAAS,CAAGC,MAAM,CAACC,MAAM,CAACd,MAAM,CAAC,CACvC,KAAM,CAAAe,OAAsB,CAAG,EAAE,CAEjC,IAAK,KAAM,CAAAb,SAAS,GAAI,CAAAU,SAAS,CAAE,CACjC,KAAM,CAAAI,MAAM,CAAG,KAAM,CAAAf,gBAAgB,CAACC,SAAS,CAAC,CAChDa,OAAO,CAACE,IAAI,CAAC,CACXC,IAAI,CAAEhB,SAAS,CACfc,MACF,CAAC,CAAC,CACJ,CAEA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAI,cAAc,CAAG,KAAAA,CAAA,GAA2B,CACvDV,OAAO,CAACW,IAAI,CAAC,+CAA+C,CAAC,CAC7D,KAAM,CAAAC,WAAW,CAAG,KAAM,CAAAV,cAAc,CAAC,CAAC,CAE1CF,OAAO,CAACa,KAAK,CAAC,mBAAmB,CAAC,CAClCD,WAAW,CAACE,OAAO,CAACC,KAAK,EAAI,CAC3B,GAAIA,KAAK,CAACR,MAAM,CAAE,CAChBP,OAAO,CAACW,IAAI,CAAC,WAAWI,KAAK,CAACN,IAAI,MAAM,CAAC,CAC3C,CAAC,IAAM,CACLT,OAAO,CAACC,IAAI,CAAC,WAAWc,KAAK,CAACN,IAAI,aAAa,CAAC,CAClD,CACF,CAAC,CAAC,CACFT,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAElB,KAAM,CAAAC,aAAa,CAAGL,WAAW,CAACM,MAAM,CAACC,CAAC,EAAI,CAACA,CAAC,CAACZ,MAAM,CAAC,CACxD,GAAIU,aAAa,CAACG,MAAM,CAAG,CAAC,CAAE,CAC5BpB,OAAO,CAACC,IAAI,CAAC,kBAAkBgB,aAAa,CAACG,MAAM,qEAAqE,CAAC,CAC3H,CAAC,IAAM,CACLpB,OAAO,CAACW,IAAI,CAAC,0DAA0D,CAAC,CAC1E,CACF,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAU,oBAAoB,CAAGA,CAAA,GAAY,CAC9C;AACAX,cAAc,CAAC,CAAC,CAACY,KAAK,CAAC5B,KAAK,EAAI,CAC9BM,OAAO,CAACN,KAAK,CAAC,gDAAgD,CAAEA,KAAK,CAAC,CACxE,CAAC,CAAC,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}