{"ast":null,"code":"import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from './constants/tables';\n/**\n * Verifica si una tabla existe en la base de datos\n * @param tableName Nombre de la tabla a verificar\n * @returns Boolean indicando si la tabla existe\n */\nexport const checkTableExists = async tableName => {\n  try {\n    // Intenta hacer una consulta mínima a la tabla\n    const {\n      error\n    } = await supabase.from(tableName).select('*', {\n      count: 'exact',\n      head: true\n    }).limit(1);\n\n    // Si no hay error, la tabla existe\n    return !error;\n  } catch (error) {\n    console.warn(`Error verificando si la tabla ${tableName} existe:`, error);\n    return false;\n  }\n};\n\n/**\n * Verifica todas las tablas importantes del sistema\n * @returns Array con el estado de cada tabla\n */\nexport const checkAllTables = async () => {\n  const tableList = Object.values(TABLES);\n  const results = [];\n  for (const tableName of tableList) {\n    const exists = await checkTableExists(tableName);\n    results.push({\n      name: tableName,\n      exists\n    });\n  }\n  return results;\n};\n\n/**\n * Imprime en consola el estado de las tablas\n */\nexport const logTableStatus = async () => {\n  console.info('Verificando estructura de la base de datos...');\n  const tableStatus = await checkAllTables();\n  console.group('Estado de tablas:');\n  tableStatus.forEach(table => {\n    if (table.exists) {\n      console.info(`✅ Tabla ${table.name}: OK`);\n    } else {\n      console.warn(`❌ Tabla ${table.name}: No existe`);\n    }\n  });\n  console.groupEnd();\n  const missingTables = tableStatus.filter(t => !t.exists);\n  if (missingTables.length > 0) {\n    console.warn(`Se encontraron ${missingTables.length} tablas faltantes. La aplicación podría no funcionar correctamente.`);\n  } else {\n    console.info('Todas las tablas necesarias existen en la base de datos.');\n  }\n};\n\n/**\n * Inicializa la verificación de estructura de BD al inicio de la aplicación\n */\nexport const initDbStructureCheck = () => {\n  // Ejecutar verificación al inicio\n  logTableStatus().catch(error => {\n    console.error('Error verificando estructura de base de datos:', error);\n  });\n};","map":{"version":3,"names":["supabase","TABLES","checkTableExists","tableName","error","from","select","count","head","limit","console","warn","checkAllTables","tableList","Object","values","results","exists","push","name","logTableStatus","info","tableStatus","group","forEach","table","groupEnd","missingTables","filter","t","length","initDbStructureCheck","catch"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/utils/dbStructureCheck.ts"],"sourcesContent":["import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from './constants/tables';\n\ninterface TableStatus {\n  name: string;\n  exists: boolean;\n}\n\n/**\n * Verifica si una tabla existe en la base de datos\n * @param tableName Nombre de la tabla a verificar\n * @returns Boolean indicando si la tabla existe\n */\nexport const checkTableExists = async (tableName: string): Promise<boolean> => {\n  try {\n    // Intenta hacer una consulta mínima a la tabla\n    const { error } = await supabase\n      .from(tableName)\n      .select('*', { count: 'exact', head: true })\n      .limit(1);\n    \n    // Si no hay error, la tabla existe\n    return !error;\n  } catch (error) {\n    console.warn(`Error verificando si la tabla ${tableName} existe:`, error);\n    return false;\n  }\n};\n\n/**\n * Verifica todas las tablas importantes del sistema\n * @returns Array con el estado de cada tabla\n */\nexport const checkAllTables = async (): Promise<TableStatus[]> => {\n  const tableList = Object.values(TABLES);\n  const results: TableStatus[] = [];\n  \n  for (const tableName of tableList) {\n    const exists = await checkTableExists(tableName);\n    results.push({\n      name: tableName,\n      exists\n    });\n  }\n  \n  return results;\n};\n\n/**\n * Imprime en consola el estado de las tablas\n */\nexport const logTableStatus = async (): Promise<void> => {\n  console.info('Verificando estructura de la base de datos...');\n  const tableStatus = await checkAllTables();\n  \n  console.group('Estado de tablas:');\n  tableStatus.forEach(table => {\n    if (table.exists) {\n      console.info(`✅ Tabla ${table.name}: OK`);\n    } else {\n      console.warn(`❌ Tabla ${table.name}: No existe`);\n    }\n  });\n  console.groupEnd();\n  \n  const missingTables = tableStatus.filter(t => !t.exists);\n  if (missingTables.length > 0) {\n    console.warn(`Se encontraron ${missingTables.length} tablas faltantes. La aplicación podría no funcionar correctamente.`);\n  } else {\n    console.info('Todas las tablas necesarias existen en la base de datos.');\n  }\n};\n\n/**\n * Inicializa la verificación de estructura de BD al inicio de la aplicación\n */\nexport const initDbStructureCheck = (): void => {\n  // Ejecutar verificación al inicio\n  logTableStatus().catch(error => {\n    console.error('Error verificando estructura de base de datos:', error);\n  });\n}; "],"mappings":"AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,MAAM,QAAQ,oBAAoB;AAO3C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,SAAiB,IAAuB;EAC7E,IAAI;IACF;IACA,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CAC7BK,IAAI,CAACF,SAAS,CAAC,CACfG,MAAM,CAAC,GAAG,EAAE;MAAEC,KAAK,EAAE,OAAO;MAAEC,IAAI,EAAE;IAAK,CAAC,CAAC,CAC3CC,KAAK,CAAC,CAAC,CAAC;;IAEX;IACA,OAAO,CAACL,KAAK;EACf,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdM,OAAO,CAACC,IAAI,CAAC,iCAAiCR,SAAS,UAAU,EAAEC,KAAK,CAAC;IACzE,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMQ,cAAc,GAAG,MAAAA,CAAA,KAAoC;EAChE,MAAMC,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACd,MAAM,CAAC;EACvC,MAAMe,OAAsB,GAAG,EAAE;EAEjC,KAAK,MAAMb,SAAS,IAAIU,SAAS,EAAE;IACjC,MAAMI,MAAM,GAAG,MAAMf,gBAAgB,CAACC,SAAS,CAAC;IAChDa,OAAO,CAACE,IAAI,CAAC;MACXC,IAAI,EAAEhB,SAAS;MACfc;IACF,CAAC,CAAC;EACJ;EAEA,OAAOD,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMI,cAAc,GAAG,MAAAA,CAAA,KAA2B;EACvDV,OAAO,CAACW,IAAI,CAAC,+CAA+C,CAAC;EAC7D,MAAMC,WAAW,GAAG,MAAMV,cAAc,CAAC,CAAC;EAE1CF,OAAO,CAACa,KAAK,CAAC,mBAAmB,CAAC;EAClCD,WAAW,CAACE,OAAO,CAACC,KAAK,IAAI;IAC3B,IAAIA,KAAK,CAACR,MAAM,EAAE;MAChBP,OAAO,CAACW,IAAI,CAAC,WAAWI,KAAK,CAACN,IAAI,MAAM,CAAC;IAC3C,CAAC,MAAM;MACLT,OAAO,CAACC,IAAI,CAAC,WAAWc,KAAK,CAACN,IAAI,aAAa,CAAC;IAClD;EACF,CAAC,CAAC;EACFT,OAAO,CAACgB,QAAQ,CAAC,CAAC;EAElB,MAAMC,aAAa,GAAGL,WAAW,CAACM,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACZ,MAAM,CAAC;EACxD,IAAIU,aAAa,CAACG,MAAM,GAAG,CAAC,EAAE;IAC5BpB,OAAO,CAACC,IAAI,CAAC,kBAAkBgB,aAAa,CAACG,MAAM,qEAAqE,CAAC;EAC3H,CAAC,MAAM;IACLpB,OAAO,CAACW,IAAI,CAAC,0DAA0D,CAAC;EAC1E;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMU,oBAAoB,GAAGA,CAAA,KAAY;EAC9C;EACAX,cAAc,CAAC,CAAC,CAACY,KAAK,CAAC5B,KAAK,IAAI;IAC9BM,OAAO,CAACN,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;EACxE,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}