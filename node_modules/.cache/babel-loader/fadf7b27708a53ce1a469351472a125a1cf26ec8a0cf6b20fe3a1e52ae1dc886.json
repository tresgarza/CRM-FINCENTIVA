{"ast":null,"code":"/**\n * Utilities for consistent number formatting and parsing throughout the application\n */\n\n/**\n * Formats a number as currency with proper locale\n * @param value The number to format\n * @param locale The locale to use (defaults to en-US)\n * @param currency The currency code (defaults to USD)\n * @returns Formatted currency string\n */\nexport const formatCurrency = (value, locale = 'en-US', currency = 'USD') => {\n  if (value === null || value === undefined) return '';\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(value);\n};\n\n/**\n * Formats a number as percentage\n * @param value The number to format (0.1 = 10%)\n * @param locale The locale to use (defaults to en-US)\n * @param digits Number of decimal places (defaults to 2)\n * @returns Formatted percentage string\n */\nexport const formatPercentage = (value, locale = 'en-US', digits = 2) => {\n  if (value === null || value === undefined) return '';\n  return new Intl.NumberFormat(locale, {\n    style: 'percent',\n    minimumFractionDigits: digits,\n    maximumFractionDigits: digits\n  }).format(value);\n};\n\n/**\n * Formats a number with proper thousands separators\n * @param value The number to format\n * @param locale The locale to use (defaults to en-US)\n * @param digits Number of decimal places (defaults to 0)\n * @returns Formatted number string\n */\nexport const formatNumber = (value, locale = 'en-US', digits = 0) => {\n  if (value === null || value === undefined) return '';\n  return new Intl.NumberFormat(locale, {\n    minimumFractionDigits: digits,\n    maximumFractionDigits: digits\n  }).format(value);\n};\n\n/**\n * Parses a string to a number, handling various formats\n * @param value The string value to parse\n * @returns The parsed number or undefined if invalid\n */\nexport const parseNumericString = value => {\n  if (!value) return undefined;\n\n  // Remove all non-numeric characters except decimal point and minus sign\n  const normalizedValue = value.replace(/[^0-9.-]/g, '').replace(/(\\..*)\\./g, '$1'); // Allow only one decimal point\n\n  const parsedValue = parseFloat(normalizedValue);\n  return isNaN(parsedValue) ? undefined : parsedValue;\n};\n\n/**\n * Converts a numeric string to a properly formatted display value\n * @param value The numeric string to format\n * @param type The type of formatting to apply\n * @param options Additional formatting options\n * @returns Formatted display value\n */\nexport const formatDisplayValue = (value, type, options) => {\n  if (value === null || value === undefined || value === '') return '';\n  const numericValue = typeof value === 'string' ? parseNumericString(value) : value;\n  if (numericValue === undefined) return '';\n  const locale = (options === null || options === void 0 ? void 0 : options.locale) || 'en-US';\n  switch (type) {\n    case 'currency':\n      return formatCurrency(numericValue, locale, options === null || options === void 0 ? void 0 : options.currency);\n    case 'percentage':\n      return formatPercentage(numericValue, locale, options === null || options === void 0 ? void 0 : options.digits);\n    case 'number':\n      return formatNumber(numericValue, locale, options === null || options === void 0 ? void 0 : options.digits);\n    default:\n      return String(value);\n  }\n};","map":{"version":3,"names":["formatCurrency","value","locale","currency","undefined","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","formatPercentage","digits","formatNumber","parseNumericString","normalizedValue","replace","parsedValue","parseFloat","isNaN","formatDisplayValue","type","options","numericValue","String"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/utils/numberFormatting.ts"],"sourcesContent":["/**\n * Utilities for consistent number formatting and parsing throughout the application\n */\n\n/**\n * Formats a number as currency with proper locale\n * @param value The number to format\n * @param locale The locale to use (defaults to en-US)\n * @param currency The currency code (defaults to USD)\n * @returns Formatted currency string\n */\nexport const formatCurrency = (\n  value: number | null | undefined,\n  locale = 'en-US',\n  currency = 'USD'\n): string => {\n  if (value === null || value === undefined) return '';\n  \n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(value);\n};\n\n/**\n * Formats a number as percentage\n * @param value The number to format (0.1 = 10%)\n * @param locale The locale to use (defaults to en-US)\n * @param digits Number of decimal places (defaults to 2)\n * @returns Formatted percentage string\n */\nexport const formatPercentage = (\n  value: number | null | undefined,\n  locale = 'en-US',\n  digits = 2\n): string => {\n  if (value === null || value === undefined) return '';\n  \n  return new Intl.NumberFormat(locale, {\n    style: 'percent',\n    minimumFractionDigits: digits,\n    maximumFractionDigits: digits\n  }).format(value);\n};\n\n/**\n * Formats a number with proper thousands separators\n * @param value The number to format\n * @param locale The locale to use (defaults to en-US)\n * @param digits Number of decimal places (defaults to 0)\n * @returns Formatted number string\n */\nexport const formatNumber = (\n  value: number | null | undefined,\n  locale = 'en-US',\n  digits = 0\n): string => {\n  if (value === null || value === undefined) return '';\n  \n  return new Intl.NumberFormat(locale, {\n    minimumFractionDigits: digits,\n    maximumFractionDigits: digits\n  }).format(value);\n};\n\n/**\n * Parses a string to a number, handling various formats\n * @param value The string value to parse\n * @returns The parsed number or undefined if invalid\n */\nexport const parseNumericString = (value: string | null | undefined): number | undefined => {\n  if (!value) return undefined;\n  \n  // Remove all non-numeric characters except decimal point and minus sign\n  const normalizedValue = value\n    .replace(/[^0-9.-]/g, '')\n    .replace(/(\\..*)\\./g, '$1'); // Allow only one decimal point\n  \n  const parsedValue = parseFloat(normalizedValue);\n  \n  return isNaN(parsedValue) ? undefined : parsedValue;\n};\n\n/**\n * Converts a numeric string to a properly formatted display value\n * @param value The numeric string to format\n * @param type The type of formatting to apply\n * @param options Additional formatting options\n * @returns Formatted display value\n */\nexport const formatDisplayValue = (\n  value: string | number | null | undefined,\n  type: 'currency' | 'percentage' | 'number',\n  options?: {\n    locale?: string;\n    currency?: string;\n    digits?: number;\n  }\n): string => {\n  if (value === null || value === undefined || value === '') return '';\n  \n  const numericValue = typeof value === 'string' \n    ? parseNumericString(value) \n    : value;\n  \n  if (numericValue === undefined) return '';\n  \n  const locale = options?.locale || 'en-US';\n  \n  switch (type) {\n    case 'currency':\n      return formatCurrency(numericValue, locale, options?.currency);\n    case 'percentage':\n      return formatPercentage(numericValue, locale, options?.digits);\n    case 'number':\n      return formatNumber(numericValue, locale, options?.digits);\n    default:\n      return String(value);\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}