{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/contexts/NotificationContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { useAuth } from './AuthContext';\nimport NotificationPopup from '../components/ui/NotificationPopup';\n\n// Generate a proper UUID for notification IDs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateUUID() {\n  // Use a more standard implementation for UUID v4\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\n// For test notifications, use a valid UUID format - don't use app-timestamp\nfunction getTestApplicationId() {\n  // Use a small set of real UUIDs as sample application IDs\n  const sampleIds = ['110cc76a-1762-4df4-840e-a503fea9d7aa', '220cc76a-1762-4df4-840e-a503fea9d7bb', '330cc76a-1762-4df4-840e-a503fea9d7cc', '440cc76a-1762-4df4-840e-a503fea9d7dd', '550cc76a-1762-4df4-840e-a503fea9d7ee'];\n\n  // Pick a random ID from the sample list\n  return sampleIds[Math.floor(Math.random() * sampleIds.length)];\n}\n\n// Enum for notification types\nexport let NotificationType = /*#__PURE__*/function (NotificationType) {\n  NotificationType[\"INFO\"] = \"info\";\n  NotificationType[\"SUCCESS\"] = \"success\";\n  NotificationType[\"WARNING\"] = \"warning\";\n  NotificationType[\"ERROR\"] = \"error\";\n  NotificationType[\"NEW_APPLICATION\"] = \"new_application\";\n  NotificationType[\"APPROVAL_REQUIRED\"] = \"approval_required\";\n  NotificationType[\"NEW_MESSAGE\"] = \"new_message\";\n  NotificationType[\"APPLICATION_STATUS_UPDATED\"] = \"application_status_updated\";\n  NotificationType[\"APPLICATION_COMMENT\"] = \"application_comment\";\n  return NotificationType;\n}({});\n\n// Interfaces\n\nexport const NotificationContext = /*#__PURE__*/createContext(undefined);\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user\n  } = useAuth();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n\n  // Estado para la notificación emergente actual\n  const [currentPopup, setCurrentPopup] = useState(null);\n\n  // Referencia al ID del polling interval\n  const pollingIntervalRef = useRef(null);\n\n  // Efecto para manejar la carga inicial de notificaciones y configurar el polling\n  useEffect(() => {\n    if (user) {\n      // Cargar notificaciones al inicio\n      loadNotifications();\n\n      // Verificar al inicio si hay solicitudes recientes\n      checkForNewNotifications();\n\n      // Configurar polling para verificar nuevas notificaciones cada 15 segundos (en lugar de 30)\n      pollingIntervalRef.current = setInterval(() => {\n        checkForNewNotifications();\n      }, 15000);\n\n      // Limpiar el intervalo cuando el componente se desmonte\n      return () => {\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n        }\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  // Cálculo de notificaciones no leídas\n  useEffect(() => {\n    const count = notifications.filter(notification => !notification.read).length;\n    setUnreadCount(count);\n  }, [notifications]);\n\n  // Cargar notificaciones del almacenamiento local o del servidor\n  const loadNotifications = async () => {\n    try {\n      // En un escenario real, aquí se cargarían las notificaciones del servidor\n      // Por ahora, usaremos el localStorage como ejemplo\n      const storedNotifications = localStorage.getItem('notifications');\n      if (storedNotifications) {\n        const parsed = JSON.parse(storedNotifications);\n        setNotifications(parsed.map(n => ({\n          ...n,\n          createdAt: new Date(n.createdAt)\n        })));\n      }\n    } catch (error) {\n      console.error('Error cargando notificaciones:', error);\n    }\n  };\n\n  // Verificar nuevas notificaciones en el servidor\n  const checkForNewNotifications = async () => {\n    // En una implementación real, esto sería una llamada a la API\n    // Por ahora solo simulamos la lógica\n    console.log('Verificando nuevas notificaciones...');\n    try {\n      // Verificar aplicaciones recientes - en una implementación real, se verificaría\n      // la última fecha de consulta y se traerían solo las nuevas\n      const response = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: `\n            SELECT id, client_name, application_type, company_name, created_at, status \n            FROM applications \n            WHERE created_at > NOW() - INTERVAL '5 minutes'\n            ORDER BY created_at DESC\n            LIMIT 1\n          `\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error al verificar nuevas aplicaciones');\n      }\n      const data = await response.json();\n\n      // Si hay aplicaciones nuevas, mostrar notificación\n      if (data.data && data.data.length > 0) {\n        const newApp = data.data[0];\n        console.log('Nueva aplicación detectada:', newApp);\n        const testNotification = {\n          title: 'Nueva solicitud recibida',\n          message: `Cliente: ${newApp.client_name || 'Sin nombre'} - ${newApp.company_name || 'Empresa no especificada'}`,\n          type: NotificationType.NEW_APPLICATION,\n          relatedItemType: 'application',\n          relatedItemId: newApp.id\n        };\n        addNotification(testNotification);\n\n        // También mostrar como popup con sonido especial para nuevas aplicaciones\n        showPopup({\n          ...testNotification,\n          playSound: soundEnabled,\n          soundType: 'notification',\n          duration: 8000,\n          // Duración más larga (8 segundos)\n          // Usar un sonido especial para nuevas aplicaciones\n          customSound: '/sounds/three-beeps.mp3'\n        });\n      }\n\n      // Simulación: Ocasionalmente añadir una notificación de prueba\n      else if (Math.random() > 0.9) {\n        const testNotification = {\n          title: 'Nueva solicitud asignada',\n          message: 'Se ha asignado una nueva solicitud de crédito a tu bandeja',\n          type: NotificationType.NEW_APPLICATION,\n          relatedItemType: 'application',\n          // Using a properly formatted UUID for testing - NOT using app-timestamp format\n          relatedItemId: getTestApplicationId()\n        };\n        addNotification(testNotification);\n\n        // También mostrar como popup con sonido\n        showPopup({\n          ...testNotification,\n          playSound: soundEnabled,\n          soundType: 'notification'\n        });\n      }\n    } catch (error) {\n      console.error('Error al verificar nuevas notificaciones:', error);\n    }\n  };\n\n  // Añadir una nueva notificación\n  const addNotification = notification => {\n    const newNotification = {\n      ...notification,\n      // Using a proper UUID for the notification ID\n      id: generateUUID(),\n      createdAt: new Date(),\n      read: false,\n      timestamp: new Date()\n    };\n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Guardar en localStorage (en producción esto iría al servidor)\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar una notificación como leída\n  const markAsRead = id => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => notification.id === id ? {\n        ...notification,\n        read: true,\n        isRead: true\n      } : notification);\n\n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar todas las notificaciones como leídas\n  const markAllAsRead = () => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => ({\n        ...notification,\n        read: true,\n        isRead: true\n      }));\n\n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Limpiar todas las notificaciones\n  const clearNotifications = () => {\n    setNotifications([]);\n    // Limpiar del localStorage\n    localStorage.setItem('notifications', JSON.stringify([]));\n  };\n\n  // Mostrar una notificación emergente\n  const showPopup = config => {\n    setCurrentPopup(config);\n\n    // Automáticamente cerrar el popup después de la duración especificada\n    setTimeout(() => {\n      setCurrentPopup(null);\n    }, config.duration || 5000);\n  };\n\n  // Activar/desactivar sonidos de notificación\n  const toggleSound = () => {\n    const newValue = !soundEnabled;\n    setSoundEnabled(newValue);\n    // Guardar preferencia en localStorage\n    localStorage.setItem('notification_sound_enabled', newValue.toString());\n  };\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    showPopup,\n    soundEnabled,\n    toggleSound,\n    setSoundEnabled\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: [children, currentPopup && /*#__PURE__*/_jsxDEV(NotificationPopup, {\n      title: currentPopup.title,\n      message: currentPopup.message,\n      type: currentPopup.type,\n      duration: currentPopup.duration,\n      playSound: currentPopup.playSound,\n      soundType: currentPopup.soundType,\n      customSound: currentPopup.customSound,\n      onClose: () => setCurrentPopup(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"ILcmoPJ+JXRs2S7WwdGOSPYDMzk=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","useAuth","NotificationPopup","jsxDEV","_jsxDEV","generateUUID","replace","c","r","Math","random","v","toString","getTestApplicationId","sampleIds","floor","length","NotificationType","NotificationContext","undefined","useNotifications","_s","context","Error","NotificationProvider","children","_s2","user","notifications","setNotifications","unreadCount","setUnreadCount","soundEnabled","setSoundEnabled","currentPopup","setCurrentPopup","pollingIntervalRef","loadNotifications","checkForNewNotifications","current","setInterval","clearInterval","count","filter","notification","read","storedNotifications","localStorage","getItem","parsed","JSON","parse","map","n","createdAt","Date","error","console","log","response","fetch","method","headers","body","stringify","query","ok","data","json","newApp","testNotification","title","message","client_name","company_name","type","NEW_APPLICATION","relatedItemType","relatedItemId","id","addNotification","showPopup","playSound","soundType","duration","customSound","newNotification","timestamp","prev","updated","setItem","markAsRead","isRead","markAllAsRead","clearNotifications","config","setTimeout","toggleSound","newValue","value","Provider","onClose","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { useAuth } from './AuthContext';\nimport NotificationPopup from '../components/ui/NotificationPopup';\n\n// Generate a proper UUID for notification IDs\nfunction generateUUID() {\n  // Use a more standard implementation for UUID v4\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : ((r & 0x3) | 0x8);\n    return v.toString(16);\n  });\n}\n\n// For test notifications, use a valid UUID format - don't use app-timestamp\nfunction getTestApplicationId() {\n  // Use a small set of real UUIDs as sample application IDs\n  const sampleIds = [\n    '110cc76a-1762-4df4-840e-a503fea9d7aa',\n    '220cc76a-1762-4df4-840e-a503fea9d7bb',\n    '330cc76a-1762-4df4-840e-a503fea9d7cc',\n    '440cc76a-1762-4df4-840e-a503fea9d7dd',\n    '550cc76a-1762-4df4-840e-a503fea9d7ee'\n  ];\n  \n  // Pick a random ID from the sample list\n  return sampleIds[Math.floor(Math.random() * sampleIds.length)];\n}\n\n// Enum for notification types\nexport enum NotificationType {\n  INFO = 'info',\n  SUCCESS = 'success',\n  WARNING = 'warning',\n  ERROR = 'error',\n  NEW_APPLICATION = 'new_application',\n  APPROVAL_REQUIRED = 'approval_required',\n  NEW_MESSAGE = 'new_message',\n  APPLICATION_STATUS_UPDATED = 'application_status_updated',\n  APPLICATION_COMMENT = 'application_comment',\n}\n\n// Interfaces\ninterface Notification {\n  id: string;\n  title: string;\n  message: string;\n  createdAt: Date;\n  read: boolean;\n  type: NotificationType | 'info' | 'success' | 'warning' | 'error';\n  relatedItemId?: string;\n  relatedItemType?: string;\n  data?: any;\n  timestamp?: Date;\n  isRead?: boolean;\n}\n\ninterface NotificationPopupConfig {\n  title: string;\n  message: string;\n  type?: NotificationType | 'info' | 'success' | 'warning' | 'error';\n  duration?: number;\n  playSound?: boolean;\n  soundType?: 'notification' | 'alert' | 'approval';\n  customSound?: string;\n}\n\ninterface NotificationContextType {\n  notifications: Notification[];\n  unreadCount: number;\n  addNotification: (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => void;\n  markAsRead: (id: string) => void;\n  markAllAsRead: () => void;\n  clearNotifications: () => void;\n  showPopup: (config: NotificationPopupConfig) => void;\n  soundEnabled: boolean;\n  toggleSound: () => void;\n  setSoundEnabled: (enabled: boolean) => void;\n}\n\nexport const NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user } = useAuth();\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [unreadCount, setUnreadCount] = useState<number>(0);\n  const [soundEnabled, setSoundEnabled] = useState<boolean>(true);\n  \n  // Estado para la notificación emergente actual\n  const [currentPopup, setCurrentPopup] = useState<NotificationPopupConfig | null>(null);\n  \n  // Referencia al ID del polling interval\n  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Efecto para manejar la carga inicial de notificaciones y configurar el polling\n  useEffect(() => {\n    if (user) {\n      // Cargar notificaciones al inicio\n      loadNotifications();\n      \n      // Verificar al inicio si hay solicitudes recientes\n      checkForNewNotifications();\n      \n      // Configurar polling para verificar nuevas notificaciones cada 15 segundos (en lugar de 30)\n      pollingIntervalRef.current = setInterval(() => {\n        checkForNewNotifications();\n      }, 15000);\n      \n      // Limpiar el intervalo cuando el componente se desmonte\n      return () => {\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n        }\n      };\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  // Cálculo de notificaciones no leídas\n  useEffect(() => {\n    const count = notifications.filter(notification => !notification.read).length;\n    setUnreadCount(count);\n  }, [notifications]);\n\n  // Cargar notificaciones del almacenamiento local o del servidor\n  const loadNotifications = async () => {\n    try {\n      // En un escenario real, aquí se cargarían las notificaciones del servidor\n      // Por ahora, usaremos el localStorage como ejemplo\n      const storedNotifications = localStorage.getItem('notifications');\n      if (storedNotifications) {\n        const parsed = JSON.parse(storedNotifications);\n        setNotifications(parsed.map((n: any) => ({\n          ...n,\n          createdAt: new Date(n.createdAt)\n        })));\n      }\n    } catch (error) {\n      console.error('Error cargando notificaciones:', error);\n    }\n  };\n\n  // Verificar nuevas notificaciones en el servidor\n  const checkForNewNotifications = async () => {\n    // En una implementación real, esto sería una llamada a la API\n    // Por ahora solo simulamos la lógica\n    console.log('Verificando nuevas notificaciones...');\n    \n    try {\n      // Verificar aplicaciones recientes - en una implementación real, se verificaría\n      // la última fecha de consulta y se traerían solo las nuevas\n      const response = await fetch('http://localhost:3100/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: `\n            SELECT id, client_name, application_type, company_name, created_at, status \n            FROM applications \n            WHERE created_at > NOW() - INTERVAL '5 minutes'\n            ORDER BY created_at DESC\n            LIMIT 1\n          `\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Error al verificar nuevas aplicaciones');\n      }\n      \n      const data = await response.json();\n      \n      // Si hay aplicaciones nuevas, mostrar notificación\n      if (data.data && data.data.length > 0) {\n        const newApp = data.data[0];\n        console.log('Nueva aplicación detectada:', newApp);\n        \n        const testNotification = {\n          title: 'Nueva solicitud recibida',\n          message: `Cliente: ${newApp.client_name || 'Sin nombre'} - ${newApp.company_name || 'Empresa no especificada'}`,\n          type: NotificationType.NEW_APPLICATION,\n          relatedItemType: 'application',\n          relatedItemId: newApp.id\n        };\n        \n        addNotification(testNotification);\n        \n        // También mostrar como popup con sonido especial para nuevas aplicaciones\n        showPopup({\n          ...testNotification,\n          playSound: soundEnabled,\n          soundType: 'notification',\n          duration: 8000, // Duración más larga (8 segundos)\n          // Usar un sonido especial para nuevas aplicaciones\n          customSound: '/sounds/three-beeps.mp3'\n        });\n      }\n      \n      // Simulación: Ocasionalmente añadir una notificación de prueba\n      else if (Math.random() > 0.9) {\n        const testNotification = {\n          title: 'Nueva solicitud asignada',\n          message: 'Se ha asignado una nueva solicitud de crédito a tu bandeja',\n          type: NotificationType.NEW_APPLICATION,\n          relatedItemType: 'application',\n          // Using a properly formatted UUID for testing - NOT using app-timestamp format\n          relatedItemId: getTestApplicationId()\n        };\n        \n        addNotification(testNotification);\n        \n        // También mostrar como popup con sonido\n        showPopup({\n          ...testNotification,\n          playSound: soundEnabled,\n          soundType: 'notification'\n        });\n      }\n    } catch (error) {\n      console.error('Error al verificar nuevas notificaciones:', error);\n    }\n  };\n\n  // Añadir una nueva notificación\n  const addNotification = (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => {\n    const newNotification: Notification = {\n      ...notification,\n      // Using a proper UUID for the notification ID\n      id: generateUUID(),\n      createdAt: new Date(),\n      read: false,\n      timestamp: new Date()\n    };\n    \n    setNotifications(prev => {\n      const updated = [newNotification, ...prev];\n      // Guardar en localStorage (en producción esto iría al servidor)\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar una notificación como leída\n  const markAsRead = (id: string) => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => \n        notification.id === id \n          ? { ...notification, read: true, isRead: true } \n          : notification\n      );\n      \n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Marcar todas las notificaciones como leídas\n  const markAllAsRead = () => {\n    setNotifications(prev => {\n      const updated = prev.map(notification => ({ ...notification, read: true, isRead: true }));\n      \n      // Guardar en localStorage\n      localStorage.setItem('notifications', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Limpiar todas las notificaciones\n  const clearNotifications = () => {\n    setNotifications([]);\n    // Limpiar del localStorage\n    localStorage.setItem('notifications', JSON.stringify([]));\n  };\n\n  // Mostrar una notificación emergente\n  const showPopup = (config: NotificationPopupConfig) => {\n    setCurrentPopup(config);\n    \n    // Automáticamente cerrar el popup después de la duración especificada\n    setTimeout(() => {\n      setCurrentPopup(null);\n    }, config.duration || 5000);\n  };\n\n  // Activar/desactivar sonidos de notificación\n  const toggleSound = () => {\n    const newValue = !soundEnabled;\n    setSoundEnabled(newValue);\n    // Guardar preferencia en localStorage\n    localStorage.setItem('notification_sound_enabled', newValue.toString());\n  };\n\n  const value = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    showPopup,\n    soundEnabled,\n    toggleSound,\n    setSoundEnabled\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n      {currentPopup && (\n        <NotificationPopup\n          title={currentPopup.title}\n          message={currentPopup.message}\n          type={currentPopup.type as any}\n          duration={currentPopup.duration}\n          playSound={currentPopup.playSound}\n          soundType={currentPopup.soundType}\n          customSound={currentPopup.customSound}\n          onClose={() => setCurrentPopup(null)}\n        />\n      )}\n    </NotificationContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}