{"ast":null,"code":"import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from '../utils/constants/tables';\nimport { uploadDocument } from './documentService';\nconst USERS_TABLE = 'users';\nconst mapUserToClient = userData => {\n  if (!userData) {\n    console.error('Error: userData is undefined in mapUserToClient');\n    throw new Error('No se pudo procesar la información del cliente, los datos son inválidos');\n  }\n  const fullName = userData.name || [userData.first_name, userData.paternal_surname, userData.maternal_surname].filter(Boolean).join(' ');\n  return {\n    id: userData.id,\n    created_at: userData.created_at,\n    name: fullName,\n    first_name: userData.first_name,\n    paternal_surname: userData.paternal_surname,\n    maternal_surname: userData.maternal_surname,\n    email: userData.email,\n    phone: userData.phone,\n    birth_date: userData.birth_date,\n    company_id: userData.company_id,\n    rfc: userData.rfc,\n    curp: userData.curp,\n    advisor_id: userData.advisor_id,\n    address: userData.address,\n    city: userData.city,\n    state: userData.state,\n    postal_code: userData.postal_code,\n    gender: userData.gender,\n    marital_status: userData.marital_status,\n    employment_type: userData.employment_type,\n    employment_years: userData.employment_years,\n    monthly_income: userData.monthly_income,\n    additional_income: userData.additional_income,\n    monthly_expenses: userData.monthly_expenses,\n    other_loan_balances: userData.other_loan_balances,\n    bank_name: userData.bank_name,\n    bank_clabe: userData.bank_clabe,\n    bank_account_number: userData.bank_account_number,\n    bank_account_type: userData.bank_account_type,\n    bank_account_origin: userData.bank_account_origin\n  };\n};\nexport const getClients = async filters => {\n  try {\n    let query = supabase.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin', {\n      count: 'exact'\n    });\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n      if (filters.searchQuery) {\n        query = query.or(`first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);\n      }\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n    query = query.order('created_at', {\n      ascending: false\n    });\n    const {\n      data,\n      error,\n      count\n    } = await query;\n    if (error) {\n      console.error('Error fetching users:', error);\n      throw error;\n    }\n    const clients = data ? data.map(mapUserToClient) : [];\n    return {\n      clients,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    console.error('Error in getClients:', error);\n    throw error;\n  }\n};\nexport const getClientById = async id => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin').eq('id', id).single();\n    if (error) {\n      console.error(`Error fetching user with ID ${id}:`, error);\n      throw error;\n    }\n    if (!data) {\n      console.error(`No data found for client with ID ${id}`);\n      throw new Error(`No se encontró cliente con ID: ${id}`);\n    }\n    return mapUserToClient(data);\n  } catch (error) {\n    console.error(`Error in getClientById:`, error);\n    throw error;\n  }\n};\nfunction escapeSQLString(str) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\nexport const getClientApplications = async clientId => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      throw err;\n    });\n    if (!client) {\n      console.warn('Client not found. Returning empty applications list.');\n      return [];\n    }\n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name || '')}'\n      ORDER BY created_at DESC\n    `;\n    const executeQuery = async query => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query: query\n          })\n        });\n        const result = await response.json();\n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        return result.data;\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    const data = await executeQuery(query);\n    return data;\n  } catch (error) {\n    console.error(`Error fetching applications for client ${clientId}:`, error);\n    throw error;\n  }\n};\nexport const uploadClientDocuments = async (clientId, userId, documents) => {\n  if (!documents || documents.length === 0) {\n    console.log('No documents to upload');\n    return {\n      successful: [],\n      failed: [],\n      allSuccessful: true\n    };\n  }\n  console.log(`Attempting to upload ${documents.length} documents for client ${clientId}`);\n\n  // Filter out invalid documents\n  const validDocuments = documents.filter(doc => {\n    if (!doc.file || !doc.category || !doc.name) {\n      console.error('Invalid document detected:', doc);\n      return false;\n    }\n    return true;\n  });\n  if (validDocuments.length === 0) {\n    console.warn('No valid documents to upload after filtering');\n    return {\n      successful: [],\n      failed: [],\n      allSuccessful: true\n    };\n  }\n\n  // Process documents sequentially instead of in parallel to avoid race conditions\n  const results = [];\n  const failedDocuments = [];\n  try {\n    for (const doc of validDocuments) {\n      let success = false;\n      let lastError = null;\n\n      // Up to 2 retry attempts per document\n      for (let attempt = 0; attempt < 3 && !success; attempt++) {\n        try {\n          if (attempt > 0) {\n            console.log(`Retrying upload for document ${doc.name} (attempt ${attempt + 1}/3)`);\n            // Exponential backoff\n            await new Promise(r => setTimeout(r, 1000 * Math.pow(2, attempt - 1)));\n          }\n          const upload = {\n            file: doc.file,\n            client_id: clientId,\n            userId: userId,\n            documentName: doc.name,\n            category: doc.category\n          };\n          const result = await uploadDocument(upload);\n          results.push(result);\n          console.log(`Successfully uploaded document: ${doc.name}`);\n          success = true;\n        } catch (docError) {\n          lastError = docError;\n          console.error(`Error uploading document ${doc.name} (attempt ${attempt + 1}/3):`, docError);\n        }\n      }\n      if (!success) {\n        failedDocuments.push({\n          name: doc.name,\n          error: lastError instanceof Error ? lastError.message : 'Error desconocido'\n        });\n      }\n    }\n    if (failedDocuments.length > 0) {\n      console.warn(`${failedDocuments.length} documents failed to upload:`, failedDocuments);\n\n      // If all documents failed\n      if (failedDocuments.length === validDocuments.length) {\n        throw new Error('No se pudieron subir los documentos. Por favor, intente de nuevo más tarde.');\n      }\n\n      // If some documents failed\n      if (results.length > 0) {\n        console.log(`${results.length} documents were uploaded successfully`);\n        // We'll still return the successful ones, but will add a warning message in the calling function\n      }\n    }\n    return {\n      successful: results,\n      failed: failedDocuments,\n      allSuccessful: failedDocuments.length === 0\n    };\n  } catch (error) {\n    console.error('Critical error in uploadClientDocuments:', error);\n\n    // Provide more detailed error message\n    let errorMessage = 'Hubo un problema al subir los documentos. Por favor, intente de nuevo más tarde.';\n    if (error instanceof Error) {\n      if (error.message.includes('Bucket not found')) {\n        errorMessage = 'Error de configuración: El almacenamiento de documentos no está disponible. Por favor, contacte al administrador.';\n      } else if (error.message.includes('Permission denied')) {\n        errorMessage = 'No tiene permiso para subir documentos. Por favor, contacte al administrador.';\n      } else {\n        errorMessage = `Error: ${error.message}`;\n      }\n    }\n    throw new Error(errorMessage);\n  }\n};\nexport const createClient = async (client, documents, userId) => {\n  try {\n    // Create a copy to avoid modifying the original object\n    const userData = {\n      email: client.email,\n      first_name: client.first_name || '',\n      paternal_surname: client.paternal_surname || '',\n      maternal_surname: client.maternal_surname || '',\n      phone: client.phone,\n      birth_date: client.birth_date,\n      company_id: client.company_id,\n      rfc: client.rfc,\n      curp: client.curp,\n      advisor_id: client.advisor_id,\n      address: client.address,\n      city: client.city,\n      state: client.state,\n      postal_code: client.postal_code,\n      gender: client.gender,\n      marital_status: client.marital_status,\n      employment_type: client.employment_type,\n      employment_years: client.employment_years,\n      monthly_income: client.monthly_income,\n      additional_income: client.additional_income,\n      monthly_expenses: client.monthly_expenses,\n      other_loan_balances: client.other_loan_balances,\n      bank_name: client.bank_name,\n      bank_clabe: client.bank_clabe,\n      bank_account_number: client.bank_account_number,\n      bank_account_type: client.bank_account_type,\n      bank_account_origin: client.bank_account_origin\n    };\n\n    // Ensure company_id is present as it's required by the database schema\n    if (!userData.company_id) {\n      console.warn('No company_id provided when creating client - using default company');\n      userData.company_id = \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\"; // Default company (Herramental)\n    }\n    const {\n      data,\n      error\n    } = await supabase.from(USERS_TABLE).insert([userData]).select();\n    if (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n    if (!data || data.length === 0) {\n      console.error('No data returned when creating client');\n      throw new Error('No se pudo crear el cliente. No se recibieron datos del servidor.');\n    }\n    const newClient = mapUserToClient(data[0]);\n    let documentResult = null;\n    if (documents && documents.length > 0 && userId && newClient.id) {\n      try {\n        documentResult = await uploadClientDocuments(newClient.id, userId, documents);\n\n        // Check if any documents failed to upload\n        if (documentResult && !documentResult.allSuccessful) {\n          console.warn(`${documentResult.failed.length} documents failed to upload during client creation`);\n\n          // We'll continue but note the warning\n          newClient.warningMessage = `Se creó el cliente, pero ${documentResult.failed.length} ${documentResult.failed.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error('Error uploading documents during client creation:', docError);\n\n        // Continue with client creation but add warning\n        newClient.warningMessage = 'Se creó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n    return newClient;\n  } catch (error) {\n    console.error('Error in createClient:', error);\n    throw error;\n  }\n};\nexport const updateClient = async (id, updates, documents, userId) => {\n  try {\n    console.log(`Starting client update for ID ${id}`);\n\n    // Create a copy to avoid modifying the original object\n    const userUpdates = {\n      email: updates.email,\n      first_name: updates.first_name,\n      paternal_surname: updates.paternal_surname,\n      maternal_surname: updates.maternal_surname,\n      phone: updates.phone,\n      birth_date: updates.birth_date,\n      company_id: updates.company_id,\n      rfc: updates.rfc,\n      curp: updates.curp,\n      advisor_id: updates.advisor_id,\n      address: updates.address,\n      city: updates.city,\n      state: updates.state,\n      postal_code: updates.postal_code,\n      gender: updates.gender,\n      marital_status: updates.marital_status,\n      employment_type: updates.employment_type,\n      employment_years: updates.employment_years,\n      monthly_income: updates.monthly_income,\n      additional_income: updates.additional_income,\n      monthly_expenses: updates.monthly_expenses,\n      other_loan_balances: updates.other_loan_balances,\n      bank_name: updates.bank_name,\n      bank_clabe: updates.bank_clabe,\n      bank_account_number: updates.bank_account_number,\n      bank_account_type: updates.bank_account_type,\n      bank_account_origin: updates.bank_account_origin\n    };\n\n    // Validate and sanitize data\n    // Convert empty strings to null for numeric fields\n    ['employment_years', 'monthly_income', 'additional_income', 'monthly_expenses', 'other_loan_balances'].forEach(field => {\n      const key = field;\n      if (userUpdates[key] === '') {\n        userUpdates[key] = undefined;\n      }\n    });\n\n    // Remove undefined fields and empty strings from non-required fields\n    Object.keys(userUpdates).forEach(key => {\n      const typedKey = key;\n      if (userUpdates[typedKey] === undefined) {\n        delete userUpdates[typedKey];\n      }\n    });\n    console.log(`Updating client ${id} with sanitized data:`, JSON.stringify(userUpdates));\n\n    // First, verify the client exists\n    const {\n      data: existingClient,\n      error: existingError\n    } = await supabase.from(USERS_TABLE).select('id').eq('id', id).single();\n    if (existingError || !existingClient) {\n      console.error(`Client with ID ${id} not found:`, existingError);\n      throw new Error(`No se encontró el cliente con ID ${id}. Verifique que el cliente exista.`);\n    }\n\n    // Perform the update\n    console.log(`Client exists, proceeding with update for ID ${id}`);\n    const {\n      data,\n      error\n    } = await supabase.from(USERS_TABLE).update(userUpdates).eq('id', id).select();\n    if (error) {\n      console.error(`Error updating client with ID ${id}:`, error);\n      throw error;\n    }\n    let updatedClient;\n    if (!data || data.length === 0) {\n      console.log(`No data returned when updating client with ID ${id}, fetching client data separately`);\n\n      // Fallback: fetch the client data separately\n      const {\n        data: fetchedData,\n        error: fetchError\n      } = await supabase.from(USERS_TABLE).select('*').eq('id', id).single();\n      if (fetchError) {\n        console.error(`Error fetching updated client with ID ${id}:`, fetchError);\n        throw new Error('El cliente fue actualizado pero no se pudieron recuperar sus datos. Por favor, recargue la página.');\n      }\n      if (!fetchedData) {\n        console.error(`No data found for client with ID ${id} after update`);\n        throw new Error('No se encontró el cliente después de la actualización. Por favor, verifique que el cliente exista.');\n      }\n      console.log(`Successfully retrieved client data after update for ID ${id}`);\n      updatedClient = mapUserToClient(fetchedData);\n    } else {\n      console.log(`Successfully updated client with data returned, ID ${id}`);\n      updatedClient = mapUserToClient(data[0]);\n    }\n    let documentResult = null;\n\n    // Upload documents if provided\n    if (documents && documents.length > 0 && userId) {\n      try {\n        console.log(`Uploading ${documents.length} documents for client ${id}`);\n        documentResult = await uploadClientDocuments(id, userId, documents);\n\n        // Check if any documents failed to upload\n        if (documentResult && !documentResult.allSuccessful) {\n          console.warn(`${documentResult.failed.length} documents failed to upload during client update`);\n\n          // We'll continue but note the warning\n          updatedClient.warningMessage = `Se actualizó el cliente, pero ${documentResult.failed.length} ${documentResult.failed.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error(`Error uploading documents for client ${id}:`, docError);\n\n        // Continue with client update but add warning\n        updatedClient.warningMessage = 'Se actualizó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n    console.log(`Client update complete for ID ${id}`);\n    return updatedClient;\n  } catch (error) {\n    console.error(`Error in updateClient:`, error);\n    throw error;\n  }\n};\nexport const deleteClient = async id => {\n  try {\n    const {\n      error\n    } = await supabase.from(USERS_TABLE).delete().eq('id', id);\n    if (error) {\n      console.error(`Error deleting user with ID ${id}:`, error);\n      throw error;\n    }\n    return true;\n  } catch (error) {\n    console.error(`Error in deleteClient:`, error);\n    throw error;\n  }\n};\nexport const checkClientExists = async (email, rfc) => {\n  try {\n    let query = supabase.from(USERS_TABLE).select('id, email, rfc').eq('email', email);\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) {\n      console.error('Error checking client existence:', error);\n      throw error;\n    }\n    return data.length > 0 ? data[0] : null;\n  } catch (error) {\n    console.error('Error in checkClientExists:', error);\n    throw error;\n  }\n};\nexport const getClientCount = async filters => {\n  try {\n    let query = supabase.from(USERS_TABLE).select('id', {\n      count: 'exact',\n      head: true\n    });\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n      if (filters.searchQuery) {\n        query = query.or(`first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);\n      }\n    }\n    const {\n      count,\n      error\n    } = await query;\n    if (error) {\n      console.error('Error getting client count:', error);\n      throw error;\n    }\n    return count || 0;\n  } catch (error) {\n    console.error('Error in getClientCount:', error);\n    return 0;\n  }\n};","map":{"version":3,"names":["supabase","TABLES","uploadDocument","USERS_TABLE","mapUserToClient","userData","console","error","Error","fullName","name","first_name","paternal_surname","maternal_surname","filter","Boolean","join","id","created_at","email","phone","birth_date","company_id","rfc","curp","advisor_id","address","city","state","postal_code","gender","marital_status","employment_type","employment_years","monthly_income","additional_income","monthly_expenses","other_loan_balances","bank_name","bank_clabe","bank_account_number","bank_account_type","bank_account_origin","getClients","filters","query","from","select","count","eq","dateFrom","gte","dateTo","lte","searchQuery","or","page","undefined","pageSize","to","range","order","ascending","data","clients","map","totalCount","getClientById","single","escapeSQLString","str","replace","getClientApplications","clientId","client","catch","err","warn","APPLICATIONS","executeQuery","response","fetch","method","headers","body","JSON","stringify","result","json","uploadClientDocuments","userId","documents","length","log","successful","failed","allSuccessful","validDocuments","doc","file","category","results","failedDocuments","success","lastError","attempt","Promise","r","setTimeout","Math","pow","upload","client_id","documentName","push","docError","message","errorMessage","includes","createClient","insert","newClient","documentResult","warningMessage","updateClient","updates","userUpdates","forEach","field","key","Object","keys","typedKey","existingClient","existingError","update","updatedClient","fetchedData","fetchError","deleteClient","delete","checkClientExists","getClientCount","head"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/clientService.ts"],"sourcesContent":["import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from '../utils/constants/tables';\nimport { uploadDocument, DocumentUpload } from './documentService';\n\nexport interface Client {\n  id: string;\n  created_at: string;\n  name?: string;\n  first_name?: string;\n  paternal_surname?: string;\n  maternal_surname?: string;\n  email: string;\n  phone: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  postal_code?: string;\n  birth_date?: string;\n  gender?: string;\n  marital_status?: string;\n  employment_type?: string;\n  employment_years?: number;\n  rfc?: string;\n  curp?: string;\n  monthly_income?: number;\n  additional_income?: number;\n  monthly_expenses?: number;\n  other_loan_balances?: number;\n  bank_name?: string;\n  bank_clabe?: string;\n  bank_account_number?: string;\n  bank_account_type?: string;\n  bank_account_origin?: string;\n  company_id?: string;\n  advisor_id?: string;\n  warningMessage?: string;\n}\n\nexport interface ClientDocument {\n  id?: string;\n  file: File;\n  category: string;\n  name: string;\n}\n\nexport interface ClientFilter {\n  searchQuery?: string;\n  advisor_id?: string;\n  company_id?: string;\n  dateFrom?: string;\n  dateTo?: string;\n  page?: number;\n  pageSize?: number;\n}\n\nconst USERS_TABLE = 'users';\n\nconst mapUserToClient = (userData: any): Client => {\n  if (!userData) {\n    console.error('Error: userData is undefined in mapUserToClient');\n    throw new Error('No se pudo procesar la información del cliente, los datos son inválidos');\n  }\n  \n  const fullName = userData.name || [\n    userData.first_name,\n    userData.paternal_surname,\n    userData.maternal_surname\n  ].filter(Boolean).join(' ');\n  \n  return {\n    id: userData.id,\n    created_at: userData.created_at,\n    name: fullName,\n    first_name: userData.first_name,\n    paternal_surname: userData.paternal_surname,\n    maternal_surname: userData.maternal_surname,\n    email: userData.email,\n    phone: userData.phone,\n    birth_date: userData.birth_date,\n    company_id: userData.company_id,\n    rfc: userData.rfc,\n    curp: userData.curp,\n    advisor_id: userData.advisor_id,\n    address: userData.address,\n    city: userData.city,\n    state: userData.state,\n    postal_code: userData.postal_code,\n    gender: userData.gender,\n    marital_status: userData.marital_status,\n    employment_type: userData.employment_type,\n    employment_years: userData.employment_years,\n    monthly_income: userData.monthly_income,\n    additional_income: userData.additional_income,\n    monthly_expenses: userData.monthly_expenses,\n    other_loan_balances: userData.other_loan_balances,\n    bank_name: userData.bank_name,\n    bank_clabe: userData.bank_clabe,\n    bank_account_number: userData.bank_account_number,\n    bank_account_type: userData.bank_account_type,\n    bank_account_origin: userData.bank_account_origin,\n  };\n};\n\nexport const getClients = async (filters?: ClientFilter) => {\n  try {\n    let query = supabase.from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin', { count: 'exact' });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n\n    query = query.order('created_at', { ascending: false });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      console.error('Error fetching users:', error);\n      throw error;\n    }\n\n    const clients = data ? data.map(mapUserToClient) : [];\n\n    return {\n      clients,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    console.error('Error in getClients:', error);\n    throw error;\n  }\n};\n\nexport const getClientById = async (id: string) => {\n  try {\n    const { data, error } = await supabase\n      .from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      console.error(`Error fetching user with ID ${id}:`, error);\n      throw error;\n    }\n\n    if (!data) {\n      console.error(`No data found for client with ID ${id}`);\n      throw new Error(`No se encontró cliente con ID: ${id}`);\n    }\n\n    return mapUserToClient(data);\n  } catch (error) {\n    console.error(`Error in getClientById:`, error);\n    throw error;\n  }\n};\n\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\nexport const getClientApplications = async (clientId: string) => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      throw err;\n    });\n    \n    if (!client) {\n      console.warn('Client not found. Returning empty applications list.');\n      return [];\n    }\n    \n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name || '')}'\n      ORDER BY created_at DESC\n    `;\n    \n    const executeQuery = async (query: string) => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query: query }),\n        });\n        \n        const result = await response.json();\n        \n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        \n        return result.data;\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    \n    const data = await executeQuery(query);\n    return data;\n  } catch (error) {\n    console.error(`Error fetching applications for client ${clientId}:`, error);\n    throw error;\n  }\n};\n\nexport const uploadClientDocuments = async (\n  clientId: string, \n  userId: string, \n  documents: ClientDocument[]\n) => {\n  if (!documents || documents.length === 0) {\n    console.log('No documents to upload');\n    return {\n      successful: [],\n      failed: [],\n      allSuccessful: true\n    };\n  }\n\n  console.log(`Attempting to upload ${documents.length} documents for client ${clientId}`);\n  \n  // Filter out invalid documents\n  const validDocuments = documents.filter(doc => {\n    if (!doc.file || !doc.category || !doc.name) {\n      console.error('Invalid document detected:', doc);\n      return false;\n    }\n    return true;\n  });\n\n  if (validDocuments.length === 0) {\n    console.warn('No valid documents to upload after filtering');\n    return {\n      successful: [],\n      failed: [],\n      allSuccessful: true\n    };\n  }\n\n  // Process documents sequentially instead of in parallel to avoid race conditions\n  const results = [];\n  const failedDocuments = [];\n  \n  try {\n    for (const doc of validDocuments) {\n      let success = false;\n      let lastError = null;\n      \n      // Up to 2 retry attempts per document\n      for (let attempt = 0; attempt < 3 && !success; attempt++) {\n        try {\n          if (attempt > 0) {\n            console.log(`Retrying upload for document ${doc.name} (attempt ${attempt + 1}/3)`);\n            // Exponential backoff\n            await new Promise(r => setTimeout(r, 1000 * Math.pow(2, attempt - 1)));\n          }\n          \n          const upload: DocumentUpload = {\n            file: doc.file,\n            client_id: clientId,\n            userId: userId,\n            documentName: doc.name,\n            category: doc.category\n          };\n          \n          const result = await uploadDocument(upload);\n          results.push(result);\n          console.log(`Successfully uploaded document: ${doc.name}`);\n          success = true;\n        } catch (docError) {\n          lastError = docError;\n          console.error(`Error uploading document ${doc.name} (attempt ${attempt + 1}/3):`, docError);\n        }\n      }\n      \n      if (!success) {\n        failedDocuments.push({\n          name: doc.name,\n          error: lastError instanceof Error ? lastError.message : 'Error desconocido'\n        });\n      }\n    }\n    \n    if (failedDocuments.length > 0) {\n      console.warn(`${failedDocuments.length} documents failed to upload:`, failedDocuments);\n      \n      // If all documents failed\n      if (failedDocuments.length === validDocuments.length) {\n        throw new Error('No se pudieron subir los documentos. Por favor, intente de nuevo más tarde.');\n      }\n      \n      // If some documents failed\n      if (results.length > 0) {\n        console.log(`${results.length} documents were uploaded successfully`);\n        // We'll still return the successful ones, but will add a warning message in the calling function\n      }\n    }\n    \n    return {\n      successful: results,\n      failed: failedDocuments,\n      allSuccessful: failedDocuments.length === 0\n    };\n  } catch (error) {\n    console.error('Critical error in uploadClientDocuments:', error);\n    \n    // Provide more detailed error message\n    let errorMessage = 'Hubo un problema al subir los documentos. Por favor, intente de nuevo más tarde.';\n    \n    if (error instanceof Error) {\n      if (error.message.includes('Bucket not found')) {\n        errorMessage = 'Error de configuración: El almacenamiento de documentos no está disponible. Por favor, contacte al administrador.';\n      } else if (error.message.includes('Permission denied')) {\n        errorMessage = 'No tiene permiso para subir documentos. Por favor, contacte al administrador.';\n      } else {\n        errorMessage = `Error: ${error.message}`;\n      }\n    }\n    \n    throw new Error(errorMessage);\n  }\n};\n\nexport const createClient = async (client: Omit<Client, 'id' | 'created_at'>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    // Create a copy to avoid modifying the original object\n    const userData = {\n      email: client.email,\n      first_name: client.first_name || '',\n      paternal_surname: client.paternal_surname || '',\n      maternal_surname: client.maternal_surname || '',\n      phone: client.phone,\n      birth_date: client.birth_date,\n      company_id: client.company_id,\n      rfc: client.rfc,\n      curp: client.curp,\n      advisor_id: client.advisor_id,\n      address: client.address,\n      city: client.city,\n      state: client.state,\n      postal_code: client.postal_code,\n      gender: client.gender,\n      marital_status: client.marital_status,\n      employment_type: client.employment_type,\n      employment_years: client.employment_years,\n      monthly_income: client.monthly_income,\n      additional_income: client.additional_income,\n      monthly_expenses: client.monthly_expenses,\n      other_loan_balances: client.other_loan_balances,\n      bank_name: client.bank_name,\n      bank_clabe: client.bank_clabe,\n      bank_account_number: client.bank_account_number,\n      bank_account_type: client.bank_account_type,\n      bank_account_origin: client.bank_account_origin,\n    };\n\n    // Ensure company_id is present as it's required by the database schema\n    if (!userData.company_id) {\n      console.warn('No company_id provided when creating client - using default company');\n      userData.company_id = \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\"; // Default company (Herramental)\n    }\n\n    const { data, error } = await supabase\n      .from(USERS_TABLE)\n      .insert([userData])\n      .select();\n\n    if (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n\n    if (!data || data.length === 0) {\n      console.error('No data returned when creating client');\n      throw new Error('No se pudo crear el cliente. No se recibieron datos del servidor.');\n    }\n\n    const newClient = mapUserToClient(data[0]);\n    let documentResult = null;\n    \n    if (documents && documents.length > 0 && userId && newClient.id) {\n      try {\n        documentResult = await uploadClientDocuments(newClient.id, userId, documents);\n        \n        // Check if any documents failed to upload\n        if (documentResult && !documentResult.allSuccessful) {\n          console.warn(`${documentResult.failed.length} documents failed to upload during client creation`);\n          \n          // We'll continue but note the warning\n          newClient.warningMessage = `Se creó el cliente, pero ${documentResult.failed.length} ${documentResult.failed.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error('Error uploading documents during client creation:', docError);\n        \n        // Continue with client creation but add warning\n        newClient.warningMessage = 'Se creó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n\n    return newClient;\n  } catch (error) {\n    console.error('Error in createClient:', error);\n    throw error;\n  }\n};\n\nexport const updateClient = async (id: string, updates: Partial<Client>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    console.log(`Starting client update for ID ${id}`);\n    \n    // Create a copy to avoid modifying the original object\n    const userUpdates = {\n      email: updates.email,\n      first_name: updates.first_name,\n      paternal_surname: updates.paternal_surname,\n      maternal_surname: updates.maternal_surname,\n      phone: updates.phone,\n      birth_date: updates.birth_date,\n      company_id: updates.company_id,\n      rfc: updates.rfc,\n      curp: updates.curp,\n      advisor_id: updates.advisor_id,\n      address: updates.address,\n      city: updates.city,\n      state: updates.state,\n      postal_code: updates.postal_code,\n      gender: updates.gender,\n      marital_status: updates.marital_status,\n      employment_type: updates.employment_type,\n      employment_years: updates.employment_years,\n      monthly_income: updates.monthly_income,\n      additional_income: updates.additional_income,\n      monthly_expenses: updates.monthly_expenses,\n      other_loan_balances: updates.other_loan_balances,\n      bank_name: updates.bank_name,\n      bank_clabe: updates.bank_clabe,\n      bank_account_number: updates.bank_account_number,\n      bank_account_type: updates.bank_account_type,\n      bank_account_origin: updates.bank_account_origin,\n    };\n\n    // Validate and sanitize data\n    // Convert empty strings to null for numeric fields\n    ['employment_years', 'monthly_income', 'additional_income', \n     'monthly_expenses', 'other_loan_balances'].forEach(field => {\n      const key = field as keyof typeof userUpdates;\n      if (userUpdates[key] === '') {\n        userUpdates[key] = undefined;\n      }\n    });\n\n    // Remove undefined fields and empty strings from non-required fields\n    Object.keys(userUpdates).forEach(key => {\n      const typedKey = key as keyof typeof userUpdates;\n      if (userUpdates[typedKey] === undefined) {\n        delete userUpdates[typedKey];\n      }\n    });\n\n    console.log(`Updating client ${id} with sanitized data:`, JSON.stringify(userUpdates));\n\n    // First, verify the client exists\n    const { data: existingClient, error: existingError } = await supabase\n      .from(USERS_TABLE)\n      .select('id')\n      .eq('id', id)\n      .single();\n\n    if (existingError || !existingClient) {\n      console.error(`Client with ID ${id} not found:`, existingError);\n      throw new Error(`No se encontró el cliente con ID ${id}. Verifique que el cliente exista.`);\n    }\n\n    // Perform the update\n    console.log(`Client exists, proceeding with update for ID ${id}`);\n    const { data, error } = await supabase\n      .from(USERS_TABLE)\n      .update(userUpdates)\n      .eq('id', id)\n      .select();\n\n    if (error) {\n      console.error(`Error updating client with ID ${id}:`, error);\n      throw error;\n    }\n\n    let updatedClient: Client;\n\n    if (!data || data.length === 0) {\n      console.log(`No data returned when updating client with ID ${id}, fetching client data separately`);\n      \n      // Fallback: fetch the client data separately\n      const { data: fetchedData, error: fetchError } = await supabase\n        .from(USERS_TABLE)\n        .select('*')\n        .eq('id', id)\n        .single();\n      \n      if (fetchError) {\n        console.error(`Error fetching updated client with ID ${id}:`, fetchError);\n        throw new Error('El cliente fue actualizado pero no se pudieron recuperar sus datos. Por favor, recargue la página.');\n      }\n      \n      if (!fetchedData) {\n        console.error(`No data found for client with ID ${id} after update`);\n        throw new Error('No se encontró el cliente después de la actualización. Por favor, verifique que el cliente exista.');\n      }\n      \n      console.log(`Successfully retrieved client data after update for ID ${id}`);\n      updatedClient = mapUserToClient(fetchedData);\n    } else {\n      console.log(`Successfully updated client with data returned, ID ${id}`);\n      updatedClient = mapUserToClient(data[0]);\n    }\n    \n    let documentResult = null;\n    \n    // Upload documents if provided\n    if (documents && documents.length > 0 && userId) {\n      try {\n        console.log(`Uploading ${documents.length} documents for client ${id}`);\n        documentResult = await uploadClientDocuments(id, userId, documents);\n        \n        // Check if any documents failed to upload\n        if (documentResult && !documentResult.allSuccessful) {\n          console.warn(`${documentResult.failed.length} documents failed to upload during client update`);\n          \n          // We'll continue but note the warning\n          updatedClient.warningMessage = `Se actualizó el cliente, pero ${documentResult.failed.length} ${documentResult.failed.length === 1 ? 'documento falló' : 'documentos fallaron'} al subirse. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      } catch (docError) {\n        console.error(`Error uploading documents for client ${id}:`, docError);\n        \n        // Continue with client update but add warning\n        updatedClient.warningMessage = 'Se actualizó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.';\n      }\n    }\n\n    console.log(`Client update complete for ID ${id}`);\n    return updatedClient;\n  } catch (error) {\n    console.error(`Error in updateClient:`, error);\n    throw error;\n  }\n};\n\nexport const deleteClient = async (id: string) => {\n  try {\n    const { error } = await supabase\n      .from(USERS_TABLE)\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      console.error(`Error deleting user with ID ${id}:`, error);\n      throw error;\n    }\n\n    return true;\n  } catch (error) {\n    console.error(`Error in deleteClient:`, error);\n    throw error;\n  }\n};\n\nexport const checkClientExists = async (email: string, rfc?: string) => {\n  try {\n    let query = supabase\n      .from(USERS_TABLE)\n      .select('id, email, rfc')\n      .eq('email', email);\n\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      console.error('Error checking client existence:', error);\n      throw error;\n    }\n\n    return data.length > 0 ? data[0] : null;\n  } catch (error) {\n    console.error('Error in checkClientExists:', error);\n    throw error;\n  }\n};\n\nexport const getClientCount = async (filters?: ClientFilter) => {\n  try {\n    let query = supabase\n      .from(USERS_TABLE)\n      .select('id', { count: 'exact', head: true });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n    }\n\n    const { count, error } = await query;\n\n    if (error) {\n      console.error('Error getting client count:', error);\n      throw error;\n    }\n\n    return count || 0;\n  } catch (error) {\n    console.error('Error in getClientCount:', error);\n    return 0;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}