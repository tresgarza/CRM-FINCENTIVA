{"ast":null,"code":"import { TABLES } from '../utils/constants/tables';\nimport { executeQuery } from '../utils/databaseUtils';\n/**\n * Obtiene estadísticas generales para el dashboard\n */\nexport const getGeneralDashboardStats = async () => {\n  try {\n    var _totalAppResult$, _amountResult$, _amountResult$2, _amountResult$3, _categoryResult$, _categoryResult$2, _categoryResult$3, _categoryResult$4;\n    // Total de aplicaciones\n    const totalApplicationsQuery = `SELECT COUNT(*) as total FROM ${TABLES.APPLICATIONS}`;\n    const totalAppResult = await executeQuery(totalApplicationsQuery);\n    const totalApplications = parseInt(((_totalAppResult$ = totalAppResult[0]) === null || _totalAppResult$ === void 0 ? void 0 : _totalAppResult$.total) || '0');\n\n    // Aplicaciones por estado\n    const applicationsByStatusQuery = `\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      GROUP BY status\n    `;\n    const statusResult = await executeQuery(applicationsByStatusQuery);\n    const applicationsByStatus = statusResult.map(row => ({\n      status: row.status,\n      count: parseInt(row.count)\n    }));\n\n    // Estadísticas de montos\n    const amountStatsQuery = `\n      SELECT \n        AVG(amount) as avg_amount, \n        MIN(amount) as min_amount, \n        MAX(amount) as max_amount \n      FROM ${TABLES.APPLICATIONS} \n      WHERE amount IS NOT NULL\n    `;\n    const amountResult = await executeQuery(amountStatsQuery);\n    const avgAmount = parseFloat(((_amountResult$ = amountResult[0]) === null || _amountResult$ === void 0 ? void 0 : _amountResult$.avg_amount) || '0');\n    const minAmount = parseFloat(((_amountResult$2 = amountResult[0]) === null || _amountResult$2 === void 0 ? void 0 : _amountResult$2.min_amount) || '0');\n    const maxAmount = parseFloat(((_amountResult$3 = amountResult[0]) === null || _amountResult$3 === void 0 ? void 0 : _amountResult$3.max_amount) || '0');\n\n    // Aplicaciones recientes\n    const recentApplicationsQuery = `\n      SELECT \n        id, \n        created_at, \n        client_name, \n        status, \n        amount, \n        company_name, \n        application_type,\n        requested_amount\n      FROM ${TABLES.APPLICATIONS}\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;\n    const recentApplications = await executeQuery(recentApplicationsQuery);\n\n    // Aplicaciones por mes (últimos 6 meses)\n    const applicationsByMonthQuery = `\n      SELECT \n        TO_CHAR(created_at, 'YYYY-MM') as month, \n        COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE created_at >= NOW() - INTERVAL '6 months'\n      GROUP BY TO_CHAR(created_at, 'YYYY-MM')\n      ORDER BY month\n    `;\n    const monthResult = await executeQuery(applicationsByMonthQuery);\n    const applicationsByMonth = monthResult.map(row => ({\n      month: row.month,\n      count: parseInt(row.count)\n    }));\n\n    // Totales por categoría principal\n    const totalByMajorCategoryQuery = `\n      SELECT \n        COUNT(*) FILTER (WHERE status IN ('approved', 'APROBADO', 'Aprobado por Asesor')) as approved,\n        COUNT(*) FILTER (WHERE status IN ('rejected', 'RECHAZADO')) as rejected,\n        COUNT(*) FILTER (WHERE status IN ('pending', 'new', 'Solicitud', 'Simulación')) as pending,\n        COUNT(*) FILTER (WHERE \n          (approved_by_advisor = false AND approved_by_company = false) OR\n          (approved_by_advisor = true AND approved_by_company = false) OR\n          (approved_by_advisor = false AND approved_by_company = true)\n        ) as pending_approval\n      FROM ${TABLES.APPLICATIONS}\n    `;\n    const categoryResult = await executeQuery(totalByMajorCategoryQuery);\n    const totalApproved = parseInt(((_categoryResult$ = categoryResult[0]) === null || _categoryResult$ === void 0 ? void 0 : _categoryResult$.approved) || '0');\n    const totalRejected = parseInt(((_categoryResult$2 = categoryResult[0]) === null || _categoryResult$2 === void 0 ? void 0 : _categoryResult$2.rejected) || '0');\n    const totalPending = parseInt(((_categoryResult$3 = categoryResult[0]) === null || _categoryResult$3 === void 0 ? void 0 : _categoryResult$3.pending) || '0');\n    const pendingApproval = parseInt(((_categoryResult$4 = categoryResult[0]) === null || _categoryResult$4 === void 0 ? void 0 : _categoryResult$4.pending_approval) || '0');\n\n    // Total clients - use a try-catch block to handle the case where the table doesn't exist\n    let totalClients = 0;\n    try {\n      var _totalClientsResult$;\n      // First attempt: try to get clients count from clients table\n      const totalClientsQuery = `SELECT COUNT(*) as total FROM ${TABLES.CLIENTS}`;\n      const totalClientsResult = await executeQuery(totalClientsQuery);\n      totalClients = parseInt(((_totalClientsResult$ = totalClientsResult[0]) === null || _totalClientsResult$ === void 0 ? void 0 : _totalClientsResult$.total) || '0');\n    } catch (error) {\n      // Fallback: if clients table doesn't exist, count distinct client names from applications\n      try {\n        var _clientNamesResult$;\n        const clientNamesQuery = `SELECT COUNT(DISTINCT client_name) as total FROM ${TABLES.APPLICATIONS}`;\n        const clientNamesResult = await executeQuery(clientNamesQuery);\n        totalClients = parseInt(((_clientNamesResult$ = clientNamesResult[0]) === null || _clientNamesResult$ === void 0 ? void 0 : _clientNamesResult$.total) || '0');\n      } catch (innerError) {\n        console.error('Error counting clients from applications table:', innerError);\n        // If that also fails, default to 0\n        totalClients = 0;\n      }\n    }\n    return {\n      totalApplications,\n      applicationsByStatus,\n      avgAmount,\n      minAmount,\n      maxAmount,\n      recentApplications,\n      applicationsByMonth,\n      totalApproved,\n      totalRejected,\n      totalPending,\n      pendingApproval,\n      totalClients\n    };\n  } catch (error) {\n    console.error('Error al obtener estadísticas del dashboard:', error);\n    throw error;\n  }\n};\n\n/**\n * Obtiene estadísticas específicas para un asesor\n * @param advisorId ID del asesor\n */\nexport const getAdvisorDashboardStats = async advisorId => {\n  try {\n    var _advisorAppResult$, _companiesResult$, _conversionResult$, _conversionResult$2, _timeResult$;\n    // Obtenemos las estadísticas generales primero\n    const baseStats = await getGeneralDashboardStats();\n\n    // Estadísticas específicas del asesor\n    // Total de aplicaciones del asesor\n    const advisorApplicationsQuery = `\n      SELECT COUNT(*) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;\n    const advisorAppResult = await executeQuery(advisorApplicationsQuery);\n    const totalAdvisorApplications = parseInt(((_advisorAppResult$ = advisorAppResult[0]) === null || _advisorAppResult$ === void 0 ? void 0 : _advisorAppResult$.total) || '0');\n\n    // Aplicaciones por estado del asesor\n    const advisorStatusQuery = `\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n      GROUP BY status\n    `;\n    const advisorStatusResult = await executeQuery(advisorStatusQuery);\n    const advisorApplicationsByStatus = advisorStatusResult.map(row => ({\n      status: row.status,\n      count: parseInt(row.count)\n    }));\n\n    // Total de clientes del asesor\n    let totalClients = 0;\n    try {\n      var _clientsResult$;\n      // First attempt: try to get clients from clients table\n      const clientsQuery = `\n        SELECT COUNT(*) as total \n        FROM ${TABLES.CLIENTS} \n        WHERE advisor_id = '${advisorId}'\n      `;\n      const clientsResult = await executeQuery(clientsQuery);\n      totalClients = parseInt(((_clientsResult$ = clientsResult[0]) === null || _clientsResult$ === void 0 ? void 0 : _clientsResult$.total) || '0');\n    } catch (error) {\n      // Fallback: count distinct client names from applications\n      try {\n        var _clientNamesResult$2;\n        const clientNamesQuery = `\n          SELECT COUNT(DISTINCT client_name) as total \n          FROM ${TABLES.APPLICATIONS} \n          WHERE assigned_to = '${advisorId}'\n        `;\n        const clientNamesResult = await executeQuery(clientNamesQuery);\n        totalClients = parseInt(((_clientNamesResult$2 = clientNamesResult[0]) === null || _clientNamesResult$2 === void 0 ? void 0 : _clientNamesResult$2.total) || '0');\n      } catch (innerError) {\n        console.error(`Error counting clients for advisor ${advisorId}:`, innerError);\n        // If that also fails, default to 0\n        totalClients = 0;\n      }\n    }\n\n    // Total de empresas asignadas al asesor\n    const companiesQuery = `\n      SELECT COUNT(DISTINCT company_id) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;\n    const companiesResult = await executeQuery(companiesQuery);\n    const totalCompanies = parseInt(((_companiesResult$ = companiesResult[0]) === null || _companiesResult$ === void 0 ? void 0 : _companiesResult$.total) || '0');\n\n    // Tasa de conversión (aprobados / total)\n    const conversionRateQuery = `\n      SELECT \n        COUNT(*) FILTER (WHERE status IN ('approved', 'APROBADO', 'completed')) as approved,\n        COUNT(*) as total\n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;\n    const conversionResult = await executeQuery(conversionRateQuery);\n    const approved = parseInt(((_conversionResult$ = conversionResult[0]) === null || _conversionResult$ === void 0 ? void 0 : _conversionResult$.approved) || '0');\n    const total = parseInt(((_conversionResult$2 = conversionResult[0]) === null || _conversionResult$2 === void 0 ? void 0 : _conversionResult$2.total) || '0');\n    const conversionRate = total > 0 ? approved / total * 100 : 0;\n\n    // Tiempo promedio hasta aprobación\n    const avgTimeQuery = `\n      SELECT AVG(EXTRACT(EPOCH FROM (approval_date_advisor - created_at))/86400) as avg_days\n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n      AND approval_date_advisor IS NOT NULL\n    `;\n    const timeResult = await executeQuery(avgTimeQuery);\n    const avgTimeToApproval = parseFloat(((_timeResult$ = timeResult[0]) === null || _timeResult$ === void 0 ? void 0 : _timeResult$.avg_days) || '0');\n\n    // Aplicaciones recientes del asesor\n    const recentAdvisorAppsQuery = `\n      SELECT id, created_at, client_name, status, amount, company_name\n      FROM ${TABLES.APPLICATIONS}\n      WHERE assigned_to = '${advisorId}'\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;\n    const recentAdvisorApps = await executeQuery(recentAdvisorAppsQuery);\n    return {\n      ...baseStats,\n      totalApplications: totalAdvisorApplications,\n      applicationsByStatus: advisorApplicationsByStatus,\n      recentApplications: recentAdvisorApps,\n      totalClients,\n      totalCompanies,\n      conversionRate,\n      avgTimeToApproval\n    };\n  } catch (error) {\n    console.error(`Error al obtener estadísticas del asesor ${advisorId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Obtiene estadísticas específicas para una empresa\n * @param companyId ID de la empresa\n */\nexport const getCompanyDashboardStats = async companyId => {\n  try {\n    var _companyAppResult$, _advisorsResult$, _timeResult$2;\n    // Obtenemos las estadísticas generales primero\n    const baseStats = await getGeneralDashboardStats();\n\n    // Estadísticas específicas de la empresa\n    // Total de aplicaciones de la empresa\n    const companyApplicationsQuery = `\n      SELECT COUNT(*) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n    `;\n    const companyAppResult = await executeQuery(companyApplicationsQuery);\n    const totalCompanyApplications = parseInt(((_companyAppResult$ = companyAppResult[0]) === null || _companyAppResult$ === void 0 ? void 0 : _companyAppResult$.total) || '0');\n\n    // Aplicaciones por estado de la empresa\n    const companyStatusQuery = `\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n      GROUP BY status\n    `;\n    const companyStatusResult = await executeQuery(companyStatusQuery);\n    const companyApplicationsByStatus = companyStatusResult.map(row => ({\n      status: row.status,\n      count: parseInt(row.count)\n    }));\n\n    // Total de asesores asignados a la empresa\n    const advisorsQuery = `\n      SELECT COUNT(DISTINCT assigned_to) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n    `;\n    const advisorsResult = await executeQuery(advisorsQuery);\n    const totalAdvisors = parseInt(((_advisorsResult$ = advisorsResult[0]) === null || _advisorsResult$ === void 0 ? void 0 : _advisorsResult$.total) || '0');\n\n    // Total de clientes de la empresa\n    let totalClientsCompany = 0;\n    try {\n      var _clientsResult$2;\n      // First attempt: try to get clients from clients table\n      const clientsQuery = `\n        SELECT COUNT(*) as total \n        FROM ${TABLES.CLIENTS} \n        WHERE company_id = '${companyId}'\n      `;\n      const clientsResult = await executeQuery(clientsQuery);\n      totalClientsCompany = parseInt(((_clientsResult$2 = clientsResult[0]) === null || _clientsResult$2 === void 0 ? void 0 : _clientsResult$2.total) || '0');\n    } catch (error) {\n      // Fallback: count distinct client names from applications\n      try {\n        var _clientNamesResult$3;\n        const clientNamesQuery = `\n          SELECT COUNT(DISTINCT client_name) as total \n          FROM ${TABLES.APPLICATIONS} \n          WHERE company_id = '${companyId}'\n        `;\n        const clientNamesResult = await executeQuery(clientNamesQuery);\n        totalClientsCompany = parseInt(((_clientNamesResult$3 = clientNamesResult[0]) === null || _clientNamesResult$3 === void 0 ? void 0 : _clientNamesResult$3.total) || '0');\n      } catch (innerError) {\n        console.error(`Error counting clients for company ${companyId}:`, innerError);\n        // If that also fails, default to 0\n        totalClientsCompany = 0;\n      }\n    }\n\n    // Tiempo promedio de aprobación\n    const avgTimeQuery = `\n      SELECT AVG(EXTRACT(EPOCH FROM (approval_date_company - created_at))/86400) as avg_days\n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n      AND approval_date_company IS NOT NULL\n    `;\n    const timeResult = await executeQuery(avgTimeQuery);\n    const avgApprovalTime = parseFloat(((_timeResult$2 = timeResult[0]) === null || _timeResult$2 === void 0 ? void 0 : _timeResult$2.avg_days) || '0');\n\n    // Aplicaciones recientes de la empresa\n    const recentCompanyAppsQuery = `\n      SELECT id, created_at, client_name, status, amount, assigned_to\n      FROM ${TABLES.APPLICATIONS}\n      WHERE company_id = '${companyId}'\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;\n    const recentCompanyApps = await executeQuery(recentCompanyAppsQuery);\n    return {\n      ...baseStats,\n      totalApplications: totalCompanyApplications,\n      applicationsByStatus: companyApplicationsByStatus,\n      recentApplications: recentCompanyApps,\n      totalAdvisors,\n      totalClientsCompany,\n      avgApprovalTime\n    };\n  } catch (error) {\n    console.error(`Error al obtener estadísticas de la empresa ${companyId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Obtiene estadísticas de aplicaciones pendientes de aprobación\n * @param userId ID del usuario (asesor o admin de empresa)\n * @param isCompanyAdmin Indica si el usuario es un admin de empresa\n */\nexport const getPendingApprovalStats = async (userId, isCompanyAdmin) => {\n  try {\n    var _result$;\n    let query = '';\n    if (isCompanyAdmin) {\n      var _companyResult$;\n      // Obtener ID de la compañía del admin\n      const companyQuery = `\n        SELECT company_id FROM ${TABLES.COMPANY_ADMINS} WHERE id = '${userId}'\n      `;\n      const companyResult = await executeQuery(companyQuery);\n      const companyId = (_companyResult$ = companyResult[0]) === null || _companyResult$ === void 0 ? void 0 : _companyResult$.company_id;\n      if (!companyId) {\n        throw new Error('No se encontró la compañía para este administrador');\n      }\n\n      // Aplicaciones pendientes de aprobación por la compañía\n      query = `\n        SELECT COUNT(*) as pending_count\n        FROM ${TABLES.APPLICATIONS}\n        WHERE company_id = '${companyId}'\n        AND approved_by_advisor = true\n        AND approved_by_company = false\n      `;\n    } else {\n      // Aplicaciones pendientes de aprobación por el asesor\n      query = `\n        SELECT COUNT(*) as pending_count\n        FROM ${TABLES.APPLICATIONS}\n        WHERE assigned_to = '${userId}'\n        AND approved_by_advisor = false\n      `;\n    }\n    const result = await executeQuery(query);\n    return {\n      pendingCount: parseInt(((_result$ = result[0]) === null || _result$ === void 0 ? void 0 : _result$.pending_count) || '0')\n    };\n  } catch (error) {\n    console.error('Error al obtener estadísticas de aprobaciones pendientes:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["TABLES","executeQuery","getGeneralDashboardStats","_totalAppResult$","_amountResult$","_amountResult$2","_amountResult$3","_categoryResult$","_categoryResult$2","_categoryResult$3","_categoryResult$4","totalApplicationsQuery","APPLICATIONS","totalAppResult","totalApplications","parseInt","total","applicationsByStatusQuery","statusResult","applicationsByStatus","map","row","status","count","amountStatsQuery","amountResult","avgAmount","parseFloat","avg_amount","minAmount","min_amount","maxAmount","max_amount","recentApplicationsQuery","recentApplications","applicationsByMonthQuery","monthResult","applicationsByMonth","month","totalByMajorCategoryQuery","categoryResult","totalApproved","approved","totalRejected","rejected","totalPending","pending","pendingApproval","pending_approval","totalClients","_totalClientsResult$","totalClientsQuery","CLIENTS","totalClientsResult","error","_clientNamesResult$","clientNamesQuery","clientNamesResult","innerError","console","getAdvisorDashboardStats","advisorId","_advisorAppResult$","_companiesResult$","_conversionResult$","_conversionResult$2","_timeResult$","baseStats","advisorApplicationsQuery","advisorAppResult","totalAdvisorApplications","advisorStatusQuery","advisorStatusResult","advisorApplicationsByStatus","_clientsResult$","clientsQuery","clientsResult","_clientNamesResult$2","companiesQuery","companiesResult","totalCompanies","conversionRateQuery","conversionResult","conversionRate","avgTimeQuery","timeResult","avgTimeToApproval","avg_days","recentAdvisorAppsQuery","recentAdvisorApps","getCompanyDashboardStats","companyId","_companyAppResult$","_advisorsResult$","_timeResult$2","companyApplicationsQuery","companyAppResult","totalCompanyApplications","companyStatusQuery","companyStatusResult","companyApplicationsByStatus","advisorsQuery","advisorsResult","totalAdvisors","totalClientsCompany","_clientsResult$2","_clientNamesResult$3","avgApprovalTime","recentCompanyAppsQuery","recentCompanyApps","getPendingApprovalStats","userId","isCompanyAdmin","_result$","query","_companyResult$","companyQuery","COMPANY_ADMINS","companyResult","company_id","Error","result","pendingCount","pending_count"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/dashboardService.ts"],"sourcesContent":["import { TABLES } from '../utils/constants/tables';\nimport { executeQuery } from '../utils/databaseUtils';\n\nexport interface DashboardStats {\n  totalApplications: number;\n  applicationsByStatus: {\n    status: string;\n    count: number;\n  }[];\n  avgAmount: number;\n  minAmount: number;\n  maxAmount: number;\n  recentApplications: any[];\n  applicationsByMonth: {\n    month: string;\n    count: number;\n  }[];\n  totalApproved: number;\n  totalRejected: number;\n  totalPending: number;\n  pendingApproval: number;\n  totalClients: number;\n}\n\nexport interface AdvisorStats extends DashboardStats {\n  totalClients: number;\n  totalCompanies: number;\n  conversionRate: number;\n  avgTimeToApproval: number;\n}\n\nexport interface CompanyStats extends DashboardStats {\n  totalAdvisors: number;\n  totalClientsCompany: number;\n  avgApprovalTime: number;\n}\n\n/**\n * Obtiene estadísticas generales para el dashboard\n */\nexport const getGeneralDashboardStats = async (): Promise<DashboardStats> => {\n  try {\n    // Total de aplicaciones\n    const totalApplicationsQuery = `SELECT COUNT(*) as total FROM ${TABLES.APPLICATIONS}`;\n    const totalAppResult = await executeQuery(totalApplicationsQuery);\n    const totalApplications = parseInt(totalAppResult[0]?.total || '0');\n\n    // Aplicaciones por estado\n    const applicationsByStatusQuery = `\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      GROUP BY status\n    `;\n    const statusResult = await executeQuery(applicationsByStatusQuery);\n    const applicationsByStatus = statusResult.map((row: any) => ({\n      status: row.status,\n      count: parseInt(row.count)\n    }));\n\n    // Estadísticas de montos\n    const amountStatsQuery = `\n      SELECT \n        AVG(amount) as avg_amount, \n        MIN(amount) as min_amount, \n        MAX(amount) as max_amount \n      FROM ${TABLES.APPLICATIONS} \n      WHERE amount IS NOT NULL\n    `;\n    const amountResult = await executeQuery(amountStatsQuery);\n    const avgAmount = parseFloat(amountResult[0]?.avg_amount || '0');\n    const minAmount = parseFloat(amountResult[0]?.min_amount || '0');\n    const maxAmount = parseFloat(amountResult[0]?.max_amount || '0');\n\n    // Aplicaciones recientes\n    const recentApplicationsQuery = `\n      SELECT \n        id, \n        created_at, \n        client_name, \n        status, \n        amount, \n        company_name, \n        application_type,\n        requested_amount\n      FROM ${TABLES.APPLICATIONS}\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;\n    const recentApplications = await executeQuery(recentApplicationsQuery);\n\n    // Aplicaciones por mes (últimos 6 meses)\n    const applicationsByMonthQuery = `\n      SELECT \n        TO_CHAR(created_at, 'YYYY-MM') as month, \n        COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE created_at >= NOW() - INTERVAL '6 months'\n      GROUP BY TO_CHAR(created_at, 'YYYY-MM')\n      ORDER BY month\n    `;\n    const monthResult = await executeQuery(applicationsByMonthQuery);\n    const applicationsByMonth = monthResult.map((row: any) => ({\n      month: row.month,\n      count: parseInt(row.count)\n    }));\n\n    // Totales por categoría principal\n    const totalByMajorCategoryQuery = `\n      SELECT \n        COUNT(*) FILTER (WHERE status IN ('approved', 'APROBADO', 'Aprobado por Asesor')) as approved,\n        COUNT(*) FILTER (WHERE status IN ('rejected', 'RECHAZADO')) as rejected,\n        COUNT(*) FILTER (WHERE status IN ('pending', 'new', 'Solicitud', 'Simulación')) as pending,\n        COUNT(*) FILTER (WHERE \n          (approved_by_advisor = false AND approved_by_company = false) OR\n          (approved_by_advisor = true AND approved_by_company = false) OR\n          (approved_by_advisor = false AND approved_by_company = true)\n        ) as pending_approval\n      FROM ${TABLES.APPLICATIONS}\n    `;\n    const categoryResult = await executeQuery(totalByMajorCategoryQuery);\n    const totalApproved = parseInt(categoryResult[0]?.approved || '0');\n    const totalRejected = parseInt(categoryResult[0]?.rejected || '0');\n    const totalPending = parseInt(categoryResult[0]?.pending || '0');\n    const pendingApproval = parseInt(categoryResult[0]?.pending_approval || '0');\n\n    // Total clients - use a try-catch block to handle the case where the table doesn't exist\n    let totalClients = 0;\n    try {\n      // First attempt: try to get clients count from clients table\n      const totalClientsQuery = `SELECT COUNT(*) as total FROM ${TABLES.CLIENTS}`;\n      const totalClientsResult = await executeQuery(totalClientsQuery);\n      totalClients = parseInt(totalClientsResult[0]?.total || '0');\n    } catch (error) {\n      // Fallback: if clients table doesn't exist, count distinct client names from applications\n      try {\n        const clientNamesQuery = `SELECT COUNT(DISTINCT client_name) as total FROM ${TABLES.APPLICATIONS}`;\n        const clientNamesResult = await executeQuery(clientNamesQuery);\n        totalClients = parseInt(clientNamesResult[0]?.total || '0');\n      } catch (innerError) {\n        console.error('Error counting clients from applications table:', innerError);\n        // If that also fails, default to 0\n        totalClients = 0;\n      }\n    }\n\n    return {\n      totalApplications,\n      applicationsByStatus,\n      avgAmount,\n      minAmount,\n      maxAmount,\n      recentApplications,\n      applicationsByMonth,\n      totalApproved,\n      totalRejected,\n      totalPending,\n      pendingApproval,\n      totalClients\n    };\n  } catch (error) {\n    console.error('Error al obtener estadísticas del dashboard:', error);\n    throw error;\n  }\n};\n\n/**\n * Obtiene estadísticas específicas para un asesor\n * @param advisorId ID del asesor\n */\nexport const getAdvisorDashboardStats = async (advisorId: string): Promise<AdvisorStats> => {\n  try {\n    // Obtenemos las estadísticas generales primero\n    const baseStats = await getGeneralDashboardStats();\n\n    // Estadísticas específicas del asesor\n    // Total de aplicaciones del asesor\n    const advisorApplicationsQuery = `\n      SELECT COUNT(*) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;\n    const advisorAppResult = await executeQuery(advisorApplicationsQuery);\n    const totalAdvisorApplications = parseInt(advisorAppResult[0]?.total || '0');\n\n    // Aplicaciones por estado del asesor\n    const advisorStatusQuery = `\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n      GROUP BY status\n    `;\n    const advisorStatusResult = await executeQuery(advisorStatusQuery);\n    const advisorApplicationsByStatus = advisorStatusResult.map((row: any) => ({\n      status: row.status,\n      count: parseInt(row.count)\n    }));\n\n    // Total de clientes del asesor\n    let totalClients = 0;\n    try {\n      // First attempt: try to get clients from clients table\n      const clientsQuery = `\n        SELECT COUNT(*) as total \n        FROM ${TABLES.CLIENTS} \n        WHERE advisor_id = '${advisorId}'\n      `;\n      const clientsResult = await executeQuery(clientsQuery);\n      totalClients = parseInt(clientsResult[0]?.total || '0');\n    } catch (error) {\n      // Fallback: count distinct client names from applications\n      try {\n        const clientNamesQuery = `\n          SELECT COUNT(DISTINCT client_name) as total \n          FROM ${TABLES.APPLICATIONS} \n          WHERE assigned_to = '${advisorId}'\n        `;\n        const clientNamesResult = await executeQuery(clientNamesQuery);\n        totalClients = parseInt(clientNamesResult[0]?.total || '0');\n      } catch (innerError) {\n        console.error(`Error counting clients for advisor ${advisorId}:`, innerError);\n        // If that also fails, default to 0\n        totalClients = 0;\n      }\n    }\n\n    // Total de empresas asignadas al asesor\n    const companiesQuery = `\n      SELECT COUNT(DISTINCT company_id) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;\n    const companiesResult = await executeQuery(companiesQuery);\n    const totalCompanies = parseInt(companiesResult[0]?.total || '0');\n\n    // Tasa de conversión (aprobados / total)\n    const conversionRateQuery = `\n      SELECT \n        COUNT(*) FILTER (WHERE status IN ('approved', 'APROBADO', 'completed')) as approved,\n        COUNT(*) as total\n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n    `;\n    const conversionResult = await executeQuery(conversionRateQuery);\n    const approved = parseInt(conversionResult[0]?.approved || '0');\n    const total = parseInt(conversionResult[0]?.total || '0');\n    const conversionRate = total > 0 ? (approved / total) * 100 : 0;\n\n    // Tiempo promedio hasta aprobación\n    const avgTimeQuery = `\n      SELECT AVG(EXTRACT(EPOCH FROM (approval_date_advisor - created_at))/86400) as avg_days\n      FROM ${TABLES.APPLICATIONS} \n      WHERE assigned_to = '${advisorId}'\n      AND approval_date_advisor IS NOT NULL\n    `;\n    const timeResult = await executeQuery(avgTimeQuery);\n    const avgTimeToApproval = parseFloat(timeResult[0]?.avg_days || '0');\n\n    // Aplicaciones recientes del asesor\n    const recentAdvisorAppsQuery = `\n      SELECT id, created_at, client_name, status, amount, company_name\n      FROM ${TABLES.APPLICATIONS}\n      WHERE assigned_to = '${advisorId}'\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;\n    const recentAdvisorApps = await executeQuery(recentAdvisorAppsQuery);\n\n    return {\n      ...baseStats,\n      totalApplications: totalAdvisorApplications,\n      applicationsByStatus: advisorApplicationsByStatus,\n      recentApplications: recentAdvisorApps,\n      totalClients,\n      totalCompanies,\n      conversionRate,\n      avgTimeToApproval\n    };\n  } catch (error) {\n    console.error(`Error al obtener estadísticas del asesor ${advisorId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Obtiene estadísticas específicas para una empresa\n * @param companyId ID de la empresa\n */\nexport const getCompanyDashboardStats = async (companyId: string): Promise<CompanyStats> => {\n  try {\n    // Obtenemos las estadísticas generales primero\n    const baseStats = await getGeneralDashboardStats();\n\n    // Estadísticas específicas de la empresa\n    // Total de aplicaciones de la empresa\n    const companyApplicationsQuery = `\n      SELECT COUNT(*) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n    `;\n    const companyAppResult = await executeQuery(companyApplicationsQuery);\n    const totalCompanyApplications = parseInt(companyAppResult[0]?.total || '0');\n\n    // Aplicaciones por estado de la empresa\n    const companyStatusQuery = `\n      SELECT status, COUNT(*) as count \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n      GROUP BY status\n    `;\n    const companyStatusResult = await executeQuery(companyStatusQuery);\n    const companyApplicationsByStatus = companyStatusResult.map((row: any) => ({\n      status: row.status,\n      count: parseInt(row.count)\n    }));\n\n    // Total de asesores asignados a la empresa\n    const advisorsQuery = `\n      SELECT COUNT(DISTINCT assigned_to) as total \n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n    `;\n    const advisorsResult = await executeQuery(advisorsQuery);\n    const totalAdvisors = parseInt(advisorsResult[0]?.total || '0');\n\n    // Total de clientes de la empresa\n    let totalClientsCompany = 0;\n    try {\n      // First attempt: try to get clients from clients table\n      const clientsQuery = `\n        SELECT COUNT(*) as total \n        FROM ${TABLES.CLIENTS} \n        WHERE company_id = '${companyId}'\n      `;\n      const clientsResult = await executeQuery(clientsQuery);\n      totalClientsCompany = parseInt(clientsResult[0]?.total || '0');\n    } catch (error) {\n      // Fallback: count distinct client names from applications\n      try {\n        const clientNamesQuery = `\n          SELECT COUNT(DISTINCT client_name) as total \n          FROM ${TABLES.APPLICATIONS} \n          WHERE company_id = '${companyId}'\n        `;\n        const clientNamesResult = await executeQuery(clientNamesQuery);\n        totalClientsCompany = parseInt(clientNamesResult[0]?.total || '0');\n      } catch (innerError) {\n        console.error(`Error counting clients for company ${companyId}:`, innerError);\n        // If that also fails, default to 0\n        totalClientsCompany = 0;\n      }\n    }\n\n    // Tiempo promedio de aprobación\n    const avgTimeQuery = `\n      SELECT AVG(EXTRACT(EPOCH FROM (approval_date_company - created_at))/86400) as avg_days\n      FROM ${TABLES.APPLICATIONS} \n      WHERE company_id = '${companyId}'\n      AND approval_date_company IS NOT NULL\n    `;\n    const timeResult = await executeQuery(avgTimeQuery);\n    const avgApprovalTime = parseFloat(timeResult[0]?.avg_days || '0');\n\n    // Aplicaciones recientes de la empresa\n    const recentCompanyAppsQuery = `\n      SELECT id, created_at, client_name, status, amount, assigned_to\n      FROM ${TABLES.APPLICATIONS}\n      WHERE company_id = '${companyId}'\n      ORDER BY created_at DESC\n      LIMIT 10\n    `;\n    const recentCompanyApps = await executeQuery(recentCompanyAppsQuery);\n\n    return {\n      ...baseStats,\n      totalApplications: totalCompanyApplications,\n      applicationsByStatus: companyApplicationsByStatus,\n      recentApplications: recentCompanyApps,\n      totalAdvisors,\n      totalClientsCompany,\n      avgApprovalTime\n    };\n  } catch (error) {\n    console.error(`Error al obtener estadísticas de la empresa ${companyId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Obtiene estadísticas de aplicaciones pendientes de aprobación\n * @param userId ID del usuario (asesor o admin de empresa)\n * @param isCompanyAdmin Indica si el usuario es un admin de empresa\n */\nexport const getPendingApprovalStats = async (userId: string, isCompanyAdmin: boolean): Promise<any> => {\n  try {\n    let query = '';\n    \n    if (isCompanyAdmin) {\n      // Obtener ID de la compañía del admin\n      const companyQuery = `\n        SELECT company_id FROM ${TABLES.COMPANY_ADMINS} WHERE id = '${userId}'\n      `;\n      const companyResult = await executeQuery(companyQuery);\n      const companyId = companyResult[0]?.company_id;\n      \n      if (!companyId) {\n        throw new Error('No se encontró la compañía para este administrador');\n      }\n      \n      // Aplicaciones pendientes de aprobación por la compañía\n      query = `\n        SELECT COUNT(*) as pending_count\n        FROM ${TABLES.APPLICATIONS}\n        WHERE company_id = '${companyId}'\n        AND approved_by_advisor = true\n        AND approved_by_company = false\n      `;\n    } else {\n      // Aplicaciones pendientes de aprobación por el asesor\n      query = `\n        SELECT COUNT(*) as pending_count\n        FROM ${TABLES.APPLICATIONS}\n        WHERE assigned_to = '${userId}'\n        AND approved_by_advisor = false\n      `;\n    }\n    \n    const result = await executeQuery(query);\n    return {\n      pendingCount: parseInt(result[0]?.pending_count || '0')\n    };\n  } catch (error) {\n    console.error('Error al obtener estadísticas de aprobaciones pendientes:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}