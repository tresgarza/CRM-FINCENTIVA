{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../utils/supabase';\nimport { USER_ROLES } from '../utils/constants/roles';\nimport { TABLES } from '../utils/constants/tables';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({\n      data: {\n        session\n      }\n    }) => {\n      setSession(session);\n      if (session) {\n        fetchUserProfile(session.user);\n      } else {\n        setLoading(false);\n      }\n    });\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      setSession(session);\n      if (session) {\n        await fetchUserProfile(session.user);\n      } else {\n        setUser(null);\n        setLoading(false);\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n  const fetchUserProfile = async authUser => {\n    try {\n      setLoading(true);\n\n      // Check if user is an advisor\n      const {\n        data: advisor\n      } = await supabase.from(TABLES.ADVISORS).select('*').eq('email', authUser.email).single();\n      if (advisor) {\n        setUser({\n          id: advisor.id,\n          email: advisor.email,\n          name: advisor.name,\n          role: USER_ROLES.ADVISOR\n        });\n        setLoading(false);\n        return;\n      }\n\n      // Check if user is a company admin\n      const {\n        data: companyAdmin\n      } = await supabase.from(TABLES.COMPANY_ADMINS).select('*').eq('email', authUser.email).single();\n      if (companyAdmin) {\n        setUser({\n          id: companyAdmin.id,\n          email: companyAdmin.email,\n          name: companyAdmin.name,\n          role: USER_ROLES.COMPANY_ADMIN\n        });\n        setLoading(false);\n        return;\n      }\n\n      // If not found in either, set as SUPERADMIN (for demo purposes)\n      // In a real application, you'd have a users or admins table\n      setUser({\n        id: authUser.id,\n        email: authUser.email,\n        role: USER_ROLES.SUPERADMIN\n      });\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signIn = async (email, password) => {\n    try {\n      const result = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      return result;\n    } catch (error) {\n      console.error('Error signing in:', error);\n      return {\n        error,\n        data: null\n      };\n    }\n  };\n  const signOut = async () => {\n    try {\n      await supabase.auth.signOut();\n      setUser(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n  const value = {\n    user,\n    session,\n    loading,\n    signIn,\n    signOut,\n    setUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"sIDOCMze9iVqwxkgWIhOu8vskSI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","USER_ROLES","TABLES","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","session","setSession","loading","setLoading","auth","getSession","then","data","fetchUserProfile","subscription","onAuthStateChange","event","unsubscribe","authUser","advisor","from","ADVISORS","select","eq","email","single","id","name","role","ADVISOR","companyAdmin","COMPANY_ADMINS","COMPANY_ADMIN","SUPERADMIN","error","console","signIn","password","result","signInWithPassword","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Session, User as SupabaseUser } from '@supabase/supabase-js';\nimport { supabase } from '../utils/supabase';\nimport { User } from '../utils/types';\nimport { USER_ROLES } from '../utils/constants/roles';\nimport { TABLES } from '../utils/constants/tables';\n\ninterface AuthContextType {\n  user: User | null;\n  session: Session | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<{\n    error: any | null;\n    data: any | null;\n  }>;\n  signOut: () => Promise<void>;\n  setUser: React.Dispatch<React.SetStateAction<User | null>>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session);\n      if (session) {\n        fetchUserProfile(session.user);\n      } else {\n        setLoading(false);\n      }\n    });\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        setSession(session);\n        if (session) {\n          await fetchUserProfile(session.user);\n        } else {\n          setUser(null);\n          setLoading(false);\n        }\n      }\n    );\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const fetchUserProfile = async (authUser: SupabaseUser) => {\n    try {\n      setLoading(true);\n      \n      // Check if user is an advisor\n      const { data: advisor } = await supabase\n        .from(TABLES.ADVISORS)\n        .select('*')\n        .eq('email', authUser.email)\n        .single();\n\n      if (advisor) {\n        setUser({\n          id: advisor.id,\n          email: advisor.email,\n          name: advisor.name,\n          role: USER_ROLES.ADVISOR,\n        });\n        setLoading(false);\n        return;\n      }\n\n      // Check if user is a company admin\n      const { data: companyAdmin } = await supabase\n        .from(TABLES.COMPANY_ADMINS)\n        .select('*')\n        .eq('email', authUser.email)\n        .single();\n\n      if (companyAdmin) {\n        setUser({\n          id: companyAdmin.id,\n          email: companyAdmin.email,\n          name: companyAdmin.name,\n          role: USER_ROLES.COMPANY_ADMIN,\n        });\n        setLoading(false);\n        return;\n      }\n\n      // If not found in either, set as SUPERADMIN (for demo purposes)\n      // In a real application, you'd have a users or admins table\n      setUser({\n        id: authUser.id,\n        email: authUser.email!,\n        role: USER_ROLES.SUPERADMIN,\n      });\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      const result = await supabase.auth.signInWithPassword({ email, password });\n      return result;\n    } catch (error) {\n      console.error('Error signing in:', error);\n      return { error, data: null };\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      await supabase.auth.signOut();\n      setUser(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  const value = {\n    user,\n    session,\n    loading,\n    signIn,\n    signOut,\n    setUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}