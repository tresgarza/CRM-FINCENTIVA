{"ast":null,"code":"import { supabase } from '../utils/supabase';\nimport { TABLES } from '../utils/constants/tables';\nconst COMPANIES_TABLE = TABLES.COMPANIES;\nconst COMPANY_ADMINS_TABLE = TABLES.COMPANY_ADMINS;\n\n// Get all companies with filters\nexport const getCompanies = async filters => {\n  let query = supabase.from(COMPANIES_TABLE).select('*');\n\n  // Apply filters\n  if (filters) {\n    // Filter by advisor\n    if (filters.advisor_id) {\n      query = query.eq('advisor_id', filters.advisor_id);\n    }\n\n    // Filter by status\n    if (filters.status && filters.status !== 'all') {\n      query = query.eq('status', filters.status);\n    }\n\n    // Search by name, rfc or contact\n    if (filters.searchQuery) {\n      query = query.or(`name.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,contact_name.ilike.%${filters.searchQuery}%,contact_email.ilike.%${filters.searchQuery}%`);\n    }\n  }\n\n  // Order by name\n  query = query.order('name', {\n    ascending: true\n  });\n  const {\n    data,\n    error\n  } = await query;\n  if (error) {\n    console.error('Error fetching companies:', error);\n    throw error;\n  }\n  return data;\n};\n\n// Get a single company by ID\nexport const getCompanyById = async id => {\n  const {\n    data,\n    error\n  } = await supabase.from(COMPANIES_TABLE).select('*').eq('id', id).single();\n  if (error) {\n    console.error(`Error fetching company with ID ${id}:`, error);\n    throw error;\n  }\n  return data;\n};\n\n// Create a new company\nexport const createCompany = async company => {\n  const {\n    data,\n    error\n  } = await supabase.from(COMPANIES_TABLE).insert([company]).select();\n  if (error) {\n    console.error('Error creating company:', error);\n    throw error;\n  }\n  return data[0];\n};\n\n// Update an existing company\nexport const updateCompany = async (id, updates) => {\n  const {\n    data,\n    error\n  } = await supabase.from(COMPANIES_TABLE).update(updates).eq('id', id).select();\n  if (error) {\n    console.error(`Error updating company with ID ${id}:`, error);\n    throw error;\n  }\n  return data[0];\n};\n\n// Delete a company\nexport const deleteCompany = async id => {\n  const {\n    error\n  } = await supabase.from(COMPANIES_TABLE).delete().eq('id', id);\n  if (error) {\n    console.error(`Error deleting company with ID ${id}:`, error);\n    throw error;\n  }\n  return true;\n};\n\n// Get company administrators\nexport const getCompanyAdmins = async companyId => {\n  const {\n    data,\n    error\n  } = await supabase.from(COMPANY_ADMINS_TABLE).select(`\n      *,\n      user:user_id (id, name, email, phone)\n    `).eq('company_id', companyId);\n  if (error) {\n    console.error(`Error fetching admins for company ${companyId}:`, error);\n    throw error;\n  }\n  return data;\n};\n\n// Add administrator to company\nexport const addCompanyAdmin = async (companyId, userId) => {\n  const {\n    data,\n    error\n  } = await supabase.from(COMPANY_ADMINS_TABLE).insert([{\n    company_id: companyId,\n    user_id: userId\n  }]).select();\n  if (error) {\n    console.error(`Error adding admin to company ${companyId}:`, error);\n    throw error;\n  }\n  return data[0];\n};\n\n// Remove administrator from company\nexport const removeCompanyAdmin = async (companyId, userId) => {\n  const {\n    error\n  } = await supabase.from(COMPANY_ADMINS_TABLE).delete().eq('company_id', companyId).eq('user_id', userId);\n  if (error) {\n    console.error(`Error removing admin from company ${companyId}:`, error);\n    throw error;\n  }\n  return true;\n};\n\n// Check if a user is admin of a company\nexport const isCompanyAdmin = async (companyId, userId) => {\n  const {\n    data,\n    error\n  } = await supabase.from(COMPANY_ADMINS_TABLE).select('id').eq('company_id', companyId).eq('user_id', userId).single();\n  if (error && error.code !== 'PGRST116') {\n    // PGRST116 is \"no rows returned\" error\n    console.error(`Error checking admin status for company ${companyId}:`, error);\n    throw error;\n  }\n  return !!data;\n};\n\n// Get company clients\nexport const getCompanyClients = async companyId => {\n  const {\n    data,\n    error\n  } = await supabase.from(TABLES.CLIENTS).select('*').eq('company_id', companyId).order('name', {\n    ascending: true\n  });\n  if (error) {\n    console.error(`Error fetching clients for company ${companyId}:`, error);\n    throw error;\n  }\n  return data;\n};\n\n// Get company applications\nexport const getCompanyApplications = async (companyId, limit) => {\n  let query = supabase.from(TABLES.APPLICATIONS).select('*').eq('company_id', companyId).order('created_at', {\n    ascending: false\n  });\n  if (limit) {\n    query = query.limit(limit);\n  }\n  const {\n    data,\n    error\n  } = await query;\n  if (error) {\n    console.error(`Error fetching applications for company ${companyId}:`, error);\n    throw error;\n  }\n  return data;\n};","map":{"version":3,"names":["supabase","TABLES","COMPANIES_TABLE","COMPANIES","COMPANY_ADMINS_TABLE","COMPANY_ADMINS","getCompanies","filters","query","from","select","advisor_id","eq","status","searchQuery","or","order","ascending","data","error","console","getCompanyById","id","single","createCompany","company","insert","updateCompany","updates","update","deleteCompany","delete","getCompanyAdmins","companyId","addCompanyAdmin","userId","company_id","user_id","removeCompanyAdmin","isCompanyAdmin","code","getCompanyClients","CLIENTS","getCompanyApplications","limit","APPLICATIONS"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/companyService.ts"],"sourcesContent":["import { supabase } from '../utils/supabase';\nimport { TABLES } from '../utils/constants/tables';\n\nexport interface Company {\n  id: string;\n  created_at: string;\n  name: string;\n  rfc: string;\n  contact_name: string;\n  contact_email: string;\n  contact_phone: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  postal_code?: string;\n  status: 'active' | 'inactive';\n  logo_url?: string;\n  advisor_id?: string;\n  max_loan_amount?: number;\n  interest_rate?: number;\n  max_loan_term?: number;\n}\n\nexport interface CompanyFilter {\n  searchQuery?: string;\n  advisor_id?: string;\n  status?: 'active' | 'inactive' | 'all';\n}\n\nconst COMPANIES_TABLE = TABLES.COMPANIES;\nconst COMPANY_ADMINS_TABLE = TABLES.COMPANY_ADMINS;\n\n// Get all companies with filters\nexport const getCompanies = async (filters?: CompanyFilter) => {\n  let query = supabase.from(COMPANIES_TABLE).select('*');\n\n  // Apply filters\n  if (filters) {\n    // Filter by advisor\n    if (filters.advisor_id) {\n      query = query.eq('advisor_id', filters.advisor_id);\n    }\n\n    // Filter by status\n    if (filters.status && filters.status !== 'all') {\n      query = query.eq('status', filters.status);\n    }\n\n    // Search by name, rfc or contact\n    if (filters.searchQuery) {\n      query = query.or(\n        `name.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,contact_name.ilike.%${filters.searchQuery}%,contact_email.ilike.%${filters.searchQuery}%`\n      );\n    }\n  }\n\n  // Order by name\n  query = query.order('name', { ascending: true });\n\n  const { data, error } = await query;\n\n  if (error) {\n    console.error('Error fetching companies:', error);\n    throw error;\n  }\n\n  return data as Company[];\n};\n\n// Get a single company by ID\nexport const getCompanyById = async (id: string) => {\n  const { data, error } = await supabase\n    .from(COMPANIES_TABLE)\n    .select('*')\n    .eq('id', id)\n    .single();\n\n  if (error) {\n    console.error(`Error fetching company with ID ${id}:`, error);\n    throw error;\n  }\n\n  return data as Company;\n};\n\n// Create a new company\nexport const createCompany = async (company: Omit<Company, 'id' | 'created_at'>) => {\n  const { data, error } = await supabase\n    .from(COMPANIES_TABLE)\n    .insert([company])\n    .select();\n\n  if (error) {\n    console.error('Error creating company:', error);\n    throw error;\n  }\n\n  return data[0] as Company;\n};\n\n// Update an existing company\nexport const updateCompany = async (id: string, updates: Partial<Company>) => {\n  const { data, error } = await supabase\n    .from(COMPANIES_TABLE)\n    .update(updates)\n    .eq('id', id)\n    .select();\n\n  if (error) {\n    console.error(`Error updating company with ID ${id}:`, error);\n    throw error;\n  }\n\n  return data[0] as Company;\n};\n\n// Delete a company\nexport const deleteCompany = async (id: string) => {\n  const { error } = await supabase\n    .from(COMPANIES_TABLE)\n    .delete()\n    .eq('id', id);\n\n  if (error) {\n    console.error(`Error deleting company with ID ${id}:`, error);\n    throw error;\n  }\n\n  return true;\n};\n\n// Get company administrators\nexport const getCompanyAdmins = async (companyId: string) => {\n  const { data, error } = await supabase\n    .from(COMPANY_ADMINS_TABLE)\n    .select(`\n      *,\n      user:user_id (id, name, email, phone)\n    `)\n    .eq('company_id', companyId);\n\n  if (error) {\n    console.error(`Error fetching admins for company ${companyId}:`, error);\n    throw error;\n  }\n\n  return data;\n};\n\n// Add administrator to company\nexport const addCompanyAdmin = async (companyId: string, userId: string) => {\n  const { data, error } = await supabase\n    .from(COMPANY_ADMINS_TABLE)\n    .insert([{ company_id: companyId, user_id: userId }])\n    .select();\n\n  if (error) {\n    console.error(`Error adding admin to company ${companyId}:`, error);\n    throw error;\n  }\n\n  return data[0];\n};\n\n// Remove administrator from company\nexport const removeCompanyAdmin = async (companyId: string, userId: string) => {\n  const { error } = await supabase\n    .from(COMPANY_ADMINS_TABLE)\n    .delete()\n    .eq('company_id', companyId)\n    .eq('user_id', userId);\n\n  if (error) {\n    console.error(`Error removing admin from company ${companyId}:`, error);\n    throw error;\n  }\n\n  return true;\n};\n\n// Check if a user is admin of a company\nexport const isCompanyAdmin = async (companyId: string, userId: string) => {\n  const { data, error } = await supabase\n    .from(COMPANY_ADMINS_TABLE)\n    .select('id')\n    .eq('company_id', companyId)\n    .eq('user_id', userId)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 is \"no rows returned\" error\n    console.error(`Error checking admin status for company ${companyId}:`, error);\n    throw error;\n  }\n\n  return !!data;\n};\n\n// Get company clients\nexport const getCompanyClients = async (companyId: string) => {\n  const { data, error } = await supabase\n    .from(TABLES.CLIENTS)\n    .select('*')\n    .eq('company_id', companyId)\n    .order('name', { ascending: true });\n\n  if (error) {\n    console.error(`Error fetching clients for company ${companyId}:`, error);\n    throw error;\n  }\n\n  return data;\n};\n\n// Get company applications\nexport const getCompanyApplications = async (companyId: string, limit?: number) => {\n  let query = supabase\n    .from(TABLES.APPLICATIONS)\n    .select('*')\n    .eq('company_id', companyId)\n    .order('created_at', { ascending: false });\n\n  if (limit) {\n    query = query.limit(limit);\n  }\n\n  const { data, error } = await query;\n\n  if (error) {\n    console.error(`Error fetching applications for company ${companyId}:`, error);\n    throw error;\n  }\n\n  return data;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}