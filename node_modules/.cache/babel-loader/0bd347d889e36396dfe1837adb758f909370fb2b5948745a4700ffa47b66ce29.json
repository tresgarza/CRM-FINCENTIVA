{"ast":null,"code":"import{supabase}from'../lib/supabaseClient';import{TABLES}from'../utils/constants/tables';const CLIENTS_TABLE=TABLES.CLIENTS;// Get all clients with filters\nexport const getClients=async filters=>{let query=supabase.from(CLIENTS_TABLE).select('*',{count:'exact'});// Apply filters\nif(filters){// Filter by advisor\nif(filters.advisor_id){query=query.eq('advisor_id',filters.advisor_id);}// Filter by company\nif(filters.company_id){query=query.eq('company_id',filters.company_id);}// Filter by date range\nif(filters.dateFrom){query=query.gte('created_at',filters.dateFrom);}if(filters.dateTo){query=query.lte('created_at',filters.dateTo);}// Search by name, email, phone, RFC or CURP\nif(filters.searchQuery){query=query.or(`name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);}// Apply pagination if provided\nif(filters.page!==undefined&&filters.pageSize){const from=filters.page*filters.pageSize;const to=from+filters.pageSize-1;query=query.range(from,to);}}// Order by most recent first\nquery=query.order('created_at',{ascending:false});const{data,error,count}=await query;if(error){console.error('Error fetching clients:',error);throw error;}return{clients:data,totalCount:count||0};};// Get a single client by ID\nexport const getClientById=async id=>{const{data,error}=await supabase.from(CLIENTS_TABLE).select('*').eq('id',id).single();if(error){console.error(`Error fetching client with ID ${id}:`,error);throw error;}return data;};// Función para escapar cadenas de texto para SQL\nfunction escapeSQLString(str){if(!str)return'';return str.replace(/'/g,\"''\");}// Get client applications\nexport const getClientApplications=async clientId=>{// Consultar aplicaciones usando MCP en lugar de Supabase\ntry{// Primero obtenemos el cliente para saber su nombre\nconst client=await getClientById(clientId);// Luego usamos el nombre del cliente para buscar aplicaciones\nconst query=`\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name)}'\n      ORDER BY created_at DESC\n    `;// Usamos executeQuery que es el método para el MCP\nconst executeQuery=async query=>{try{const response=await fetch('http://localhost:3100/query',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query})});const result=await response.json();if(result.error){console.error('Error en la consulta SQL:',result.error);throw new Error(result.error);}return result.data;}catch(error){console.error('Error ejecutando la consulta:',error);throw error;}};const data=await executeQuery(query);return data;}catch(error){console.error(`Error fetching applications for client ${clientId}:`,error);throw error;}};// Create a new client\nexport const createClient=async client=>{const{data,error}=await supabase.from(CLIENTS_TABLE).insert([client]).select();if(error){console.error('Error creating client:',error);throw error;}return data[0];};// Update an existing client\nexport const updateClient=async(id,updates)=>{const{data,error}=await supabase.from(CLIENTS_TABLE).update(updates).eq('id',id).select();if(error){console.error(`Error updating client with ID ${id}:`,error);throw error;}return data[0];};// Delete a client\nexport const deleteClient=async id=>{const{error}=await supabase.from(CLIENTS_TABLE).delete().eq('id',id);if(error){console.error(`Error deleting client with ID ${id}:`,error);throw error;}return true;};// Check if a client exists with the given email or RFC\nexport const checkClientExists=async(email,rfc)=>{let query=supabase.from(CLIENTS_TABLE).select('id, email, rfc').eq('email',email);if(rfc){query=query.or(`rfc.eq.${rfc}`);}const{data,error}=await query;if(error){console.error('Error checking client existence:',error);throw error;}return data.length>0?data[0]:null;};// Get client count by filters\nexport const getClientCount=async filters=>{let query=supabase.from(CLIENTS_TABLE).select('id',{count:'exact',head:true});// Apply filters\nif(filters){// Filter by advisor\nif(filters.advisor_id){query=query.eq('advisor_id',filters.advisor_id);}// Filter by company\nif(filters.company_id){query=query.eq('company_id',filters.company_id);}// Filter by date range\nif(filters.dateFrom){query=query.gte('created_at',filters.dateFrom);}if(filters.dateTo){query=query.lte('created_at',filters.dateTo);}// Search by name, email or phone\nif(filters.searchQuery){query=query.or(`name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);}}const{count,error}=await query;if(error){console.error('Error getting client count:',error);throw error;}return count||0;};","map":{"version":3,"names":["supabase","TABLES","CLIENTS_TABLE","CLIENTS","getClients","filters","query","from","select","count","advisor_id","eq","company_id","dateFrom","gte","dateTo","lte","searchQuery","or","page","undefined","pageSize","to","range","order","ascending","data","error","console","clients","totalCount","getClientById","id","single","escapeSQLString","str","replace","getClientApplications","clientId","client","APPLICATIONS","name","executeQuery","response","fetch","method","headers","body","JSON","stringify","result","json","Error","createClient","insert","updateClient","updates","update","deleteClient","delete","checkClientExists","email","rfc","length","getClientCount","head"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/clientService.ts"],"sourcesContent":["import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from '../utils/constants/tables';\n\nexport interface Client {\n  id: string;\n  created_at: string;\n  name: string;\n  email: string;\n  phone: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  postal_code?: string;\n  birth_date?: string;\n  rfc?: string;\n  curp?: string;\n  company_id?: string;\n  advisor_id?: string;\n}\n\nexport interface ClientFilter {\n  searchQuery?: string;\n  advisor_id?: string;\n  company_id?: string;\n  dateFrom?: string;\n  dateTo?: string;\n  page?: number;\n  pageSize?: number;\n}\n\nconst CLIENTS_TABLE = TABLES.CLIENTS;\n\n// Get all clients with filters\nexport const getClients = async (filters?: ClientFilter) => {\n  let query = supabase.from(CLIENTS_TABLE).select('*', { count: 'exact' });\n\n  // Apply filters\n  if (filters) {\n    // Filter by advisor\n    if (filters.advisor_id) {\n      query = query.eq('advisor_id', filters.advisor_id);\n    }\n\n    // Filter by company\n    if (filters.company_id) {\n      query = query.eq('company_id', filters.company_id);\n    }\n\n    // Filter by date range\n    if (filters.dateFrom) {\n      query = query.gte('created_at', filters.dateFrom);\n    }\n\n    if (filters.dateTo) {\n      query = query.lte('created_at', filters.dateTo);\n    }\n\n    // Search by name, email, phone, RFC or CURP\n    if (filters.searchQuery) {\n      query = query.or(\n        `name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n      );\n    }\n\n    // Apply pagination if provided\n    if (filters.page !== undefined && filters.pageSize) {\n      const from = filters.page * filters.pageSize;\n      const to = from + filters.pageSize - 1;\n      query = query.range(from, to);\n    }\n  }\n\n  // Order by most recent first\n  query = query.order('created_at', { ascending: false });\n\n  const { data, error, count } = await query;\n\n  if (error) {\n    console.error('Error fetching clients:', error);\n    throw error;\n  }\n\n  return {\n    clients: data as Client[],\n    totalCount: count || 0\n  };\n};\n\n// Get a single client by ID\nexport const getClientById = async (id: string) => {\n  const { data, error } = await supabase\n    .from(CLIENTS_TABLE)\n    .select('*')\n    .eq('id', id)\n    .single();\n\n  if (error) {\n    console.error(`Error fetching client with ID ${id}:`, error);\n    throw error;\n  }\n\n  return data as Client;\n};\n\n// Función para escapar cadenas de texto para SQL\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\n// Get client applications\nexport const getClientApplications = async (clientId: string) => {\n  // Consultar aplicaciones usando MCP en lugar de Supabase\n  try {\n    // Primero obtenemos el cliente para saber su nombre\n    const client = await getClientById(clientId);\n    \n    // Luego usamos el nombre del cliente para buscar aplicaciones\n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name)}'\n      ORDER BY created_at DESC\n    `;\n    \n    // Usamos executeQuery que es el método para el MCP\n    const executeQuery = async (query: string) => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query }),\n        });\n        \n        const result = await response.json();\n        \n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        \n        return result.data;\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    \n    const data = await executeQuery(query);\n    return data;\n  } catch (error) {\n    console.error(`Error fetching applications for client ${clientId}:`, error);\n    throw error;\n  }\n};\n\n// Create a new client\nexport const createClient = async (client: Omit<Client, 'id' | 'created_at'>) => {\n  const { data, error } = await supabase\n    .from(CLIENTS_TABLE)\n    .insert([client])\n    .select();\n\n  if (error) {\n    console.error('Error creating client:', error);\n    throw error;\n  }\n\n  return data[0] as Client;\n};\n\n// Update an existing client\nexport const updateClient = async (id: string, updates: Partial<Client>) => {\n  const { data, error } = await supabase\n    .from(CLIENTS_TABLE)\n    .update(updates)\n    .eq('id', id)\n    .select();\n\n  if (error) {\n    console.error(`Error updating client with ID ${id}:`, error);\n    throw error;\n  }\n\n  return data[0] as Client;\n};\n\n// Delete a client\nexport const deleteClient = async (id: string) => {\n  const { error } = await supabase\n    .from(CLIENTS_TABLE)\n    .delete()\n    .eq('id', id);\n\n  if (error) {\n    console.error(`Error deleting client with ID ${id}:`, error);\n    throw error;\n  }\n\n  return true;\n};\n\n// Check if a client exists with the given email or RFC\nexport const checkClientExists = async (email: string, rfc?: string) => {\n  let query = supabase\n    .from(CLIENTS_TABLE)\n    .select('id, email, rfc')\n    .eq('email', email);\n\n  if (rfc) {\n    query = query.or(`rfc.eq.${rfc}`);\n  }\n\n  const { data, error } = await query;\n\n  if (error) {\n    console.error('Error checking client existence:', error);\n    throw error;\n  }\n\n  return data.length > 0 ? data[0] : null;\n};\n\n// Get client count by filters\nexport const getClientCount = async (filters?: ClientFilter) => {\n  let query = supabase\n    .from(CLIENTS_TABLE)\n    .select('id', { count: 'exact', head: true });\n\n  // Apply filters\n  if (filters) {\n    // Filter by advisor\n    if (filters.advisor_id) {\n      query = query.eq('advisor_id', filters.advisor_id);\n    }\n\n    // Filter by company\n    if (filters.company_id) {\n      query = query.eq('company_id', filters.company_id);\n    }\n\n    // Filter by date range\n    if (filters.dateFrom) {\n      query = query.gte('created_at', filters.dateFrom);\n    }\n\n    if (filters.dateTo) {\n      query = query.lte('created_at', filters.dateTo);\n    }\n\n    // Search by name, email or phone\n    if (filters.searchQuery) {\n      query = query.or(\n        `name.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n      );\n    }\n  }\n\n  const { count, error } = await query;\n\n  if (error) {\n    console.error('Error getting client count:', error);\n    throw error;\n  }\n\n  return count || 0;\n}; "],"mappings":"AAAA,OAASA,QAAQ,KAAQ,uBAAuB,CAChD,OAASC,MAAM,KAAQ,2BAA2B,CA6BlD,KAAM,CAAAC,aAAa,CAAGD,MAAM,CAACE,OAAO,CAEpC;AACA,MAAO,MAAM,CAAAC,UAAU,CAAG,KAAO,CAAAC,OAAsB,EAAK,CAC1D,GAAI,CAAAC,KAAK,CAAGN,QAAQ,CAACO,IAAI,CAACL,aAAa,CAAC,CAACM,MAAM,CAAC,GAAG,CAAE,CAAEC,KAAK,CAAE,OAAQ,CAAC,CAAC,CAExE;AACA,GAAIJ,OAAO,CAAE,CACX;AACA,GAAIA,OAAO,CAACK,UAAU,CAAE,CACtBJ,KAAK,CAAGA,KAAK,CAACK,EAAE,CAAC,YAAY,CAAEN,OAAO,CAACK,UAAU,CAAC,CACpD,CAEA;AACA,GAAIL,OAAO,CAACO,UAAU,CAAE,CACtBN,KAAK,CAAGA,KAAK,CAACK,EAAE,CAAC,YAAY,CAAEN,OAAO,CAACO,UAAU,CAAC,CACpD,CAEA;AACA,GAAIP,OAAO,CAACQ,QAAQ,CAAE,CACpBP,KAAK,CAAGA,KAAK,CAACQ,GAAG,CAAC,YAAY,CAAET,OAAO,CAACQ,QAAQ,CAAC,CACnD,CAEA,GAAIR,OAAO,CAACU,MAAM,CAAE,CAClBT,KAAK,CAAGA,KAAK,CAACU,GAAG,CAAC,YAAY,CAAEX,OAAO,CAACU,MAAM,CAAC,CACjD,CAEA;AACA,GAAIV,OAAO,CAACY,WAAW,CAAE,CACvBX,KAAK,CAAGA,KAAK,CAACY,EAAE,CACd,eAAeb,OAAO,CAACY,WAAW,kBAAkBZ,OAAO,CAACY,WAAW,kBAAkBZ,OAAO,CAACY,WAAW,gBAAgBZ,OAAO,CAACY,WAAW,iBAAiBZ,OAAO,CAACY,WAAW,GACrL,CAAC,CACH,CAEA;AACA,GAAIZ,OAAO,CAACc,IAAI,GAAKC,SAAS,EAAIf,OAAO,CAACgB,QAAQ,CAAE,CAClD,KAAM,CAAAd,IAAI,CAAGF,OAAO,CAACc,IAAI,CAAGd,OAAO,CAACgB,QAAQ,CAC5C,KAAM,CAAAC,EAAE,CAAGf,IAAI,CAAGF,OAAO,CAACgB,QAAQ,CAAG,CAAC,CACtCf,KAAK,CAAGA,KAAK,CAACiB,KAAK,CAAChB,IAAI,CAAEe,EAAE,CAAC,CAC/B,CACF,CAEA;AACAhB,KAAK,CAAGA,KAAK,CAACkB,KAAK,CAAC,YAAY,CAAE,CAAEC,SAAS,CAAE,KAAM,CAAC,CAAC,CAEvD,KAAM,CAAEC,IAAI,CAAEC,KAAK,CAAElB,KAAM,CAAC,CAAG,KAAM,CAAAH,KAAK,CAE1C,GAAIqB,KAAK,CAAE,CACTC,OAAO,CAACD,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,KAAM,CAAAA,KAAK,CACb,CAEA,MAAO,CACLE,OAAO,CAAEH,IAAgB,CACzBI,UAAU,CAAErB,KAAK,EAAI,CACvB,CAAC,CACH,CAAC,CAED;AACA,MAAO,MAAM,CAAAsB,aAAa,CAAG,KAAO,CAAAC,EAAU,EAAK,CACjD,KAAM,CAAEN,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAA3B,QAAQ,CACnCO,IAAI,CAACL,aAAa,CAAC,CACnBM,MAAM,CAAC,GAAG,CAAC,CACXG,EAAE,CAAC,IAAI,CAAEqB,EAAE,CAAC,CACZC,MAAM,CAAC,CAAC,CAEX,GAAIN,KAAK,CAAE,CACTC,OAAO,CAACD,KAAK,CAAC,iCAAiCK,EAAE,GAAG,CAAEL,KAAK,CAAC,CAC5D,KAAM,CAAAA,KAAK,CACb,CAEA,MAAO,CAAAD,IAAI,CACb,CAAC,CAED;AACA,QAAS,CAAAQ,eAAeA,CAACC,GAAW,CAAE,CACpC,GAAI,CAACA,GAAG,CAAE,MAAO,EAAE,CACnB,MAAO,CAAAA,GAAG,CAACC,OAAO,CAAC,IAAI,CAAE,IAAI,CAAC,CAChC,CAEA;AACA,MAAO,MAAM,CAAAC,qBAAqB,CAAG,KAAO,CAAAC,QAAgB,EAAK,CAC/D;AACA,GAAI,CACF;AACA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAR,aAAa,CAACO,QAAQ,CAAC,CAE5C;AACA,KAAM,CAAAhC,KAAK,CAAG;AAClB,sBAAsBL,MAAM,CAACuC,YAAY;AACzC,6BAA6BN,eAAe,CAACK,MAAM,CAACE,IAAI,CAAC;AACzD;AACA,KAAK,CAED;AACA,KAAM,CAAAC,YAAY,CAAG,KAAO,CAAApC,KAAa,EAAK,CAC5C,GAAI,CACF,KAAM,CAAAqC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,6BAA6B,CAAE,CAC1DC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAE3C,KAAM,CAAC,CAChC,CAAC,CAAC,CAEF,KAAM,CAAA4C,MAAM,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAEpC,GAAID,MAAM,CAACvB,KAAK,CAAE,CAChBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEuB,MAAM,CAACvB,KAAK,CAAC,CACxD,KAAM,IAAI,CAAAyB,KAAK,CAACF,MAAM,CAACvB,KAAK,CAAC,CAC/B,CAEA,MAAO,CAAAuB,MAAM,CAACxB,IAAI,CACpB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAD,IAAI,CAAG,KAAM,CAAAgB,YAAY,CAACpC,KAAK,CAAC,CACtC,MAAO,CAAAoB,IAAI,CACb,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0CAA0CW,QAAQ,GAAG,CAAEX,KAAK,CAAC,CAC3E,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAA0B,YAAY,CAAG,KAAO,CAAAd,MAAyC,EAAK,CAC/E,KAAM,CAAEb,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAA3B,QAAQ,CACnCO,IAAI,CAACL,aAAa,CAAC,CACnBoD,MAAM,CAAC,CAACf,MAAM,CAAC,CAAC,CAChB/B,MAAM,CAAC,CAAC,CAEX,GAAImB,KAAK,CAAE,CACTC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,KAAM,CAAAA,KAAK,CACb,CAEA,MAAO,CAAAD,IAAI,CAAC,CAAC,CAAC,CAChB,CAAC,CAED;AACA,MAAO,MAAM,CAAA6B,YAAY,CAAG,KAAAA,CAAOvB,EAAU,CAAEwB,OAAwB,GAAK,CAC1E,KAAM,CAAE9B,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAA3B,QAAQ,CACnCO,IAAI,CAACL,aAAa,CAAC,CACnBuD,MAAM,CAACD,OAAO,CAAC,CACf7C,EAAE,CAAC,IAAI,CAAEqB,EAAE,CAAC,CACZxB,MAAM,CAAC,CAAC,CAEX,GAAImB,KAAK,CAAE,CACTC,OAAO,CAACD,KAAK,CAAC,iCAAiCK,EAAE,GAAG,CAAEL,KAAK,CAAC,CAC5D,KAAM,CAAAA,KAAK,CACb,CAEA,MAAO,CAAAD,IAAI,CAAC,CAAC,CAAC,CAChB,CAAC,CAED;AACA,MAAO,MAAM,CAAAgC,YAAY,CAAG,KAAO,CAAA1B,EAAU,EAAK,CAChD,KAAM,CAAEL,KAAM,CAAC,CAAG,KAAM,CAAA3B,QAAQ,CAC7BO,IAAI,CAACL,aAAa,CAAC,CACnByD,MAAM,CAAC,CAAC,CACRhD,EAAE,CAAC,IAAI,CAAEqB,EAAE,CAAC,CAEf,GAAIL,KAAK,CAAE,CACTC,OAAO,CAACD,KAAK,CAAC,iCAAiCK,EAAE,GAAG,CAAEL,KAAK,CAAC,CAC5D,KAAM,CAAAA,KAAK,CACb,CAEA,MAAO,KAAI,CACb,CAAC,CAED;AACA,MAAO,MAAM,CAAAiC,iBAAiB,CAAG,KAAAA,CAAOC,KAAa,CAAEC,GAAY,GAAK,CACtE,GAAI,CAAAxD,KAAK,CAAGN,QAAQ,CACjBO,IAAI,CAACL,aAAa,CAAC,CACnBM,MAAM,CAAC,gBAAgB,CAAC,CACxBG,EAAE,CAAC,OAAO,CAAEkD,KAAK,CAAC,CAErB,GAAIC,GAAG,CAAE,CACPxD,KAAK,CAAGA,KAAK,CAACY,EAAE,CAAC,UAAU4C,GAAG,EAAE,CAAC,CACnC,CAEA,KAAM,CAAEpC,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAArB,KAAK,CAEnC,GAAIqB,KAAK,CAAE,CACTC,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD,KAAM,CAAAA,KAAK,CACb,CAEA,MAAO,CAAAD,IAAI,CAACqC,MAAM,CAAG,CAAC,CAAGrC,IAAI,CAAC,CAAC,CAAC,CAAG,IAAI,CACzC,CAAC,CAED;AACA,MAAO,MAAM,CAAAsC,cAAc,CAAG,KAAO,CAAA3D,OAAsB,EAAK,CAC9D,GAAI,CAAAC,KAAK,CAAGN,QAAQ,CACjBO,IAAI,CAACL,aAAa,CAAC,CACnBM,MAAM,CAAC,IAAI,CAAE,CAAEC,KAAK,CAAE,OAAO,CAAEwD,IAAI,CAAE,IAAK,CAAC,CAAC,CAE/C;AACA,GAAI5D,OAAO,CAAE,CACX;AACA,GAAIA,OAAO,CAACK,UAAU,CAAE,CACtBJ,KAAK,CAAGA,KAAK,CAACK,EAAE,CAAC,YAAY,CAAEN,OAAO,CAACK,UAAU,CAAC,CACpD,CAEA;AACA,GAAIL,OAAO,CAACO,UAAU,CAAE,CACtBN,KAAK,CAAGA,KAAK,CAACK,EAAE,CAAC,YAAY,CAAEN,OAAO,CAACO,UAAU,CAAC,CACpD,CAEA;AACA,GAAIP,OAAO,CAACQ,QAAQ,CAAE,CACpBP,KAAK,CAAGA,KAAK,CAACQ,GAAG,CAAC,YAAY,CAAET,OAAO,CAACQ,QAAQ,CAAC,CACnD,CAEA,GAAIR,OAAO,CAACU,MAAM,CAAE,CAClBT,KAAK,CAAGA,KAAK,CAACU,GAAG,CAAC,YAAY,CAAEX,OAAO,CAACU,MAAM,CAAC,CACjD,CAEA;AACA,GAAIV,OAAO,CAACY,WAAW,CAAE,CACvBX,KAAK,CAAGA,KAAK,CAACY,EAAE,CACd,eAAeb,OAAO,CAACY,WAAW,kBAAkBZ,OAAO,CAACY,WAAW,kBAAkBZ,OAAO,CAACY,WAAW,gBAAgBZ,OAAO,CAACY,WAAW,iBAAiBZ,OAAO,CAACY,WAAW,GACrL,CAAC,CACH,CACF,CAEA,KAAM,CAAER,KAAK,CAAEkB,KAAM,CAAC,CAAG,KAAM,CAAArB,KAAK,CAEpC,GAAIqB,KAAK,CAAE,CACTC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,KAAM,CAAAA,KAAK,CACb,CAEA,MAAO,CAAAlB,KAAK,EAAI,CAAC,CACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}