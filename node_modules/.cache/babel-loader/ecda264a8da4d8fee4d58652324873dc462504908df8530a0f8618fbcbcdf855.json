{"ast":null,"code":"import{supabase}from'../lib/supabaseClient';import{TABLES}from'../utils/constants/tables';// Renombramos la interfaz para que coincida con el uso en uploadDocument\nconst DOCUMENTS_TABLE=TABLES.DOCUMENTS;const STORAGE_BUCKET='documents';// Ensure storage bucket exists\nexport const ensureStorageBucketExists=async client=>{const supabaseClient=client||supabase;try{// Attempt to list files in the bucket instead of checking if bucket exists\n// This is more reliable as it tests both existence and permissions\nconst{error}=await supabaseClient.storage.from(STORAGE_BUCKET).list();if(error){// If there's an error, it could be because the bucket doesn't exist\n// or because of permissions issues\nconst errorMessage=error.message||'Error desconocido';if(errorMessage.includes('not found')||errorMessage.includes('does not exist')||errorMessage.includes('404')){console.log(`Storage bucket '${STORAGE_BUCKET}' does not exist`);throw new Error(`El bucket de almacenamiento '${STORAGE_BUCKET}' no existe. Contacte al administrador.`);}else{console.error(`Error accessing storage bucket '${STORAGE_BUCKET}':`,error);throw new Error(`Error al acceder al bucket de almacenamiento: ${errorMessage}`);}}console.log(`Storage bucket '${STORAGE_BUCKET}' exists and is accessible`);return true;}catch(error){console.error('Error in ensureStorageBucketExists:',error);throw error;}};// Get all documents for an application\nexport const getApplicationDocuments=async applicationId=>{const{data,error}=await supabase.from(DOCUMENTS_TABLE).select('*').eq('application_id',applicationId).order('created_at',{ascending:false});if(error){console.error(`Error fetching documents for application ${applicationId}:`,error);throw error;}return data;};// Get all documents for a client\nexport const getClientDocuments=async clientId=>{const{data,error}=await supabase.from(DOCUMENTS_TABLE).select('*').eq('client_id',clientId).order('created_at',{ascending:false});if(error){console.error(`Error fetching documents for client ${clientId}:`,error);throw error;}return data;};// Get a single document by ID\nexport const getDocumentById=async id=>{const{data,error}=await supabase.from(DOCUMENTS_TABLE).select('*').eq('id',id).single();if(error){console.error(`Error fetching document with ID ${id}:`,error);throw error;}return data;};// Upload a document\nexport async function uploadDocument(params){const{file,client_id,application_id,userId,documentName,category,description,authClient}=params;// Use authenticated client if provided, otherwise use default client\nconst supabaseClient=authClient||supabase;console.log(`Starting document upload: ${documentName} for client ${client_id}`);try{// Primero creamos el registro para el documento\nconst{data,error}=await supabaseClient.from('document').insert([{name:documentName,category,description:description||null,client_id:client_id||null,application_id:application_id||null,created_by:userId}]).select().single();if(error){console.error('Error creating document record:',error);// Mejorar el mensaje de error para problemas de RLS\nif(error.message.includes('violates row-level security policy')){console.error('RLS policy violation detected on document table insert');throw new Error('No tienes permisos para crear documentos. Contacta al administrador para configurar las políticas RLS.');}throw new Error(`Error al crear el registro del documento: ${error.message}`);}if(!data){throw new Error('No se recibió respuesta al crear el registro del documento');}const documentId=data.id;console.log(`Document record created with ID: ${documentId}`);// Ahora subimos el archivo al bucket de storage\n// Implementamos reintentos con backoff exponencial\nconst MAX_RETRIES=3;let lastError=null;for(let attempt=1;attempt<=MAX_RETRIES;attempt++){try{console.log(`Uploading file for document ${documentId}, attempt ${attempt}/${MAX_RETRIES}`);// Construir la ruta del archivo\nlet filePath;if(client_id){filePath=`client_${client_id}/${documentId}`;}else if(application_id){filePath=`application_${application_id}/${documentId}`;}else{filePath=`uncategorized/${documentId}`;}// Convertir el file blob a un ArrayBuffer para la carga\nconst arrayBuffer=await file.arrayBuffer();const fileBuffer=new Uint8Array(arrayBuffer);// Subir el archivo usando el cliente autenticado\nconst{data:uploadData,error:uploadError}=await supabaseClient.storage.from('documents').upload(filePath,fileBuffer,{contentType:file.type,upsert:true});if(uploadError){console.error(`Error uploading file (attempt ${attempt}/${MAX_RETRIES}):`,uploadError);// Detección específica de problemas de RLS\nif(uploadError.message.includes('violates row-level security policy')||uploadError.message.includes('Unauthorized')||typeof uploadError==='object'&&'status'in uploadError&&uploadError.status===403){// No hacer más reintentos para errores de permisos\nthrow new Error('No tienes permisos para subir archivos al bucket. Contacta al administrador para configurar las políticas RLS del bucket \"documents\".');}// Lanzar error y permitir reintento\nthrow new Error(`Error al subir el archivo: ${uploadError.message}`);}if(!uploadData){throw new Error('No se recibió respuesta al subir el archivo');}// Actualizar el registro con la URL del archivo\nconst fileUrl=`${supabaseClient.storage.from('documents').getPublicUrl(filePath).data.publicUrl}`;const{data:updatedData,error:updateError}=await supabaseClient.from('document').update({file_url:fileUrl,file_path:filePath}).eq('id',documentId).select().single();if(updateError){console.error('Error updating document with file URL:',updateError);// Intentar eliminar el archivo que subimos para evitar archivos huérfanos\ntry{await supabaseClient.storage.from('documents').remove([filePath]);console.log(`Cleaned up orphaned file at ${filePath} after failed URL update`);}catch(cleanupError){console.warn('Failed to clean up orphaned file after URL update error:',cleanupError);}throw new Error(`Error al actualizar el documento con la URL del archivo: ${updateError.message}`);}if(!updatedData){// Intentar eliminar el archivo que subimos\ntry{await supabaseClient.storage.from('documents').remove([filePath]);console.log(`Cleaned up orphaned file at ${filePath} after failed document update`);}catch(cleanupError){console.warn('Failed to clean up orphaned file after document update failure:',cleanupError);}throw new Error('No se recibió respuesta al actualizar el documento con la URL del archivo');}console.log(`Document ${documentId} successfully uploaded and updated with file URL`);// Si llegamos aquí, todo salió bien\nreturn updatedData;}catch(error){lastError=error;// Si es el último intento o es un error de permisos, no reintentamos\nif(attempt===MAX_RETRIES||error instanceof Error&&(error.message.includes('No tienes permisos')||error.message.includes('policy'))){break;}// Esperar antes de reintentar con backoff exponencial\nconst waitTime=1000*Math.pow(2,attempt-1);console.log(`Waiting ${waitTime}ms before retrying document upload...`);await new Promise(resolve=>setTimeout(resolve,waitTime));}}// Si llegamos aquí, todos los intentos fallaron\n// Intentar eliminar el registro de documento ya que no pudimos subir el archivo\ntry{await supabaseClient.from('document').delete().eq('id',documentId);console.log(`Deleted document record ${documentId} after failed file upload`);}catch(deleteError){console.warn(`Warning: Could not delete document record ${documentId} after failed upload:`,deleteError);}// Lanzar el último error que ocurrió\nthrow lastError||new Error('Error desconocido al subir el documento');}catch(error){const documentError={message:error instanceof Error?error.message:'Error desconocido al subir el documento',details:error};console.error('Document upload error:',documentError);throw error;}}// Delete a document\nexport const deleteDocument=async documentId=>{try{// Ensure bucket exists before attempting to delete\nawait ensureStorageBucketExists();// Get document to get file path\nconst{data:document,error:fetchError}=await supabase.from(DOCUMENTS_TABLE).select('file_path').eq('id',documentId).single();if(fetchError){console.error(`Error fetching document ${documentId} for deletion:`,fetchError);throw fetchError;}// Delete file from storage\nconst{error:storageError}=await supabase.storage.from(STORAGE_BUCKET).remove([document.file_path]);if(storageError){console.error(`Error deleting file for document ${documentId}:`,storageError);// Use type-safe error handling\nconst errorMessage=storageError instanceof Error?storageError.message:typeof storageError==='object'&&storageError!==null&&'message'in storageError?String(storageError.message):'Error desconocido';throw new Error(`Error al eliminar el archivo del documento: ${errorMessage}`);}// Delete document record\nconst{error:deleteError}=await supabase.from(DOCUMENTS_TABLE).delete().eq('id',documentId);if(deleteError){console.error(`Error deleting document record ${documentId}:`,deleteError);throw deleteError;}return true;}catch(error){console.error(`Error in deleteDocument for ${documentId}:`,error);throw error;}};// Get document download URL\nexport const getDocumentUrl=async filePath=>{try{// Ensure bucket exists before attempting to get URL\nawait ensureStorageBucketExists();const{data,error}=await supabase.storage.from(STORAGE_BUCKET).createSignedUrl(filePath,60*60);// 1 hour expiry\nif(error){console.error(`Error getting URL for document ${filePath}:`,error);throw error;}return data.signedUrl;}catch(error){console.error(`Error in getDocumentUrl for ${filePath}:`,error);throw error;}};// Verify a document\nexport const verifyDocument=async function(documentId,userId){let isVerified=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;const{data,error}=await supabase.from(DOCUMENTS_TABLE).update({is_verified:isVerified,verified_by:userId,verified_at:new Date().toISOString()}).eq('id',documentId).select();if(error){console.error(`Error verifying document ${documentId}:`,error);throw error;}return data[0];};// Get required documents (based on application type)\nexport const getRequiredDocuments=async applicationType=>{const{data,error}=await supabase.from('required_documents').select('*').eq('application_type',applicationType);if(error){console.error(`Error fetching required documents for ${applicationType}:`,error);throw error;}return data;};","map":{"version":3,"names":["supabase","TABLES","DOCUMENTS_TABLE","DOCUMENTS","STORAGE_BUCKET","ensureStorageBucketExists","client","supabaseClient","error","storage","from","list","errorMessage","message","includes","console","log","Error","getApplicationDocuments","applicationId","data","select","eq","order","ascending","getClientDocuments","clientId","getDocumentById","id","single","uploadDocument","params","file","client_id","application_id","userId","documentName","category","description","authClient","insert","name","created_by","documentId","MAX_RETRIES","lastError","attempt","filePath","arrayBuffer","fileBuffer","Uint8Array","uploadData","uploadError","upload","contentType","type","upsert","status","fileUrl","getPublicUrl","publicUrl","updatedData","updateError","update","file_url","file_path","remove","cleanupError","warn","waitTime","Math","pow","Promise","resolve","setTimeout","delete","deleteError","documentError","details","deleteDocument","document","fetchError","storageError","String","getDocumentUrl","createSignedUrl","signedUrl","verifyDocument","isVerified","arguments","length","undefined","is_verified","verified_by","verified_at","Date","toISOString","getRequiredDocuments","applicationType"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/documentService.ts"],"sourcesContent":["import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from '../utils/constants/tables';\nimport { SupabaseClient } from '@supabase/supabase-js';\n\nexport interface Document {\n  id: string;\n  created_at: string;\n  file_name: string;\n  file_path: string;\n  file_type: string;\n  file_size: number;\n  category?: string;\n  application_id?: string;\n  client_id?: string;\n  uploaded_by_user_id?: string;\n  is_verified?: boolean;\n  verified_by?: string;\n  verified_at?: string;\n}\n\nexport interface DocumentUpload {\n  file: File;\n  application_id?: string;\n  client_id?: string;\n  userId: string;\n  documentName: string;\n  description?: string;\n  category?: string;\n  authClient?: SupabaseClient;\n}\n\n// Renombramos la interfaz para que coincida con el uso en uploadDocument\nexport type UploadDocumentParams = DocumentUpload;\n\nconst DOCUMENTS_TABLE = TABLES.DOCUMENTS;\nconst STORAGE_BUCKET = 'documents';\n\n// Ensure storage bucket exists\nexport const ensureStorageBucketExists = async (client?: SupabaseClient) => {\n  const supabaseClient = client || supabase;\n  \n  try {\n    // Attempt to list files in the bucket instead of checking if bucket exists\n    // This is more reliable as it tests both existence and permissions\n    const { error } = await supabaseClient.storage\n      .from(STORAGE_BUCKET)\n      .list();\n    \n    if (error) {\n      // If there's an error, it could be because the bucket doesn't exist\n      // or because of permissions issues\n      const errorMessage = error.message || 'Error desconocido';\n      if (errorMessage.includes('not found') || \n          errorMessage.includes('does not exist') || \n          errorMessage.includes('404')) {\n        console.log(`Storage bucket '${STORAGE_BUCKET}' does not exist`);\n        throw new Error(`El bucket de almacenamiento '${STORAGE_BUCKET}' no existe. Contacte al administrador.`);\n      } else {\n        console.error(`Error accessing storage bucket '${STORAGE_BUCKET}':`, error);\n        throw new Error(`Error al acceder al bucket de almacenamiento: ${errorMessage}`);\n      }\n    }\n    \n    console.log(`Storage bucket '${STORAGE_BUCKET}' exists and is accessible`);\n    return true;\n  } catch (error) {\n    console.error('Error in ensureStorageBucketExists:', error);\n    throw error;\n  }\n};\n\n// Get all documents for an application\nexport const getApplicationDocuments = async (applicationId: string) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select('*')\n    .eq('application_id', applicationId)\n    .order('created_at', { ascending: false });\n\n  if (error) {\n    console.error(`Error fetching documents for application ${applicationId}:`, error);\n    throw error;\n  }\n\n  return data;\n};\n\n// Get all documents for a client\nexport const getClientDocuments = async (clientId: string) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select('*')\n    .eq('client_id', clientId)\n    .order('created_at', { ascending: false });\n\n  if (error) {\n    console.error(`Error fetching documents for client ${clientId}:`, error);\n    throw error;\n  }\n\n  return data;\n};\n\n// Get a single document by ID\nexport const getDocumentById = async (id: string) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .select('*')\n    .eq('id', id)\n    .single();\n\n  if (error) {\n    console.error(`Error fetching document with ID ${id}:`, error);\n    throw error;\n  }\n\n  return data as Document;\n};\n\n// Upload a document\nexport async function uploadDocument(params: UploadDocumentParams): Promise<Document> {\n  const { file, client_id, application_id, userId, documentName, category, description, authClient } = params;\n  \n  // Use authenticated client if provided, otherwise use default client\n  const supabaseClient = authClient || supabase;\n  \n  console.log(`Starting document upload: ${documentName} for client ${client_id}`);\n  \n  try {\n    // Primero creamos el registro para el documento\n    const { data, error } = await supabaseClient\n      .from('document')\n      .insert([\n        {\n          name: documentName,\n          category,\n          description: description || null,\n          client_id: client_id || null,\n          application_id: application_id || null,\n          created_by: userId,\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating document record:', error);\n      \n      // Mejorar el mensaje de error para problemas de RLS\n      if (error.message.includes('violates row-level security policy')) {\n        console.error('RLS policy violation detected on document table insert');\n        throw new Error('No tienes permisos para crear documentos. Contacta al administrador para configurar las políticas RLS.');\n      }\n      \n      throw new Error(`Error al crear el registro del documento: ${error.message}`);\n    }\n\n    if (!data) {\n      throw new Error('No se recibió respuesta al crear el registro del documento');\n    }\n\n    const documentId = data.id;\n    console.log(`Document record created with ID: ${documentId}`);\n\n    // Ahora subimos el archivo al bucket de storage\n    // Implementamos reintentos con backoff exponencial\n    const MAX_RETRIES = 3;\n    let lastError = null;\n    \n    for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {\n      try {\n        console.log(`Uploading file for document ${documentId}, attempt ${attempt}/${MAX_RETRIES}`);\n        \n        // Construir la ruta del archivo\n        let filePath: string;\n        if (client_id) {\n          filePath = `client_${client_id}/${documentId}`;\n        } else if (application_id) {\n          filePath = `application_${application_id}/${documentId}`;\n        } else {\n          filePath = `uncategorized/${documentId}`;\n        }\n\n        // Convertir el file blob a un ArrayBuffer para la carga\n        const arrayBuffer = await file.arrayBuffer();\n        const fileBuffer = new Uint8Array(arrayBuffer);\n\n        // Subir el archivo usando el cliente autenticado\n        const { data: uploadData, error: uploadError } = await supabaseClient.storage\n          .from('documents')\n          .upload(filePath, fileBuffer, {\n            contentType: file.type,\n            upsert: true,\n          });\n\n        if (uploadError) {\n          console.error(`Error uploading file (attempt ${attempt}/${MAX_RETRIES}):`, uploadError);\n          \n          // Detección específica de problemas de RLS\n          if (uploadError.message.includes('violates row-level security policy') || \n              uploadError.message.includes('Unauthorized') ||\n              (typeof uploadError === 'object' && 'status' in uploadError && uploadError.status === 403)) {\n            // No hacer más reintentos para errores de permisos\n            throw new Error('No tienes permisos para subir archivos al bucket. Contacta al administrador para configurar las políticas RLS del bucket \"documents\".');\n          }\n          \n          // Lanzar error y permitir reintento\n          throw new Error(`Error al subir el archivo: ${uploadError.message}`);\n        }\n\n        if (!uploadData) {\n          throw new Error('No se recibió respuesta al subir el archivo');\n        }\n\n        // Actualizar el registro con la URL del archivo\n        const fileUrl = `${supabaseClient.storage.from('documents').getPublicUrl(filePath).data.publicUrl}`;\n        \n        const { data: updatedData, error: updateError } = await supabaseClient\n          .from('document')\n          .update({ file_url: fileUrl, file_path: filePath })\n          .eq('id', documentId)\n          .select()\n          .single();\n\n        if (updateError) {\n          console.error('Error updating document with file URL:', updateError);\n          \n          // Intentar eliminar el archivo que subimos para evitar archivos huérfanos\n          try {\n            await supabaseClient.storage\n              .from('documents')\n              .remove([filePath]);\n            console.log(`Cleaned up orphaned file at ${filePath} after failed URL update`);\n          } catch (cleanupError) {\n            console.warn('Failed to clean up orphaned file after URL update error:', cleanupError);\n          }\n          \n          throw new Error(`Error al actualizar el documento con la URL del archivo: ${updateError.message}`);\n        }\n\n        if (!updatedData) {\n          // Intentar eliminar el archivo que subimos\n          try {\n            await supabaseClient.storage\n              .from('documents')\n              .remove([filePath]);\n            console.log(`Cleaned up orphaned file at ${filePath} after failed document update`);\n          } catch (cleanupError) {\n            console.warn('Failed to clean up orphaned file after document update failure:', cleanupError);\n          }\n          \n          throw new Error('No se recibió respuesta al actualizar el documento con la URL del archivo');\n        }\n\n        console.log(`Document ${documentId} successfully uploaded and updated with file URL`);\n        \n        // Si llegamos aquí, todo salió bien\n        return updatedData;\n      } catch (error) {\n        lastError = error;\n        \n        // Si es el último intento o es un error de permisos, no reintentamos\n        if (attempt === MAX_RETRIES || \n            (error instanceof Error && \n             (error.message.includes('No tienes permisos') || \n              error.message.includes('policy')))) {\n          break;\n        }\n        \n        // Esperar antes de reintentar con backoff exponencial\n        const waitTime = 1000 * Math.pow(2, attempt - 1);\n        console.log(`Waiting ${waitTime}ms before retrying document upload...`);\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n      }\n    }\n\n    // Si llegamos aquí, todos los intentos fallaron\n    // Intentar eliminar el registro de documento ya que no pudimos subir el archivo\n    try {\n      await supabaseClient\n        .from('document')\n        .delete()\n        .eq('id', documentId);\n      console.log(`Deleted document record ${documentId} after failed file upload`);\n    } catch (deleteError) {\n      console.warn(`Warning: Could not delete document record ${documentId} after failed upload:`, deleteError);\n    }\n\n    // Lanzar el último error que ocurrió\n    throw lastError || new Error('Error desconocido al subir el documento');\n  } catch (error) {\n    const documentError = {\n      message: error instanceof Error ? error.message : 'Error desconocido al subir el documento',\n      details: error\n    };\n    console.error('Document upload error:', documentError);\n    throw error;\n  }\n}\n\n// Delete a document\nexport const deleteDocument = async (documentId: string) => {\n  try {\n    // Ensure bucket exists before attempting to delete\n    await ensureStorageBucketExists();\n    \n    // Get document to get file path\n    const { data: document, error: fetchError } = await supabase\n      .from(DOCUMENTS_TABLE)\n      .select('file_path')\n      .eq('id', documentId)\n      .single();\n\n    if (fetchError) {\n      console.error(`Error fetching document ${documentId} for deletion:`, fetchError);\n      throw fetchError;\n    }\n\n    // Delete file from storage\n    const { error: storageError } = await supabase.storage\n      .from(STORAGE_BUCKET)\n      .remove([document.file_path]);\n\n    if (storageError) {\n      console.error(`Error deleting file for document ${documentId}:`, storageError);\n      // Use type-safe error handling\n      const errorMessage = storageError instanceof Error \n        ? storageError.message \n        : (typeof storageError === 'object' && storageError !== null && 'message' in storageError)\n          ? String((storageError as {message: string}).message)\n          : 'Error desconocido';\n      \n      throw new Error(`Error al eliminar el archivo del documento: ${errorMessage}`);\n    }\n\n    // Delete document record\n    const { error: deleteError } = await supabase\n      .from(DOCUMENTS_TABLE)\n      .delete()\n      .eq('id', documentId);\n\n    if (deleteError) {\n      console.error(`Error deleting document record ${documentId}:`, deleteError);\n      throw deleteError;\n    }\n\n    return true;\n  } catch (error) {\n    console.error(`Error in deleteDocument for ${documentId}:`, error);\n    throw error;\n  }\n};\n\n// Get document download URL\nexport const getDocumentUrl = async (filePath: string) => {\n  try {\n    // Ensure bucket exists before attempting to get URL\n    await ensureStorageBucketExists();\n    \n    const { data, error } = await supabase.storage\n      .from(STORAGE_BUCKET)\n      .createSignedUrl(filePath, 60 * 60); // 1 hour expiry\n\n    if (error) {\n      console.error(`Error getting URL for document ${filePath}:`, error);\n      throw error;\n    }\n\n    return data.signedUrl;\n  } catch (error) {\n    console.error(`Error in getDocumentUrl for ${filePath}:`, error);\n    throw error;\n  }\n};\n\n// Verify a document\nexport const verifyDocument = async (documentId: string, userId: string, isVerified: boolean = true) => {\n  const { data, error } = await supabase\n    .from(DOCUMENTS_TABLE)\n    .update({\n      is_verified: isVerified,\n      verified_by: userId,\n      verified_at: new Date().toISOString()\n    })\n    .eq('id', documentId)\n    .select();\n\n  if (error) {\n    console.error(`Error verifying document ${documentId}:`, error);\n    throw error;\n  }\n\n  return data[0] as Document;\n};\n\n// Get required documents (based on application type)\nexport const getRequiredDocuments = async (applicationType: string) => {\n  const { data, error } = await supabase\n    .from('required_documents')\n    .select('*')\n    .eq('application_type', applicationType);\n\n  if (error) {\n    console.error(`Error fetching required documents for ${applicationType}:`, error);\n    throw error;\n  }\n\n  return data;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}