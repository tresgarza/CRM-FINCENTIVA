{"ast":null,"code":"/**\n * Ejecuta una consulta SQL directa\n * @param query Consulta SQL a ejecutar\n * @returns Resultado de la consulta\n */\nexport const executeQuery = async query => {\n  try {\n    console.log(`Executing query: ${query.substring(0, 100)}${query.length > 100 ? '...' : ''}`);\n    const url = 'http://localhost:3100/query';\n    const startTime = Date.now();\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      })\n    });\n    const endTime = Date.now();\n    console.log(`Query execution time: ${endTime - startTime}ms`);\n    if (!response.ok) {\n      const errorText = await response.text();\n      // Try to parse error as JSON if possible\n      let errorDetail;\n      try {\n        errorDetail = JSON.parse(errorText);\n      } catch {\n        errorDetail = errorText;\n      }\n      console.error(`HTTP Error ${response.status}: ${response.statusText}`);\n      console.error(`Error details: ${JSON.stringify(errorDetail)}`);\n\n      // Check for relation/table not existing in error message\n      const errorDetailStr = JSON.stringify(errorDetail);\n      if (errorDetailStr.includes('relation') && errorDetailStr.includes('does not exist')) {\n        console.warn('Tabla no encontrada en la base de datos:', errorDetailStr);\n        return []; // Retornar array vacío en lugar de lanzar error\n      }\n\n      // Check for MCP server connection issues\n      if (response.status === 404 || response.status === 502 || response.status === 503) {\n        console.error('MCP server connection error - ensure server is running on port 3100');\n        throw new Error('Error de conexión con el servidor MCP. Asegúrese de que esté ejecutándose en el puerto 3100.');\n      }\n      throw new Error(`Error al ejecutar la consulta: ${response.statusText}. Detalles: ${errorDetailStr}`);\n    }\n    const result = await response.json();\n    console.log(`Query returned ${result.data ? result.data.length : 0} rows.`);\n    if (result.error) {\n      console.error('Query returned error:', result.error);\n      throw new Error(`Error en la consulta: ${result.error}`);\n    }\n    return result.data || [];\n  } catch (error) {\n    // Check if error is about missing relation/table\n    const errorMessage = error instanceof Error ? error.message : String(error);\n\n    // Network errors (like ECONNREFUSED)\n    if (errorMessage.includes('fetch failed') || errorMessage.includes('ECONNREFUSED')) {\n      console.error('Error de conexión con el servidor MCP. Asegúrese de que esté ejecutándose.');\n      return []; // Return empty array instead of throwing error\n    }\n    if (errorMessage.includes('relation') && errorMessage.includes('does not exist')) {\n      console.warn('Error ejecutando consulta - tabla no existe:', errorMessage);\n      return []; // Retornar array vacío en lugar de lanzar error\n    }\n    console.error('Error ejecutando consulta:', error);\n    throw error;\n  }\n};\n\n/**\n * Escapa caracteres especiales en string para prevenir inyección SQL\n * @param value String a escapar\n * @returns String escapado\n */\nexport const escapeSqlString = value => {\n  if (!value) return '';\n\n  // Reemplazar comillas simples por dos comillas simples (estándar SQL)\n  return value.replace(/'/g, \"''\");\n};\n\n/**\n * Formatea una fecha para SQL\n * @param date Fecha a formatear\n * @returns String formateado para SQL\n */\nexport const formatDateForSql = date => {\n  return date.toISOString();\n};\n\n/**\n * Convierte un objeto a una cadena de condiciones SQL WHERE\n * @param conditions Objeto con condiciones {columna: valor}\n * @returns String con condiciones SQL\n */\nexport const objectToSqlWhere = conditions => {\n  const clauses = [];\n  for (const [key, value] of Object.entries(conditions)) {\n    if (value === undefined || value === null) continue;\n    if (typeof value === 'string') {\n      clauses.push(`${key} = '${escapeSqlString(value)}'`);\n    } else if (typeof value === 'number' || typeof value === 'boolean') {\n      clauses.push(`${key} = ${value}`);\n    } else if (value instanceof Date) {\n      clauses.push(`${key} = '${formatDateForSql(value)}'`);\n    } else if (Array.isArray(value)) {\n      const formattedValues = value.map(v => typeof v === 'string' ? `'${escapeSqlString(v)}'` : v);\n      clauses.push(`${key} IN (${formattedValues.join(',')})`);\n    }\n  }\n  return clauses.length > 0 ? clauses.join(' AND ') : '1=1';\n};","map":{"version":3,"names":["executeQuery","query","console","log","substring","length","url","startTime","Date","now","response","fetch","method","headers","body","JSON","stringify","endTime","ok","errorText","text","errorDetail","parse","error","status","statusText","errorDetailStr","includes","warn","Error","result","json","data","errorMessage","message","String","escapeSqlString","value","replace","formatDateForSql","date","toISOString","objectToSqlWhere","conditions","clauses","key","Object","entries","undefined","push","Array","isArray","formattedValues","map","v","join"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/utils/databaseUtils.ts"],"sourcesContent":["/**\n * Ejecuta una consulta SQL directa\n * @param query Consulta SQL a ejecutar\n * @returns Resultado de la consulta\n */\nexport const executeQuery = async (query: string): Promise<any[]> => {\n  try {\n    console.log(`Executing query: ${query.substring(0, 100)}${query.length > 100 ? '...' : ''}`);\n    \n    const url = 'http://localhost:3100/query';\n    const startTime = Date.now();\n    \n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ query }),\n    });\n    \n    const endTime = Date.now();\n    console.log(`Query execution time: ${endTime - startTime}ms`);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      // Try to parse error as JSON if possible\n      let errorDetail;\n      try {\n        errorDetail = JSON.parse(errorText);\n      } catch {\n        errorDetail = errorText;\n      }\n      \n      console.error(`HTTP Error ${response.status}: ${response.statusText}`);\n      console.error(`Error details: ${JSON.stringify(errorDetail)}`);\n      \n      // Check for relation/table not existing in error message\n      const errorDetailStr = JSON.stringify(errorDetail);\n      if (errorDetailStr.includes('relation') && errorDetailStr.includes('does not exist')) {\n        console.warn('Tabla no encontrada en la base de datos:', errorDetailStr);\n        return []; // Retornar array vacío en lugar de lanzar error\n      }\n      \n      // Check for MCP server connection issues\n      if (response.status === 404 || response.status === 502 || response.status === 503) {\n        console.error('MCP server connection error - ensure server is running on port 3100');\n        throw new Error('Error de conexión con el servidor MCP. Asegúrese de que esté ejecutándose en el puerto 3100.');\n      }\n      \n      throw new Error(`Error al ejecutar la consulta: ${response.statusText}. Detalles: ${errorDetailStr}`);\n    }\n\n    const result = await response.json();\n    console.log(`Query returned ${result.data ? result.data.length : 0} rows.`);\n    \n    if (result.error) {\n      console.error('Query returned error:', result.error);\n      throw new Error(`Error en la consulta: ${result.error}`);\n    }\n    \n    return result.data || [];\n  } catch (error) {\n    // Check if error is about missing relation/table\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    \n    // Network errors (like ECONNREFUSED)\n    if (errorMessage.includes('fetch failed') || errorMessage.includes('ECONNREFUSED')) {\n      console.error('Error de conexión con el servidor MCP. Asegúrese de que esté ejecutándose.');\n      return []; // Return empty array instead of throwing error\n    }\n    \n    if (errorMessage.includes('relation') && errorMessage.includes('does not exist')) {\n      console.warn('Error ejecutando consulta - tabla no existe:', errorMessage);\n      return []; // Retornar array vacío en lugar de lanzar error\n    }\n    \n    console.error('Error ejecutando consulta:', error);\n    throw error;\n  }\n};\n\n/**\n * Escapa caracteres especiales en string para prevenir inyección SQL\n * @param value String a escapar\n * @returns String escapado\n */\nexport const escapeSqlString = (value: string): string => {\n  if (!value) return '';\n  \n  // Reemplazar comillas simples por dos comillas simples (estándar SQL)\n  return value.replace(/'/g, \"''\");\n};\n\n/**\n * Formatea una fecha para SQL\n * @param date Fecha a formatear\n * @returns String formateado para SQL\n */\nexport const formatDateForSql = (date: Date): string => {\n  return date.toISOString();\n};\n\n/**\n * Convierte un objeto a una cadena de condiciones SQL WHERE\n * @param conditions Objeto con condiciones {columna: valor}\n * @returns String con condiciones SQL\n */\nexport const objectToSqlWhere = (conditions: Record<string, any>): string => {\n  const clauses = [];\n  \n  for (const [key, value] of Object.entries(conditions)) {\n    if (value === undefined || value === null) continue;\n    \n    if (typeof value === 'string') {\n      clauses.push(`${key} = '${escapeSqlString(value)}'`);\n    } else if (typeof value === 'number' || typeof value === 'boolean') {\n      clauses.push(`${key} = ${value}`);\n    } else if (value instanceof Date) {\n      clauses.push(`${key} = '${formatDateForSql(value)}'`);\n    } else if (Array.isArray(value)) {\n      const formattedValues = value.map(v => \n        typeof v === 'string' ? `'${escapeSqlString(v)}'` : v\n      );\n      clauses.push(`${key} IN (${formattedValues.join(',')})`);\n    }\n  }\n  \n  return clauses.length > 0 ? clauses.join(' AND ') : '1=1';\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}